
STM32F429I-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00016b50  08008984  08008984  00018984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f4d4  0801f4d4  0002f4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f4dc  0801f4dc  0002f4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801f4e0  0801f4e0  0002f4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000284  20000000  0801f4e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00030284  2**0
                  CONTENTS
  8 .bss          00004510  20000284  20000284  00030284  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004794  20004794  00030284  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003b16b  00000000  00000000  000302b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006f35  00000000  00000000  0006b41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    000192b4  00000000  00000000  00072354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  0008b608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002110  00000000  00000000  0008cd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4a9  00000000  00000000  0008ee40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000301d0  00000000  00000000  000ba2e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e59b5  00000000  00000000  000ea4b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cfe6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea0  00000000  00000000  001cfec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000284 	.word	0x20000284
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800896c 	.word	0x0800896c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000288 	.word	0x20000288
 80001ec:	0800896c 	.word	0x0800896c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 8000588:	20f0      	movs	r0, #240	; 0xf0
 800058a:	4770      	bx	lr

0800058c <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 800058c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000590:	4770      	bx	lr

08000592 <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 8000592:	2029      	movs	r0, #41	; 0x29
 8000594:	f000 bf5e 	b.w	8001454 <LCD_IO_WriteReg>

08000598 <ili9341_DisplayOff>:
 8000598:	2028      	movs	r0, #40	; 0x28
 800059a:	f000 bf5b 	b.w	8001454 <LCD_IO_WriteReg>

0800059e <ili9341_Init>:
{
 800059e:	b508      	push	{r3, lr}
  LCD_IO_Init();
 80005a0:	f000 fede 	bl	8001360 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 80005a4:	20ca      	movs	r0, #202	; 0xca
 80005a6:	f000 ff55 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005aa:	20c3      	movs	r0, #195	; 0xc3
 80005ac:	f000 ff36 	bl	800141c <LCD_IO_WriteData>
 80005b0:	2008      	movs	r0, #8
 80005b2:	f000 ff33 	bl	800141c <LCD_IO_WriteData>
 80005b6:	2050      	movs	r0, #80	; 0x50
 80005b8:	f000 ff30 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005bc:	20cf      	movs	r0, #207	; 0xcf
 80005be:	f000 ff49 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 ff2a 	bl	800141c <LCD_IO_WriteData>
 80005c8:	20c1      	movs	r0, #193	; 0xc1
 80005ca:	f000 ff27 	bl	800141c <LCD_IO_WriteData>
 80005ce:	2030      	movs	r0, #48	; 0x30
 80005d0:	f000 ff24 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005d4:	20ed      	movs	r0, #237	; 0xed
 80005d6:	f000 ff3d 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005da:	2064      	movs	r0, #100	; 0x64
 80005dc:	f000 ff1e 	bl	800141c <LCD_IO_WriteData>
 80005e0:	2003      	movs	r0, #3
 80005e2:	f000 ff1b 	bl	800141c <LCD_IO_WriteData>
 80005e6:	2012      	movs	r0, #18
 80005e8:	f000 ff18 	bl	800141c <LCD_IO_WriteData>
 80005ec:	2081      	movs	r0, #129	; 0x81
 80005ee:	f000 ff15 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005f2:	20e8      	movs	r0, #232	; 0xe8
 80005f4:	f000 ff2e 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005f8:	2085      	movs	r0, #133	; 0x85
 80005fa:	f000 ff0f 	bl	800141c <LCD_IO_WriteData>
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 ff0c 	bl	800141c <LCD_IO_WriteData>
 8000604:	2078      	movs	r0, #120	; 0x78
 8000606:	f000 ff09 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800060a:	20cb      	movs	r0, #203	; 0xcb
 800060c:	f000 ff22 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000610:	2039      	movs	r0, #57	; 0x39
 8000612:	f000 ff03 	bl	800141c <LCD_IO_WriteData>
 8000616:	202c      	movs	r0, #44	; 0x2c
 8000618:	f000 ff00 	bl	800141c <LCD_IO_WriteData>
 800061c:	2000      	movs	r0, #0
 800061e:	f000 fefd 	bl	800141c <LCD_IO_WriteData>
 8000622:	2034      	movs	r0, #52	; 0x34
 8000624:	f000 fefa 	bl	800141c <LCD_IO_WriteData>
 8000628:	2002      	movs	r0, #2
 800062a:	f000 fef7 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800062e:	20f7      	movs	r0, #247	; 0xf7
 8000630:	f000 ff10 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000634:	2020      	movs	r0, #32
 8000636:	f000 fef1 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800063a:	20ea      	movs	r0, #234	; 0xea
 800063c:	f000 ff0a 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000640:	2000      	movs	r0, #0
 8000642:	f000 feeb 	bl	800141c <LCD_IO_WriteData>
 8000646:	2000      	movs	r0, #0
 8000648:	f000 fee8 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800064c:	20b1      	movs	r0, #177	; 0xb1
 800064e:	f000 ff01 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000652:	2000      	movs	r0, #0
 8000654:	f000 fee2 	bl	800141c <LCD_IO_WriteData>
 8000658:	201b      	movs	r0, #27
 800065a:	f000 fedf 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800065e:	20b6      	movs	r0, #182	; 0xb6
 8000660:	f000 fef8 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000664:	200a      	movs	r0, #10
 8000666:	f000 fed9 	bl	800141c <LCD_IO_WriteData>
 800066a:	20a2      	movs	r0, #162	; 0xa2
 800066c:	f000 fed6 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000670:	20c0      	movs	r0, #192	; 0xc0
 8000672:	f000 feef 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000676:	2010      	movs	r0, #16
 8000678:	f000 fed0 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800067c:	20c1      	movs	r0, #193	; 0xc1
 800067e:	f000 fee9 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000682:	2010      	movs	r0, #16
 8000684:	f000 feca 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000688:	20c5      	movs	r0, #197	; 0xc5
 800068a:	f000 fee3 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800068e:	2045      	movs	r0, #69	; 0x45
 8000690:	f000 fec4 	bl	800141c <LCD_IO_WriteData>
 8000694:	2015      	movs	r0, #21
 8000696:	f000 fec1 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800069a:	20c7      	movs	r0, #199	; 0xc7
 800069c:	f000 feda 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006a0:	2090      	movs	r0, #144	; 0x90
 80006a2:	f000 febb 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006a6:	2036      	movs	r0, #54	; 0x36
 80006a8:	f000 fed4 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006ac:	20c8      	movs	r0, #200	; 0xc8
 80006ae:	f000 feb5 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006b2:	20f2      	movs	r0, #242	; 0xf2
 80006b4:	f000 fece 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 feaf 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006be:	20b0      	movs	r0, #176	; 0xb0
 80006c0:	f000 fec8 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006c4:	20c2      	movs	r0, #194	; 0xc2
 80006c6:	f000 fea9 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006ca:	20b6      	movs	r0, #182	; 0xb6
 80006cc:	f000 fec2 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006d0:	200a      	movs	r0, #10
 80006d2:	f000 fea3 	bl	800141c <LCD_IO_WriteData>
 80006d6:	20a7      	movs	r0, #167	; 0xa7
 80006d8:	f000 fea0 	bl	800141c <LCD_IO_WriteData>
 80006dc:	2027      	movs	r0, #39	; 0x27
 80006de:	f000 fe9d 	bl	800141c <LCD_IO_WriteData>
 80006e2:	2004      	movs	r0, #4
 80006e4:	f000 fe9a 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006e8:	202a      	movs	r0, #42	; 0x2a
 80006ea:	f000 feb3 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 fe94 	bl	800141c <LCD_IO_WriteData>
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 fe91 	bl	800141c <LCD_IO_WriteData>
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 fe8e 	bl	800141c <LCD_IO_WriteData>
 8000700:	20ef      	movs	r0, #239	; 0xef
 8000702:	f000 fe8b 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000706:	202b      	movs	r0, #43	; 0x2b
 8000708:	f000 fea4 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800070c:	2000      	movs	r0, #0
 800070e:	f000 fe85 	bl	800141c <LCD_IO_WriteData>
 8000712:	2000      	movs	r0, #0
 8000714:	f000 fe82 	bl	800141c <LCD_IO_WriteData>
 8000718:	2001      	movs	r0, #1
 800071a:	f000 fe7f 	bl	800141c <LCD_IO_WriteData>
 800071e:	203f      	movs	r0, #63	; 0x3f
 8000720:	f000 fe7c 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000724:	20f6      	movs	r0, #246	; 0xf6
 8000726:	f000 fe95 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800072a:	2001      	movs	r0, #1
 800072c:	f000 fe76 	bl	800141c <LCD_IO_WriteData>
 8000730:	2000      	movs	r0, #0
 8000732:	f000 fe73 	bl	800141c <LCD_IO_WriteData>
 8000736:	2006      	movs	r0, #6
 8000738:	f000 fe70 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800073c:	202c      	movs	r0, #44	; 0x2c
 800073e:	f000 fe89 	bl	8001454 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8000742:	20c8      	movs	r0, #200	; 0xc8
 8000744:	f000 fed8 	bl	80014f8 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8000748:	2026      	movs	r0, #38	; 0x26
 800074a:	f000 fe83 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800074e:	2001      	movs	r0, #1
 8000750:	f000 fe64 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000754:	20e0      	movs	r0, #224	; 0xe0
 8000756:	f000 fe7d 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800075a:	200f      	movs	r0, #15
 800075c:	f000 fe5e 	bl	800141c <LCD_IO_WriteData>
 8000760:	2029      	movs	r0, #41	; 0x29
 8000762:	f000 fe5b 	bl	800141c <LCD_IO_WriteData>
 8000766:	2024      	movs	r0, #36	; 0x24
 8000768:	f000 fe58 	bl	800141c <LCD_IO_WriteData>
 800076c:	200c      	movs	r0, #12
 800076e:	f000 fe55 	bl	800141c <LCD_IO_WriteData>
 8000772:	200e      	movs	r0, #14
 8000774:	f000 fe52 	bl	800141c <LCD_IO_WriteData>
 8000778:	2009      	movs	r0, #9
 800077a:	f000 fe4f 	bl	800141c <LCD_IO_WriteData>
 800077e:	204e      	movs	r0, #78	; 0x4e
 8000780:	f000 fe4c 	bl	800141c <LCD_IO_WriteData>
 8000784:	2078      	movs	r0, #120	; 0x78
 8000786:	f000 fe49 	bl	800141c <LCD_IO_WriteData>
 800078a:	203c      	movs	r0, #60	; 0x3c
 800078c:	f000 fe46 	bl	800141c <LCD_IO_WriteData>
 8000790:	2009      	movs	r0, #9
 8000792:	f000 fe43 	bl	800141c <LCD_IO_WriteData>
 8000796:	2013      	movs	r0, #19
 8000798:	f000 fe40 	bl	800141c <LCD_IO_WriteData>
 800079c:	2005      	movs	r0, #5
 800079e:	f000 fe3d 	bl	800141c <LCD_IO_WriteData>
 80007a2:	2017      	movs	r0, #23
 80007a4:	f000 fe3a 	bl	800141c <LCD_IO_WriteData>
 80007a8:	2011      	movs	r0, #17
 80007aa:	f000 fe37 	bl	800141c <LCD_IO_WriteData>
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 fe34 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80007b4:	20e1      	movs	r0, #225	; 0xe1
 80007b6:	f000 fe4d 	bl	8001454 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f000 fe2e 	bl	800141c <LCD_IO_WriteData>
 80007c0:	2016      	movs	r0, #22
 80007c2:	f000 fe2b 	bl	800141c <LCD_IO_WriteData>
 80007c6:	201b      	movs	r0, #27
 80007c8:	f000 fe28 	bl	800141c <LCD_IO_WriteData>
 80007cc:	2004      	movs	r0, #4
 80007ce:	f000 fe25 	bl	800141c <LCD_IO_WriteData>
 80007d2:	2011      	movs	r0, #17
 80007d4:	f000 fe22 	bl	800141c <LCD_IO_WriteData>
 80007d8:	2007      	movs	r0, #7
 80007da:	f000 fe1f 	bl	800141c <LCD_IO_WriteData>
 80007de:	2031      	movs	r0, #49	; 0x31
 80007e0:	f000 fe1c 	bl	800141c <LCD_IO_WriteData>
 80007e4:	2033      	movs	r0, #51	; 0x33
 80007e6:	f000 fe19 	bl	800141c <LCD_IO_WriteData>
 80007ea:	2042      	movs	r0, #66	; 0x42
 80007ec:	f000 fe16 	bl	800141c <LCD_IO_WriteData>
 80007f0:	2005      	movs	r0, #5
 80007f2:	f000 fe13 	bl	800141c <LCD_IO_WriteData>
 80007f6:	200c      	movs	r0, #12
 80007f8:	f000 fe10 	bl	800141c <LCD_IO_WriteData>
 80007fc:	200a      	movs	r0, #10
 80007fe:	f000 fe0d 	bl	800141c <LCD_IO_WriteData>
 8000802:	2028      	movs	r0, #40	; 0x28
 8000804:	f000 fe0a 	bl	800141c <LCD_IO_WriteData>
 8000808:	202f      	movs	r0, #47	; 0x2f
 800080a:	f000 fe07 	bl	800141c <LCD_IO_WriteData>
 800080e:	200f      	movs	r0, #15
 8000810:	f000 fe04 	bl	800141c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000814:	2011      	movs	r0, #17
 8000816:	f000 fe1d 	bl	8001454 <LCD_IO_WriteReg>
  LCD_Delay(200);
 800081a:	20c8      	movs	r0, #200	; 0xc8
 800081c:	f000 fe6c 	bl	80014f8 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8000820:	2029      	movs	r0, #41	; 0x29
 8000822:	f000 fe17 	bl	8001454 <LCD_IO_WriteReg>
}
 8000826:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 800082a:	202c      	movs	r0, #44	; 0x2c
 800082c:	f000 be12 	b.w	8001454 <LCD_IO_WriteReg>

08000830 <ili9341_ReadID>:
{
 8000830:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8000832:	f000 fd95 	bl	8001360 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000836:	2103      	movs	r1, #3
 8000838:	20d3      	movs	r0, #211	; 0xd3
 800083a:	f000 fe27 	bl	800148c <LCD_IO_ReadData>
}
 800083e:	b280      	uxth	r0, r0
 8000840:	bd08      	pop	{r3, pc}

08000842 <L3GD20_DeInit>:
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
}
 8000842:	4770      	bx	lr

08000844 <L3GD20_Init>:
{  
 8000844:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 8000846:	2300      	movs	r3, #0
{  
 8000848:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 800084a:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 800084e:	f000 fed3 	bl	80015f8 <GYRO_IO_Init>
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000852:	f10d 0007 	add.w	r0, sp, #7
 8000856:	2201      	movs	r2, #1
 8000858:	2120      	movs	r1, #32
  ctrl = (uint8_t) InitStruct;
 800085a:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800085e:	f000 ff03 	bl	8001668 <GYRO_IO_Write>
  ctrl = (uint8_t) (InitStruct >> 8);
 8000862:	0a24      	lsrs	r4, r4, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000864:	2201      	movs	r2, #1
 8000866:	2123      	movs	r1, #35	; 0x23
 8000868:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t) (InitStruct >> 8);
 800086c:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000870:	f000 fefa 	bl	8001668 <GYRO_IO_Write>
}
 8000874:	b002      	add	sp, #8
 8000876:	bd10      	pop	{r4, pc}

08000878 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8000878:	b507      	push	{r0, r1, r2, lr}
  uint8_t ctrl = 0x00;

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800087a:	2201      	movs	r2, #1
  ctrl = (uint8_t) InitStruct;
 800087c:	f88d 0007 	strb.w	r0, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000880:	2120      	movs	r1, #32
 8000882:	f10d 0007 	add.w	r0, sp, #7
 8000886:	f000 feef 	bl	8001668 <GYRO_IO_Write>
}
 800088a:	b003      	add	sp, #12
 800088c:	f85d fb04 	ldr.w	pc, [sp], #4

08000890 <L3GD20_ReadID>:
{
 8000890:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Init();
 8000892:	f000 feb1 	bl	80015f8 <GYRO_IO_Init>
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8000896:	f10d 0007 	add.w	r0, sp, #7
 800089a:	2201      	movs	r2, #1
 800089c:	210f      	movs	r1, #15
 800089e:	f000 ff05 	bl	80016ac <GYRO_IO_Read>
}
 80008a2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80008a6:	b003      	add	sp, #12
 80008a8:	f85d fb04 	ldr.w	pc, [sp], #4

080008ac <L3GD20_RebootCmd>:
{
 80008ac:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f10d 0007 	add.w	r0, sp, #7
 80008b4:	2124      	movs	r1, #36	; 0x24
 80008b6:	f000 fef9 	bl	80016ac <GYRO_IO_Read>
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80008ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80008be:	2201      	movs	r2, #1
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80008c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80008c4:	2124      	movs	r1, #36	; 0x24
 80008c6:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80008ca:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80008ce:	f000 fecb 	bl	8001668 <GYRO_IO_Write>
}
 80008d2:	b003      	add	sp, #12
 80008d4:	f85d fb04 	ldr.w	pc, [sp], #4

080008d8 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80008d8:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80008da:	2300      	movs	r3, #0
{
 80008dc:	4604      	mov	r4, r0
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80008de:	2201      	movs	r2, #1
 80008e0:	f10d 0006 	add.w	r0, sp, #6
 80008e4:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80008e6:	f88d 3006 	strb.w	r3, [sp, #6]
 80008ea:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80008ee:	f000 fedd 	bl	80016ac <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80008f2:	f10d 0007 	add.w	r0, sp, #7
 80008f6:	2201      	movs	r2, #1
 80008f8:	2122      	movs	r1, #34	; 0x22
 80008fa:	f000 fed7 	bl	80016ac <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80008fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000902:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000906:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 800090a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800090e:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);   
 8000912:	ea43 0004 	orr.w	r0, r3, r4
 8000916:	f88d 0007 	strb.w	r0, [sp, #7]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800091a:	2201      	movs	r2, #1
 800091c:	f10d 0006 	add.w	r0, sp, #6
 8000920:	2130      	movs	r1, #48	; 0x30
 8000922:	f000 fea1 	bl	8001668 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000926:	2201      	movs	r2, #1
 8000928:	2122      	movs	r1, #34	; 0x22
 800092a:	f10d 0007 	add.w	r0, sp, #7
 800092e:	f000 fe9b 	bl	8001668 <GYRO_IO_Write>
}
 8000932:	b002      	add	sp, #8
 8000934:	bd10      	pop	{r4, pc}

08000936 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8000936:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000938:	2201      	movs	r2, #1
{  
 800093a:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800093c:	2122      	movs	r1, #34	; 0x22
 800093e:	f10d 0007 	add.w	r0, sp, #7
 8000942:	f000 feb3 	bl	80016ac <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000946:	b96c      	cbnz	r4, 8000964 <L3GD20_EnableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8000948:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800094c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8000950:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000954:	2201      	movs	r2, #1
 8000956:	2122      	movs	r1, #34	; 0x22
 8000958:	f10d 0007 	add.w	r0, sp, #7
 800095c:	f000 fe84 	bl	8001668 <GYRO_IO_Write>
}
 8000960:	b002      	add	sp, #8
 8000962:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 8000964:	2c01      	cmp	r4, #1
 8000966:	d1f5      	bne.n	8000954 <L3GD20_EnableIT+0x1e>
    tmpreg &= 0xF7;
 8000968:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800096c:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	e7ec      	b.n	8000950 <L3GD20_EnableIT+0x1a>

08000976 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8000976:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000978:	2201      	movs	r2, #1
{  
 800097a:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800097c:	2122      	movs	r1, #34	; 0x22
 800097e:	f10d 0007 	add.w	r0, sp, #7
 8000982:	f000 fe93 	bl	80016ac <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000986:	b96c      	cbnz	r4, 80009a4 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8000988:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800098c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
 8000990:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000994:	2201      	movs	r2, #1
 8000996:	2122      	movs	r1, #34	; 0x22
 8000998:	f10d 0007 	add.w	r0, sp, #7
 800099c:	f000 fe64 	bl	8001668 <GYRO_IO_Write>
}
 80009a0:	b002      	add	sp, #8
 80009a2:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 80009a4:	2c01      	cmp	r4, #1
 80009a6:	d1f5      	bne.n	8000994 <L3GD20_DisableIT+0x1e>
    tmpreg &= 0xF7;
 80009a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80009ac:	f023 0308 	bic.w	r3, r3, #8
 80009b0:	e7ee      	b.n	8000990 <L3GD20_DisableIT+0x1a>

080009b2 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80009b2:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80009b4:	2201      	movs	r2, #1
{
 80009b6:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80009b8:	2121      	movs	r1, #33	; 0x21
 80009ba:	f10d 0007 	add.w	r0, sp, #7
 80009be:	f000 fe75 	bl	80016ac <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80009c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80009c6:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80009ca:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2121      	movs	r1, #33	; 0x21
 80009d0:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= FilterStruct;
 80009d4:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80009d8:	f000 fe46 	bl	8001668 <GYRO_IO_Write>
}
 80009dc:	b002      	add	sp, #8
 80009de:	bd10      	pop	{r4, pc}

080009e0 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80009e0:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80009e2:	2201      	movs	r2, #1
{
 80009e4:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80009e6:	2124      	movs	r1, #36	; 0x24
 80009e8:	f10d 0007 	add.w	r0, sp, #7
 80009ec:	f000 fe5e 	bl	80016ac <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80009f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80009f4:	f020 0010 	bic.w	r0, r0, #16
  
  tmpreg |= HighPassFilterState;
 80009f8:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2124      	movs	r1, #36	; 0x24
 80009fe:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= HighPassFilterState;
 8000a02:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000a06:	f000 fe2f 	bl	8001668 <GYRO_IO_Write>
}
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd10      	pop	{r4, pc}
	...

08000a10 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8000a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a12:	b087      	sub	sp, #28
  uint8_t tmpbuffer[6] ={0};
 8000a14:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2123      	movs	r1, #35	; 0x23
{
 8000a1a:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000a1c:	f10d 0007 	add.w	r0, sp, #7
  uint8_t tmpbuffer[6] ={0};
 8000a20:	9302      	str	r3, [sp, #8]
 8000a22:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t tmpreg = 0;
 8000a26:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000a2a:	f000 fe3f 	bl	80016ac <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8000a2e:	2206      	movs	r2, #6
 8000a30:	2128      	movs	r1, #40	; 0x28
 8000a32:	a802      	add	r0, sp, #8
 8000a34:	f000 fe3a 	bl	80016ac <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8000a38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000a3c:	f89d 6008 	ldrb.w	r6, [sp, #8]
 8000a40:	f89d 7009 	ldrb.w	r7, [sp, #9]
 8000a44:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000a48:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8000a4c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000a50:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8000a54:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000a58:	d039      	beq.n	8000ace <L3GD20_ReadXYZAngRate+0xbe>
  }
  else
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8000a5a:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8000a5e:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 8000a62:	f8ad 6010 	strh.w	r6, [sp, #16]
 8000a66:	f8ad 0012 	strh.w	r0, [sp, #18]
 8000a6a:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 8000a6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8000a72:	2b10      	cmp	r3, #16
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8000a74:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8000a78:	d034      	beq.n	8000ae4 <L3GD20_ReadXYZAngRate+0xd4>
 8000a7a:	2b20      	cmp	r3, #32
 8000a7c:	d035      	beq.n	8000aea <L3GD20_ReadXYZAngRate+0xda>
 8000a7e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8000af0 <L3GD20_ReadXYZAngRate+0xe0>
 8000a82:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000af4 <L3GD20_ReadXYZAngRate+0xe4>
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	bf08      	it	eq
 8000a8a:	eef0 7a47 	vmoveq.f32	s15, s14
    break;
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8000a8e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8000a92:	ee07 3a10 	vmov	s14, r3
 8000a96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000a9a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8000a9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000aa2:	ed84 7a00 	vstr	s14, [r4]
 8000aa6:	ee07 3a10 	vmov	s14, r3
 8000aaa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000aae:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8000ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ab6:	ed84 7a01 	vstr	s14, [r4, #4]
 8000aba:	ee07 3a10 	vmov	s14, r3
 8000abe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ac6:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 8000aca:	b007      	add	sp, #28
 8000acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8000ace:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 8000ad2:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8000ad6:	f8ad 6010 	strh.w	r6, [sp, #16]
 8000ada:	f8ad 0012 	strh.w	r0, [sp, #18]
 8000ade:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000ae2:	e7c4      	b.n	8000a6e <L3GD20_ReadXYZAngRate+0x5e>
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8000ae4:	eddf 7a04 	vldr	s15, [pc, #16]	; 8000af8 <L3GD20_ReadXYZAngRate+0xe8>
 8000ae8:	e7d1      	b.n	8000a8e <L3GD20_ReadXYZAngRate+0x7e>
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8000aea:	eddf 7a04 	vldr	s15, [pc, #16]	; 8000afc <L3GD20_ReadXYZAngRate+0xec>
 8000aee:	e7ce      	b.n	8000a8e <L3GD20_ReadXYZAngRate+0x7e>
 8000af0:	00000000 	.word	0x00000000
 8000af4:	410c0000 	.word	0x410c0000
 8000af8:	418c0000 	.word	0x418c0000
 8000afc:	428c0000 	.word	0x428c0000

08000b00 <stmpe811_IO_WritePin>:
  *   @arg  STMPE811_PIN_x: where x can be from 0 to 7. 
  * @param PinState: The new IO pin state.
  * @retval None
  */
void stmpe811_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8000b00:	4613      	mov	r3, r2
 8000b02:	b2c0      	uxtb	r0, r0
 8000b04:	b2ca      	uxtb	r2, r1
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8000b06:	b113      	cbz	r3, 8000b0e <stmpe811_IO_WritePin+0xe>
  {
    /* Set the register */
    IOE_Write(DeviceAddr, STMPE811_REG_IO_SET_PIN, (uint8_t)IO_Pin);
 8000b08:	2110      	movs	r1, #16
  }
  else
  {
    /* Set the register */
    IOE_Write(DeviceAddr, STMPE811_REG_IO_CLR_PIN, (uint8_t)IO_Pin);
 8000b0a:	f000 bd23 	b.w	8001554 <IOE_Write>
 8000b0e:	2111      	movs	r1, #17
 8000b10:	e7fb      	b.n	8000b0a <stmpe811_IO_WritePin+0xa>

08000b12 <stmpe811_Reset>:
{
 8000b12:	b510      	push	{r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8000b14:	b2c4      	uxtb	r4, r0
 8000b16:	2202      	movs	r2, #2
 8000b18:	2103      	movs	r1, #3
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	f000 fd1a 	bl	8001554 <IOE_Write>
  IOE_Delay(10); 
 8000b20:	200a      	movs	r0, #10
 8000b22:	f000 fd67 	bl	80015f4 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8000b26:	4620      	mov	r0, r4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2103      	movs	r1, #3
 8000b2c:	f000 fd12 	bl	8001554 <IOE_Write>
}
 8000b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 8000b34:	2002      	movs	r0, #2
 8000b36:	f000 bd5d 	b.w	80015f4 <IOE_Delay>

08000b3a <stmpe811_ReadID>:
{
 8000b3a:	b538      	push	{r3, r4, r5, lr}
 8000b3c:	4604      	mov	r4, r0
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8000b3e:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 8000b40:	f000 fcdc 	bl	80014fc <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8000b44:	2100      	movs	r1, #0
 8000b46:	4620      	mov	r0, r4
 8000b48:	f000 fd1e 	bl	8001588 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8000b4c:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8000b4e:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8000b50:	4620      	mov	r0, r4
 8000b52:	f000 fd19 	bl	8001588 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8000b56:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 8000b5a:	b280      	uxth	r0, r0
 8000b5c:	bd38      	pop	{r3, r4, r5, pc}

08000b5e <stmpe811_IO_ReadPin>:
  *        of the following values:
  *   @arg  STMPE811_PIN_x: where x can be from 0 to 7. 
  * @retval IO pin(s) state.
  */
uint32_t stmpe811_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000b5e:	b510      	push	{r4, lr}
  return((uint32_t)(IOE_Read(DeviceAddr, STMPE811_REG_IO_MP_STA) & (uint8_t)IO_Pin));
 8000b60:	b2c0      	uxtb	r0, r0
{
 8000b62:	460c      	mov	r4, r1
  return((uint32_t)(IOE_Read(DeviceAddr, STMPE811_REG_IO_MP_STA) & (uint8_t)IO_Pin));
 8000b64:	2112      	movs	r1, #18
 8000b66:	f000 fd0f 	bl	8001588 <IOE_Read>
 8000b6a:	4020      	ands	r0, r4
}
 8000b6c:	b2c0      	uxtb	r0, r0
 8000b6e:	bd10      	pop	{r4, pc}

08000b70 <stmpe811_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  STMPE811_PIN_x Where x can be from 0 to 7.             
  * @retval Status of the checked IO pin(s).
  */
uint32_t stmpe811_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000b70:	b510      	push	{r4, lr}
  /* Get the Interrupt status */
  return(IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_STA) & (uint8_t)IO_Pin); 
 8000b72:	b2c0      	uxtb	r0, r0
{
 8000b74:	460c      	mov	r4, r1
  return(IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_STA) & (uint8_t)IO_Pin); 
 8000b76:	210d      	movs	r1, #13
 8000b78:	f000 fd06 	bl	8001588 <IOE_Read>
 8000b7c:	4020      	ands	r0, r4
}
 8000b7e:	b2c0      	uxtb	r0, r0
 8000b80:	bd10      	pop	{r4, pc}

08000b82 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000b82:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8000b84:	b2c4      	uxtb	r4, r0
 8000b86:	2140      	movs	r1, #64	; 0x40
 8000b88:	4620      	mov	r0, r4
 8000b8a:	f000 fcfd 	bl	8001588 <IOE_Read>
  
  if(state > 0)
 8000b8e:	0603      	lsls	r3, r0, #24
 8000b90:	d507      	bpl.n	8000ba2 <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8000b92:	214c      	movs	r1, #76	; 0x4c
 8000b94:	4620      	mov	r0, r4
 8000b96:	f000 fcf7 	bl	8001588 <IOE_Read>
    {
      ret = 1;
 8000b9a:	3800      	subs	r0, #0
 8000b9c:	bf18      	it	ne
 8000b9e:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 8000ba0:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	214b      	movs	r1, #75	; 0x4b
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	f000 fcd4 	bl	8001554 <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000bac:	4620      	mov	r0, r4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	214b      	movs	r1, #75	; 0x4b
 8000bb2:	f000 fccf 	bl	8001554 <IOE_Write>
  uint8_t ret = 0;
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	e7f2      	b.n	8000ba0 <stmpe811_TS_DetectTouch+0x1e>

08000bba <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	b2c4      	uxtb	r4, r0
{
 8000bc0:	460e      	mov	r6, r1
 8000bc2:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8000bc4:	21d7      	movs	r1, #215	; 0xd7
 8000bc6:	eb0d 0203 	add.w	r2, sp, r3
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f000 fcfa 	bl	80015c4 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8000bd0:	9b01      	ldr	r3, [sp, #4]
 8000bd2:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8000bd4:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8000bd6:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8000bda:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000bdc:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8000bde:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000be0:	2201      	movs	r2, #1
 8000be2:	214b      	movs	r1, #75	; 0x4b
 8000be4:	f000 fcb6 	bl	8001554 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000be8:	2200      	movs	r2, #0
 8000bea:	214b      	movs	r1, #75	; 0x4b
 8000bec:	4620      	mov	r0, r4
 8000bee:	f000 fcb1 	bl	8001554 <IOE_Write>
}
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd70      	pop	{r4, r5, r6, pc}
	...

08000bf8 <stmpe811_Init>:
{
 8000bf8:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <stmpe811_Init+0x2c>)
 8000bfc:	781a      	ldrb	r2, [r3, #0]
 8000bfe:	4290      	cmp	r0, r2
{
 8000c00:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 8000c02:	d00d      	beq.n	8000c20 <stmpe811_Init+0x28>
 8000c04:	7859      	ldrb	r1, [r3, #1]
 8000c06:	4288      	cmp	r0, r1
 8000c08:	d00a      	beq.n	8000c20 <stmpe811_Init+0x28>
 8000c0a:	b10a      	cbz	r2, 8000c10 <stmpe811_Init+0x18>
 8000c0c:	b941      	cbnz	r1, 8000c20 <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8000c0e:	2201      	movs	r2, #1
      stmpe811[empty] = DeviceAddr;
 8000c10:	549c      	strb	r4, [r3, r2]
      IOE_Init(); 
 8000c12:	f000 fc73 	bl	80014fc <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 8000c16:	4620      	mov	r0, r4
}
 8000c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 8000c1c:	f7ff bf79 	b.w	8000b12 <stmpe811_Reset>
}
 8000c20:	bd10      	pop	{r4, pc}
 8000c22:	bf00      	nop
 8000c24:	200002a0 	.word	0x200002a0

08000c28 <stmpe811_EnableGlobalIT>:
{
 8000c28:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000c2a:	b2c4      	uxtb	r4, r0
 8000c2c:	2109      	movs	r1, #9
 8000c2e:	4620      	mov	r0, r4
 8000c30:	f000 fcaa 	bl	8001588 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8000c34:	f040 0001 	orr.w	r0, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8000c38:	b2c2      	uxtb	r2, r0
 8000c3a:	2109      	movs	r1, #9
 8000c3c:	4620      	mov	r0, r4
}
 8000c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8000c42:	f000 bc87 	b.w	8001554 <IOE_Write>

08000c46 <stmpe811_DisableGlobalIT>:
{
 8000c46:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000c48:	b2c4      	uxtb	r4, r0
 8000c4a:	2109      	movs	r1, #9
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	f000 fc9b 	bl	8001588 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000c52:	2109      	movs	r1, #9
 8000c54:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 8000c58:	4620      	mov	r0, r4
}
 8000c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000c5e:	f000 bc79 	b.w	8001554 <IOE_Write>

08000c62 <stmpe811_EnableITSource>:
{
 8000c62:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000c64:	b2c4      	uxtb	r4, r0
{
 8000c66:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000c68:	4620      	mov	r0, r4
 8000c6a:	210a      	movs	r1, #10
 8000c6c:	f000 fc8c 	bl	8001588 <IOE_Read>
  tmp |= Source; 
 8000c70:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	4620      	mov	r0, r4
 8000c78:	210a      	movs	r1, #10
}
 8000c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000c7e:	f000 bc69 	b.w	8001554 <IOE_Write>

08000c82 <stmpe811_IO_EnableIT>:
{ 
 8000c82:	b507      	push	{r0, r1, r2, lr}
 8000c84:	9001      	str	r0, [sp, #4]
  IOE_ITConfig();
 8000c86:	f000 fc3b 	bl	8001500 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_GIT_IO);
 8000c8a:	9801      	ldr	r0, [sp, #4]
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	f7ff ffe8 	bl	8000c62 <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr); 
 8000c92:	9801      	ldr	r0, [sp, #4]
}
 8000c94:	b003      	add	sp, #12
 8000c96:	f85d eb04 	ldr.w	lr, [sp], #4
  stmpe811_EnableGlobalIT(DeviceAddr); 
 8000c9a:	f7ff bfc5 	b.w	8000c28 <stmpe811_EnableGlobalIT>

08000c9e <stmpe811_TS_EnableIT>:
{
 8000c9e:	b507      	push	{r0, r1, r2, lr}
 8000ca0:	9001      	str	r0, [sp, #4]
  IOE_ITConfig();
 8000ca2:	f000 fc2d 	bl	8001500 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8000ca6:	9801      	ldr	r0, [sp, #4]
 8000ca8:	211f      	movs	r1, #31
 8000caa:	f7ff ffda 	bl	8000c62 <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 8000cae:	9801      	ldr	r0, [sp, #4]
}
 8000cb0:	b003      	add	sp, #12
 8000cb2:	f85d eb04 	ldr.w	lr, [sp], #4
  stmpe811_EnableGlobalIT(DeviceAddr);
 8000cb6:	f7ff bfb7 	b.w	8000c28 <stmpe811_EnableGlobalIT>

08000cba <stmpe811_DisableITSource>:
{
 8000cba:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000cbc:	b2c4      	uxtb	r4, r0
{
 8000cbe:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	210a      	movs	r1, #10
 8000cc4:	f000 fc60 	bl	8001588 <IOE_Read>
  tmp &= ~Source; 
 8000cc8:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	4620      	mov	r0, r4
 8000cd0:	210a      	movs	r1, #10
}
 8000cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000cd6:	f000 bc3d 	b.w	8001554 <IOE_Write>

08000cda <stmpe811_IO_DisableIT>:
{
 8000cda:	b510      	push	{r4, lr}
 8000cdc:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8000cde:	f7ff ffb2 	bl	8000c46 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_GIT_IO);    
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	2180      	movs	r1, #128	; 0x80
}
 8000ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_GIT_IO);    
 8000cea:	f7ff bfe6 	b.w	8000cba <stmpe811_DisableITSource>

08000cee <stmpe811_TS_DisableIT>:
{
 8000cee:	b510      	push	{r4, lr}
 8000cf0:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8000cf2:	f7ff ffa8 	bl	8000c46 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	211f      	movs	r1, #31
}
 8000cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8000cfe:	f7ff bfdc 	b.w	8000cba <stmpe811_DisableITSource>

08000d02 <stmpe811_SetITPolarity>:
{
 8000d02:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000d04:	b2c4      	uxtb	r4, r0
{
 8000d06:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000d08:	4620      	mov	r0, r4
 8000d0a:	2109      	movs	r1, #9
 8000d0c:	f000 fc3c 	bl	8001588 <IOE_Read>
  tmp &= ~(uint8_t)0x04;
 8000d10:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000d14:	ea40 0205 	orr.w	r2, r0, r5
 8000d18:	2109      	movs	r1, #9
 8000d1a:	4620      	mov	r0, r4
}
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000d20:	f000 bc18 	b.w	8001554 <IOE_Write>

08000d24 <stmpe811_SetITType>:
{
 8000d24:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000d26:	b2c4      	uxtb	r4, r0
{
 8000d28:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	2109      	movs	r1, #9
 8000d2e:	f000 fc2b 	bl	8001588 <IOE_Read>
  tmp &= ~(uint8_t)0x02;
 8000d32:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000d36:	ea40 0205 	orr.w	r2, r0, r5
 8000d3a:	2109      	movs	r1, #9
 8000d3c:	4620      	mov	r0, r4
}
 8000d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000d42:	f000 bc07 	b.w	8001554 <IOE_Write>

08000d46 <stmpe811_ReadGITStatus>:
{
 8000d46:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8000d48:	b2c0      	uxtb	r0, r0
{
 8000d4a:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8000d4c:	210b      	movs	r1, #11
 8000d4e:	f000 fc1b 	bl	8001588 <IOE_Read>
}
 8000d52:	4020      	ands	r0, r4
 8000d54:	bd10      	pop	{r4, pc}

08000d56 <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8000d56:	211f      	movs	r1, #31
 8000d58:	f7ff bff5 	b.w	8000d46 <stmpe811_ReadGITStatus>

08000d5c <stmpe811_ClearGlobalIT>:
{
 8000d5c:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8000d5e:	b2c0      	uxtb	r0, r0
 8000d60:	210b      	movs	r1, #11
 8000d62:	f000 bbf7 	b.w	8001554 <IOE_Write>

08000d66 <stmpe811_IO_ClearIT>:
{
 8000d66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d68:	4604      	mov	r4, r0
 8000d6a:	460d      	mov	r5, r1
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_GIT_IO);
 8000d6c:	2180      	movs	r1, #128	; 0x80
 8000d6e:	f7ff fff5 	bl	8000d5c <stmpe811_ClearGlobalIT>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_STA, (uint8_t)IO_Pin);  
 8000d72:	b2e0      	uxtb	r0, r4
 8000d74:	b2ea      	uxtb	r2, r5
 8000d76:	210d      	movs	r1, #13
 8000d78:	9201      	str	r2, [sp, #4]
 8000d7a:	9000      	str	r0, [sp, #0]
 8000d7c:	f000 fbea 	bl	8001554 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_ED, (uint8_t)IO_Pin);
 8000d80:	9a01      	ldr	r2, [sp, #4]
 8000d82:	9800      	ldr	r0, [sp, #0]
 8000d84:	2114      	movs	r1, #20
 8000d86:	f000 fbe5 	bl	8001554 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, (uint8_t)IO_Pin);
 8000d8a:	9a01      	ldr	r2, [sp, #4]
 8000d8c:	9800      	ldr	r0, [sp, #0]
 8000d8e:	2115      	movs	r1, #21
 8000d90:	f000 fbe0 	bl	8001554 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, (uint8_t)IO_Pin); 
 8000d94:	9a01      	ldr	r2, [sp, #4]
 8000d96:	9800      	ldr	r0, [sp, #0]
 8000d98:	2116      	movs	r1, #22
}
 8000d9a:	b003      	add	sp, #12
 8000d9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, (uint8_t)IO_Pin); 
 8000da0:	f000 bbd8 	b.w	8001554 <IOE_Write>

08000da4 <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8000da4:	211f      	movs	r1, #31
 8000da6:	f7ff bfd9 	b.w	8000d5c <stmpe811_ClearGlobalIT>

08000daa <stmpe811_IO_InitPin>:
{
 8000daa:	b570      	push	{r4, r5, r6, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_DIR);
 8000dac:	b2c4      	uxtb	r4, r0
{
 8000dae:	460d      	mov	r5, r1
 8000db0:	4616      	mov	r6, r2
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_DIR);
 8000db2:	2113      	movs	r1, #19
 8000db4:	4620      	mov	r0, r4
 8000db6:	f000 fbe7 	bl	8001588 <IOE_Read>
  if (Direction != STMPE811_DIRECTION_IN)
 8000dba:	b146      	cbz	r6, 8000dce <stmpe811_IO_InitPin+0x24>
    tmp |= (uint8_t)IO_Pin;
 8000dbc:	ea40 0105 	orr.w	r1, r0, r5
    tmp &= ~(uint8_t)IO_Pin;
 8000dc0:	b2ca      	uxtb	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_IO_DIR, tmp);   
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	2113      	movs	r1, #19
}
 8000dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_DIR, tmp);   
 8000dca:	f000 bbc3 	b.w	8001554 <IOE_Write>
    tmp &= ~(uint8_t)IO_Pin;
 8000dce:	ea20 0105 	bic.w	r1, r0, r5
 8000dd2:	e7f5      	b.n	8000dc0 <stmpe811_IO_InitPin+0x16>

08000dd4 <stmpe811_IO_DisableAF>:
{
 8000dd4:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000dd6:	b2c4      	uxtb	r4, r0
{
 8000dd8:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000dda:	4620      	mov	r0, r4
 8000ddc:	2117      	movs	r1, #23
 8000dde:	f000 fbd3 	bl	8001588 <IOE_Read>
  tmp |= (uint8_t)IO_Pin;
 8000de2:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp);
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	4620      	mov	r0, r4
 8000dea:	2117      	movs	r1, #23
}
 8000dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp);
 8000df0:	f000 bbb0 	b.w	8001554 <IOE_Write>

08000df4 <stmpe811_IO_Start>:
{
 8000df4:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000df6:	b2c6      	uxtb	r6, r0
{
 8000df8:	4604      	mov	r4, r0
 8000dfa:	460d      	mov	r5, r1
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	2104      	movs	r1, #4
 8000e00:	f000 fbc2 	bl	8001588 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000e04:	2104      	movs	r1, #4
 8000e06:	f000 02fa 	and.w	r2, r0, #250	; 0xfa
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	f000 fba2 	bl	8001554 <IOE_Write>
  stmpe811_IO_DisableAF(DeviceAddr, (uint8_t)IO_Pin);
 8000e10:	b2e9      	uxtb	r1, r5
 8000e12:	4620      	mov	r0, r4
}
 8000e14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  stmpe811_IO_DisableAF(DeviceAddr, (uint8_t)IO_Pin);
 8000e18:	f7ff bfdc 	b.w	8000dd4 <stmpe811_IO_DisableAF>

08000e1c <stmpe811_IO_EnableAF>:
{
 8000e1c:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000e1e:	b2c4      	uxtb	r4, r0
{
 8000e20:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000e22:	4620      	mov	r0, r4
 8000e24:	2117      	movs	r1, #23
 8000e26:	f000 fbaf 	bl	8001588 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 8000e2a:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	4620      	mov	r0, r4
 8000e32:	2117      	movs	r1, #23
}
 8000e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8000e38:	f000 bb8c 	b.w	8001554 <IOE_Write>

08000e3c <stmpe811_TS_Start>:
{
 8000e3c:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000e3e:	b2c4      	uxtb	r4, r0
{
 8000e40:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000e42:	2104      	movs	r1, #4
 8000e44:	4620      	mov	r0, r4
 8000e46:	f000 fb9f 	bl	8001588 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000e50:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000e52:	4620      	mov	r0, r4
 8000e54:	f000 fb7e 	bl	8001554 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8000e58:	4630      	mov	r0, r6
 8000e5a:	21f0      	movs	r1, #240	; 0xf0
 8000e5c:	f7ff ffde 	bl	8000e1c <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000e60:	f005 02f8 	and.w	r2, r5, #248	; 0xf8
 8000e64:	4620      	mov	r0, r4
 8000e66:	2104      	movs	r1, #4
 8000e68:	f000 fb74 	bl	8001554 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8000e6c:	2249      	movs	r2, #73	; 0x49
 8000e6e:	2120      	movs	r1, #32
 8000e70:	4620      	mov	r0, r4
 8000e72:	f000 fb6f 	bl	8001554 <IOE_Write>
  IOE_Delay(2); 
 8000e76:	2002      	movs	r0, #2
 8000e78:	f000 fbbc 	bl	80015f4 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2121      	movs	r1, #33	; 0x21
 8000e82:	f000 fb67 	bl	8001554 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8000e86:	4620      	mov	r0, r4
 8000e88:	229a      	movs	r2, #154	; 0x9a
 8000e8a:	2141      	movs	r1, #65	; 0x41
 8000e8c:	f000 fb62 	bl	8001554 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8000e90:	4620      	mov	r0, r4
 8000e92:	2201      	movs	r2, #1
 8000e94:	214a      	movs	r1, #74	; 0x4a
 8000e96:	f000 fb5d 	bl	8001554 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	214b      	movs	r1, #75	; 0x4b
 8000ea0:	f000 fb58 	bl	8001554 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	214b      	movs	r1, #75	; 0x4b
 8000eaa:	f000 fb53 	bl	8001554 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8000eae:	4620      	mov	r0, r4
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2156      	movs	r1, #86	; 0x56
 8000eb4:	f000 fb4e 	bl	8001554 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8000eb8:	4620      	mov	r0, r4
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2158      	movs	r1, #88	; 0x58
 8000ebe:	f000 fb49 	bl	8001554 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2140      	movs	r1, #64	; 0x40
 8000ec8:	f000 fb44 	bl	8001554 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8000ecc:	4620      	mov	r0, r4
 8000ece:	22ff      	movs	r2, #255	; 0xff
 8000ed0:	210b      	movs	r1, #11
 8000ed2:	f000 fb3f 	bl	8001554 <IOE_Write>
}
 8000ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 8000eda:	2002      	movs	r0, #2
 8000edc:	f000 bb8a 	b.w	80015f4 <IOE_Delay>

08000ee0 <stmpe811_IO_SetEdgeMode>:
{
 8000ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8000ee4:	b2c7      	uxtb	r7, r0
{
 8000ee6:	4688      	mov	r8, r1
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8000ee8:	4638      	mov	r0, r7
 8000eea:	2116      	movs	r1, #22
{
 8000eec:	4691      	mov	r9, r2
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8000eee:	f000 fb4b 	bl	8001588 <IOE_Read>
  tmp1 &= ~(uint8_t)IO_Pin;
 8000ef2:	ea6f 0508 	mvn.w	r5, r8
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8000ef6:	4606      	mov	r6, r0
  tmp2 = IOE_Read(DeviceAddr, STMPE811_REG_IO_RE);
 8000ef8:	2115      	movs	r1, #21
 8000efa:	4638      	mov	r0, r7
 8000efc:	f000 fb44 	bl	8001588 <IOE_Read>
  tmp1 &= ~(uint8_t)IO_Pin;
 8000f00:	b26b      	sxtb	r3, r5
 8000f02:	401e      	ands	r6, r3
 8000f04:	b2f2      	uxtb	r2, r6
  if (Edge & STMPE811_EDGE_FALLING)
 8000f06:	f019 0f01 	tst.w	r9, #1
    tmp1 |= (uint8_t)IO_Pin;
 8000f0a:	bf18      	it	ne
 8000f0c:	ea42 0208 	orrne.w	r2, r2, r8
  tmp2 &= ~(uint8_t)IO_Pin;
 8000f10:	ea00 0003 	and.w	r0, r0, r3
 8000f14:	b2c4      	uxtb	r4, r0
    tmp1 |= (uint8_t)IO_Pin;
 8000f16:	bf18      	it	ne
 8000f18:	b2d2      	uxtbne	r2, r2
  if (Edge & STMPE811_EDGE_RISING)
 8000f1a:	f019 0f02 	tst.w	r9, #2
    tmp2 |= (uint8_t)IO_Pin;
 8000f1e:	bf1c      	itt	ne
 8000f20:	ea44 0408 	orrne.w	r4, r4, r8
 8000f24:	b2e4      	uxtbne	r4, r4
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, tmp1);
 8000f26:	4638      	mov	r0, r7
 8000f28:	2116      	movs	r1, #22
 8000f2a:	f000 fb13 	bl	8001554 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, tmp2);
 8000f2e:	4622      	mov	r2, r4
 8000f30:	4638      	mov	r0, r7
 8000f32:	2115      	movs	r1, #21
}
 8000f34:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, tmp2);
 8000f38:	f000 bb0c 	b.w	8001554 <IOE_Write>

08000f3c <stmpe811_IO_EnablePinIT>:
{
 8000f3c:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_EN);
 8000f3e:	b2c4      	uxtb	r4, r0
{
 8000f40:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_EN);
 8000f42:	4620      	mov	r0, r4
 8000f44:	210c      	movs	r1, #12
 8000f46:	f000 fb1f 	bl	8001588 <IOE_Read>
  tmp |= (uint8_t)IO_Pin;
 8000f4a:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_EN, tmp);  
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	4620      	mov	r0, r4
 8000f52:	210c      	movs	r1, #12
}
 8000f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_EN, tmp);  
 8000f58:	f000 bafc 	b.w	8001554 <IOE_Write>

08000f5c <stmpe811_IO_Config>:
{
 8000f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f5e:	460c      	mov	r4, r1
 8000f60:	4615      	mov	r5, r2
 8000f62:	2a05      	cmp	r2, #5
 8000f64:	d807      	bhi.n	8000f76 <stmpe811_IO_Config+0x1a>
 8000f66:	e8df f002 	tbb	[pc, r2]
 8000f6a:	0903      	.short	0x0903
 8000f6c:	4b36240e 	.word	0x4b36240e
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f7ff ff1a 	bl	8000daa <stmpe811_IO_InitPin>
}
 8000f76:	4628      	mov	r0, r5
 8000f78:	b003      	add	sp, #12
 8000f7a:	bd30      	pop	{r4, r5, pc}
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_OUT);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f7ff ff14 	bl	8000daa <stmpe811_IO_InitPin>
  uint8_t error_code = 0;
 8000f82:	2500      	movs	r5, #0
    break;    
 8000f84:	e7f7      	b.n	8000f76 <stmpe811_IO_Config+0x1a>
    stmpe811_IO_EnableIT(DeviceAddr);
 8000f86:	9001      	str	r0, [sp, #4]
 8000f88:	f7ff fe7b 	bl	8000c82 <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8000f8c:	9801      	ldr	r0, [sp, #4]
 8000f8e:	4621      	mov	r1, r4
 8000f90:	f7ff ffd4 	bl	8000f3c <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8000f94:	2200      	movs	r2, #0
 8000f96:	9801      	ldr	r0, [sp, #4]
 8000f98:	4621      	mov	r1, r4
 8000f9a:	f7ff ff06 	bl	8000daa <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_EDGE);      
 8000f9e:	9801      	ldr	r0, [sp, #4]
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	f7ff febf 	bl	8000d24 <stmpe811_SetITType>
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_RISING); 
 8000fa6:	2202      	movs	r2, #2
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_FALLING); 
 8000fa8:	9801      	ldr	r0, [sp, #4]
 8000faa:	4621      	mov	r1, r4
 8000fac:	f7ff ff98 	bl	8000ee0 <stmpe811_IO_SetEdgeMode>
    break;
 8000fb0:	e7e7      	b.n	8000f82 <stmpe811_IO_Config+0x26>
    stmpe811_IO_EnableIT(DeviceAddr);
 8000fb2:	9001      	str	r0, [sp, #4]
 8000fb4:	f7ff fe65 	bl	8000c82 <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8000fb8:	9801      	ldr	r0, [sp, #4]
 8000fba:	4621      	mov	r1, r4
 8000fbc:	f7ff ffbe 	bl	8000f3c <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	9801      	ldr	r0, [sp, #4]
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	f7ff fef0 	bl	8000daa <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_EDGE);    
 8000fca:	9801      	ldr	r0, [sp, #4]
 8000fcc:	2102      	movs	r1, #2
 8000fce:	f7ff fea9 	bl	8000d24 <stmpe811_SetITType>
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_FALLING); 
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	e7e8      	b.n	8000fa8 <stmpe811_IO_Config+0x4c>
    stmpe811_IO_EnableIT(DeviceAddr);
 8000fd6:	9001      	str	r0, [sp, #4]
 8000fd8:	f7ff fe53 	bl	8000c82 <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8000fdc:	9801      	ldr	r0, [sp, #4]
 8000fde:	4621      	mov	r1, r4
 8000fe0:	f7ff ffac 	bl	8000f3c <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8000fe4:	9801      	ldr	r0, [sp, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4621      	mov	r1, r4
 8000fea:	f7ff fede 	bl	8000daa <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_LEVEL);
 8000fee:	2100      	movs	r1, #0
 8000ff0:	9801      	ldr	r0, [sp, #4]
 8000ff2:	f7ff fe97 	bl	8000d24 <stmpe811_SetITType>
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_LOW);      
 8000ff6:	2100      	movs	r1, #0
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_HIGH);  
 8000ff8:	9801      	ldr	r0, [sp, #4]
 8000ffa:	f7ff fe82 	bl	8000d02 <stmpe811_SetITPolarity>
 8000ffe:	e7c0      	b.n	8000f82 <stmpe811_IO_Config+0x26>
    stmpe811_IO_EnableIT(DeviceAddr);
 8001000:	9001      	str	r0, [sp, #4]
 8001002:	f7ff fe3e 	bl	8000c82 <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8001006:	9801      	ldr	r0, [sp, #4]
 8001008:	4621      	mov	r1, r4
 800100a:	f7ff ff97 	bl	8000f3c <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 800100e:	9801      	ldr	r0, [sp, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	4621      	mov	r1, r4
 8001014:	f7ff fec9 	bl	8000daa <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_LEVEL);
 8001018:	2100      	movs	r1, #0
 800101a:	9801      	ldr	r0, [sp, #4]
 800101c:	f7ff fe82 	bl	8000d24 <stmpe811_SetITType>
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_HIGH);  
 8001020:	2104      	movs	r1, #4
 8001022:	e7e9      	b.n	8000ff8 <stmpe811_IO_Config+0x9c>

08001024 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001024:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001026:	4c21      	ldr	r4, [pc, #132]	; (80010ac <SPIx_Init+0x88>)
{
 8001028:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800102a:	4620      	mov	r0, r4
 800102c:	f003 ff02 	bl	8004e34 <HAL_SPI_GetState>
 8001030:	2800      	cmp	r0, #0
 8001032:	d138      	bne.n	80010a6 <SPIx_Init+0x82>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <SPIx_Init+0x8c>)
 8001036:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001038:	2318      	movs	r3, #24
 800103a:	61e3      	str	r3, [r4, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 800103c:	2307      	movs	r3, #7
 800103e:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001040:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001044:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001048:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800104a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800104e:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <SPIx_Init+0x90>)
 8001052:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001054:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001056:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001058:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800105a:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800105c:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 800105e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001060:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001064:	645a      	str	r2, [r3, #68]	; 0x44
 8001066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001068:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800106c:	9201      	str	r2, [sp, #4]
 800106e:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001070:	9002      	str	r0, [sp, #8]
 8001072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001074:	f042 0220 	orr.w	r2, r2, #32
 8001078:	631a      	str	r2, [r3, #48]	; 0x30
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	f003 0320 	and.w	r3, r3, #32
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	9b02      	ldr	r3, [sp, #8]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001084:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001088:	2302      	movs	r3, #2
 800108a:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800108e:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001090:	2001      	movs	r0, #1
 8001092:	2305      	movs	r3, #5
 8001094:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001098:	a903      	add	r1, sp, #12
 800109a:	4807      	ldr	r0, [pc, #28]	; (80010b8 <SPIx_Init+0x94>)
 800109c:	f001 ff56 	bl	8002f4c <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 80010a0:	4620      	mov	r0, r4
 80010a2:	f003 fb65 	bl	8004770 <HAL_SPI_Init>
}
 80010a6:	b008      	add	sp, #32
 80010a8:	bd10      	pop	{r4, pc}
 80010aa:	bf00      	nop
 80010ac:	200002a4 	.word	0x200002a4
 80010b0:	40015000 	.word	0x40015000
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40021400 	.word	0x40021400

080010bc <SPIx_WriteRead>:
{
 80010bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t receivedbyte = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	f88d 3017 	strb.w	r3, [sp, #23]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <SPIx_WriteRead+0x38>)
{
 80010c6:	f88d 000f 	strb.w	r0, [sp, #15]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	480a      	ldr	r0, [pc, #40]	; (80010f8 <SPIx_WriteRead+0x3c>)
 80010d0:	2301      	movs	r3, #1
 80010d2:	f10d 0217 	add.w	r2, sp, #23
 80010d6:	f10d 010f 	add.w	r1, sp, #15
 80010da:	f003 fc80 	bl	80049de <HAL_SPI_TransmitReceive>
 80010de:	b120      	cbz	r0, 80010ea <SPIx_WriteRead+0x2e>
  HAL_SPI_DeInit(&SpiHandle);
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <SPIx_WriteRead+0x3c>)
 80010e2:	f003 fba6 	bl	8004832 <HAL_SPI_DeInit>
  SPIx_Init();
 80010e6:	f7ff ff9d 	bl	8001024 <SPIx_Init>
}
 80010ea:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80010ee:	b007      	add	sp, #28
 80010f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80010f4:	200000c0 	.word	0x200000c0
 80010f8:	200002a4 	.word	0x200002a4

080010fc <I2Cx_Init>:
{
 80010fc:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80010fe:	4e33      	ldr	r6, [pc, #204]	; (80011cc <I2Cx_Init+0xd0>)
{
 8001100:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001102:	4630      	mov	r0, r6
 8001104:	f002 fcfa 	bl	8003afc <HAL_I2C_GetState>
 8001108:	4604      	mov	r4, r0
 800110a:	2800      	cmp	r0, #0
 800110c:	d15b      	bne.n	80011c6 <I2Cx_Init+0xca>
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800110e:	4a30      	ldr	r2, [pc, #192]	; (80011d0 <I2Cx_Init+0xd4>)
 8001110:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <I2Cx_Init+0xd8>)
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8001112:	4d31      	ldr	r5, [pc, #196]	; (80011d8 <I2Cx_Init+0xdc>)
 8001114:	9000      	str	r0, [sp, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8001116:	e9c6 2300 	strd	r2, r3, [r6]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800111a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    I2cHandle.Init.OwnAddress1      = 0;
 800111e:	e9c6 0002 	strd	r0, r0, [r6, #8]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8001122:	e9c6 3004 	strd	r3, r0, [r6, #16]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8001126:	e9c6 0006 	strd	r0, r0, [r6, #24]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800112a:	6230      	str	r0, [r6, #32]
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800112c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	632b      	str	r3, [r5, #48]	; 0x30
 8001134:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	9b00      	ldr	r3, [sp, #0]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800113e:	9001      	str	r0, [sp, #4]
 8001140:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	632b      	str	r3, [r5, #48]	; 0x30
 8001148:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800114a:	9005      	str	r0, [sp, #20]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8001154:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001158:	2312      	movs	r3, #18
 800115a:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800115e:	2002      	movs	r0, #2
 8001160:	2304      	movs	r3, #4
 8001162:	e9cd 0306 	strd	r0, r3, [sp, #24]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001166:	a903      	add	r1, sp, #12
 8001168:	481c      	ldr	r0, [pc, #112]	; (80011dc <I2Cx_Init+0xe0>)
 800116a:	f001 feef 	bl	8002f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 800116e:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001172:	481b      	ldr	r0, [pc, #108]	; (80011e0 <I2Cx_Init+0xe4>)
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8001174:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001176:	a903      	add	r1, sp, #12
 8001178:	f001 fee8 	bl	8002f4c <HAL_GPIO_Init>
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800117c:	9402      	str	r4, [sp, #8]
 800117e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001180:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001184:	642b      	str	r3, [r5, #64]	; 0x40
 8001186:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_I2Cx_FORCE_RESET();
 8001190:	6a2b      	ldr	r3, [r5, #32]
 8001192:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001196:	622b      	str	r3, [r5, #32]
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8001198:	6a2b      	ldr	r3, [r5, #32]
 800119a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800119e:	622b      	str	r3, [r5, #32]
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80011a0:	4622      	mov	r2, r4
 80011a2:	210f      	movs	r1, #15
 80011a4:	2048      	movs	r0, #72	; 0x48
 80011a6:	f001 fc59 	bl	8002a5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80011aa:	2048      	movs	r0, #72	; 0x48
 80011ac:	f001 fc88 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80011b0:	4622      	mov	r2, r4
 80011b2:	210f      	movs	r1, #15
 80011b4:	2049      	movs	r0, #73	; 0x49
 80011b6:	f001 fc51 	bl	8002a5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80011ba:	2049      	movs	r0, #73	; 0x49
 80011bc:	f001 fc80 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 80011c0:	4630      	mov	r0, r6
 80011c2:	f002 fa41 	bl	8003648 <HAL_I2C_Init>
}
 80011c6:	b008      	add	sp, #32
 80011c8:	bd70      	pop	{r4, r5, r6, pc}
 80011ca:	bf00      	nop
 80011cc:	20000508 	.word	0x20000508
 80011d0:	40005c00 	.word	0x40005c00
 80011d4:	000186a0 	.word	0x000186a0
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020800 	.word	0x40020800

080011e4 <I2Cx_Error>:
{
 80011e4:	b508      	push	{r3, lr}
  HAL_I2C_DeInit(&I2cHandle);
 80011e6:	4803      	ldr	r0, [pc, #12]	; (80011f4 <I2Cx_Error+0x10>)
 80011e8:	f002 fad7 	bl	800379a <HAL_I2C_DeInit>
}
 80011ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  I2Cx_Init();
 80011f0:	f7ff bf84 	b.w	80010fc <I2Cx_Init>
 80011f4:	20000508 	.word	0x20000508

080011f8 <SPIx_Write>:
{
 80011f8:	b507      	push	{r0, r1, r2, lr}
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <SPIx_Write+0x28>)
{
 80011fc:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4808      	ldr	r0, [pc, #32]	; (8001224 <SPIx_Write+0x2c>)
 8001204:	2201      	movs	r2, #1
 8001206:	f10d 0106 	add.w	r1, sp, #6
 800120a:	f003 fb28 	bl	800485e <HAL_SPI_Transmit>
  if(status != HAL_OK)
 800120e:	b120      	cbz	r0, 800121a <SPIx_Write+0x22>
  HAL_SPI_DeInit(&SpiHandle);
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <SPIx_Write+0x2c>)
 8001212:	f003 fb0e 	bl	8004832 <HAL_SPI_DeInit>
  SPIx_Init();
 8001216:	f7ff ff05 	bl	8001024 <SPIx_Init>
}
 800121a:	b003      	add	sp, #12
 800121c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001220:	200000c0 	.word	0x200000c0
 8001224:	200002a4 	.word	0x200002a4

08001228 <BSP_LED_Init>:
{
 8001228:	b530      	push	{r4, r5, lr}
 800122a:	b089      	sub	sp, #36	; 0x24
  LEDx_GPIO_CLK_ENABLE(Led);
 800122c:	bb08      	cbnz	r0, 8001272 <BSP_LED_Init+0x4a>
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <BSP_LED_Init+0x68>)
 8001230:	9001      	str	r0, [sp, #4]
 8001232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001238:	631a      	str	r2, [r3, #48]	; 0x30
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001244:	4c13      	ldr	r4, [pc, #76]	; (8001294 <BSP_LED_Init+0x6c>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <BSP_LED_Init+0x70>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001248:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800124c:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001250:	6860      	ldr	r0, [r4, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001252:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001256:	e9cd 3304 	strd	r3, r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800125a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800125c:	2302      	movs	r3, #2
 800125e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001260:	f001 fe74 	bl	8002f4c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001264:	6860      	ldr	r0, [r4, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	4629      	mov	r1, r5
 800126a:	f001 fffd 	bl	8003268 <HAL_GPIO_WritePin>
}
 800126e:	b009      	add	sp, #36	; 0x24
 8001270:	bd30      	pop	{r4, r5, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8001272:	2801      	cmp	r0, #1
 8001274:	d1e6      	bne.n	8001244 <BSP_LED_Init+0x1c>
 8001276:	2300      	movs	r3, #0
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <BSP_LED_Init+0x68>)
 800127c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800127e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	9b02      	ldr	r3, [sp, #8]
 800128e:	e7d9      	b.n	8001244 <BSP_LED_Init+0x1c>
 8001290:	40023800 	.word	0x40023800
 8001294:	200000c0 	.word	0x200000c0
 8001298:	08008984 	.word	0x08008984

0800129c <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <BSP_LED_On+0x14>)
 800129e:	4905      	ldr	r1, [pc, #20]	; (80012b4 <BSP_LED_On+0x18>)
 80012a0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80012a4:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 80012a8:	6858      	ldr	r0, [r3, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f001 bfdc 	b.w	8003268 <HAL_GPIO_WritePin>
 80012b0:	200000c0 	.word	0x200000c0
 80012b4:	08008984 	.word	0x08008984

080012b8 <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <BSP_LED_Off+0x14>)
 80012ba:	4905      	ldr	r1, [pc, #20]	; (80012d0 <BSP_LED_Off+0x18>)
 80012bc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80012c0:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 80012c4:	6858      	ldr	r0, [r3, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f001 bfce 	b.w	8003268 <HAL_GPIO_WritePin>
 80012cc:	200000c0 	.word	0x200000c0
 80012d0:	08008984 	.word	0x08008984

080012d4 <BSP_PB_Init>:
{
 80012d4:	b510      	push	{r4, lr}
 80012d6:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80012d8:	b950      	cbnz	r0, 80012f0 <BSP_PB_Init+0x1c>
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <BSP_PB_Init+0x6c>)
 80012dc:	9000      	str	r0, [sp, #0]
 80012de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012e0:	f042 0201 	orr.w	r2, r2, #1
 80012e4:	631a      	str	r2, [r3, #48]	; 0x30
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	9b00      	ldr	r3, [sp, #0]
  if (ButtonMode == BUTTON_MODE_GPIO)
 80012f0:	b971      	cbnz	r1, 8001310 <BSP_PB_Init+0x3c>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80012f2:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f4:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012f8:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80012fa:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <BSP_PB_Init+0x70>)
 8001300:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001304:	a901      	add	r1, sp, #4
 8001306:	68c0      	ldr	r0, [r0, #12]
 8001308:	f001 fe20 	bl	8002f4c <HAL_GPIO_Init>
}
 800130c:	b006      	add	sp, #24
 800130e:	bd10      	pop	{r4, pc}
  if (ButtonMode == BUTTON_MODE_EXTI)
 8001310:	2901      	cmp	r1, #1
 8001312:	d1fb      	bne.n	800130c <BSP_PB_Init+0x38>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8001314:	2400      	movs	r4, #0
 8001316:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800131a:	e9cd 3402 	strd	r3, r4, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <BSP_PB_Init+0x70>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001320:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001322:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001326:	a901      	add	r1, sp, #4
 8001328:	68c0      	ldr	r0, [r0, #12]
 800132a:	f001 fe0f 	bl	8002f4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800132e:	4622      	mov	r2, r4
 8001330:	210f      	movs	r1, #15
 8001332:	2006      	movs	r0, #6
 8001334:	f001 fb92 	bl	8002a5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001338:	2006      	movs	r0, #6
 800133a:	f001 fbc1 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
}
 800133e:	e7e5      	b.n	800130c <BSP_PB_Init+0x38>
 8001340:	40023800 	.word	0x40023800
 8001344:	200000c0 	.word	0x200000c0

08001348 <BSP_PB_GetState>:
{
 8001348:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800134a:	4b04      	ldr	r3, [pc, #16]	; (800135c <BSP_PB_GetState+0x14>)
 800134c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001350:	2101      	movs	r1, #1
 8001352:	68c0      	ldr	r0, [r0, #12]
 8001354:	f001 ff82 	bl	800325c <HAL_GPIO_ReadPin>
}
 8001358:	bd08      	pop	{r3, pc}
 800135a:	bf00      	nop
 800135c:	200000c0 	.word	0x200000c0

08001360 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001360:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001362:	4b2a      	ldr	r3, [pc, #168]	; (800140c <LCD_IO_Init+0xac>)
 8001364:	f893 5058 	ldrb.w	r5, [r3, #88]	; 0x58
{
 8001368:	b089      	sub	sp, #36	; 0x24
  if(Is_LCD_IO_Initialized == 0)
 800136a:	2d00      	cmp	r5, #0
 800136c:	d14b      	bne.n	8001406 <LCD_IO_Init+0xa6>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800136e:	4c28      	ldr	r4, [pc, #160]	; (8001410 <LCD_IO_Init+0xb0>)
 8001370:	9500      	str	r5, [sp, #0]
    Is_LCD_IO_Initialized = 1; 
 8001372:	2601      	movs	r6, #1
 8001374:	f883 6058 	strb.w	r6, [r3, #88]	; 0x58
    LCD_WRX_GPIO_CLK_ENABLE();
 8001378:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800137a:	4826      	ldr	r0, [pc, #152]	; (8001414 <LCD_IO_Init+0xb4>)
    LCD_WRX_GPIO_CLK_ENABLE();
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	6323      	str	r3, [r4, #48]	; 0x30
 8001382:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001384:	9505      	str	r5, [sp, #20]
    LCD_WRX_GPIO_CLK_ENABLE();
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800138c:	2702      	movs	r7, #2
    LCD_WRX_GPIO_CLK_ENABLE();
 800138e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001390:	9706      	str	r7, [sp, #24]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001396:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001398:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800139c:	f001 fdd6 	bl	8002f4c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80013a0:	9501      	str	r5, [sp, #4]
 80013a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80013a4:	481b      	ldr	r0, [pc, #108]	; (8001414 <LCD_IO_Init+0xb4>)
    LCD_RDX_GPIO_CLK_ENABLE();
 80013a6:	f043 0308 	orr.w	r3, r3, #8
 80013aa:	6323      	str	r3, [r4, #48]	; 0x30
 80013ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80013b6:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80013b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013bc:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013c0:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80013c4:	f001 fdc2 	bl	8002f4c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80013c8:	9502      	str	r5, [sp, #8]
 80013ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80013cc:	4812      	ldr	r0, [pc, #72]	; (8001418 <LCD_IO_Init+0xb8>)
    LCD_NCS_GPIO_CLK_ENABLE();
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6323      	str	r3, [r4, #48]	; 0x30
 80013d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013d6:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80013da:	2404      	movs	r4, #4
    LCD_NCS_GPIO_CLK_ENABLE();
 80013dc:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80013de:	a903      	add	r1, sp, #12
    LCD_NCS_GPIO_CLK_ENABLE();
 80013e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013e2:	e9cd 4603 	strd	r4, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013e6:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80013ea:	f001 fdaf 	bl	8002f4c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80013ee:	480a      	ldr	r0, [pc, #40]	; (8001418 <LCD_IO_Init+0xb8>)
 80013f0:	462a      	mov	r2, r5
 80013f2:	4621      	mov	r1, r4
 80013f4:	f001 ff38 	bl	8003268 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80013f8:	4807      	ldr	r0, [pc, #28]	; (8001418 <LCD_IO_Init+0xb8>)
 80013fa:	4632      	mov	r2, r6
 80013fc:	4621      	mov	r1, r4
 80013fe:	f001 ff33 	bl	8003268 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001402:	f7ff fe0f 	bl	8001024 <SPIx_Init>
  }
}
 8001406:	b009      	add	sp, #36	; 0x24
 8001408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800140a:	bf00      	nop
 800140c:	200002a4 	.word	0x200002a4
 8001410:	40023800 	.word	0x40023800
 8001414:	40020c00 	.word	0x40020c00
 8001418:	40020800 	.word	0x40020800

0800141c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800141c:	b538      	push	{r3, r4, r5, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800141e:	4d0b      	ldr	r5, [pc, #44]	; (800144c <LCD_IO_WriteData+0x30>)
{
 8001420:	4604      	mov	r4, r0
  LCD_WRX_HIGH();
 8001422:	2201      	movs	r2, #1
 8001424:	480a      	ldr	r0, [pc, #40]	; (8001450 <LCD_IO_WriteData+0x34>)
 8001426:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800142a:	f001 ff1d 	bl	8003268 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 800142e:	2200      	movs	r2, #0
 8001430:	2104      	movs	r1, #4
 8001432:	4628      	mov	r0, r5
 8001434:	f001 ff18 	bl	8003268 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001438:	4620      	mov	r0, r4
 800143a:	f7ff fedd 	bl	80011f8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800143e:	4628      	mov	r0, r5
 8001440:	2201      	movs	r2, #1
}
 8001442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 8001446:	2104      	movs	r1, #4
 8001448:	f001 bf0e 	b.w	8003268 <HAL_GPIO_WritePin>
 800144c:	40020800 	.word	0x40020800
 8001450:	40020c00 	.word	0x40020c00

08001454 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001454:	b538      	push	{r3, r4, r5, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001456:	4d0b      	ldr	r5, [pc, #44]	; (8001484 <LCD_IO_WriteReg+0x30>)
{
 8001458:	4604      	mov	r4, r0
  LCD_WRX_LOW();
 800145a:	2200      	movs	r2, #0
 800145c:	480a      	ldr	r0, [pc, #40]	; (8001488 <LCD_IO_WriteReg+0x34>)
 800145e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001462:	f001 ff01 	bl	8003268 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 8001466:	2200      	movs	r2, #0
 8001468:	2104      	movs	r1, #4
 800146a:	4628      	mov	r0, r5
 800146c:	f001 fefc 	bl	8003268 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff fec1 	bl	80011f8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001476:	4628      	mov	r0, r5
 8001478:	2201      	movs	r2, #1
}
 800147a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 800147e:	2104      	movs	r1, #4
 8001480:	f001 bef2 	b.w	8003268 <HAL_GPIO_WritePin>
 8001484:	40020800 	.word	0x40020800
 8001488:	40020c00 	.word	0x40020c00

0800148c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800148c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800148e:	4605      	mov	r5, r0
 8001490:	460c      	mov	r4, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001492:	4815      	ldr	r0, [pc, #84]	; (80014e8 <LCD_IO_ReadData+0x5c>)
 8001494:	2200      	movs	r2, #0
 8001496:	2104      	movs	r1, #4
 8001498:	f001 fee6 	bl	8003268 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a2:	4812      	ldr	r0, [pc, #72]	; (80014ec <LCD_IO_ReadData+0x60>)
 80014a4:	f001 fee0 	bl	8003268 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80014a8:	4628      	mov	r0, r5
 80014aa:	f7ff fea5 	bl	80011f8 <SPIx_Write>
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <LCD_IO_ReadData+0x64>)
 80014b0:	4810      	ldr	r0, [pc, #64]	; (80014f4 <LCD_IO_ReadData+0x68>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4622      	mov	r2, r4
 80014b6:	a901      	add	r1, sp, #4
 80014b8:	f003 fbd5 	bl	8004c66 <HAL_SPI_Receive>
  if(status != HAL_OK)
 80014bc:	b120      	cbz	r0, 80014c8 <LCD_IO_ReadData+0x3c>
  HAL_SPI_DeInit(&SpiHandle);
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <LCD_IO_ReadData+0x68>)
 80014c0:	f003 f9b7 	bl	8004832 <HAL_SPI_DeInit>
  SPIx_Init();
 80014c4:	f7ff fdae 	bl	8001024 <SPIx_Init>
  
  readvalue = SPIx_Read(ReadSize);

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80014c8:	4808      	ldr	r0, [pc, #32]	; (80014ec <LCD_IO_ReadData+0x60>)
  return readvalue;
 80014ca:	9c01      	ldr	r4, [sp, #4]
  LCD_WRX_HIGH();
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d2:	f001 fec9 	bl	8003268 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80014d6:	4804      	ldr	r0, [pc, #16]	; (80014e8 <LCD_IO_ReadData+0x5c>)
 80014d8:	2201      	movs	r2, #1
 80014da:	2104      	movs	r1, #4
 80014dc:	f001 fec4 	bl	8003268 <HAL_GPIO_WritePin>
  
  return readvalue;
}
 80014e0:	4620      	mov	r0, r4
 80014e2:	b003      	add	sp, #12
 80014e4:	bd30      	pop	{r4, r5, pc}
 80014e6:	bf00      	nop
 80014e8:	40020800 	.word	0x40020800
 80014ec:	40020c00 	.word	0x40020c00
 80014f0:	200000c0 	.word	0x200000c0
 80014f4:	200002a4 	.word	0x200002a4

080014f8 <LCD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80014f8:	f001 ba8a 	b.w	8002a10 <HAL_Delay>

080014fc <IOE_Init>:
/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
  I2Cx_Init();
 80014fc:	f7ff bdfe 	b.w	80010fc <I2Cx_Init>

08001500 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8001500:	b510      	push	{r4, lr}
 8001502:	b086      	sub	sp, #24
  STMPE811_INT_CLK_ENABLE();
 8001504:	2400      	movs	r4, #0
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <IOE_ITConfig+0x4c>)
 8001508:	9400      	str	r4, [sp, #0]
 800150a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800150c:	4810      	ldr	r0, [pc, #64]	; (8001550 <IOE_ITConfig+0x50>)
  STMPE811_INT_CLK_ENABLE();
 800150e:	f042 0201 	orr.w	r2, r2, #1
 8001512:	631a      	str	r2, [r3, #48]	; 0x30
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 800151e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001522:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8001524:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001526:	e9cd 3403 	strd	r3, r4, [sp, #12]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800152a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 800152c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001530:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8001532:	f001 fd0b 	bl	8002f4c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8001536:	4622      	mov	r2, r4
 8001538:	210f      	movs	r1, #15
 800153a:	2028      	movs	r0, #40	; 0x28
 800153c:	f001 fa8e 	bl	8002a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8001540:	2028      	movs	r0, #40	; 0x28
 8001542:	f001 fabd 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
  I2Cx_ITConfig();
}
 8001546:	b006      	add	sp, #24
 8001548:	bd10      	pop	{r4, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	40020000 	.word	0x40020000

08001554 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001554:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <IOE_Write+0x2c>)
 8001558:	f88d 2017 	strb.w	r2, [sp, #23]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	9302      	str	r3, [sp, #8]
 8001560:	f10d 0217 	add.w	r2, sp, #23
 8001564:	2301      	movs	r3, #1
 8001566:	9200      	str	r2, [sp, #0]
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	460a      	mov	r2, r1
 800156c:	4601      	mov	r1, r0
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <IOE_Write+0x30>)
 8001570:	f002 f92c 	bl	80037cc <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8001574:	b108      	cbz	r0, 800157a <IOE_Write+0x26>
    I2Cx_Error();
 8001576:	f7ff fe35 	bl	80011e4 <I2Cx_Error>
  I2Cx_WriteData(Addr, Reg, Value);
}
 800157a:	b007      	add	sp, #28
 800157c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001580:	200000c0 	.word	0x200000c0
 8001584:	20000508 	.word	0x20000508

08001588 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8001588:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <IOE_Read+0x34>)
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	9302      	str	r3, [sp, #8]
{
 8001596:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001598:	2301      	movs	r3, #1
 800159a:	f10d 0117 	add.w	r1, sp, #23
 800159e:	9100      	str	r1, [sp, #0]
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	4601      	mov	r1, r0
 80015a4:	4806      	ldr	r0, [pc, #24]	; (80015c0 <IOE_Read+0x38>)
 80015a6:	f002 f9a1 	bl	80038ec <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80015aa:	b108      	cbz	r0, 80015b0 <IOE_Read+0x28>
    I2Cx_Error();
 80015ac:	f7ff fe1a 	bl	80011e4 <I2Cx_Error>
  return I2Cx_ReadData(Addr, Reg);
}
 80015b0:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80015b4:	b007      	add	sp, #28
 80015b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80015ba:	bf00      	nop
 80015bc:	200000c0 	.word	0x200000c0
 80015c0:	20000508 	.word	0x20000508

080015c4 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80015c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80015c6:	4c09      	ldr	r4, [pc, #36]	; (80015ec <IOE_ReadMultiple+0x28>)
 80015c8:	6924      	ldr	r4, [r4, #16]
 80015ca:	9200      	str	r2, [sp, #0]
 80015cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80015d0:	460a      	mov	r2, r1
 80015d2:	2301      	movs	r3, #1
 80015d4:	4601      	mov	r1, r0
 80015d6:	4806      	ldr	r0, [pc, #24]	; (80015f0 <IOE_ReadMultiple+0x2c>)
 80015d8:	f002 f988 	bl	80038ec <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 80015dc:	b110      	cbz	r0, 80015e4 <IOE_ReadMultiple+0x20>
    I2Cx_Error();
 80015de:	f7ff fe01 	bl	80011e4 <I2Cx_Error>
    return 1;
 80015e2:	2001      	movs	r0, #1
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
}
 80015e4:	b280      	uxth	r0, r0
 80015e6:	b004      	add	sp, #16
 80015e8:	bd10      	pop	{r4, pc}
 80015ea:	bf00      	nop
 80015ec:	200000c0 	.word	0x200000c0
 80015f0:	20000508 	.word	0x20000508

080015f4 <IOE_Delay>:
 80015f4:	f001 ba0c 	b.w	8002a10 <HAL_Delay>

080015f8 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 80015f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80015fc:	4c17      	ldr	r4, [pc, #92]	; (800165c <GYRO_IO_Init+0x64>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80015fe:	4818      	ldr	r0, [pc, #96]	; (8001660 <GYRO_IO_Init+0x68>)
  GYRO_CS_GPIO_CLK_ENABLE();  
 8001600:	2500      	movs	r5, #0
 8001602:	9501      	str	r5, [sp, #4]
 8001604:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	6323      	str	r3, [r4, #48]	; 0x30
 800160c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800160e:	f003 0304 	and.w	r3, r3, #4
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2701      	movs	r7, #1
 8001614:	2602      	movs	r6, #2
  GYRO_CS_GPIO_CLK_ENABLE();  
 8001616:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001618:	a903      	add	r1, sp, #12
  GYRO_CS_GPIO_CLK_ENABLE();  
 800161a:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	e9cd 6703 	strd	r6, r7, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001620:	e9cd 5705 	strd	r5, r7, [sp, #20]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001624:	f001 fc92 	bl	8002f4c <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8001628:	463a      	mov	r2, r7
 800162a:	4631      	mov	r1, r6
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <GYRO_IO_Init+0x68>)
 800162e:	f001 fe1b 	bl	8003268 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8001632:	9502      	str	r5, [sp, #8]
 8001634:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001636:	480b      	ldr	r0, [pc, #44]	; (8001664 <GYRO_IO_Init+0x6c>)
  GYRO_INT_GPIO_CLK_ENABLE();
 8001638:	433b      	orrs	r3, r7
 800163a:	6323      	str	r3, [r4, #48]	; 0x30
 800163c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800163e:	403b      	ands	r3, r7
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001644:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8001646:	2306      	movs	r3, #6
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001648:	e9cd 3503 	strd	r3, r5, [sp, #12]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800164c:	e9cd 5605 	strd	r5, r6, [sp, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001650:	f001 fc7c 	bl	8002f4c <HAL_GPIO_Init>

  SPIx_Init();
 8001654:	f7ff fce6 	bl	8001024 <SPIx_Init>
}
 8001658:	b009      	add	sp, #36	; 0x24
 800165a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800165c:	40023800 	.word	0x40023800
 8001660:	40020800 	.word	0x40020800
 8001664:	40020000 	.word	0x40020000

08001668 <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8001668:	2a01      	cmp	r2, #1
{
 800166a:	b570      	push	{r4, r5, r6, lr}
 800166c:	460e      	mov	r6, r1
 800166e:	4605      	mov	r5, r0
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001670:	bf88      	it	hi
 8001672:	f041 0640 	orrhi.w	r6, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001676:	480c      	ldr	r0, [pc, #48]	; (80016a8 <GYRO_IO_Write+0x40>)
{
 8001678:	4614      	mov	r4, r2
  GYRO_CS_LOW();
 800167a:	2102      	movs	r1, #2
 800167c:	2200      	movs	r2, #0
 800167e:	f001 fdf3 	bl	8003268 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001682:	4630      	mov	r0, r6
 8001684:	f7ff fd1a 	bl	80010bc <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001688:	442c      	add	r4, r5
 800168a:	42a5      	cmp	r5, r4
 800168c:	d106      	bne.n	800169c <GYRO_IO_Write+0x34>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}
 800168e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <GYRO_IO_Write+0x40>)
 8001694:	2201      	movs	r2, #1
 8001696:	2102      	movs	r1, #2
 8001698:	f001 bde6 	b.w	8003268 <HAL_GPIO_WritePin>
    SPIx_WriteRead(*pBuffer);
 800169c:	f815 0b01 	ldrb.w	r0, [r5], #1
 80016a0:	f7ff fd0c 	bl	80010bc <SPIx_WriteRead>
    pBuffer++;
 80016a4:	e7f1      	b.n	800168a <GYRO_IO_Write+0x22>
 80016a6:	bf00      	nop
 80016a8:	40020800 	.word	0x40020800

080016ac <GYRO_IO_Read>:
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 80016ac:	2a01      	cmp	r2, #1
{  
 80016ae:	b570      	push	{r4, r5, r6, lr}
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80016b0:	bf8c      	ite	hi
 80016b2:	f041 04c0 	orrhi.w	r4, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80016b6:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
{  
 80016ba:	4606      	mov	r6, r0
 80016bc:	4615      	mov	r5, r2
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80016be:	480c      	ldr	r0, [pc, #48]	; (80016f0 <GYRO_IO_Read+0x44>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	2102      	movs	r1, #2
 80016c4:	f001 fdd0 	bl	8003268 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7ff fcf7 	bl	80010bc <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80016ce:	4435      	add	r5, r6
 80016d0:	42ae      	cmp	r6, r5
 80016d2:	d106      	bne.n	80016e2 <GYRO_IO_Read+0x36>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}  
 80016d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <GYRO_IO_Read+0x44>)
 80016da:	2201      	movs	r2, #1
 80016dc:	2102      	movs	r1, #2
 80016de:	f001 bdc3 	b.w	8003268 <HAL_GPIO_WritePin>
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80016e2:	2000      	movs	r0, #0
 80016e4:	f7ff fcea 	bl	80010bc <SPIx_WriteRead>
 80016e8:	f806 0b01 	strb.w	r0, [r6], #1
    pBuffer++;
 80016ec:	e7f0      	b.n	80016d0 <GYRO_IO_Read+0x24>
 80016ee:	bf00      	nop
 80016f0:	40020800 	.word	0x40020800

080016f4 <BSP_GYRO_Init>:
/**
  * @brief  Set Gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 80016f4:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure={0,0};

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80016f6:	4c0e      	ldr	r4, [pc, #56]	; (8001730 <BSP_GYRO_Init+0x3c>)
 80016f8:	68a3      	ldr	r3, [r4, #8]
 80016fa:	4798      	blx	r3
 80016fc:	28d4      	cmp	r0, #212	; 0xd4
 80016fe:	4625      	mov	r5, r4
 8001700:	d10f      	bne.n	8001722 <BSP_GYRO_Init+0x2e>
  {	
    /* Initialize the Gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8001702:	4c0c      	ldr	r4, [pc, #48]	; (8001734 <BSP_GYRO_Init+0x40>)

    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                         L3GD20_InitStructure.Full_Scale) << 8);
    
    /* Configure the Gyroscope main parameters */	 
    GyroscopeDrv->Init(ctrl);
 8001704:	682b      	ldr	r3, [r5, #0]
    GyroscopeDrv = &L3gd20Drv;
 8001706:	6025      	str	r5, [r4, #0]
    GyroscopeDrv->Init(ctrl);
 8001708:	f241 003f 	movw	r0, #4159	; 0x103f
 800170c:	4798      	blx	r3

    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));

    /* Configure the Gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 800170e:	6823      	ldr	r3, [r4, #0]
 8001710:	2000      	movs	r0, #0
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8001716:	6823      	ldr	r3, [r4, #0]
 8001718:	2010      	movs	r0, #16
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	4798      	blx	r3

    ret = GYRO_OK;
 800171e:	2000      	movs	r0, #0
  else
  {
    ret = GYRO_ERROR;
  }
  return ret;
}
 8001720:	bd38      	pop	{r3, r4, r5, pc}
  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8001722:	68a3      	ldr	r3, [r4, #8]
 8001724:	4798      	blx	r3
 8001726:	28d5      	cmp	r0, #213	; 0xd5
 8001728:	d0eb      	beq.n	8001702 <BSP_GYRO_Init+0xe>
    ret = GYRO_ERROR;
 800172a:	2001      	movs	r0, #1
 800172c:	e7f8      	b.n	8001720 <BSP_GYRO_Init+0x2c>
 800172e:	bf00      	nop
 8001730:	20000038 	.word	0x20000038
 8001734:	20000300 	.word	0x20000300

08001738 <BSP_GYRO_Reset>:
/**
  * @brief  Reboot memory content of Gyroscope.
  */
void BSP_GYRO_Reset(void)
{
  if(GyroscopeDrv->Reset != NULL)
 8001738:	4b02      	ldr	r3, [pc, #8]	; (8001744 <BSP_GYRO_Reset+0xc>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	b103      	cbz	r3, 8001742 <BSP_GYRO_Reset+0xa>
  {
    GyroscopeDrv->Reset();
 8001740:	4718      	bx	r3
  }
}
 8001742:	4770      	bx	lr
 8001744:	20000300 	.word	0x20000300

08001748 <BSP_GYRO_GetXYZ>:
  * @brief  Gets XYZ angular acceleration/
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 8001748:	4b02      	ldr	r3, [pc, #8]	; (8001754 <BSP_GYRO_GetXYZ+0xc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	b103      	cbz	r3, 8001752 <BSP_GYRO_GetXYZ+0xa>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8001750:	4718      	bx	r3
  }
}
 8001752:	4770      	bx	lr
 8001754:	20000300 	.word	0x20000300

08001758 <ConvertLineToARGB8888>:
  * @param  pDst: output color
  * @param  xSize: buffer width
  * @param  ColorMode: input color mode   
  */
static void ConvertLineToARGB8888(void * pSrc, void * pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8001758:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  /* Configure the DMA2D Mode, Color Mode and output offset */
  Dma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 800175c:	4c16      	ldr	r4, [pc, #88]	; (80017b8 <ConvertLineToARGB8888+0x60>)
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800175e:	2500      	movs	r5, #0
{    
 8001760:	4690      	mov	r8, r2
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001762:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001766:	e9c4 2501 	strd	r2, r5, [r4, #4]
  
  /* Foreground Configuration */
  Dma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  Dma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
  Dma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
  Dma2dHandler.LayerCfg[1].InputOffset = 0;
 800176a:	e9c4 530a 	strd	r5, r3, [r4, #40]	; 0x28
{    
 800176e:	4606      	mov	r6, r0
  
  Dma2dHandler.Instance = DMA2D; 
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <ConvertLineToARGB8888+0x64>)
  Dma2dHandler.Init.OutputOffset = 0;     
 8001772:	60e5      	str	r5, [r4, #12]
  Dma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8001774:	22ff      	movs	r2, #255	; 0xff
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001776:	4620      	mov	r0, r4
{    
 8001778:	460f      	mov	r7, r1
  Dma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800177a:	6325      	str	r5, [r4, #48]	; 0x30
  Dma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 800177c:	6362      	str	r2, [r4, #52]	; 0x34
  Dma2dHandler.Instance = DMA2D; 
 800177e:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001780:	f001 fad9 	bl	8002d36 <HAL_DMA2D_Init>
 8001784:	b9a0      	cbnz	r0, 80017b0 <ConvertLineToARGB8888+0x58>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, 1) == HAL_OK) 
 8001786:	2101      	movs	r1, #1
 8001788:	4620      	mov	r0, r4
 800178a:	f001 fb9b 	bl	8002ec4 <HAL_DMA2D_ConfigLayer>
 800178e:	b978      	cbnz	r0, 80017b0 <ConvertLineToARGB8888+0x58>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8001790:	2301      	movs	r3, #1
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	463a      	mov	r2, r7
 8001796:	4643      	mov	r3, r8
 8001798:	4631      	mov	r1, r6
 800179a:	4620      	mov	r0, r4
 800179c:	f001 faf7 	bl	8002d8e <HAL_DMA2D_Start>
 80017a0:	b930      	cbnz	r0, 80017b0 <ConvertLineToARGB8888+0x58>
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80017a2:	210a      	movs	r1, #10
 80017a4:	4620      	mov	r0, r4
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
      }
    }
  } 
}
 80017a6:	b002      	add	sp, #8
 80017a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80017ac:	f001 bb09 	b.w	8002dc2 <HAL_DMA2D_PollForTransfer>
}
 80017b0:	b002      	add	sp, #8
 80017b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017b6:	bf00      	nop
 80017b8:	20000304 	.word	0x20000304
 80017bc:	4002b000 	.word	0x4002b000

080017c0 <FillBuffer>:
{
 80017c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80017c4:	4c15      	ldr	r4, [pc, #84]	; (800181c <FillBuffer+0x5c>)
{
 80017c6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80017ca:	4616      	mov	r6, r2
 80017cc:	461f      	mov	r7, r3
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80017ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017d2:	2300      	movs	r3, #0
 80017d4:	e9c4 2301 	strd	r2, r3, [r4, #4]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80017d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80017da:	60e3      	str	r3, [r4, #12]
{
 80017dc:	4680      	mov	r8, r0
  Dma2dHandler.Instance = DMA2D; 
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <FillBuffer+0x60>)
 80017e0:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80017e2:	4620      	mov	r0, r4
{
 80017e4:	460d      	mov	r5, r1
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80017e6:	f001 faa6 	bl	8002d36 <HAL_DMA2D_Init>
 80017ea:	b998      	cbnz	r0, 8001814 <FillBuffer+0x54>
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80017ec:	4641      	mov	r1, r8
 80017ee:	4620      	mov	r0, r4
 80017f0:	f001 fb68 	bl	8002ec4 <HAL_DMA2D_ConfigLayer>
 80017f4:	b970      	cbnz	r0, 8001814 <FillBuffer+0x54>
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80017f6:	9700      	str	r7, [sp, #0]
 80017f8:	4633      	mov	r3, r6
 80017fa:	462a      	mov	r2, r5
 80017fc:	4649      	mov	r1, r9
 80017fe:	4620      	mov	r0, r4
 8001800:	f001 fac5 	bl	8002d8e <HAL_DMA2D_Start>
 8001804:	b930      	cbnz	r0, 8001814 <FillBuffer+0x54>
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001806:	210a      	movs	r1, #10
 8001808:	4620      	mov	r0, r4
}
 800180a:	b003      	add	sp, #12
 800180c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001810:	f001 bad7 	b.w	8002dc2 <HAL_DMA2D_PollForTransfer>
}
 8001814:	b003      	add	sp, #12
 8001816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800181a:	bf00      	nop
 800181c:	20000304 	.word	0x20000304
 8001820:	4002b000 	.word	0x4002b000

08001824 <BSP_LCD_GetXSize>:
{
 8001824:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelWidth();
 8001826:	4b02      	ldr	r3, [pc, #8]	; (8001830 <BSP_LCD_GetXSize+0xc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	4798      	blx	r3
}
 800182e:	bd08      	pop	{r3, pc}
 8001830:	20000604 	.word	0x20000604

08001834 <BSP_LCD_GetYSize>:
{
 8001834:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelHeight();
 8001836:	4b02      	ldr	r3, [pc, #8]	; (8001840 <BSP_LCD_GetYSize+0xc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	4798      	blx	r3
}
 800183e:	bd08      	pop	{r3, pc}
 8001840:	20000604 	.word	0x20000604

08001844 <BSP_LCD_LayerDefaultInit>:
{     
 8001844:	b570      	push	{r4, r5, r6, lr}
 8001846:	b08e      	sub	sp, #56	; 0x38
  Layercfg.WindowX0 = 0;
 8001848:	2500      	movs	r5, #0
{     
 800184a:	460e      	mov	r6, r1
 800184c:	4604      	mov	r4, r0
  Layercfg.WindowX0 = 0;
 800184e:	9501      	str	r5, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001850:	f7ff ffe8 	bl	8001824 <BSP_LCD_GetXSize>
  Layercfg.WindowY0 = 0;
 8001854:	e9cd 0502 	strd	r0, r5, [sp, #8]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001858:	f7ff ffec 	bl	8001834 <BSP_LCD_GetYSize>
  Layercfg.Alpha = 255;
 800185c:	23ff      	movs	r3, #255	; 0xff
  Layercfg.Alpha0 = 0;
 800185e:	e9cd 3506 	strd	r3, r5, [sp, #24]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001862:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001866:	2307      	movs	r3, #7
 8001868:	e9cd 2308 	strd	r2, r3, [sp, #32]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800186c:	e9cd 0504 	strd	r0, r5, [sp, #16]
  Layercfg.Backcolor.Blue = 0;
 8001870:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  Layercfg.Backcolor.Red = 0;
 8001874:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  Layercfg.FBStartAdress = FB_Address;
 8001878:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800187a:	f7ff ffd3 	bl	8001824 <BSP_LCD_GetXSize>
 800187e:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001880:	f7ff ffd8 	bl	8001834 <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001884:	4d0b      	ldr	r5, [pc, #44]	; (80018b4 <BSP_LCD_LayerDefaultInit+0x70>)
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001886:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001888:	4622      	mov	r2, r4
 800188a:	a901      	add	r1, sp, #4
 800188c:	4628      	mov	r0, r5
 800188e:	f002 fa2b 	bl	8003ce8 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001892:	4809      	ldr	r0, [pc, #36]	; (80018b8 <BSP_LCD_LayerDefaultInit+0x74>)
 8001894:	220c      	movs	r2, #12
 8001896:	fb02 0004 	mla	r0, r2, r4, r0
 800189a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800189e:	6443      	str	r3, [r0, #68]	; 0x44
  DrawProp[LayerIndex].pFont     = &Font24;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <BSP_LCD_LayerDefaultInit+0x78>)
 80018a2:	6483      	str	r3, [r0, #72]	; 0x48
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80018a4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80018a8:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_LTDC_EnableDither(&LtdcHandler);
 80018aa:	4628      	mov	r0, r5
 80018ac:	f002 fa4a 	bl	8003d44 <HAL_LTDC_EnableDither>
}
 80018b0:	b00e      	add	sp, #56	; 0x38
 80018b2:	bd70      	pop	{r4, r5, r6, pc}
 80018b4:	2000055c 	.word	0x2000055c
 80018b8:	20000304 	.word	0x20000304
 80018bc:	200000d4 	.word	0x200000d4

080018c0 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80018c0:	4b01      	ldr	r3, [pc, #4]	; (80018c8 <BSP_LCD_SelectLayer+0x8>)
 80018c2:	6598      	str	r0, [r3, #88]	; 0x58
}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000304 	.word	0x20000304

080018cc <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 80018cc:	4a03      	ldr	r2, [pc, #12]	; (80018dc <BSP_LCD_SetTextColor+0x10>)
 80018ce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80018d0:	210c      	movs	r1, #12
 80018d2:	fb01 2303 	mla	r3, r1, r3, r2
 80018d6:	6418      	str	r0, [r3, #64]	; 0x40
}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000304 	.word	0x20000304

080018e0 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 80018e0:	4a03      	ldr	r2, [pc, #12]	; (80018f0 <BSP_LCD_SetBackColor+0x10>)
 80018e2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80018e4:	210c      	movs	r1, #12
 80018e6:	fb01 2303 	mla	r3, r1, r3, r2
 80018ea:	6458      	str	r0, [r3, #68]	; 0x44
}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000304 	.word	0x20000304

080018f4 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = pFonts;
 80018f4:	4a03      	ldr	r2, [pc, #12]	; (8001904 <BSP_LCD_SetFont+0x10>)
 80018f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80018f8:	210c      	movs	r1, #12
 80018fa:	fb01 2303 	mla	r3, r1, r3, r2
 80018fe:	6498      	str	r0, [r3, #72]	; 0x48
}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000304 	.word	0x20000304

08001908 <BSP_LCD_Clear>:
{ 
 8001908:	b530      	push	{r4, r5, lr}
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <BSP_LCD_Clear+0x38>)
 800190c:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <BSP_LCD_Clear+0x3c>)
 800190e:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8001910:	2334      	movs	r3, #52	; 0x34
 8001912:	fb03 2305 	mla	r3, r3, r5, r2
{ 
 8001916:	b085      	sub	sp, #20
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001918:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800191a:	9103      	str	r1, [sp, #12]
{ 
 800191c:	4604      	mov	r4, r0
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800191e:	f7ff ff81 	bl	8001824 <BSP_LCD_GetXSize>
 8001922:	9002      	str	r0, [sp, #8]
 8001924:	f7ff ff86 	bl	8001834 <BSP_LCD_GetYSize>
 8001928:	4603      	mov	r3, r0
 800192a:	2000      	movs	r0, #0
 800192c:	9000      	str	r0, [sp, #0]
 800192e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8001932:	9401      	str	r4, [sp, #4]
 8001934:	4628      	mov	r0, r5
 8001936:	f7ff ff43 	bl	80017c0 <FillBuffer>
}
 800193a:	b005      	add	sp, #20
 800193c:	bd30      	pop	{r4, r5, pc}
 800193e:	bf00      	nop
 8001940:	20000304 	.word	0x20000304
 8001944:	2000055c 	.word	0x2000055c

08001948 <BSP_LCD_DrawHLine>:
{
 8001948:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800194c:	4d10      	ldr	r5, [pc, #64]	; (8001990 <BSP_LCD_DrawHLine+0x48>)
{
 800194e:	9203      	str	r2, [sp, #12]
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001950:	6dab      	ldr	r3, [r5, #88]	; 0x58
{
 8001952:	460c      	mov	r4, r1
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001954:	490f      	ldr	r1, [pc, #60]	; (8001994 <BSP_LCD_DrawHLine+0x4c>)
{
 8001956:	4606      	mov	r6, r0
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001958:	2034      	movs	r0, #52	; 0x34
 800195a:	fb00 1303 	mla	r3, r0, r3, r1
 800195e:	f8d3 805c 	ldr.w	r8, [r3, #92]	; 0x5c
 8001962:	f7ff ff5f 	bl	8001824 <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001966:	6daf      	ldr	r7, [r5, #88]	; 0x58
 8001968:	9a03      	ldr	r2, [sp, #12]
 800196a:	230c      	movs	r3, #12
 800196c:	fb03 5307 	mla	r3, r3, r7, r5
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001970:	fb00 6404 	mla	r4, r0, r4, r6
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	2300      	movs	r3, #0
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	eb08 0184 	add.w	r1, r8, r4, lsl #2
 8001980:	2301      	movs	r3, #1
 8001982:	4638      	mov	r0, r7
 8001984:	f7ff ff1c 	bl	80017c0 <FillBuffer>
}
 8001988:	b004      	add	sp, #16
 800198a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800198e:	bf00      	nop
 8001990:	20000304 	.word	0x20000304
 8001994:	2000055c 	.word	0x2000055c

08001998 <BSP_LCD_DrawVLine>:
{
 8001998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800199c:	4d12      	ldr	r5, [pc, #72]	; (80019e8 <BSP_LCD_DrawVLine+0x50>)
{
 800199e:	b085      	sub	sp, #20
 80019a0:	460c      	mov	r4, r1
 80019a2:	9203      	str	r2, [sp, #12]
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80019a4:	4911      	ldr	r1, [pc, #68]	; (80019ec <BSP_LCD_DrawVLine+0x54>)
 80019a6:	6daa      	ldr	r2, [r5, #88]	; 0x58
{
 80019a8:	4680      	mov	r8, r0
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80019aa:	2034      	movs	r0, #52	; 0x34
 80019ac:	fb00 1202 	mla	r2, r0, r2, r1
 80019b0:	6dd7      	ldr	r7, [r2, #92]	; 0x5c
 80019b2:	f7ff ff37 	bl	8001824 <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80019b6:	6dae      	ldr	r6, [r5, #88]	; 0x58
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80019b8:	4681      	mov	r9, r0
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80019ba:	f7ff ff33 	bl	8001824 <BSP_LCD_GetXSize>
 80019be:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80019c0:	9b03      	ldr	r3, [sp, #12]
 80019c2:	210c      	movs	r1, #12
 80019c4:	fb01 5502 	mla	r5, r1, r2, r5
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80019c8:	fb09 8404 	mla	r4, r9, r4, r8
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80019cc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80019ce:	9201      	str	r2, [sp, #4]
 80019d0:	3801      	subs	r0, #1
 80019d2:	9000      	str	r0, [sp, #0]
 80019d4:	2201      	movs	r2, #1
 80019d6:	eb07 0184 	add.w	r1, r7, r4, lsl #2
 80019da:	4630      	mov	r0, r6
 80019dc:	f7ff fef0 	bl	80017c0 <FillBuffer>
}
 80019e0:	b005      	add	sp, #20
 80019e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019e6:	bf00      	nop
 80019e8:	20000304 	.word	0x20000304
 80019ec:	2000055c 	.word	0x2000055c

080019f0 <BSP_LCD_DrawRect>:
{
 80019f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f2:	461e      	mov	r6, r3
 80019f4:	460d      	mov	r5, r1
 80019f6:	4604      	mov	r4, r0
 80019f8:	4617      	mov	r7, r2
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80019fa:	f7ff ffa5 	bl	8001948 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 80019fe:	19a9      	adds	r1, r5, r6
 8001a00:	463a      	mov	r2, r7
 8001a02:	4620      	mov	r0, r4
 8001a04:	b289      	uxth	r1, r1
 8001a06:	f7ff ff9f 	bl	8001948 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001a0a:	4632      	mov	r2, r6
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f7ff ffc2 	bl	8001998 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001a14:	19e0      	adds	r0, r4, r7
 8001a16:	4632      	mov	r2, r6
 8001a18:	4629      	mov	r1, r5
 8001a1a:	b280      	uxth	r0, r0
}
 8001a1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001a20:	f7ff bfba 	b.w	8001998 <BSP_LCD_DrawVLine>

08001a24 <BSP_LCD_DrawBitmap>:
{
 8001a24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 8001a28:	7ad3      	ldrb	r3, [r2, #11]
 8001a2a:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8001a2e:	eb0a 2a03 	add.w	sl, sl, r3, lsl #8
 8001a32:	7b13      	ldrb	r3, [r2, #12]
{
 8001a34:	4614      	mov	r4, r2
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 8001a36:	eb0a 4a03 	add.w	sl, sl, r3, lsl #16
 8001a3a:	7b53      	ldrb	r3, [r2, #13]
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8001a3c:	7da6      	ldrb	r6, [r4, #22]
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001a3e:	7cd2      	ldrb	r2, [r2, #19]
 8001a40:	7ca7      	ldrb	r7, [r4, #18]
  bitpixel = pBmp[28] + (pBmp[29] << 8);   
 8001a42:	7f25      	ldrb	r5, [r4, #28]
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 8001a44:	eb0a 6a03 	add.w	sl, sl, r3, lsl #24
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8001a48:	7de3      	ldrb	r3, [r4, #23]
 8001a4a:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8001a4e:	7e23      	ldrb	r3, [r4, #24]
 8001a50:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 8001a54:	7e63      	ldrb	r3, [r4, #25]
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001a56:	eb07 2702 	add.w	r7, r7, r2, lsl #8
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8001a5a:	eb06 6603 	add.w	r6, r6, r3, lsl #24
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001a5e:	7d22      	ldrb	r2, [r4, #20]
  bitpixel = pBmp[28] + (pBmp[29] << 8);   
 8001a60:	7f63      	ldrb	r3, [r4, #29]
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001a62:	eb07 4702 	add.w	r7, r7, r2, lsl #16
  bitpixel = pBmp[28] + (pBmp[29] << 8);   
 8001a66:	eb05 2503 	add.w	r5, r5, r3, lsl #8
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001a6a:	7d62      	ldrb	r2, [r4, #21]
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <BSP_LCD_DrawBitmap+0xc0>)
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001a6e:	eb07 6702 	add.w	r7, r7, r2, lsl #24
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <BSP_LCD_DrawBitmap+0xc4>)
{
 8001a76:	468b      	mov	fp, r1
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001a78:	2134      	movs	r1, #52	; 0x34
 8001a7a:	fb01 2303 	mla	r3, r1, r3, r2
{
 8001a7e:	4681      	mov	r9, r0
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001a80:	f8d3 805c 	ldr.w	r8, [r3, #92]	; 0x5c
 8001a84:	f7ff fece 	bl	8001824 <BSP_LCD_GetXSize>
  if ((bitpixel/8) == 4)
 8001a88:	f1a5 0320 	sub.w	r3, r5, #32
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001a8c:	fb0b 9000 	mla	r0, fp, r0, r9
  if ((bitpixel/8) == 4)
 8001a90:	2b07      	cmp	r3, #7
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001a92:	eb08 0880 	add.w	r8, r8, r0, lsl #2
  if ((bitpixel/8) == 4)
 8001a96:	d914      	bls.n	8001ac2 <BSP_LCD_DrawBitmap+0x9e>
  else if ((bitpixel/8) == 2)
 8001a98:	f1a5 0310 	sub.w	r3, r5, #16
    inputcolormode = CM_RGB888;
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	bf34      	ite	cc
 8001aa0:	f04f 0902 	movcc.w	r9, #2
 8001aa4:	f04f 0901 	movcs.w	r9, #1
  pBmp += (index + (width * (height - 1) * (bitpixel/8)));
 8001aa8:	08ed      	lsrs	r5, r5, #3
 8001aaa:	437d      	muls	r5, r7
 8001aac:	1e72      	subs	r2, r6, #1
 8001aae:	fb05 aa02 	mla	sl, r5, r2, sl
 8001ab2:	4454      	add	r4, sl
  pBmp -= width*(bitpixel/8);
 8001ab4:	426d      	negs	r5, r5
  for(index=0; index < height; index++)
 8001ab6:	f04f 0a00 	mov.w	sl, #0
 8001aba:	45b2      	cmp	sl, r6
 8001abc:	d104      	bne.n	8001ac8 <BSP_LCD_DrawBitmap+0xa4>
}
 8001abe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inputcolormode = CM_ARGB8888;
 8001ac2:	f04f 0900 	mov.w	r9, #0
 8001ac6:	e7ef      	b.n	8001aa8 <BSP_LCD_DrawBitmap+0x84>
  ConvertLineToARGB8888((uint32_t *)pBmp, (uint32_t *)address, width, inputcolormode);
 8001ac8:	4641      	mov	r1, r8
 8001aca:	4620      	mov	r0, r4
 8001acc:	464b      	mov	r3, r9
 8001ace:	463a      	mov	r2, r7
 8001ad0:	f7ff fe42 	bl	8001758 <ConvertLineToARGB8888>
  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 8001ad4:	f7ff fea6 	bl	8001824 <BSP_LCD_GetXSize>
  pBmp -= width*(bitpixel/8);
 8001ad8:	442c      	add	r4, r5
  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 8001ada:	eb08 0880 	add.w	r8, r8, r0, lsl #2
  for(index=0; index < height; index++)
 8001ade:	f10a 0a01 	add.w	sl, sl, #1
 8001ae2:	e7ea      	b.n	8001aba <BSP_LCD_DrawBitmap+0x96>
 8001ae4:	20000304 	.word	0x20000304
 8001ae8:	2000055c 	.word	0x2000055c

08001aec <PB_BSP_LCD_DrawBitmap>:
{
 8001aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <PB_BSP_LCD_DrawBitmap+0x48>)
{
 8001af0:	4614      	mov	r4, r2
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af4:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <PB_BSP_LCD_DrawBitmap+0x4c>)
{
 8001af6:	460d      	mov	r5, r1
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001af8:	2134      	movs	r1, #52	; 0x34
 8001afa:	fb01 2303 	mla	r3, r1, r3, r2
{
 8001afe:	4607      	mov	r7, r0
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001b00:	6dde      	ldr	r6, [r3, #92]	; 0x5c
 8001b02:	f7ff fe8f 	bl	8001824 <BSP_LCD_GetXSize>
 8001b06:	fb05 7000 	mla	r0, r5, r0, r7
 8001b0a:	eb06 0580 	add.w	r5, r6, r0, lsl #2
  for(index=0; index < height; index++)
 8001b0e:	f5a4 3683 	sub.w	r6, r4, #67072	; 0x10600
 8001b12:	3e80      	subs	r6, #128	; 0x80
	  ConvertLineToARGB8888((uint32_t *)pBmp, (uint32_t *)address, width, inputcolormode);
 8001b14:	4629      	mov	r1, r5
 8001b16:	4620      	mov	r0, r4
 8001b18:	2302      	movs	r3, #2
 8001b1a:	228c      	movs	r2, #140	; 0x8c
 8001b1c:	f7ff fe1c 	bl	8001758 <ConvertLineToARGB8888>
	  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 8001b20:	f7ff fe80 	bl	8001824 <BSP_LCD_GetXSize>
	  pBmp -= width*(bitpixel/8);
 8001b24:	f5a4 748c 	sub.w	r4, r4, #280	; 0x118
  for(index=0; index < height; index++)
 8001b28:	42a6      	cmp	r6, r4
	  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 8001b2a:	eb05 0580 	add.w	r5, r5, r0, lsl #2
  for(index=0; index < height; index++)
 8001b2e:	d1f1      	bne.n	8001b14 <PB_BSP_LCD_DrawBitmap+0x28>
}
 8001b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000304 	.word	0x20000304
 8001b38:	2000055c 	.word	0x2000055c

08001b3c <BSP_LCD_FillRect>:
{
 8001b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001b40:	4d12      	ldr	r5, [pc, #72]	; (8001b8c <BSP_LCD_FillRect+0x50>)
{
 8001b42:	9303      	str	r3, [sp, #12]
 8001b44:	4616      	mov	r6, r2
 8001b46:	460c      	mov	r4, r1
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001b48:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8001b4a:	4911      	ldr	r1, [pc, #68]	; (8001b90 <BSP_LCD_FillRect+0x54>)
{
 8001b4c:	4681      	mov	r9, r0
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001b4e:	2034      	movs	r0, #52	; 0x34
 8001b50:	fb00 1202 	mla	r2, r0, r2, r1
 8001b54:	f8d2 805c 	ldr.w	r8, [r2, #92]	; 0x5c
 8001b58:	f7ff fe64 	bl	8001824 <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001b5c:	6daf      	ldr	r7, [r5, #88]	; 0x58
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001b5e:	4682      	mov	sl, r0
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001b60:	f7ff fe60 	bl	8001824 <BSP_LCD_GetXSize>
 8001b64:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8001b66:	9b03      	ldr	r3, [sp, #12]
 8001b68:	210c      	movs	r1, #12
 8001b6a:	fb01 5502 	mla	r5, r1, r2, r5
 8001b6e:	1b80      	subs	r0, r0, r6
 8001b70:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001b72:	9201      	str	r2, [sp, #4]
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001b74:	fb0a 9404 	mla	r4, sl, r4, r9
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001b78:	9000      	str	r0, [sp, #0]
 8001b7a:	4632      	mov	r2, r6
 8001b7c:	eb08 0184 	add.w	r1, r8, r4, lsl #2
 8001b80:	4638      	mov	r0, r7
 8001b82:	f7ff fe1d 	bl	80017c0 <FillBuffer>
}
 8001b86:	b004      	add	sp, #16
 8001b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b8c:	20000304 	.word	0x20000304
 8001b90:	2000055c 	.word	0x2000055c

08001b94 <BSP_LCD_ClearStringLine>:
{
 8001b94:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t colorbackup = DrawProp[ActiveLayer].TextColor;
 8001b96:	4c10      	ldr	r4, [pc, #64]	; (8001bd8 <BSP_LCD_ClearStringLine+0x44>)
 8001b98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b9a:	250c      	movs	r5, #12
 8001b9c:	fb05 4303 	mla	r3, r5, r3, r4
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001ba0:	e9d3 6210 	ldrd	r6, r2, [r3, #64]	; 0x40
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8001ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba8:	88db      	ldrh	r3, [r3, #6]
 8001baa:	fb13 f000 	smulbb	r0, r3, r0
 8001bae:	b281      	uxth	r1, r0
 8001bb0:	9101      	str	r1, [sp, #4]
 8001bb2:	f7ff fe37 	bl	8001824 <BSP_LCD_GetXSize>
 8001bb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001bb8:	9901      	ldr	r1, [sp, #4]
 8001bba:	fb05 4303 	mla	r3, r5, r3, r4
 8001bbe:	b282      	uxth	r2, r0
 8001bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	88db      	ldrh	r3, [r3, #6]
 8001bc6:	f7ff ffb9 	bl	8001b3c <BSP_LCD_FillRect>
  DrawProp[ActiveLayer].TextColor = colorbackup;
 8001bca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001bcc:	fb05 4403 	mla	r4, r5, r3, r4
 8001bd0:	6426      	str	r6, [r4, #64]	; 0x40
}
 8001bd2:	b002      	add	sp, #8
 8001bd4:	bd70      	pop	{r4, r5, r6, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000304 	.word	0x20000304

08001bdc <BSP_LCD_FillEllipse>:
  rad2 = YRadius;
 8001bdc:	ee07 3a90 	vmov	s15, r3
{
 8001be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  rad2 = YRadius;
 8001be4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  rad1 = XRadius;
 8001be8:	ee07 2a90 	vmov	s15, r2
 8001bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8001bf0:	ed2d 8b02 	vpush	{d8}
  K = (float)(rad2/rad1);
 8001bf4:	ee87 8a27 	vdiv.f32	s16, s14, s15
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 8001bf8:	f1c2 0401 	rsb	r4, r2, #1
{
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	4680      	mov	r8, r0
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 8001c00:	425d      	negs	r5, r3
 8001c02:	0064      	lsls	r4, r4, #1
 8001c04:	2600      	movs	r6, #0
    BSP_LCD_DrawHLine((Xpos-(uint16_t)(x/K)), (Ypos+y), (2*(uint16_t)(x/K) + 1));
 8001c06:	b28f      	uxth	r7, r1
 8001c08:	fa17 f185 	uxtah	r1, r7, r5
 8001c0c:	b289      	uxth	r1, r1
 8001c0e:	fa1f f985 	uxth.w	r9, r5
 8001c12:	ee07 6a90 	vmov	s15, r6
 8001c16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c1a:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c22:	ee17 3a90 	vmov	r3, s15
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	eba8 0002 	sub.w	r0, r8, r2
 8001c2c:	0052      	lsls	r2, r2, #1
 8001c2e:	3201      	adds	r2, #1
 8001c30:	b280      	uxth	r0, r0
 8001c32:	b292      	uxth	r2, r2
 8001c34:	9201      	str	r2, [sp, #4]
 8001c36:	9000      	str	r0, [sp, #0]
 8001c38:	f7ff fe86 	bl	8001948 <BSP_LCD_DrawHLine>
    BSP_LCD_DrawHLine((Xpos-(uint16_t)(x/K)), (Ypos-y), (2*(uint16_t)(x/K) + 1));
 8001c3c:	eba7 0109 	sub.w	r1, r7, r9
 8001c40:	9a01      	ldr	r2, [sp, #4]
 8001c42:	9800      	ldr	r0, [sp, #0]
 8001c44:	b289      	uxth	r1, r1
 8001c46:	f7ff fe7f 	bl	8001948 <BSP_LCD_DrawHLine>
    if (e2 <= x) 
 8001c4a:	42a6      	cmp	r6, r4
 8001c4c:	db16      	blt.n	8001c7c <BSP_LCD_FillEllipse+0xa0>
      err += ++x*2+1;
 8001c4e:	3601      	adds	r6, #1
 8001c50:	eb04 0346 	add.w	r3, r4, r6, lsl #1
      if (-y == x && e2 <= y) e2 = 0;
 8001c54:	42ee      	cmn	r6, r5
      err += ++x*2+1;
 8001c56:	f103 0301 	add.w	r3, r3, #1
      if (-y == x && e2 <= y) e2 = 0;
 8001c5a:	d102      	bne.n	8001c62 <BSP_LCD_FillEllipse+0x86>
 8001c5c:	42a5      	cmp	r5, r4
 8001c5e:	db02      	blt.n	8001c66 <BSP_LCD_FillEllipse+0x8a>
 8001c60:	2400      	movs	r4, #0
    if (e2 > y) err += ++y*2+1;
 8001c62:	42a5      	cmp	r5, r4
 8001c64:	da0c      	bge.n	8001c80 <BSP_LCD_FillEllipse+0xa4>
 8001c66:	3501      	adds	r5, #1
 8001c68:	eb03 0445 	add.w	r4, r3, r5, lsl #1
 8001c6c:	3401      	adds	r4, #1
  while (y <= 0);
 8001c6e:	2d00      	cmp	r5, #0
 8001c70:	ddca      	ble.n	8001c08 <BSP_LCD_FillEllipse+0x2c>
}
 8001c72:	b003      	add	sp, #12
 8001c74:	ecbd 8b02 	vpop	{d8}
 8001c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c7c:	4623      	mov	r3, r4
 8001c7e:	e7f0      	b.n	8001c62 <BSP_LCD_FillEllipse+0x86>
 8001c80:	461c      	mov	r4, r3
 8001c82:	e7f4      	b.n	8001c6e <BSP_LCD_FillEllipse+0x92>

08001c84 <BSP_LCD_MspInit>:
{
 8001c84:	b530      	push	{r4, r5, lr}
 8001c86:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001c88:	4b49      	ldr	r3, [pc, #292]	; (8001db0 <BSP_LCD_MspInit+0x12c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001c8a:	4d4a      	ldr	r5, [pc, #296]	; (8001db4 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001c8c:	484a      	ldr	r0, [pc, #296]	; (8001db8 <BSP_LCD_MspInit+0x134>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001c8e:	4c4b      	ldr	r4, [pc, #300]	; (8001dbc <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001c90:	2200      	movs	r2, #0
 8001c92:	9201      	str	r2, [sp, #4]
 8001c94:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001c96:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8001c9a:	6459      	str	r1, [r3, #68]	; 0x44
 8001c9c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001c9e:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 8001ca2:	9101      	str	r1, [sp, #4]
 8001ca4:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8001ca6:	9202      	str	r2, [sp, #8]
 8001ca8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001caa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001cae:	6319      	str	r1, [r3, #48]	; 0x30
 8001cb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cb2:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8001cb6:	9102      	str	r1, [sp, #8]
 8001cb8:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	9203      	str	r2, [sp, #12]
 8001cbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cbe:	f041 0101 	orr.w	r1, r1, #1
 8001cc2:	6319      	str	r1, [r3, #48]	; 0x30
 8001cc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cc6:	f001 0101 	and.w	r1, r1, #1
 8001cca:	9103      	str	r1, [sp, #12]
 8001ccc:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cce:	9204      	str	r2, [sp, #16]
 8001cd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cd2:	f041 0102 	orr.w	r1, r1, #2
 8001cd6:	6319      	str	r1, [r3, #48]	; 0x30
 8001cd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cda:	f001 0102 	and.w	r1, r1, #2
 8001cde:	9104      	str	r1, [sp, #16]
 8001ce0:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce2:	9205      	str	r2, [sp, #20]
 8001ce4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ce6:	f041 0104 	orr.w	r1, r1, #4
 8001cea:	6319      	str	r1, [r3, #48]	; 0x30
 8001cec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cee:	f001 0104 	and.w	r1, r1, #4
 8001cf2:	9105      	str	r1, [sp, #20]
 8001cf4:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf6:	9206      	str	r2, [sp, #24]
 8001cf8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cfa:	f041 0108 	orr.w	r1, r1, #8
 8001cfe:	6319      	str	r1, [r3, #48]	; 0x30
 8001d00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d02:	f001 0108 	and.w	r1, r1, #8
 8001d06:	9106      	str	r1, [sp, #24]
 8001d08:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d0a:	9207      	str	r2, [sp, #28]
 8001d0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d0e:	f041 0120 	orr.w	r1, r1, #32
 8001d12:	6319      	str	r1, [r3, #48]	; 0x30
 8001d14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d16:	f001 0120 	and.w	r1, r1, #32
 8001d1a:	9107      	str	r1, [sp, #28]
 8001d1c:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d1e:	9208      	str	r2, [sp, #32]
 8001d20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d22:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001d26:	6319      	str	r1, [r3, #48]	; 0x30
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2e:	9308      	str	r3, [sp, #32]
 8001d30:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001d32:	f641 0158 	movw	r1, #6232	; 0x1858
 8001d36:	2302      	movs	r3, #2
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001d38:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001d3c:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001d40:	230e      	movs	r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001d42:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001d44:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001d46:	f001 f901 	bl	8002f4c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001d4a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d4e:	a909      	add	r1, sp, #36	; 0x24
 8001d50:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001d52:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d54:	f001 f8fa 	bl	8002f4c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001d58:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001d5c:	a909      	add	r1, sp, #36	; 0x24
 8001d5e:	4818      	ldr	r0, [pc, #96]	; (8001dc0 <BSP_LCD_MspInit+0x13c>)
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001d60:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001d62:	f001 f8f3 	bl	8002f4c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001d66:	2348      	movs	r3, #72	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001d68:	a909      	add	r1, sp, #36	; 0x24
 8001d6a:	4816      	ldr	r0, [pc, #88]	; (8001dc4 <BSP_LCD_MspInit+0x140>)
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001d6c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001d6e:	f001 f8ed 	bl	8002f4c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001d76:	a909      	add	r1, sp, #36	; 0x24
 8001d78:	4813      	ldr	r0, [pc, #76]	; (8001dc8 <BSP_LCD_MspInit+0x144>)
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001d7a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001d7c:	f001 f8e6 	bl	8002f4c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001d80:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001d84:	a909      	add	r1, sp, #36	; 0x24
 8001d86:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001d88:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001d8a:	f001 f8df 	bl	8002f4c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d92:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001d94:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d96:	4628      	mov	r0, r5
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001d98:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d9a:	f001 f8d7 	bl	8002f4c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001d9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001da2:	a909      	add	r1, sp, #36	; 0x24
 8001da4:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001da6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001da8:	f001 f8d0 	bl	8002f4c <HAL_GPIO_Init>
}
 8001dac:	b00f      	add	sp, #60	; 0x3c
 8001dae:	bd30      	pop	{r4, r5, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020400 	.word	0x40020400
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	40021800 	.word	0x40021800
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	40020c00 	.word	0x40020c00
 8001dc8:	40021400 	.word	0x40021400

08001dcc <BSP_LCD_Init>:
{ 
 8001dcc:	b570      	push	{r4, r5, r6, lr}
    LtdcHandler.Instance = LTDC;
 8001dce:	4c21      	ldr	r4, [pc, #132]	; (8001e54 <BSP_LCD_Init+0x88>)
 8001dd0:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <BSP_LCD_Init+0x8c>)
 8001dd2:	6023      	str	r3, [r4, #0]
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001dd4:	2109      	movs	r1, #9
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e9c4 1305 	strd	r1, r3, [r4, #20]
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001ddc:	201d      	movs	r0, #29
 8001dde:	2303      	movs	r3, #3
 8001de0:	e9c4 0307 	strd	r0, r3, [r4, #28]
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001de4:	f240 150d 	movw	r5, #269	; 0x10d
 8001de8:	f240 1343 	movw	r3, #323	; 0x143
 8001dec:	e9c4 5309 	strd	r5, r3, [r4, #36]	; 0x24
    LtdcHandler.Init.TotalHeigh = 327;
 8001df0:	f240 1617 	movw	r6, #279	; 0x117
 8001df4:	f240 1347 	movw	r3, #327	; 0x147
 8001df8:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001dfc:	4e17      	ldr	r6, [pc, #92]	; (8001e5c <BSP_LCD_Init+0x90>)
 8001dfe:	2308      	movs	r3, #8
 8001e00:	65f3      	str	r3, [r6, #92]	; 0x5c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001e02:	23c0      	movs	r3, #192	; 0xc0
 8001e04:	66f3      	str	r3, [r6, #108]	; 0x6c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001e06:	2304      	movs	r3, #4
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001e08:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001e0a:	6773      	str	r3, [r6, #116]	; 0x74
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001e0c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001e10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e14:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001e18:	86a5      	strh	r5, [r4, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Red= 0;
 8001e1a:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001e1e:	f002 fa7b 	bl	8004318 <HAL_RCCEx_PeriphCLKConfig>
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001e22:	e9c4 5501 	strd	r5, r5, [r4, #4]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001e26:	e9c4 5503 	strd	r5, r5, [r4, #12]
    BSP_LCD_MspInit();
 8001e2a:	f7ff ff2b 	bl	8001c84 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f001 feee 	bl	8003c10 <HAL_LTDC_Init>
    LcdDrv = &ili9341_drv;
 8001e34:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <BSP_LCD_Init+0x94>)
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <BSP_LCD_Init+0x98>)
 8001e38:	6013      	str	r3, [r2, #0]
    LcdDrv->Init();
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4798      	blx	r3
    BSP_SDRAM_Init();
 8001e3e:	f000 fcbf 	bl	80027c0 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = pFonts;
 8001e42:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001e44:	220c      	movs	r2, #12
 8001e46:	fb02 6603 	mla	r6, r2, r3, r6
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <BSP_LCD_Init+0x9c>)
 8001e4c:	64b3      	str	r3, [r6, #72]	; 0x48
}  
 8001e4e:	4628      	mov	r0, r5
 8001e50:	bd70      	pop	{r4, r5, r6, pc}
 8001e52:	bf00      	nop
 8001e54:	2000055c 	.word	0x2000055c
 8001e58:	40016800 	.word	0x40016800
 8001e5c:	20000304 	.word	0x20000304
 8001e60:	20000604 	.word	0x20000604
 8001e64:	20000000 	.word	0x20000000
 8001e68:	200000d4 	.word	0x200000d4

08001e6c <BSP_LCD_DrawPixel>:
{
 8001e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <BSP_LCD_DrawPixel+0x24>)
{
 8001e70:	4615      	mov	r5, r2
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <BSP_LCD_DrawPixel+0x28>)
{
 8001e76:	460c      	mov	r4, r1
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001e78:	2134      	movs	r1, #52	; 0x34
 8001e7a:	fb01 2303 	mla	r3, r1, r3, r2
{
 8001e7e:	4606      	mov	r6, r0
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001e80:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8001e82:	f7ff fccf 	bl	8001824 <BSP_LCD_GetXSize>
 8001e86:	fb00 6004 	mla	r0, r0, r4, r6
 8001e8a:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 8001e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e90:	20000304 	.word	0x20000304
 8001e94:	2000055c 	.word	0x2000055c

08001e98 <BSP_LCD_DisplayChar>:
{
 8001e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001e9c:	4f2f      	ldr	r7, [pc, #188]	; (8001f5c <BSP_LCD_DisplayChar+0xc4>)
{
 8001e9e:	b087      	sub	sp, #28
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001ea0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
{
 8001ea2:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001ea6:	210c      	movs	r1, #12
 8001ea8:	fb01 7303 	mla	r3, r1, r3, r7
 8001eac:	f1a2 0520 	sub.w	r5, r2, #32
 8001eb0:	6c99      	ldr	r1, [r3, #72]	; 0x48
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001eb2:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 8001eb6:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8001eba:	680a      	ldr	r2, [r1, #0]
 8001ebc:	f10b 0607 	add.w	r6, fp, #7
 8001ec0:	10f6      	asrs	r6, r6, #3
  offset = 8 *((width + 7)/8) -  width ;
 8001ec2:	ebcb 00c6 	rsb	r0, fp, r6, lsl #3
 8001ec6:	b2c3      	uxtb	r3, r0
 8001ec8:	9300      	str	r3, [sp, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001eca:	fb0a f505 	mul.w	r5, sl, r5
      if(line & (1 << (width- j + offset- 1))) 
 8001ece:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8001ed2:	fb06 2505 	mla	r5, r6, r5, r2
  for(i = 0; i < height; i++)
 8001ed6:	f04f 0900 	mov.w	r9, #0
      if(line & (1 << (width- j + offset- 1))) 
 8001eda:	9304      	str	r3, [sp, #16]
 8001edc:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 8001ede:	45d1      	cmp	r9, sl
 8001ee0:	eb03 0109 	add.w	r1, r3, r9
 8001ee4:	b289      	uxth	r1, r1
 8001ee6:	d302      	bcc.n	8001eee <BSP_LCD_DisplayChar+0x56>
}
 8001ee8:	b007      	add	sp, #28
 8001eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8001eee:	2e01      	cmp	r6, #1
 8001ef0:	782c      	ldrb	r4, [r5, #0]
 8001ef2:	d004      	beq.n	8001efe <BSP_LCD_DisplayChar+0x66>
 8001ef4:	2e02      	cmp	r6, #2
 8001ef6:	d10e      	bne.n	8001f16 <BSP_LCD_DisplayChar+0x7e>
      line =  (pchar[0]<< 8) | pchar[1];
 8001ef8:	882c      	ldrh	r4, [r5, #0]
 8001efa:	ba64      	rev16	r4, r4
 8001efc:	b2a4      	uxth	r4, r4
      if(line & (1 << (width- j + offset- 1))) 
 8001efe:	9b04      	ldr	r3, [sp, #16]
 8001f00:	9a00      	ldr	r2, [sp, #0]
 8001f02:	4413      	add	r3, r2
    for (j = 0; j < width; j++)
 8001f04:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 8001f08:	9303      	str	r3, [sp, #12]
    for (j = 0; j < width; j++)
 8001f0a:	45c3      	cmp	fp, r8
 8001f0c:	d80a      	bhi.n	8001f24 <BSP_LCD_DisplayChar+0x8c>
  for(i = 0; i < height; i++)
 8001f0e:	f109 0901 	add.w	r9, r9, #1
 8001f12:	4435      	add	r5, r6
 8001f14:	e7e2      	b.n	8001edc <BSP_LCD_DisplayChar+0x44>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001f16:	786a      	ldrb	r2, [r5, #1]
 8001f18:	0424      	lsls	r4, r4, #16
 8001f1a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8001f1e:	78aa      	ldrb	r2, [r5, #2]
 8001f20:	4314      	orrs	r4, r2
      break;
 8001f22:	e7ec      	b.n	8001efe <BSP_LCD_DisplayChar+0x66>
      if(line & (1 << (width- j + offset- 1))) 
 8001f24:	9b01      	ldr	r3, [sp, #4]
 8001f26:	6dba      	ldr	r2, [r7, #88]	; 0x58
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001f28:	9105      	str	r1, [sp, #20]
 8001f2a:	eb03 0008 	add.w	r0, r3, r8
      if(line & (1 << (width- j + offset- 1))) 
 8001f2e:	9b03      	ldr	r3, [sp, #12]
 8001f30:	f04f 0c01 	mov.w	ip, #1
 8001f34:	eba3 0e08 	sub.w	lr, r3, r8
 8001f38:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001f3c:	ea1c 0f04 	tst.w	ip, r4
 8001f40:	f04f 0c0c 	mov.w	ip, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001f44:	fb0c 7202 	mla	r2, ip, r2, r7
 8001f48:	b280      	uxth	r0, r0
 8001f4a:	bf14      	ite	ne
 8001f4c:	6c12      	ldrne	r2, [r2, #64]	; 0x40
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001f4e:	6c52      	ldreq	r2, [r2, #68]	; 0x44
 8001f50:	f7ff ff8c 	bl	8001e6c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001f54:	f108 0801 	add.w	r8, r8, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001f58:	9905      	ldr	r1, [sp, #20]
    for (j = 0; j < width; j++)
 8001f5a:	e7d6      	b.n	8001f0a <BSP_LCD_DisplayChar+0x72>
 8001f5c:	20000304 	.word	0x20000304

08001f60 <BSP_LCD_DisplayStringAt>:
{
 8001f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f64:	4699      	mov	r9, r3
 8001f66:	4606      	mov	r6, r0
 8001f68:	4688      	mov	r8, r1
 8001f6a:	4615      	mov	r5, r2
  uint8_t  *ptr = pText;
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
 8001f70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f74:	2a00      	cmp	r2, #0
 8001f76:	d1fa      	bne.n	8001f6e <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001f78:	4f23      	ldr	r7, [pc, #140]	; (8002008 <BSP_LCD_DisplayStringAt+0xa8>)
 8001f7a:	f7ff fc53 	bl	8001824 <BSP_LCD_GetXSize>
 8001f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f80:	220c      	movs	r2, #12
 8001f82:	fb02 7303 	mla	r3, r2, r3, r7
  switch (mode)
 8001f86:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8c:	889a      	ldrh	r2, [r3, #4]
 8001f8e:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (mode)
 8001f92:	d01b      	beq.n	8001fcc <BSP_LCD_DisplayStringAt+0x6c>
 8001f94:	f1b9 0f02 	cmp.w	r9, #2
 8001f98:	d01f      	beq.n	8001fda <BSP_LCD_DisplayStringAt+0x7a>
 8001f9a:	3d01      	subs	r5, #1
  uint8_t  *ptr = pText;
 8001f9c:	f04f 0900 	mov.w	r9, #0
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001fa0:	f04f 0a0c 	mov.w	sl, #12
 8001fa4:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001fa8:	3c00      	subs	r4, #0
 8001faa:	bf18      	it	ne
 8001fac:	2401      	movne	r4, #1
 8001fae:	f7ff fc39 	bl	8001824 <BSP_LCD_GetXSize>
 8001fb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fb4:	fb0a 7303 	mla	r3, sl, r3, r7
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fba:	889b      	ldrh	r3, [r3, #4]
 8001fbc:	fb03 0019 	mls	r0, r3, r9, r0
 8001fc0:	b280      	uxth	r0, r0
 8001fc2:	4298      	cmp	r0, r3
 8001fc4:	d300      	bcc.n	8001fc8 <BSP_LCD_DisplayStringAt+0x68>
 8001fc6:	b96c      	cbnz	r4, 8001fe4 <BSP_LCD_DisplayStringAt+0x84>
}
 8001fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001fcc:	1b2c      	subs	r4, r5, r4
 8001fce:	4420      	add	r0, r4
 8001fd0:	4350      	muls	r0, r2
 8001fd2:	eb06 0050 	add.w	r0, r6, r0, lsr #1
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001fd6:	b286      	uxth	r6, r0
      break;
 8001fd8:	e7df      	b.n	8001f9a <BSP_LCD_DisplayStringAt+0x3a>
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001fda:	1b2c      	subs	r4, r5, r4
 8001fdc:	4404      	add	r4, r0
 8001fde:	fb14 6002 	smlabb	r0, r4, r2, r6
 8001fe2:	e7f8      	b.n	8001fd6 <BSP_LCD_DisplayStringAt+0x76>
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001fe4:	4630      	mov	r0, r6
 8001fe6:	782a      	ldrb	r2, [r5, #0]
 8001fe8:	4641      	mov	r1, r8
 8001fea:	f7ff ff55 	bl	8001e98 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001fee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ff0:	fb0a 7303 	mla	r3, sl, r3, r7
    i++;
 8001ff4:	f109 0901 	add.w	r9, r9, #1
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffa:	8898      	ldrh	r0, [r3, #4]
 8001ffc:	4430      	add	r0, r6
 8001ffe:	b286      	uxth	r6, r0
    i++;
 8002000:	fa1f f989 	uxth.w	r9, r9
 8002004:	e7ce      	b.n	8001fa4 <BSP_LCD_DisplayStringAt+0x44>
 8002006:	bf00      	nop
 8002008:	20000304 	.word	0x20000304

0800200c <BSP_LCD_DrawLine>:
{
 800200c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002010:	1a14      	subs	r4, r2, r0
 8002012:	2c00      	cmp	r4, #0
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002014:	eba3 0601 	sub.w	r6, r3, r1
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002018:	bfb8      	it	lt
 800201a:	4264      	neglt	r4, r4
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 800201c:	2e00      	cmp	r6, #0
 800201e:	bfb8      	it	lt
 8002020:	4276      	neglt	r6, r6
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002022:	b224      	sxth	r4, r4
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002024:	b236      	sxth	r6, r6
    xinc1 = -1;
 8002026:	4282      	cmp	r2, r0
 8002028:	bf2c      	ite	cs
 800202a:	2701      	movcs	r7, #1
 800202c:	f04f 37ff 	movcc.w	r7, #4294967295	; 0xffffffff
    yinc1 = -1;
 8002030:	428b      	cmp	r3, r1
 8002032:	bf2c      	ite	cs
 8002034:	f04f 0801 	movcs.w	r8, #1
 8002038:	f04f 38ff 	movcc.w	r8, #4294967295	; 0xffffffff
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800203c:	42b4      	cmp	r4, r6
{
 800203e:	b085      	sub	sp, #20
  x = X1;                       /* Start x off at the first pixel */
 8002040:	fa0f f980 	sxth.w	r9, r0
  y = Y1;                       /* Start y off at the first pixel */
 8002044:	fa0f fa81 	sxth.w	sl, r1
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002048:	db0f      	blt.n	800206a <BSP_LCD_DrawLine+0x5e>
    num = deltax / 2;
 800204a:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
 800204e:	9700      	str	r7, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002050:	2700      	movs	r7, #0
    num = deltax / 2;
 8002052:	106d      	asrs	r5, r5, #1
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002054:	9701      	str	r7, [sp, #4]
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <BSP_LCD_DrawLine+0xcc>)
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002058:	f04f 0b00 	mov.w	fp, #0
 800205c:	fa0f f28b 	sxth.w	r2, fp
 8002060:	4294      	cmp	r4, r2
 8002062:	da10      	bge.n	8002086 <BSP_LCD_DrawLine+0x7a>
}
 8002064:	b005      	add	sp, #20
 8002066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 800206a:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
 800206e:	4623      	mov	r3, r4
 8002070:	f8cd 8004 	str.w	r8, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002074:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
 8002078:	4634      	mov	r4, r6
 800207a:	f345 054f 	sbfx	r5, r5, #1, #16
 800207e:	461e      	mov	r6, r3
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002080:	f8cd 8000 	str.w	r8, [sp]
 8002084:	e7e7      	b.n	8002056 <BSP_LCD_DrawLine+0x4a>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002086:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002088:	f04f 0c0c 	mov.w	ip, #12
 800208c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002090:	fa1f f089 	uxth.w	r0, r9
 8002094:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002096:	fa1f f18a 	uxth.w	r1, sl
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 800209a:	4435      	add	r5, r6
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800209c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80020a0:	f7ff fee4 	bl	8001e6c <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80020a4:	b2aa      	uxth	r2, r5
 80020a6:	b22d      	sxth	r5, r5
    if (num >= den)                           /* Check if numerator >= denominator */
 80020a8:	42ac      	cmp	r4, r5
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <BSP_LCD_DrawLine+0xcc>)
 80020ac:	dc09      	bgt.n	80020c2 <BSP_LCD_DrawLine+0xb6>
      x += xinc1;                             /* Change the x as appropriate */
 80020ae:	9802      	ldr	r0, [sp, #8]
      y += yinc1;                             /* Change the y as appropriate */
 80020b0:	9903      	ldr	r1, [sp, #12]
      num -= den;                             /* Calculate the new numerator value */
 80020b2:	1b15      	subs	r5, r2, r4
      x += xinc1;                             /* Change the x as appropriate */
 80020b4:	4438      	add	r0, r7
      y += yinc1;                             /* Change the y as appropriate */
 80020b6:	4441      	add	r1, r8
      num -= den;                             /* Calculate the new numerator value */
 80020b8:	b22d      	sxth	r5, r5
      x += xinc1;                             /* Change the x as appropriate */
 80020ba:	fa0f f980 	sxth.w	r9, r0
      y += yinc1;                             /* Change the y as appropriate */
 80020be:	fa0f fa81 	sxth.w	sl, r1
    x += xinc2;                               /* Change the x as appropriate */
 80020c2:	9a00      	ldr	r2, [sp, #0]
 80020c4:	4491      	add	r9, r2
    y += yinc2;                               /* Change the y as appropriate */
 80020c6:	9a01      	ldr	r2, [sp, #4]
 80020c8:	4492      	add	sl, r2
    x += xinc2;                               /* Change the x as appropriate */
 80020ca:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                               /* Change the y as appropriate */
 80020ce:	fa0f fa8a 	sxth.w	sl, sl
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80020d2:	f10b 0b01 	add.w	fp, fp, #1
 80020d6:	e7c1      	b.n	800205c <BSP_LCD_DrawLine+0x50>
 80020d8:	20000304 	.word	0x20000304

080020dc <BSP_LCD_DrawPolygon>:
  if(PointCount < 2)
 80020dc:	2901      	cmp	r1, #1
{
 80020de:	b538      	push	{r3, r4, r5, lr}
 80020e0:	460d      	mov	r5, r1
  if(PointCount < 2)
 80020e2:	d911      	bls.n	8002108 <BSP_LCD_DrawPolygon+0x2c>
  BSP_LCD_DrawLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 80020e4:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 80020e8:	3a01      	subs	r2, #1
 80020ea:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80020ee:	4604      	mov	r4, r0
 80020f0:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 80020f4:	8841      	ldrh	r1, [r0, #2]
 80020f6:	885b      	ldrh	r3, [r3, #2]
 80020f8:	f834 0b04 	ldrh.w	r0, [r4], #4
  while(--PointCount)
 80020fc:	3d01      	subs	r5, #1
 80020fe:	b2ad      	uxth	r5, r5
    BSP_LCD_DrawLine(x, y, Points->X, Points->Y);
 8002100:	f7ff ff84 	bl	800200c <BSP_LCD_DrawLine>
  while(--PointCount)
 8002104:	3404      	adds	r4, #4
 8002106:	b905      	cbnz	r5, 800210a <BSP_LCD_DrawPolygon+0x2e>
}
 8002108:	bd38      	pop	{r3, r4, r5, pc}
    BSP_LCD_DrawLine(x, y, Points->X, Points->Y);
 800210a:	f834 3c02 	ldrh.w	r3, [r4, #-2]
 800210e:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8002112:	f834 1c06 	ldrh.w	r1, [r4, #-6]
 8002116:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 800211a:	e7ef      	b.n	80020fc <BSP_LCD_DrawPolygon+0x20>

0800211c <BSP_LCD_FillTriangle>:
{ 
 800211c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002120:	b087      	sub	sp, #28
 8002122:	4698      	mov	r8, r3
 8002124:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8002128:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 800212c:	1a0c      	subs	r4, r1, r0
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 800212e:	eba5 0608 	sub.w	r6, r5, r8
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002132:	2c00      	cmp	r4, #0
 8002134:	bfb8      	it	lt
 8002136:	4264      	neglt	r4, r4
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002138:	2e00      	cmp	r6, #0
 800213a:	bfb8      	it	lt
 800213c:	4276      	neglt	r6, r6
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 800213e:	b224      	sxth	r4, r4
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002140:	b236      	sxth	r6, r6
  y = Y1;                       /* Start y off at the first pixel */
 8002142:	fa0f fa88 	sxth.w	sl, r8
    xinc1 = -1;
 8002146:	4281      	cmp	r1, r0
 8002148:	bf2c      	ite	cs
 800214a:	2701      	movcs	r7, #1
 800214c:	f04f 37ff 	movcc.w	r7, #4294967295	; 0xffffffff
    yinc1 = -1;
 8002150:	4545      	cmp	r5, r8
 8002152:	bf2c      	ite	cs
 8002154:	f04f 0801 	movcs.w	r8, #1
 8002158:	f04f 38ff 	movcc.w	r8, #4294967295	; 0xffffffff
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800215c:	42b4      	cmp	r4, r6
  x = X1;                       /* Start x off at the first pixel */
 800215e:	fa0f f980 	sxth.w	r9, r0
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002162:	db0e      	blt.n	8002182 <BSP_LCD_FillTriangle+0x66>
    num = deltax / 2;
 8002164:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
 8002168:	9700      	str	r7, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800216a:	2700      	movs	r7, #0
    num = deltax / 2;
 800216c:	106d      	asrs	r5, r5, #1
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800216e:	9701      	str	r7, [sp, #4]
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002170:	f04f 0b00 	mov.w	fp, #0
 8002174:	fa0f f18b 	sxth.w	r1, fp
 8002178:	428c      	cmp	r4, r1
 800217a:	da10      	bge.n	800219e <BSP_LCD_FillTriangle+0x82>
}
 800217c:	b007      	add	sp, #28
 800217e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 8002182:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
 8002186:	4621      	mov	r1, r4
 8002188:	f8cd 8004 	str.w	r8, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800218c:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
 8002190:	4634      	mov	r4, r6
 8002192:	f345 054f 	sbfx	r5, r5, #1, #16
 8002196:	460e      	mov	r6, r1
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002198:	f8cd 8000 	str.w	r8, [sp]
 800219c:	e7e8      	b.n	8002170 <BSP_LCD_FillTriangle+0x54>
    BSP_LCD_DrawLine(x, y, X3, Y3);
 800219e:	fa1f f089 	uxth.w	r0, r9
 80021a2:	fa1f f18a 	uxth.w	r1, sl
    num += numadd;              /* Increase the numerator by the top of the fraction */
 80021a6:	4435      	add	r5, r6
    BSP_LCD_DrawLine(x, y, X3, Y3);
 80021a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80021ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80021b0:	f7ff ff2c 	bl	800200c <BSP_LCD_DrawLine>
    num += numadd;              /* Increase the numerator by the top of the fraction */
 80021b4:	fa1f fc85 	uxth.w	ip, r5
 80021b8:	b22d      	sxth	r5, r5
    if (num >= den)             /* Check if numerator >= denominator */
 80021ba:	42ac      	cmp	r4, r5
 80021bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80021c0:	dc0a      	bgt.n	80021d8 <BSP_LCD_FillTriangle+0xbc>
      x += xinc1;               /* Change the x as appropriate */
 80021c2:	9802      	ldr	r0, [sp, #8]
      y += yinc1;               /* Change the y as appropriate */
 80021c4:	9903      	ldr	r1, [sp, #12]
      num -= den;               /* Calculate the new numerator value */
 80021c6:	ebac 0504 	sub.w	r5, ip, r4
      x += xinc1;               /* Change the x as appropriate */
 80021ca:	4438      	add	r0, r7
      y += yinc1;               /* Change the y as appropriate */
 80021cc:	4441      	add	r1, r8
      num -= den;               /* Calculate the new numerator value */
 80021ce:	b22d      	sxth	r5, r5
      x += xinc1;               /* Change the x as appropriate */
 80021d0:	fa0f f980 	sxth.w	r9, r0
      y += yinc1;               /* Change the y as appropriate */
 80021d4:	fa0f fa81 	sxth.w	sl, r1
    x += xinc2;                 /* Change the x as appropriate */
 80021d8:	9900      	ldr	r1, [sp, #0]
 80021da:	4489      	add	r9, r1
    y += yinc2;                 /* Change the y as appropriate */
 80021dc:	9901      	ldr	r1, [sp, #4]
 80021de:	448a      	add	sl, r1
    x += xinc2;                 /* Change the x as appropriate */
 80021e0:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                 /* Change the y as appropriate */
 80021e4:	fa0f fa8a 	sxth.w	sl, sl
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80021e8:	f10b 0b01 	add.w	fp, fp, #1
 80021ec:	e7c2      	b.n	8002174 <BSP_LCD_FillTriangle+0x58>

080021ee <BSP_LCD_FillPolygon>:
{
 80021ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  imageleft = imageright = Points->X;
 80021f2:	f8b0 8000 	ldrh.w	r8, [r0]
  imagetop= imagebottom = Points->Y;
 80021f6:	f8b0 9002 	ldrh.w	r9, [r0, #2]
{
 80021fa:	460f      	mov	r7, r1
 80021fc:	b087      	sub	sp, #28
  imagetop= imagebottom = Points->Y;
 80021fe:	464e      	mov	r6, r9
 8002200:	4649      	mov	r1, r9
  imageleft = imageright = Points->X;
 8002202:	4644      	mov	r4, r8
 8002204:	4645      	mov	r5, r8
  for(counter = 1; counter < PointCount; counter++)
 8002206:	2301      	movs	r3, #1
 8002208:	42bb      	cmp	r3, r7
 800220a:	db2f      	blt.n	800226c <BSP_LCD_FillPolygon+0x7e>
  if(PointCount < 2)
 800220c:	2f01      	cmp	r7, #1
 800220e:	d92a      	bls.n	8002266 <BSP_LCD_FillPolygon+0x78>
  xcenter = (imageleft + imageright)/2;
 8002210:	4425      	add	r5, r4
  ycenter = (imagebottom + imagetop)/2;
 8002212:	440e      	add	r6, r1
  int16_t x = 0, y = 0, x2 = 0, y2 = 0, xcenter = 0, ycenter = 0, xfirst = 0, yfirst = 0, pixelx = 0, pixely = 0, counter = 0;
 8002214:	f04f 0b00 	mov.w	fp, #0
 8002218:	1d04      	adds	r4, r0, #4
 800221a:	f8cd b00c 	str.w	fp, [sp, #12]
 800221e:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8002222:	f3c6 064f 	ubfx	r6, r6, #1, #16
  while(--PointCount)
 8002226:	3f01      	subs	r7, #1
 8002228:	b2bf      	uxth	r7, r7
 800222a:	3404      	adds	r4, #4
 800222c:	bb9f      	cbnz	r7, 8002296 <BSP_LCD_FillPolygon+0xa8>
  BSP_LCD_FillTriangle(xfirst, x2, xcenter, yfirst, y2, ycenter);
 800222e:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8002232:	fa1f f48b 	uxth.w	r4, fp
 8002236:	464b      	mov	r3, r9
 8002238:	462a      	mov	r2, r5
 800223a:	4639      	mov	r1, r7
 800223c:	4640      	mov	r0, r8
 800223e:	e9cd 4600 	strd	r4, r6, [sp]
 8002242:	f7ff ff6b 	bl	800211c <BSP_LCD_FillTriangle>
  BSP_LCD_FillTriangle(xfirst, xcenter, x2, yfirst, ycenter, y2);
 8002246:	464b      	mov	r3, r9
 8002248:	463a      	mov	r2, r7
 800224a:	4629      	mov	r1, r5
 800224c:	4640      	mov	r0, r8
 800224e:	e9cd 6400 	strd	r6, r4, [sp]
 8002252:	f7ff ff63 	bl	800211c <BSP_LCD_FillTriangle>
  BSP_LCD_FillTriangle(xcenter, x2, xfirst, ycenter, y2, yfirst);   
 8002256:	e9cd 4900 	strd	r4, r9, [sp]
 800225a:	4633      	mov	r3, r6
 800225c:	4642      	mov	r2, r8
 800225e:	4639      	mov	r1, r7
 8002260:	4628      	mov	r0, r5
 8002262:	f7ff ff5b 	bl	800211c <BSP_LCD_FillTriangle>
}
 8002266:	b007      	add	sp, #28
 8002268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pixelx = POLY_X(counter);
 800226c:	f930 2023 	ldrsh.w	r2, [r0, r3, lsl #2]
 8002270:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
    if(pixelx < imageleft)
 8002274:	42aa      	cmp	r2, r5
      imageleft = pixelx;
 8002276:	bfb8      	it	lt
 8002278:	b295      	uxthlt	r5, r2
    if(pixelx > imageright)
 800227a:	42a2      	cmp	r2, r4
      imageright = pixelx;
 800227c:	bfc8      	it	gt
 800227e:	b294      	uxthgt	r4, r2
    pixely = POLY_Y(counter);
 8002280:	f9bc 2002 	ldrsh.w	r2, [ip, #2]
    if(pixely < imagetop)
 8002284:	428a      	cmp	r2, r1
      imagetop = pixely;
 8002286:	bfb8      	it	lt
 8002288:	b291      	uxthlt	r1, r2
    if(pixely > imagebottom)
 800228a:	3301      	adds	r3, #1
 800228c:	42b2      	cmp	r2, r6
      imagebottom = pixely;
 800228e:	bfc8      	it	gt
 8002290:	b296      	uxthgt	r6, r2
  for(counter = 1; counter < PointCount; counter++)
 8002292:	b21b      	sxth	r3, r3
 8002294:	e7b8      	b.n	8002208 <BSP_LCD_FillPolygon+0x1a>
    BSP_LCD_FillTriangle(x, x2, xcenter, y, y2, ycenter);
 8002296:	f834 ac04 	ldrh.w	sl, [r4, #-4]
 800229a:	f834 2c02 	ldrh.w	r2, [r4, #-2]
    x2 = Points->X;
 800229e:	f934 3c04 	ldrsh.w	r3, [r4, #-4]
    BSP_LCD_FillTriangle(x, x2, xcenter, y, y2, ycenter);
 80022a2:	f834 0c08 	ldrh.w	r0, [r4, #-8]
    y2 = Points->Y;    
 80022a6:	f934 bc02 	ldrsh.w	fp, [r4, #-2]
    x2 = Points->X;
 80022aa:	9303      	str	r3, [sp, #12]
    BSP_LCD_FillTriangle(x, x2, xcenter, y, y2, ycenter);
 80022ac:	4651      	mov	r1, sl
 80022ae:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 80022b2:	9200      	str	r2, [sp, #0]
 80022b4:	e9cd 6201 	strd	r6, r2, [sp, #4]
 80022b8:	462a      	mov	r2, r5
 80022ba:	9305      	str	r3, [sp, #20]
 80022bc:	9004      	str	r0, [sp, #16]
 80022be:	f7ff ff2d 	bl	800211c <BSP_LCD_FillTriangle>
    BSP_LCD_FillTriangle(x, xcenter, x2, y, ycenter, y2);
 80022c2:	9b02      	ldr	r3, [sp, #8]
 80022c4:	9804      	ldr	r0, [sp, #16]
 80022c6:	e9cd 6300 	strd	r6, r3, [sp]
 80022ca:	4652      	mov	r2, sl
 80022cc:	9b05      	ldr	r3, [sp, #20]
 80022ce:	4629      	mov	r1, r5
 80022d0:	f7ff ff24 	bl	800211c <BSP_LCD_FillTriangle>
    BSP_LCD_FillTriangle(xcenter, x2, x, ycenter, y2, y);   
 80022d4:	9b05      	ldr	r3, [sp, #20]
 80022d6:	9804      	ldr	r0, [sp, #16]
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	9b02      	ldr	r3, [sp, #8]
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	4602      	mov	r2, r0
 80022e0:	4633      	mov	r3, r6
 80022e2:	4651      	mov	r1, sl
 80022e4:	4628      	mov	r0, r5
 80022e6:	f7ff ff19 	bl	800211c <BSP_LCD_FillTriangle>
 80022ea:	e79c      	b.n	8002226 <BSP_LCD_FillPolygon+0x38>

080022ec <BSP_LCD_DrawCircle>:
{
 80022ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f0:	b087      	sub	sp, #28
 80022f2:	e9cd 0101 	strd	r0, r1, [sp, #4]
  d = 3 - (Radius << 1);
 80022f6:	0055      	lsls	r5, r2, #1
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80022f8:	4c44      	ldr	r4, [pc, #272]	; (800240c <BSP_LCD_DrawCircle+0x120>)
  d = 3 - (Radius << 1);
 80022fa:	f1c5 0503 	rsb	r5, r5, #3
  cury = Radius;
 80022fe:	4616      	mov	r6, r2
  curx = 0;
 8002300:	f04f 0800 	mov.w	r8, #0
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002304:	270c      	movs	r7, #12
 8002306:	b2b2      	uxth	r2, r6
 8002308:	9200      	str	r2, [sp, #0]
 800230a:	9900      	ldr	r1, [sp, #0]
 800230c:	9a02      	ldr	r2, [sp, #8]
 800230e:	9b01      	ldr	r3, [sp, #4]
 8002310:	1a51      	subs	r1, r2, r1
 8002312:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002314:	fa13 f388 	uxtah	r3, r3, r8
 8002318:	fb07 4202 	mla	r2, r7, r2, r4
 800231c:	b29b      	uxth	r3, r3
 800231e:	b289      	uxth	r1, r1
 8002320:	4618      	mov	r0, r3
 8002322:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002324:	9104      	str	r1, [sp, #16]
 8002326:	9305      	str	r3, [sp, #20]
 8002328:	f7ff fda0 	bl	8001e6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800232c:	9b01      	ldr	r3, [sp, #4]
 800232e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002330:	9904      	ldr	r1, [sp, #16]
 8002332:	fa1f f988 	uxth.w	r9, r8
 8002336:	eba3 0b09 	sub.w	fp, r3, r9
 800233a:	fb07 4202 	mla	r2, r7, r2, r4
 800233e:	fa1f fb8b 	uxth.w	fp, fp
 8002342:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002344:	f8cd 900c 	str.w	r9, [sp, #12]
 8002348:	4658      	mov	r0, fp
 800234a:	f7ff fd8f 	bl	8001e6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800234e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8002352:	eb03 0a02 	add.w	sl, r3, r2
 8002356:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800235a:	1a99      	subs	r1, r3, r2
 800235c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800235e:	fb07 4202 	mla	r2, r7, r2, r4
 8002362:	fa1f fa8a 	uxth.w	sl, sl
 8002366:	b289      	uxth	r1, r1
 8002368:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800236a:	9104      	str	r1, [sp, #16]
 800236c:	4650      	mov	r0, sl
 800236e:	f7ff fd7d 	bl	8001e6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002372:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002376:	eba3 0902 	sub.w	r9, r3, r2
 800237a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800237c:	9904      	ldr	r1, [sp, #16]
 800237e:	fb07 4202 	mla	r2, r7, r2, r4
 8002382:	fa1f f989 	uxth.w	r9, r9
 8002386:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002388:	4648      	mov	r0, r9
 800238a:	f7ff fd6f 	bl	8001e6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800238e:	9b00      	ldr	r3, [sp, #0]
 8002390:	9a02      	ldr	r2, [sp, #8]
 8002392:	1899      	adds	r1, r3, r2
 8002394:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002396:	9b05      	ldr	r3, [sp, #20]
 8002398:	fb07 4202 	mla	r2, r7, r2, r4
 800239c:	b289      	uxth	r1, r1
 800239e:	4618      	mov	r0, r3
 80023a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023a2:	9100      	str	r1, [sp, #0]
 80023a4:	f7ff fd62 	bl	8001e6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80023a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023aa:	9900      	ldr	r1, [sp, #0]
 80023ac:	fb07 4303 	mla	r3, r7, r3, r4
 80023b0:	4658      	mov	r0, fp
 80023b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b4:	f7ff fd5a 	bl	8001e6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80023b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80023bc:	1899      	adds	r1, r3, r2
 80023be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023c0:	fb07 4303 	mla	r3, r7, r3, r4
 80023c4:	b289      	uxth	r1, r1
 80023c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c8:	9100      	str	r1, [sp, #0]
 80023ca:	4650      	mov	r0, sl
 80023cc:	f7ff fd4e 	bl	8001e6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 80023d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023d2:	9900      	ldr	r1, [sp, #0]
 80023d4:	fb07 4303 	mla	r3, r7, r3, r4
 80023d8:	4648      	mov	r0, r9
 80023da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023dc:	f7ff fd46 	bl	8001e6c <BSP_LCD_DrawPixel>
    if (d < 0)
 80023e0:	2d00      	cmp	r5, #0
      d += (curx << 2) + 6;
 80023e2:	bfb5      	itete	lt
 80023e4:	3506      	addlt	r5, #6
      d += ((curx - cury) << 2) + 10;
 80023e6:	eba8 0306 	subge.w	r3, r8, r6
      d += (curx << 2) + 6;
 80023ea:	eb05 0588 	addlt.w	r5, r5, r8, lsl #2
      d += ((curx - cury) << 2) + 10;
 80023ee:	350a      	addge	r5, #10
      cury--;
 80023f0:	bfa8      	it	ge
 80023f2:	f106 36ff 	addge.w	r6, r6, #4294967295	; 0xffffffff
    curx++;
 80023f6:	f108 0801 	add.w	r8, r8, #1
      d += ((curx - cury) << 2) + 10;
 80023fa:	bfa8      	it	ge
 80023fc:	eb05 0583 	addge.w	r5, r5, r3, lsl #2
  while (curx <= cury)
 8002400:	4546      	cmp	r6, r8
 8002402:	d280      	bcs.n	8002306 <BSP_LCD_DrawCircle+0x1a>
}
 8002404:	b007      	add	sp, #28
 8002406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800240a:	bf00      	nop
 800240c:	20000304 	.word	0x20000304

08002410 <BSP_LCD_FillCircle>:
{
 8002410:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  d = 3 - (Radius << 1);
 8002414:	0054      	lsls	r4, r2, #1
{
 8002416:	4680      	mov	r8, r0
 8002418:	460e      	mov	r6, r1
 800241a:	4691      	mov	r9, r2
  d = 3 - (Radius << 1);
 800241c:	f1c4 0403 	rsb	r4, r4, #3
  cury = Radius;
 8002420:	4617      	mov	r7, r2
  curx = 0;
 8002422:	2500      	movs	r5, #0
    if(cury > 0) 
 8002424:	b1af      	cbz	r7, 8002452 <BSP_LCD_FillCircle+0x42>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8002426:	b2ba      	uxth	r2, r7
 8002428:	eba8 0002 	sub.w	r0, r8, r2
 800242c:	fa16 f185 	uxtah	r1, r6, r5
 8002430:	0052      	lsls	r2, r2, #1
 8002432:	b280      	uxth	r0, r0
 8002434:	b292      	uxth	r2, r2
 8002436:	b289      	uxth	r1, r1
 8002438:	fa1f fa85 	uxth.w	sl, r5
 800243c:	9201      	str	r2, [sp, #4]
 800243e:	9000      	str	r0, [sp, #0]
 8002440:	f7ff fa82 	bl	8001948 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8002444:	4651      	mov	r1, sl
 8002446:	1a71      	subs	r1, r6, r1
 8002448:	9a01      	ldr	r2, [sp, #4]
 800244a:	9800      	ldr	r0, [sp, #0]
 800244c:	b289      	uxth	r1, r1
 800244e:	f7ff fa7b 	bl	8001948 <BSP_LCD_DrawHLine>
    if(curx > 0) 
 8002452:	b1a5      	cbz	r5, 800247e <BSP_LCD_FillCircle+0x6e>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8002454:	b2aa      	uxth	r2, r5
 8002456:	b2b9      	uxth	r1, r7
 8002458:	eba8 0002 	sub.w	r0, r8, r2
 800245c:	468a      	mov	sl, r1
 800245e:	0052      	lsls	r2, r2, #1
 8002460:	1a71      	subs	r1, r6, r1
 8002462:	b280      	uxth	r0, r0
 8002464:	b292      	uxth	r2, r2
 8002466:	b289      	uxth	r1, r1
 8002468:	9201      	str	r2, [sp, #4]
 800246a:	9000      	str	r0, [sp, #0]
 800246c:	f7ff fa6c 	bl	8001948 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8002470:	eb0a 0106 	add.w	r1, sl, r6
 8002474:	9a01      	ldr	r2, [sp, #4]
 8002476:	9800      	ldr	r0, [sp, #0]
 8002478:	b289      	uxth	r1, r1
 800247a:	f7ff fa65 	bl	8001948 <BSP_LCD_DrawHLine>
    if (d < 0)
 800247e:	2c00      	cmp	r4, #0
      d += (curx << 2) + 6;
 8002480:	bfb5      	itete	lt
 8002482:	3406      	addlt	r4, #6
      d += ((curx - cury) << 2) + 10;
 8002484:	1beb      	subge	r3, r5, r7
      d += (curx << 2) + 6;
 8002486:	eb04 0485 	addlt.w	r4, r4, r5, lsl #2
      d += ((curx - cury) << 2) + 10;
 800248a:	340a      	addge	r4, #10
      cury--;
 800248c:	bfa8      	it	ge
 800248e:	f107 37ff 	addge.w	r7, r7, #4294967295	; 0xffffffff
    curx++;
 8002492:	f105 0501 	add.w	r5, r5, #1
      d += ((curx - cury) << 2) + 10;
 8002496:	bfa8      	it	ge
 8002498:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (curx <= cury)
 800249c:	42af      	cmp	r7, r5
 800249e:	d2c1      	bcs.n	8002424 <BSP_LCD_FillCircle+0x14>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80024a0:	464a      	mov	r2, r9
 80024a2:	4631      	mov	r1, r6
 80024a4:	4640      	mov	r0, r8
}
 80024a6:	b002      	add	sp, #8
 80024a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80024ac:	f7ff bf1e 	b.w	80022ec <BSP_LCD_DrawCircle>

080024b0 <BSP_LCD_DrawEllipse>:
  rad2 = YRadius;
 80024b0:	ee07 3a90 	vmov	s15, r3
{
 80024b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  rad2 = YRadius;
 80024b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  rad1 = XRadius;
 80024bc:	ee07 2a90 	vmov	s15, r2
 80024c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80024c4:	ed2d 8b02 	vpush	{d8}
  k = (float)(rad2/rad1);
 80024c8:	ee87 8a27 	vdiv.f32	s16, s14, s15
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 80024cc:	f1c2 0501 	rsb	r5, r2, #1
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 80024d0:	4f32      	ldr	r7, [pc, #200]	; (800259c <BSP_LCD_DrawEllipse+0xec>)
{
 80024d2:	b085      	sub	sp, #20
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 80024d4:	425e      	negs	r6, r3
 80024d6:	006d      	lsls	r5, r5, #1
 80024d8:	f04f 0800 	mov.w	r8, #0
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 80024dc:	fa1f f980 	uxth.w	r9, r0
 80024e0:	fa1f fa81 	uxth.w	sl, r1
 80024e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024e6:	f04f 0b0c 	mov.w	fp, #12
 80024ea:	fb0b 7202 	mla	r2, fp, r2, r7
 80024ee:	ee07 8a90 	vmov	s15, r8
 80024f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024f6:	fa1a f186 	uxtah	r1, sl, r6
 80024fa:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80024fe:	b289      	uxth	r1, r1
 8002500:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002502:	9101      	str	r1, [sp, #4]
 8002504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002508:	ee17 3a90 	vmov	r3, s15
 800250c:	b29c      	uxth	r4, r3
 800250e:	eba9 0304 	sub.w	r3, r9, r4
 8002512:	b29b      	uxth	r3, r3
 8002514:	4618      	mov	r0, r3
 8002516:	9303      	str	r3, [sp, #12]
 8002518:	f7ff fca8 	bl	8001e6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 800251c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800251e:	9901      	ldr	r1, [sp, #4]
 8002520:	fb0b 7202 	mla	r2, fp, r2, r7
 8002524:	eb09 0004 	add.w	r0, r9, r4
 8002528:	b280      	uxth	r0, r0
 800252a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800252c:	9002      	str	r0, [sp, #8]
 800252e:	f7ff fc9d 	bl	8001e6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);
 8002532:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002534:	9802      	ldr	r0, [sp, #8]
 8002536:	b2b1      	uxth	r1, r6
 8002538:	fb0b 7202 	mla	r2, fp, r2, r7
 800253c:	ebaa 0101 	sub.w	r1, sl, r1
 8002540:	b289      	uxth	r1, r1
 8002542:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002544:	9101      	str	r1, [sp, #4]
 8002546:	f7ff fc91 	bl	8001e6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);      
 800254a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800254c:	9b03      	ldr	r3, [sp, #12]
 800254e:	9901      	ldr	r1, [sp, #4]
 8002550:	fb0b 7202 	mla	r2, fp, r2, r7
 8002554:	4618      	mov	r0, r3
 8002556:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002558:	f7ff fc88 	bl	8001e6c <BSP_LCD_DrawPixel>
    if (e2 <= x) {
 800255c:	45a8      	cmp	r8, r5
 800255e:	db18      	blt.n	8002592 <BSP_LCD_DrawEllipse+0xe2>
      err += ++x*2+1;
 8002560:	f108 0801 	add.w	r8, r8, #1
 8002564:	eb05 0348 	add.w	r3, r5, r8, lsl #1
      if (-y == x && e2 <= y) e2 = 0;
 8002568:	eb18 0f06 	cmn.w	r8, r6
      err += ++x*2+1;
 800256c:	f103 0301 	add.w	r3, r3, #1
      if (-y == x && e2 <= y) e2 = 0;
 8002570:	d102      	bne.n	8002578 <BSP_LCD_DrawEllipse+0xc8>
 8002572:	42ae      	cmp	r6, r5
 8002574:	db02      	blt.n	800257c <BSP_LCD_DrawEllipse+0xcc>
 8002576:	2500      	movs	r5, #0
    if (e2 > y) err += ++y*2+1;
 8002578:	42ae      	cmp	r6, r5
 800257a:	da0c      	bge.n	8002596 <BSP_LCD_DrawEllipse+0xe6>
 800257c:	3601      	adds	r6, #1
 800257e:	eb03 0546 	add.w	r5, r3, r6, lsl #1
 8002582:	3501      	adds	r5, #1
  while (y <= 0);
 8002584:	2e00      	cmp	r6, #0
 8002586:	ddad      	ble.n	80024e4 <BSP_LCD_DrawEllipse+0x34>
}
 8002588:	b005      	add	sp, #20
 800258a:	ecbd 8b02 	vpop	{d8}
 800258e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002592:	462b      	mov	r3, r5
 8002594:	e7f0      	b.n	8002578 <BSP_LCD_DrawEllipse+0xc8>
 8002596:	461d      	mov	r5, r3
 8002598:	e7f4      	b.n	8002584 <BSP_LCD_DrawEllipse+0xd4>
 800259a:	bf00      	nop
 800259c:	20000304 	.word	0x20000304

080025a0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80025a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t tmpmrd =0;
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80025a4:	4c21      	ldr	r4, [pc, #132]	; (800262c <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80025a6:	f104 0510 	add.w	r5, r4, #16
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80025aa:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd =0;
 80025ac:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80025b0:	2708      	movs	r7, #8
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80025b2:	4621      	mov	r1, r4
{
 80025b4:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80025b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ba:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80025bc:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 80025c0:	e9c4 6802 	strd	r6, r8, [r4, #8]
  __IO uint32_t tmpmrd =0;
 80025c4:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80025c8:	f001 fff1 	bl	80045ae <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80025cc:	4630      	mov	r0, r6
 80025ce:	f000 fa1f 	bl	8002a10 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80025d2:	2302      	movs	r3, #2
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80025d4:	4621      	mov	r1, r4
 80025d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025da:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80025dc:	e9c4 3700 	strd	r3, r7, [r4]
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 4;
 80025e0:	f04f 0a04 	mov.w	sl, #4
  Command.ModeRegisterDefinition  = 0;
 80025e4:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80025e8:	f001 ffe1 	bl	80045ae <HAL_SDRAM_SendCommand>
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80025ec:	2303      	movs	r3, #3
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80025ee:	4621      	mov	r1, r4
 80025f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f4:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80025f6:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 80025fa:	e9c4 a802 	strd	sl, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80025fe:	f001 ffd6 	bl	80045ae <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002602:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002606:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = tmpmrd;
 8002608:	9b01      	ldr	r3, [sp, #4]
  Command.AutoRefreshNumber       = 1;
 800260a:	60a6      	str	r6, [r4, #8]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800260c:	4621      	mov	r1, r4
 800260e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002612:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002614:	e9c4 a700 	strd	sl, r7, [r4]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002618:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800261a:	f001 ffc8 	bl	80045ae <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800261e:	4649      	mov	r1, r9
 8002620:	4628      	mov	r0, r5
}
 8002622:	b002      	add	sp, #8
 8002624:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002628:	f001 bfd8 	b.w	80045dc <HAL_SDRAM_ProgramRefreshRate>
 800262c:	20000390 	.word	0x20000390

08002630 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002630:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002632:	4606      	mov	r6, r0
{
 8002634:	b08e      	sub	sp, #56	; 0x38
  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002636:	2800      	cmp	r0, #0
 8002638:	f000 80ad 	beq.w	8002796 <BSP_SDRAM_MspInit+0x166>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800263c:	4b57      	ldr	r3, [pc, #348]	; (800279c <BSP_SDRAM_MspInit+0x16c>)
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800263e:	4858      	ldr	r0, [pc, #352]	; (80027a0 <BSP_SDRAM_MspInit+0x170>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002640:	2400      	movs	r4, #0
 8002642:	9401      	str	r4, [sp, #4]
 8002644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	639a      	str	r2, [r3, #56]	; 0x38
 800264c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800264e:	f002 0201 	and.w	r2, r2, #1
 8002652:	9201      	str	r2, [sp, #4]
 8002654:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8002656:	9402      	str	r4, [sp, #8]
 8002658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800265a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800265e:	631a      	str	r2, [r3, #48]	; 0x30
 8002660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002662:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002666:	9202      	str	r2, [sp, #8]
 8002668:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800266a:	9403      	str	r4, [sp, #12]
 800266c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800266e:	f042 0202 	orr.w	r2, r2, #2
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
 8002674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002676:	f002 0202 	and.w	r2, r2, #2
 800267a:	9203      	str	r2, [sp, #12]
 800267c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800267e:	9404      	str	r4, [sp, #16]
 8002680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002682:	f042 0204 	orr.w	r2, r2, #4
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
 8002688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800268a:	f002 0204 	and.w	r2, r2, #4
 800268e:	9204      	str	r2, [sp, #16]
 8002690:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002692:	9405      	str	r4, [sp, #20]
 8002694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002696:	f042 0208 	orr.w	r2, r2, #8
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
 800269c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800269e:	f002 0208 	and.w	r2, r2, #8
 80026a2:	9205      	str	r2, [sp, #20]
 80026a4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026a6:	9406      	str	r4, [sp, #24]
 80026a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026aa:	f042 0210 	orr.w	r2, r2, #16
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
 80026b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026b2:	f002 0210 	and.w	r2, r2, #16
 80026b6:	9206      	str	r2, [sp, #24]
 80026b8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026ba:	9407      	str	r4, [sp, #28]
 80026bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026be:	f042 0220 	orr.w	r2, r2, #32
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
 80026c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c6:	f002 0220 	and.w	r2, r2, #32
 80026ca:	9207      	str	r2, [sp, #28]
 80026cc:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026ce:	9408      	str	r4, [sp, #32]
 80026d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026de:	9308      	str	r3, [sp, #32]
 80026e0:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80026e4:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80026e8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80026ea:	230c      	movs	r3, #12
 80026ec:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80026ee:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80026f0:	2360      	movs	r3, #96	; 0x60
 80026f2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80026f4:	f000 fc2a 	bl	8002f4c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80026f8:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80026fa:	482a      	ldr	r0, [pc, #168]	; (80027a4 <BSP_SDRAM_MspInit+0x174>)
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80026fc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80026fe:	a909      	add	r1, sp, #36	; 0x24
 8002700:	f000 fc24 	bl	8002f4c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002704:	f24c 7303 	movw	r3, #50947	; 0xc703
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002708:	4827      	ldr	r0, [pc, #156]	; (80027a8 <BSP_SDRAM_MspInit+0x178>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800270a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800270c:	a909      	add	r1, sp, #36	; 0x24
 800270e:	f000 fc1d 	bl	8002f4c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002712:	f64f 7383 	movw	r3, #65411	; 0xff83
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002716:	4825      	ldr	r0, [pc, #148]	; (80027ac <BSP_SDRAM_MspInit+0x17c>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002718:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800271a:	a909      	add	r1, sp, #36	; 0x24
 800271c:	f000 fc16 	bl	8002f4c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002720:	f64f 033f 	movw	r3, #63551	; 0xf83f
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002724:	4822      	ldr	r0, [pc, #136]	; (80027b0 <BSP_SDRAM_MspInit+0x180>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002726:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002728:	a909      	add	r1, sp, #36	; 0x24
 800272a:	f000 fc0f 	bl	8002f4c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800272e:	f248 1333 	movw	r3, #33075	; 0x8133
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002732:	4820      	ldr	r0, [pc, #128]	; (80027b4 <BSP_SDRAM_MspInit+0x184>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002734:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002736:	a909      	add	r1, sp, #36	; 0x24
 8002738:	f000 fc08 	bl	8002f4c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800273c:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <BSP_SDRAM_MspInit+0x188>)
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800273e:	2180      	movs	r1, #128	; 0x80
 8002740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002744:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002748:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800274c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002750:	e9c3 0215 	strd	r0, r2, [r3, #84]	; 0x54
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002754:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002758:	e9c3 2417 	strd	r2, r4, [r3, #92]	; 0x5c
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800275c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002760:	461d      	mov	r5, r3
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002762:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002766:	2203      	movs	r2, #3
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002768:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800276c:	4a13      	ldr	r2, [pc, #76]	; (80027bc <BSP_SDRAM_MspInit+0x18c>)
 800276e:	f845 2f44 	str.w	r2, [r5, #68]!
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002772:	675c      	str	r4, [r3, #116]	; 0x74
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002774:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002776:	6335      	str	r5, [r6, #48]	; 0x30
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002778:	649c      	str	r4, [r3, #72]	; 0x48
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800277a:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dmaHandle);
 800277c:	f000 fa6e 	bl	8002c5c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002780:	4628      	mov	r0, r5
 8002782:	f000 f9eb 	bl	8002b5c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002786:	2038      	movs	r0, #56	; 0x38
 8002788:	4622      	mov	r2, r4
 800278a:	210f      	movs	r1, #15
 800278c:	f000 f966 	bl	8002a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002790:	2038      	movs	r0, #56	; 0x38
 8002792:	f000 f995 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002796:	b00e      	add	sp, #56	; 0x38
 8002798:	bd70      	pop	{r4, r5, r6, pc}
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	40020400 	.word	0x40020400
 80027a4:	40020800 	.word	0x40020800
 80027a8:	40020c00 	.word	0x40020c00
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40021400 	.word	0x40021400
 80027b4:	40021800 	.word	0x40021800
 80027b8:	20000390 	.word	0x20000390
 80027bc:	40026410 	.word	0x40026410

080027c0 <BSP_SDRAM_Init>:
{
 80027c0:	b510      	push	{r4, lr}
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80027c2:	4c1b      	ldr	r4, [pc, #108]	; (8002830 <BSP_SDRAM_Init+0x70>)
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <BSP_SDRAM_Init+0x74>)
 80027c6:	6123      	str	r3, [r4, #16]
  Timing.SelfRefreshTime      = 4;
 80027c8:	2204      	movs	r2, #4
  Timing.ExitSelfRefreshDelay = 7;
 80027ca:	2302      	movs	r3, #2
 80027cc:	2107      	movs	r1, #7
  Timing.RowCycleDelay        = 7;
 80027ce:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  Timing.ExitSelfRefreshDelay = 7;
 80027d2:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
 80027d6:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80027da:	2100      	movs	r1, #0
  Timing.RCDDelay             = 2;
 80027dc:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e9c4 3105 	strd	r3, r1, [r4, #20]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80027e6:	2010      	movs	r0, #16
 80027e8:	2340      	movs	r3, #64	; 0x40
 80027ea:	e9c4 0308 	strd	r0, r3, [r4, #32]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80027ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80027f2:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80027f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80027fa:	e9c4 310c 	strd	r3, r1, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80027fe:	f104 0010 	add.w	r0, r4, #16
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002806:	61e2      	str	r2, [r4, #28]
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002808:	63a3      	str	r3, [r4, #56]	; 0x38
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800280a:	f7ff ff11 	bl	8002630 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800280e:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 8002812:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
 8002816:	f001 feaa 	bl	800456e <HAL_SDRAM_Init>
 800281a:	4c07      	ldr	r4, [pc, #28]	; (8002838 <BSP_SDRAM_Init+0x78>)
 800281c:	3800      	subs	r0, #0
 800281e:	bf18      	it	ne
 8002820:	2001      	movne	r0, #1
 8002822:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002824:	f240 506a 	movw	r0, #1386	; 0x56a
 8002828:	f7ff feba 	bl	80025a0 <BSP_SDRAM_Initialization_sequence>
}
 800282c:	7820      	ldrb	r0, [r4, #0]
 800282e:	bd10      	pop	{r4, pc}
 8002830:	20000390 	.word	0x20000390
 8002834:	a0000140 	.word	0xa0000140
 8002838:	200000fc 	.word	0x200000fc

0800283c <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 800283c:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = TS_ERROR;

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 800283e:	4c0b      	ldr	r4, [pc, #44]	; (800286c <BSP_TS_Init+0x30>)
  TsYBoundary = YSize;

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002840:	4d0b      	ldr	r5, [pc, #44]	; (8002870 <BSP_TS_Init+0x34>)
  TsXBoundary = XSize;
 8002842:	8020      	strh	r0, [r4, #0]
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002844:	686b      	ldr	r3, [r5, #4]
  TsYBoundary = YSize;
 8002846:	8061      	strh	r1, [r4, #2]
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002848:	2082      	movs	r0, #130	; 0x82
 800284a:	4798      	blx	r3
 800284c:	f640 0311 	movw	r3, #2065	; 0x811
 8002850:	4298      	cmp	r0, r3
 8002852:	d109      	bne.n	8002868 <BSP_TS_Init+0x2c>
  }

  if(ret == TS_OK)
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8002854:	682b      	ldr	r3, [r5, #0]
    TsDrv = &stmpe811_ts_drv;
 8002856:	6065      	str	r5, [r4, #4]
    TsDrv->Init(TS_I2C_ADDRESS);
 8002858:	2082      	movs	r0, #130	; 0x82
 800285a:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800285c:	6863      	ldr	r3, [r4, #4]
 800285e:	2082      	movs	r0, #130	; 0x82
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	4798      	blx	r3
    ret = TS_OK;
 8002864:	2000      	movs	r0, #0
  }

  return ret;
}
 8002866:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t ret = TS_ERROR;
 8002868:	2001      	movs	r0, #1
 800286a:	e7fc      	b.n	8002866 <BSP_TS_Init+0x2a>
 800286c:	200004b0 	.word	0x200004b0
 8002870:	20000098 	.word	0x20000098

08002874 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8002874:	b573      	push	{r0, r1, r4, r5, r6, lr}
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8002876:	4c2a      	ldr	r4, [pc, #168]	; (8002920 <BSP_TS_GetState+0xac>)
 8002878:	6863      	ldr	r3, [r4, #4]
{
 800287a:	4605      	mov	r5, r0
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2082      	movs	r0, #130	; 0x82
 8002880:	4798      	blx	r3
 8002882:	b280      	uxth	r0, r0
 8002884:	8028      	strh	r0, [r5, #0]
  
  if(TsState->TouchDetected)
 8002886:	2800      	cmp	r0, #0
 8002888:	d03e      	beq.n	8002908 <BSP_TS_GetState+0x94>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800288a:	6863      	ldr	r3, [r4, #4]
 800288c:	f10d 0206 	add.w	r2, sp, #6
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	a901      	add	r1, sp, #4
 8002894:	2082      	movs	r0, #130	; 0x82
 8002896:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8002898:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800289c:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 80028a0:	b292      	uxth	r2, r2
    
    /* Y value second correction */
    yr = y / 11;
    
    /* Return y position value */
    if(yr <= 0)
 80028a2:	2a0a      	cmp	r2, #10
 80028a4:	d932      	bls.n	800290c <BSP_TS_GetState+0x98>
    yr = y / 11;
 80028a6:	230b      	movs	r3, #11
 80028a8:	fbb2 f2f3 	udiv	r2, r2, r3
    {
      yr = 0;
    }
    else if (yr > TsYBoundary)
 80028ac:	8863      	ldrh	r3, [r4, #2]
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d201      	bcs.n	80028b6 <BSP_TS_GetState+0x42>
    {
      yr = TsYBoundary - 1;
 80028b2:	1e5a      	subs	r2, r3, #1
 80028b4:	b292      	uxth	r2, r2
    else
    {}
    y = yr;
    
    /* X value first correction */
    if(x <= 3000)
 80028b6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80028ba:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80028be:	428b      	cmp	r3, r1
 80028c0:	d826      	bhi.n	8002910 <BSP_TS_GetState+0x9c>
    {
      x = 3870 - x;
 80028c2:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80028c6:	330e      	adds	r3, #14
 80028c8:	b29b      	uxth	r3, r3
    {
      x = 3800 - x;
    }
    
    /* X value second correction */  
    xr = x / 15;
 80028ca:	210f      	movs	r1, #15
 80028cc:	fbb3 f3f1 	udiv	r3, r3, r1
    /* Return X position value */
    if(xr <= 0)
    {
      xr = 0;
    }
    else if (xr > TsXBoundary)
 80028d0:	8821      	ldrh	r1, [r4, #0]
 80028d2:	4299      	cmp	r1, r3
 80028d4:	d201      	bcs.n	80028da <BSP_TS_GetState+0x66>
    {
      xr = TsXBoundary - 1;
 80028d6:	1e4b      	subs	r3, r1, #1
 80028d8:	b29b      	uxth	r3, r3
    }
    else 
    {}
    
    x = xr;
    xDiff = x > _x? (x - _x): (_x - x);
 80028da:	68a0      	ldr	r0, [r4, #8]
    yDiff = y > _y? (y - _y): (_y - y); 
 80028dc:	68e6      	ldr	r6, [r4, #12]
    xDiff = x > _x? (x - _x): (_x - x);
 80028de:	4283      	cmp	r3, r0
 80028e0:	b281      	uxth	r1, r0
 80028e2:	bf8c      	ite	hi
 80028e4:	1a59      	subhi	r1, r3, r1
 80028e6:	1ac9      	subls	r1, r1, r3
 80028e8:	b2b0      	uxth	r0, r6
    yDiff = y > _y? (y - _y): (_y - y); 
 80028ea:	42b2      	cmp	r2, r6
 80028ec:	bf8c      	ite	hi
 80028ee:	1a10      	subhi	r0, r2, r0
 80028f0:	1a80      	subls	r0, r0, r2
    xDiff = x > _x? (x - _x): (_x - x);
 80028f2:	b289      	uxth	r1, r1
    yDiff = y > _y? (y - _y): (_y - y); 
 80028f4:	b280      	uxth	r0, r0
    
    if (xDiff + yDiff > 5)
 80028f6:	4401      	add	r1, r0
 80028f8:	2905      	cmp	r1, #5
    {
      _x = x;
      _y = y; 
 80028fa:	bfc8      	it	gt
 80028fc:	e9c4 3202 	strdgt	r3, r2, [r4, #8]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8002900:	68a3      	ldr	r3, [r4, #8]
 8002902:	806b      	strh	r3, [r5, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8002904:	68e3      	ldr	r3, [r4, #12]
 8002906:	80ab      	strh	r3, [r5, #4]
  }
}
 8002908:	b002      	add	sp, #8
 800290a:	bd70      	pop	{r4, r5, r6, pc}
      yr = 0;
 800290c:	2200      	movs	r2, #0
 800290e:	e7d2      	b.n	80028b6 <BSP_TS_GetState+0x42>
      x = 3800 - x;
 8002910:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8002914:	3308      	adds	r3, #8
 8002916:	b29b      	uxth	r3, r3
    if(xr <= 0)
 8002918:	2b0e      	cmp	r3, #14
 800291a:	d8d6      	bhi.n	80028ca <BSP_TS_GetState+0x56>
      xr = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	e7dc      	b.n	80028da <BSP_TS_GetState+0x66>
 8002920:	200004b0 	.word	0x200004b0

08002924 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002924:	490f      	ldr	r1, [pc, #60]	; (8002964 <SystemInit+0x40>)
 8002926:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800292a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <SystemInit+0x44>)
 8002934:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002936:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800293e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002946:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800294a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800294c:	4a07      	ldr	r2, [pc, #28]	; (800296c <SystemInit+0x48>)
 800294e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002956:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002958:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800295a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800295e:	608b      	str	r3, [r1, #8]
#endif
}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000ed00 	.word	0xe000ed00
 8002968:	40023800 	.word	0x40023800
 800296c:	24003010 	.word	0x24003010

08002970 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002970:	4770      	bx	lr
	...

08002974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002974:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002976:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <HAL_InitTick+0x3c>)
 8002978:	4e0e      	ldr	r6, [pc, #56]	; (80029b4 <HAL_InitTick+0x40>)
{
 800297a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800297c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002980:	7830      	ldrb	r0, [r6, #0]
 8002982:	fbb3 f3f0 	udiv	r3, r3, r0
 8002986:	6810      	ldr	r0, [r2, #0]
 8002988:	fbb0 f0f3 	udiv	r0, r0, r3
 800298c:	f000 f8ba 	bl	8002b04 <HAL_SYSTICK_Config>
 8002990:	4604      	mov	r4, r0
 8002992:	b950      	cbnz	r0, 80029aa <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002994:	2d0f      	cmp	r5, #15
 8002996:	d808      	bhi.n	80029aa <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002998:	4602      	mov	r2, r0
 800299a:	4629      	mov	r1, r5
 800299c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029a0:	f000 f85c 	bl	8002a5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a4:	6075      	str	r5, [r6, #4]
 80029a6:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80029a8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80029aa:	2001      	movs	r0, #1
 80029ac:	e7fc      	b.n	80029a8 <HAL_InitTick+0x34>
 80029ae:	bf00      	nop
 80029b0:	20000100 	.word	0x20000100
 80029b4:	20000104 	.word	0x20000104

080029b8 <HAL_Init>:
{
 80029b8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029ba:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_Init+0x30>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029ca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d4:	2003      	movs	r0, #3
 80029d6:	f000 f82f 	bl	8002a38 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80029da:	200f      	movs	r0, #15
 80029dc:	f7ff ffca 	bl	8002974 <HAL_InitTick>
  HAL_MspInit();
 80029e0:	f7ff ffc6 	bl	8002970 <HAL_MspInit>
}
 80029e4:	2000      	movs	r0, #0
 80029e6:	bd08      	pop	{r3, pc}
 80029e8:	40023c00 	.word	0x40023c00

080029ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80029ec:	4a03      	ldr	r2, [pc, #12]	; (80029fc <HAL_IncTick+0x10>)
 80029ee:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <HAL_IncTick+0x14>)
 80029f0:	6811      	ldr	r1, [r2, #0]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	440b      	add	r3, r1
 80029f6:	6013      	str	r3, [r2, #0]
}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	20000608 	.word	0x20000608
 8002a00:	20000104 	.word	0x20000104

08002a04 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a04:	4b01      	ldr	r3, [pc, #4]	; (8002a0c <HAL_GetTick+0x8>)
 8002a06:	6818      	ldr	r0, [r3, #0]
}
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000608 	.word	0x20000608

08002a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a10:	b538      	push	{r3, r4, r5, lr}
 8002a12:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a14:	f7ff fff6 	bl	8002a04 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a18:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002a1a:	bf1c      	itt	ne
 8002a1c:	4b05      	ldrne	r3, [pc, #20]	; (8002a34 <HAL_Delay+0x24>)
 8002a1e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002a20:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8002a22:	bf18      	it	ne
 8002a24:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a26:	f7ff ffed 	bl	8002a04 <HAL_GetTick>
 8002a2a:	1b43      	subs	r3, r0, r5
 8002a2c:	42a3      	cmp	r3, r4
 8002a2e:	d3fa      	bcc.n	8002a26 <HAL_Delay+0x16>
  {
  }
}
 8002a30:	bd38      	pop	{r3, r4, r5, pc}
 8002a32:	bf00      	nop
 8002a34:	20000104 	.word	0x20000104

08002a38 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a38:	4907      	ldr	r1, [pc, #28]	; (8002a58 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002a3a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a40:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a42:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a48:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002a54:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002a56:	4770      	bx	lr
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a5e:	b530      	push	{r4, r5, lr}
 8002a60:	68dc      	ldr	r4, [r3, #12]
 8002a62:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a66:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a6c:	2d04      	cmp	r5, #4
 8002a6e:	bf28      	it	cs
 8002a70:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a72:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a78:	bf8c      	ite	hi
 8002a7a:	3c03      	subhi	r4, #3
 8002a7c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7e:	fa03 f505 	lsl.w	r5, r3, r5
 8002a82:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a86:	40a3      	lsls	r3, r4
 8002a88:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8002a8e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a94:	bfac      	ite	ge
 8002a96:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9a:	4a08      	ldrlt	r2, [pc, #32]	; (8002abc <HAL_NVIC_SetPriority+0x60>)
 8002a9c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002aa0:	bfb8      	it	lt
 8002aa2:	f000 000f 	andlt.w	r0, r0, #15
 8002aa6:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa8:	bfaa      	itet	ge
 8002aaa:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aae:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ab4:	bd30      	pop	{r4, r5, pc}
 8002ab6:	bf00      	nop
 8002ab8:	e000ed00 	.word	0xe000ed00
 8002abc:	e000ed14 	.word	0xe000ed14

08002ac0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ac0:	2800      	cmp	r0, #0
 8002ac2:	db08      	blt.n	8002ad6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac4:	0942      	lsrs	r2, r0, #5
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f000 001f 	and.w	r0, r0, #31
 8002acc:	fa03 f000 	lsl.w	r0, r3, r0
 8002ad0:	4b01      	ldr	r3, [pc, #4]	; (8002ad8 <HAL_NVIC_EnableIRQ+0x18>)
 8002ad2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002ad6:	4770      	bx	lr
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002adc:	2800      	cmp	r0, #0
 8002ade:	db0d      	blt.n	8002afc <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae0:	0943      	lsrs	r3, r0, #5
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f000 001f 	and.w	r0, r0, #31
 8002ae8:	fa02 f000 	lsl.w	r0, r2, r0
 8002aec:	3320      	adds	r3, #32
 8002aee:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_NVIC_DisableIRQ+0x24>)
 8002af0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002af8:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000e100 	.word	0xe000e100

08002b04 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b04:	3801      	subs	r0, #1
 8002b06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002b0a:	d20a      	bcs.n	8002b22 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0e:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b10:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b12:	21f0      	movs	r1, #240	; 0xf0
 8002b14:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b18:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b1a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b1c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b20:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002b22:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000e010 	.word	0xe000e010
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b30:	6803      	ldr	r3, [r0, #0]
{
 8002b32:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b34:	4c08      	ldr	r4, [pc, #32]	; (8002b58 <DMA_CalcBaseAndBitshift+0x28>)
{
 8002b36:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b38:	b2d9      	uxtb	r1, r3
 8002b3a:	3910      	subs	r1, #16
 8002b3c:	2018      	movs	r0, #24
 8002b3e:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b42:	5c20      	ldrb	r0, [r4, r0]
 8002b44:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b46:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8002b4a:	f020 0003 	bic.w	r0, r0, #3
 8002b4e:	295f      	cmp	r1, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b50:	bf88      	it	hi
 8002b52:	3004      	addhi	r0, #4
 8002b54:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002b56:	bd10      	pop	{r4, pc}
 8002b58:	0800c680 	.word	0x0800c680

08002b5c <HAL_DMA_Init>:
{
 8002b5c:	b570      	push	{r4, r5, r6, lr}
 8002b5e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002b60:	f7ff ff50 	bl	8002a04 <HAL_GetTick>
 8002b64:	4605      	mov	r5, r0
  if(hdma == NULL)
 8002b66:	2c00      	cmp	r4, #0
 8002b68:	d073      	beq.n	8002c52 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002b70:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002b72:	2300      	movs	r3, #0
 8002b74:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002b78:	6813      	ldr	r3, [r2, #0]
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b80:	6821      	ldr	r1, [r4, #0]
 8002b82:	680b      	ldr	r3, [r1, #0]
 8002b84:	07d8      	lsls	r0, r3, #31
 8002b86:	d42f      	bmi.n	8002be8 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8002b88:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b8a:	4d33      	ldr	r5, [pc, #204]	; (8002c58 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8c:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b8e:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b90:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	68e2      	ldr	r2, [r4, #12]
 8002b98:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b9a:	6922      	ldr	r2, [r4, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	6962      	ldr	r2, [r4, #20]
 8002ba0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba2:	69e2      	ldr	r2, [r4, #28]
 8002ba4:	4303      	orrs	r3, r0
 8002ba6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba8:	6a22      	ldr	r2, [r4, #32]
 8002baa:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002bae:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bb0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bb4:	bf02      	ittt	eq
 8002bb6:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8002bba:	4335      	orreq	r5, r6
 8002bbc:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8002bbe:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8002bc0:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bc2:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bc4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002bc8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bcc:	d133      	bne.n	8002c36 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8002bce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bd0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002bd2:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bd4:	b37d      	cbz	r5, 8002c36 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bd6:	b990      	cbnz	r0, 8002bfe <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8002bd8:	2a01      	cmp	r2, #1
 8002bda:	d021      	beq.n	8002c20 <HAL_DMA_Init+0xc4>
 8002bdc:	f032 0202 	bics.w	r2, r2, #2
 8002be0:	d129      	bne.n	8002c36 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002be2:	01ea      	lsls	r2, r5, #7
 8002be4:	d527      	bpl.n	8002c36 <HAL_DMA_Init+0xda>
 8002be6:	e01e      	b.n	8002c26 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002be8:	f7ff ff0c 	bl	8002a04 <HAL_GetTick>
 8002bec:	1b40      	subs	r0, r0, r5
 8002bee:	2805      	cmp	r0, #5
 8002bf0:	d9c6      	bls.n	8002b80 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bf2:	2320      	movs	r3, #32
 8002bf4:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bf6:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8002bf8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002bfc:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bfe:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002c02:	d114      	bne.n	8002c2e <HAL_DMA_Init+0xd2>
    switch (tmp)
 8002c04:	2a03      	cmp	r2, #3
 8002c06:	d816      	bhi.n	8002c36 <HAL_DMA_Init+0xda>
 8002c08:	a001      	add	r0, pc, #4	; (adr r0, 8002c10 <HAL_DMA_Init+0xb4>)
 8002c0a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002c0e:	bf00      	nop
 8002c10:	08002c27 	.word	0x08002c27
 8002c14:	08002be3 	.word	0x08002be3
 8002c18:	08002c27 	.word	0x08002c27
 8002c1c:	08002c21 	.word	0x08002c21
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c20:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002c24:	d107      	bne.n	8002c36 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c26:	2340      	movs	r3, #64	; 0x40
 8002c28:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	e7e4      	b.n	8002bf8 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8002c2e:	2a02      	cmp	r2, #2
 8002c30:	d9f9      	bls.n	8002c26 <HAL_DMA_Init+0xca>
 8002c32:	2a03      	cmp	r2, #3
 8002c34:	d0d5      	beq.n	8002be2 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8002c36:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f7ff ff79 	bl	8002b30 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c40:	233f      	movs	r3, #63	; 0x3f
 8002c42:	4093      	lsls	r3, r2
 8002c44:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c46:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002c48:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c4a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002c4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002c50:	e7d4      	b.n	8002bfc <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8002c52:	2001      	movs	r0, #1
 8002c54:	e7d2      	b.n	8002bfc <HAL_DMA_Init+0xa0>
 8002c56:	bf00      	nop
 8002c58:	f010803f 	.word	0xf010803f

08002c5c <HAL_DMA_DeInit>:
{
 8002c5c:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8002c5e:	4605      	mov	r5, r0
 8002c60:	b320      	cbz	r0, 8002cac <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002c62:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	b2dc      	uxtb	r4, r3
 8002c6a:	d01d      	beq.n	8002ca8 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8002c6c:	6803      	ldr	r3, [r0, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8002c74:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8002c76:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8002c78:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8002c7a:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002c7c:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002c7e:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002c80:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002c82:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8002c84:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c86:	f7ff ff53 	bl	8002b30 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c8a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002c8c:	233f      	movs	r3, #63	; 0x3f
 8002c8e:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8002c90:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8002c94:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8002c98:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c9c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c9e:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8002ca0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8002ca4:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 8002ca8:	4620      	mov	r0, r4
 8002caa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002cac:	2401      	movs	r4, #1
 8002cae:	e7fb      	b.n	8002ca8 <HAL_DMA_DeInit+0x4c>

08002cb0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002cb0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002cb2:	6804      	ldr	r4, [r0, #0]
 8002cb4:	9d04      	ldr	r5, [sp, #16]
 8002cb6:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8002cb8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002cbc:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8002cc0:	4333      	orrs	r3, r6
 8002cc2:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002cc4:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002cc6:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002cc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ccc:	d130      	bne.n	8002d30 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002cce:	6886      	ldr	r6, [r0, #8]
 8002cd0:	b11e      	cbz	r6, 8002cda <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002cd2:	2e01      	cmp	r6, #1
 8002cd4:	d103      	bne.n	8002cde <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002cd6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002cda:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002cdc:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002cde:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002ce0:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002ce4:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002ce8:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002cea:	d107      	bne.n	8002cfc <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8002cec:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002cee:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002cf0:	02db      	lsls	r3, r3, #11
 8002cf2:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8002cf6:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8002cfa:	e7ee      	b.n	8002cda <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002cfc:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002cfe:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002d02:	d10a      	bne.n	8002d1a <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8002d04:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002d06:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002d08:	029b      	lsls	r3, r3, #10
 8002d0a:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8002d0e:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
      tmp1 = (tmp1 >> 31U);
 8002d12:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002d14:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8002d18:	e7df      	b.n	8002cda <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8002d1a:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002d1c:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002d1e:	0209      	lsls	r1, r1, #8
 8002d20:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8002d24:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
      tmp1 = (tmp1 >> 28U);
 8002d28:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002d2a:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8002d2e:	e7d4      	b.n	8002cda <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002d30:	60e1      	str	r1, [r4, #12]
}
 8002d32:	e7d3      	b.n	8002cdc <DMA2D_SetConfig+0x2c>

08002d34 <HAL_DMA2D_MspInit>:
}
 8002d34:	4770      	bx	lr

08002d36 <HAL_DMA2D_Init>:
{
 8002d36:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8002d38:	4604      	mov	r4, r0
 8002d3a:	b330      	cbz	r0, 8002d8a <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002d3c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002d40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d44:	b91b      	cbnz	r3, 8002d4e <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8002d46:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002d4a:	f7ff fff3 	bl	8002d34 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002d4e:	6822      	ldr	r2, [r4, #0]
 8002d50:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d52:	2302      	movs	r3, #2
 8002d54:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002d58:	6813      	ldr	r3, [r2, #0]
 8002d5a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002d62:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002d64:	68a1      	ldr	r1, [r4, #8]
 8002d66:	f023 0307 	bic.w	r3, r3, #7
 8002d6a:	430b      	orrs	r3, r1
 8002d6c:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002d6e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002d70:	68e1      	ldr	r1, [r4, #12]
 8002d72:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d7e:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002d80:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d82:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002d84:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002d88:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	e7fc      	b.n	8002d88 <HAL_DMA2D_Init+0x52>

08002d8e <HAL_DMA2D_Start>:
{
 8002d8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8002d90:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
 8002d94:	2d01      	cmp	r5, #1
{
 8002d96:	4604      	mov	r4, r0
 8002d98:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hdma2d);
 8002d9c:	d00f      	beq.n	8002dbe <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d9e:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8002da2:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002da4:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 8002da6:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002daa:	9500      	str	r5, [sp, #0]
 8002dac:	f7ff ff80 	bl	8002cb0 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8002db0:	6822      	ldr	r2, [r4, #0]
 8002db2:	6813      	ldr	r3, [r2, #0]
 8002db4:	4333      	orrs	r3, r6
 8002db6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002db8:	2000      	movs	r0, #0
}
 8002dba:	b002      	add	sp, #8
 8002dbc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	e7fb      	b.n	8002dba <HAL_DMA2D_Start+0x2c>

08002dc2 <HAL_DMA2D_PollForTransfer>:
{
 8002dc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002dc8:	6803      	ldr	r3, [r0, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	07db      	lsls	r3, r3, #31
{
 8002dce:	4604      	mov	r4, r0
 8002dd0:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002dd2:	d417      	bmi.n	8002e04 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002dd4:	6822      	ldr	r2, [r4, #0]
 8002dd6:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002dd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dda:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8002ddc:	069e      	lsls	r6, r3, #26
 8002dde:	d506      	bpl.n	8002dee <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8002de0:	f7ff fe10 	bl	8002a04 <HAL_GetTick>
 8002de4:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	06d2      	lsls	r2, r2, #27
 8002dec:	d543      	bpl.n	8002e76 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	2212      	movs	r2, #18
 8002df2:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8002df4:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002df6:	2301      	movs	r3, #1
 8002df8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002dfc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002e00:	b002      	add	sp, #8
 8002e02:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8002e04:	f7ff fdfe 	bl	8002a04 <HAL_GetTick>
 8002e08:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	0792      	lsls	r2, r2, #30
 8002e10:	d4e0      	bmi.n	8002dd4 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002e16:	9a01      	ldr	r2, [sp, #4]
 8002e18:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002e1c:	d017      	beq.n	8002e4e <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e1e:	9a01      	ldr	r2, [sp, #4]
 8002e20:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e22:	bf42      	ittt	mi
 8002e24:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002e26:	f042 0202 	orrmi.w	r2, r2, #2
 8002e2a:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e2c:	9a01      	ldr	r2, [sp, #4]
 8002e2e:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e30:	bf42      	ittt	mi
 8002e32:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002e34:	f042 0201 	orrmi.w	r2, r2, #1
 8002e38:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e3a:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e3c:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e3e:	2304      	movs	r3, #4
 8002e40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8002e44:	2300      	movs	r3, #0
 8002e46:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	e7d8      	b.n	8002e00 <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 8002e4e:	1c69      	adds	r1, r5, #1
 8002e50:	d0dc      	beq.n	8002e0c <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e52:	f7ff fdd7 	bl	8002a04 <HAL_GetTick>
 8002e56:	1b80      	subs	r0, r0, r6
 8002e58:	42a8      	cmp	r0, r5
 8002e5a:	d801      	bhi.n	8002e60 <HAL_DMA2D_PollForTransfer+0x9e>
 8002e5c:	2d00      	cmp	r5, #0
 8002e5e:	d1d4      	bne.n	8002e0a <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e62:	f043 0320 	orr.w	r3, r3, #32
 8002e66:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e68:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8002e6a:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e6c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8002e70:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8002e74:	e7c4      	b.n	8002e00 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002e7a:	9a01      	ldr	r2, [sp, #4]
 8002e7c:	f012 0f29 	tst.w	r2, #41	; 0x29
 8002e80:	d016      	beq.n	8002eb0 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002e82:	9a01      	ldr	r2, [sp, #4]
 8002e84:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002e86:	bf42      	ittt	mi
 8002e88:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002e8a:	f042 0204 	orrmi.w	r2, r2, #4
 8002e8e:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e90:	9a01      	ldr	r2, [sp, #4]
 8002e92:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e94:	bf42      	ittt	mi
 8002e96:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002e98:	f042 0202 	orrmi.w	r2, r2, #2
 8002e9c:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e9e:	9a01      	ldr	r2, [sp, #4]
 8002ea0:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002ea2:	bf42      	ittt	mi
 8002ea4:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002ea6:	f042 0201 	orrmi.w	r2, r2, #1
 8002eaa:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002eac:	2229      	movs	r2, #41	; 0x29
 8002eae:	e7c5      	b.n	8002e3c <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 8002eb0:	1c69      	adds	r1, r5, #1
 8002eb2:	d099      	beq.n	8002de8 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002eb4:	f7ff fda6 	bl	8002a04 <HAL_GetTick>
 8002eb8:	1b80      	subs	r0, r0, r6
 8002eba:	42a8      	cmp	r0, r5
 8002ebc:	d8d0      	bhi.n	8002e60 <HAL_DMA2D_PollForTransfer+0x9e>
 8002ebe:	2d00      	cmp	r5, #0
 8002ec0:	d191      	bne.n	8002de6 <HAL_DMA2D_PollForTransfer+0x24>
 8002ec2:	e7cd      	b.n	8002e60 <HAL_DMA2D_PollForTransfer+0x9e>

08002ec4 <HAL_DMA2D_ConfigLayer>:
{
 8002ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8002ec6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	f04f 0302 	mov.w	r3, #2
 8002ed0:	d02b      	beq.n	8002f2a <HAL_DMA2D_ConfigLayer+0x66>
 8002ed2:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ed4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8002ed8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002edc:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002ee0:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8002ee4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8002ee6:	4f18      	ldr	r7, [pc, #96]	; (8002f48 <HAL_DMA2D_ConfigLayer+0x84>)
 8002ee8:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002eec:	3c09      	subs	r4, #9
 8002eee:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002ef0:	bf9c      	itt	ls
 8002ef2:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
 8002ef6:	431a      	orrls	r2, r3
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002ef8:	ea4f 1601 	mov.w	r6, r1, lsl #4
 8002efc:	6803      	ldr	r3, [r0, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002efe:	bf88      	it	hi
 8002f00:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002f04:	b999      	cbnz	r1, 8002f2e <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002f06:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f08:	4039      	ands	r1, r7
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f0e:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002f10:	6982      	ldr	r2, [r0, #24]
 8002f12:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f14:	d803      	bhi.n	8002f1e <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002f16:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002f18:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002f1c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002f24:	2300      	movs	r3, #0
 8002f26:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8002f2a:	4618      	mov	r0, r3
}
 8002f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002f2e:	69d9      	ldr	r1, [r3, #28]
 8002f30:	4039      	ands	r1, r7
 8002f32:	430a      	orrs	r2, r1
 8002f34:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002f36:	1982      	adds	r2, r0, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f38:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002f3a:	6992      	ldr	r2, [r2, #24]
 8002f3c:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002f3e:	bf9c      	itt	ls
 8002f40:	f025 457f 	bicls.w	r5, r5, #4278190080	; 0xff000000
 8002f44:	621d      	strls	r5, [r3, #32]
 8002f46:	e7ea      	b.n	8002f1e <HAL_DMA2D_ConfigLayer+0x5a>
 8002f48:	00fcfff0 	.word	0x00fcfff0

08002f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f50:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8003114 <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f54:	4a6d      	ldr	r2, [pc, #436]	; (800310c <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f56:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f58:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002f5a:	2401      	movs	r4, #1
 8002f5c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f5e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8002f62:	43ac      	bics	r4, r5
 8002f64:	f040 80b9 	bne.w	80030da <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f68:	684d      	ldr	r5, [r1, #4]
 8002f6a:	f005 0403 	and.w	r4, r5, #3
 8002f6e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8002f72:	2603      	movs	r6, #3
 8002f74:	1e67      	subs	r7, r4, #1
 8002f76:	fa06 f608 	lsl.w	r6, r6, r8
 8002f7a:	2f01      	cmp	r7, #1
 8002f7c:	ea6f 0606 	mvn.w	r6, r6
 8002f80:	d834      	bhi.n	8002fec <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8002f82:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f84:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f88:	68cf      	ldr	r7, [r1, #12]
 8002f8a:	fa07 f708 	lsl.w	r7, r7, r8
 8002f8e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002f92:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002f94:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f96:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f9a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002f9e:	409f      	lsls	r7, r3
 8002fa0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002fa4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002fa6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fa8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fac:	688f      	ldr	r7, [r1, #8]
 8002fae:	fa07 f708 	lsl.w	r7, r7, r8
 8002fb2:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb6:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002fb8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fba:	d119      	bne.n	8002ff0 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8002fbc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002fc0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fc4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002fc8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fcc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002fd0:	f04f 0e0f 	mov.w	lr, #15
 8002fd4:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002fd8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fdc:	690f      	ldr	r7, [r1, #16]
 8002fde:	fa07 f70b 	lsl.w	r7, r7, fp
 8002fe2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002fe6:	f8ca 7020 	str.w	r7, [sl, #32]
 8002fea:	e001      	b.n	8002ff0 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fec:	2c03      	cmp	r4, #3
 8002fee:	d1da      	bne.n	8002fa6 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002ff0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ff2:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ff6:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ff8:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ffa:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002ffe:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003000:	d06b      	beq.n	80030da <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003002:	f04f 0a00 	mov.w	sl, #0
 8003006:	f8cd a004 	str.w	sl, [sp, #4]
 800300a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800300e:	4c40      	ldr	r4, [pc, #256]	; (8003110 <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003010:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8003014:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8003018:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 800301c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8003020:	9601      	str	r6, [sp, #4]
 8003022:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003024:	f023 0603 	bic.w	r6, r3, #3
 8003028:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800302c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003030:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003034:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003038:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800303c:	270f      	movs	r7, #15
 800303e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003042:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003044:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003048:	d04e      	beq.n	80030e8 <HAL_GPIO_Init+0x19c>
 800304a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800304e:	42a0      	cmp	r0, r4
 8003050:	d04c      	beq.n	80030ec <HAL_GPIO_Init+0x1a0>
 8003052:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003056:	42a0      	cmp	r0, r4
 8003058:	d04a      	beq.n	80030f0 <HAL_GPIO_Init+0x1a4>
 800305a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800305e:	42a0      	cmp	r0, r4
 8003060:	d048      	beq.n	80030f4 <HAL_GPIO_Init+0x1a8>
 8003062:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003066:	42a0      	cmp	r0, r4
 8003068:	d046      	beq.n	80030f8 <HAL_GPIO_Init+0x1ac>
 800306a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800306e:	42a0      	cmp	r0, r4
 8003070:	d044      	beq.n	80030fc <HAL_GPIO_Init+0x1b0>
 8003072:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003076:	42a0      	cmp	r0, r4
 8003078:	d042      	beq.n	8003100 <HAL_GPIO_Init+0x1b4>
 800307a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800307e:	42a0      	cmp	r0, r4
 8003080:	d040      	beq.n	8003104 <HAL_GPIO_Init+0x1b8>
 8003082:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003086:	42a0      	cmp	r0, r4
 8003088:	d03e      	beq.n	8003108 <HAL_GPIO_Init+0x1bc>
 800308a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800308e:	42a0      	cmp	r0, r4
 8003090:	bf0c      	ite	eq
 8003092:	2409      	moveq	r4, #9
 8003094:	240a      	movne	r4, #10
 8003096:	fa04 f40e 	lsl.w	r4, r4, lr
 800309a:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800309c:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 800309e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80030a0:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030a4:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80030a6:	bf54      	ite	pl
 80030a8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80030aa:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80030ae:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 80030b0:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030b2:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80030b4:	bf54      	ite	pl
 80030b6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80030b8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 80030bc:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030be:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030c0:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80030c2:	bf54      	ite	pl
 80030c4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80030c6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80030ca:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80030cc:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ce:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80030d0:	bf54      	ite	pl
 80030d2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80030d4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80030d8:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030da:	3301      	adds	r3, #1
 80030dc:	2b10      	cmp	r3, #16
 80030de:	f47f af3b 	bne.w	8002f58 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80030e2:	b003      	add	sp, #12
 80030e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030e8:	4654      	mov	r4, sl
 80030ea:	e7d4      	b.n	8003096 <HAL_GPIO_Init+0x14a>
 80030ec:	2401      	movs	r4, #1
 80030ee:	e7d2      	b.n	8003096 <HAL_GPIO_Init+0x14a>
 80030f0:	2402      	movs	r4, #2
 80030f2:	e7d0      	b.n	8003096 <HAL_GPIO_Init+0x14a>
 80030f4:	2403      	movs	r4, #3
 80030f6:	e7ce      	b.n	8003096 <HAL_GPIO_Init+0x14a>
 80030f8:	2404      	movs	r4, #4
 80030fa:	e7cc      	b.n	8003096 <HAL_GPIO_Init+0x14a>
 80030fc:	2405      	movs	r4, #5
 80030fe:	e7ca      	b.n	8003096 <HAL_GPIO_Init+0x14a>
 8003100:	2406      	movs	r4, #6
 8003102:	e7c8      	b.n	8003096 <HAL_GPIO_Init+0x14a>
 8003104:	2407      	movs	r4, #7
 8003106:	e7c6      	b.n	8003096 <HAL_GPIO_Init+0x14a>
 8003108:	2408      	movs	r4, #8
 800310a:	e7c4      	b.n	8003096 <HAL_GPIO_Init+0x14a>
 800310c:	40013c00 	.word	0x40013c00
 8003110:	40020000 	.word	0x40020000
 8003114:	40023800 	.word	0x40023800

08003118 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800311c:	4c4a      	ldr	r4, [pc, #296]	; (8003248 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800311e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8003250 <HAL_GPIO_DeInit+0x138>
 8003122:	f8df a130 	ldr.w	sl, [pc, #304]	; 8003254 <HAL_GPIO_DeInit+0x13c>
 8003126:	f8df b130 	ldr.w	fp, [pc, #304]	; 8003258 <HAL_GPIO_DeInit+0x140>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800312a:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 800312c:	2301      	movs	r3, #1
 800312e:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 8003132:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8003136:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 800313a:	d16e      	bne.n	800321a <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800313c:	f022 0503 	bic.w	r5, r2, #3
 8003140:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8003144:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003148:	4b40      	ldr	r3, [pc, #256]	; (800324c <HAL_GPIO_DeInit+0x134>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 800314a:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800314e:	f002 0c03 	and.w	ip, r2, #3
 8003152:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003156:	260f      	movs	r6, #15
 8003158:	fa06 f60c 	lsl.w	r6, r6, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800315c:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800315e:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003162:	d05f      	beq.n	8003224 <HAL_GPIO_DeInit+0x10c>
 8003164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003168:	4298      	cmp	r0, r3
 800316a:	d05d      	beq.n	8003228 <HAL_GPIO_DeInit+0x110>
 800316c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003170:	4298      	cmp	r0, r3
 8003172:	d05b      	beq.n	800322c <HAL_GPIO_DeInit+0x114>
 8003174:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003178:	4298      	cmp	r0, r3
 800317a:	d059      	beq.n	8003230 <HAL_GPIO_DeInit+0x118>
 800317c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003180:	4298      	cmp	r0, r3
 8003182:	d057      	beq.n	8003234 <HAL_GPIO_DeInit+0x11c>
 8003184:	4548      	cmp	r0, r9
 8003186:	d057      	beq.n	8003238 <HAL_GPIO_DeInit+0x120>
 8003188:	4550      	cmp	r0, sl
 800318a:	d057      	beq.n	800323c <HAL_GPIO_DeInit+0x124>
 800318c:	4558      	cmp	r0, fp
 800318e:	d057      	beq.n	8003240 <HAL_GPIO_DeInit+0x128>
 8003190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003194:	4298      	cmp	r0, r3
 8003196:	d055      	beq.n	8003244 <HAL_GPIO_DeInit+0x12c>
 8003198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800319c:	4298      	cmp	r0, r3
 800319e:	bf0c      	ite	eq
 80031a0:	2309      	moveq	r3, #9
 80031a2:	230a      	movne	r3, #10
 80031a4:	fa03 f30c 	lsl.w	r3, r3, ip
 80031a8:	4543      	cmp	r3, r8
 80031aa:	d113      	bne.n	80031d4 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	ea23 0307 	bic.w	r3, r3, r7
 80031b2:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80031b4:	6863      	ldr	r3, [r4, #4]
 80031b6:	ea23 0307 	bic.w	r3, r3, r7
 80031ba:	6063      	str	r3, [r4, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80031bc:	68a3      	ldr	r3, [r4, #8]
 80031be:	ea23 0307 	bic.w	r3, r3, r7
 80031c2:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80031c4:	68e3      	ldr	r3, [r4, #12]
 80031c6:	ea23 0707 	bic.w	r7, r3, r7
 80031ca:	60e7      	str	r7, [r4, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80031cc:	68ab      	ldr	r3, [r5, #8]
 80031ce:	ea23 0606 	bic.w	r6, r3, r6
 80031d2:	60ae      	str	r6, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031d4:	6805      	ldr	r5, [r0, #0]
 80031d6:	2603      	movs	r6, #3
 80031d8:	0053      	lsls	r3, r2, #1
 80031da:	fa06 f303 	lsl.w	r3, r6, r3
 80031de:	ea25 0503 	bic.w	r5, r5, r3
 80031e2:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031e4:	fa22 f506 	lsr.w	r5, r2, r6
 80031e8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80031ec:	f002 0c07 	and.w	ip, r2, #7
 80031f0:	6a2e      	ldr	r6, [r5, #32]
 80031f2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80031f6:	270f      	movs	r7, #15
 80031f8:	fa07 f70c 	lsl.w	r7, r7, ip
 80031fc:	ea26 0707 	bic.w	r7, r6, r7
 8003200:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003202:	68c5      	ldr	r5, [r0, #12]
 8003204:	ea25 0503 	bic.w	r5, r5, r3
 8003208:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800320a:	6845      	ldr	r5, [r0, #4]
 800320c:	ea25 050e 	bic.w	r5, r5, lr
 8003210:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003212:	6885      	ldr	r5, [r0, #8]
 8003214:	ea25 0303 	bic.w	r3, r5, r3
 8003218:	6083      	str	r3, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321a:	3201      	adds	r2, #1
 800321c:	2a10      	cmp	r2, #16
 800321e:	d185      	bne.n	800312c <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8003220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003224:	2300      	movs	r3, #0
 8003226:	e7bd      	b.n	80031a4 <HAL_GPIO_DeInit+0x8c>
 8003228:	2301      	movs	r3, #1
 800322a:	e7bb      	b.n	80031a4 <HAL_GPIO_DeInit+0x8c>
 800322c:	2302      	movs	r3, #2
 800322e:	e7b9      	b.n	80031a4 <HAL_GPIO_DeInit+0x8c>
 8003230:	2303      	movs	r3, #3
 8003232:	e7b7      	b.n	80031a4 <HAL_GPIO_DeInit+0x8c>
 8003234:	2304      	movs	r3, #4
 8003236:	e7b5      	b.n	80031a4 <HAL_GPIO_DeInit+0x8c>
 8003238:	2305      	movs	r3, #5
 800323a:	e7b3      	b.n	80031a4 <HAL_GPIO_DeInit+0x8c>
 800323c:	2306      	movs	r3, #6
 800323e:	e7b1      	b.n	80031a4 <HAL_GPIO_DeInit+0x8c>
 8003240:	2307      	movs	r3, #7
 8003242:	e7af      	b.n	80031a4 <HAL_GPIO_DeInit+0x8c>
 8003244:	2308      	movs	r3, #8
 8003246:	e7ad      	b.n	80031a4 <HAL_GPIO_DeInit+0x8c>
 8003248:	40013c00 	.word	0x40013c00
 800324c:	40020000 	.word	0x40020000
 8003250:	40021400 	.word	0x40021400
 8003254:	40021800 	.word	0x40021800
 8003258:	40021c00 	.word	0x40021c00

0800325c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800325c:	6903      	ldr	r3, [r0, #16]
 800325e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003260:	bf14      	ite	ne
 8003262:	2001      	movne	r0, #1
 8003264:	2000      	moveq	r0, #0
 8003266:	4770      	bx	lr

08003268 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003268:	b10a      	cbz	r2, 800326e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800326a:	6181      	str	r1, [r0, #24]
  }
}
 800326c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800326e:	0409      	lsls	r1, r1, #16
 8003270:	e7fb      	b.n	800326a <HAL_GPIO_WritePin+0x2>
	...

08003274 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003276:	6951      	ldr	r1, [r2, #20]
 8003278:	4201      	tst	r1, r0
{
 800327a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800327c:	d002      	beq.n	8003284 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800327e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003280:	f003 f9f4 	bl	800666c <HAL_GPIO_EXTI_Callback>
  }
}
 8003284:	bd08      	pop	{r3, pc}
 8003286:	bf00      	nop
 8003288:	40013c00 	.word	0x40013c00

0800328c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800328c:	6801      	ldr	r1, [r0, #0]
 800328e:	694b      	ldr	r3, [r1, #20]
 8003290:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	d010      	beq.n	80032bc <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800329a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800329e:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80032a0:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80032a2:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a8:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ac:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ae:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032b2:	f043 0304 	orr.w	r3, r3, #4
 80032b6:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80032b8:	2001      	movs	r0, #1
 80032ba:	4770      	bx	lr
  }
  return HAL_OK;
 80032bc:	4618      	mov	r0, r3
}
 80032be:	4770      	bx	lr

080032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80032c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032c4:	4604      	mov	r4, r0
 80032c6:	460f      	mov	r7, r1
 80032c8:	4616      	mov	r6, r2
 80032ca:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032cc:	6825      	ldr	r5, [r4, #0]
 80032ce:	6968      	ldr	r0, [r5, #20]
 80032d0:	ea27 0000 	bic.w	r0, r7, r0
 80032d4:	b280      	uxth	r0, r0
 80032d6:	b1b8      	cbz	r0, 8003308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032d8:	696b      	ldr	r3, [r5, #20]
 80032da:	055a      	lsls	r2, r3, #21
 80032dc:	d516      	bpl.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032de:	682b      	ldr	r3, [r5, #0]
 80032e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032e4:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e6:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80032ea:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80032ec:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032f2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80032fc:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003300:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003302:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003306:	2001      	movs	r0, #1
}
 8003308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800330c:	1c73      	adds	r3, r6, #1
 800330e:	d0de      	beq.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003310:	f7ff fb78 	bl	8002a04 <HAL_GetTick>
 8003314:	eba0 0008 	sub.w	r0, r0, r8
 8003318:	42b0      	cmp	r0, r6
 800331a:	d801      	bhi.n	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 800331c:	2e00      	cmp	r6, #0
 800331e:	d1d5      	bne.n	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003320:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003322:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003324:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003326:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800332a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800332e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003330:	f042 0220 	orr.w	r2, r2, #32
 8003334:	e7e4      	b.n	8003300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08003336 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003336:	b570      	push	{r4, r5, r6, lr}
 8003338:	4604      	mov	r4, r0
 800333a:	460d      	mov	r5, r1
 800333c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	075b      	lsls	r3, r3, #29
 8003344:	d501      	bpl.n	800334a <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8003346:	2000      	movs	r0, #0
}
 8003348:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800334a:	4620      	mov	r0, r4
 800334c:	f7ff ff9e 	bl	800328c <I2C_IsAcknowledgeFailed>
 8003350:	b9a8      	cbnz	r0, 800337e <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003352:	1c6a      	adds	r2, r5, #1
 8003354:	d0f3      	beq.n	800333e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003356:	f7ff fb55 	bl	8002a04 <HAL_GetTick>
 800335a:	1b80      	subs	r0, r0, r6
 800335c:	42a8      	cmp	r0, r5
 800335e:	d801      	bhi.n	8003364 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003360:	2d00      	cmp	r5, #0
 8003362:	d1ec      	bne.n	800333e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003364:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003366:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003368:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800336a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800336e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003372:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003374:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003378:	f042 0220 	orr.w	r2, r2, #32
 800337c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800337e:	2001      	movs	r0, #1
 8003380:	e7e2      	b.n	8003348 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08003382 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003382:	b570      	push	{r4, r5, r6, lr}
 8003384:	4604      	mov	r4, r0
 8003386:	460d      	mov	r5, r1
 8003388:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800338a:	6821      	ldr	r1, [r4, #0]
 800338c:	694b      	ldr	r3, [r1, #20]
 800338e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003392:	d001      	beq.n	8003398 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8003394:	2000      	movs	r0, #0
 8003396:	e010      	b.n	80033ba <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003398:	694a      	ldr	r2, [r1, #20]
 800339a:	06d2      	lsls	r2, r2, #27
 800339c:	d50e      	bpl.n	80033bc <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800339e:	f06f 0210 	mvn.w	r2, #16
 80033a2:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80033a4:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80033a6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033a8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033b2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80033b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80033b8:	2001      	movs	r0, #1
}
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033bc:	f7ff fb22 	bl	8002a04 <HAL_GetTick>
 80033c0:	1b80      	subs	r0, r0, r6
 80033c2:	42a8      	cmp	r0, r5
 80033c4:	d801      	bhi.n	80033ca <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80033c6:	2d00      	cmp	r5, #0
 80033c8:	d1df      	bne.n	800338a <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033ca:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80033cc:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033ce:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80033da:	f042 0220 	orr.w	r2, r2, #32
 80033de:	e7e8      	b.n	80033b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080033e0 <I2C_WaitOnFlagUntilTimeout>:
{
 80033e0:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 80033e4:	4606      	mov	r6, r0
 80033e6:	460f      	mov	r7, r1
 80033e8:	4691      	mov	r9, r2
 80033ea:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80033f0:	6833      	ldr	r3, [r6, #0]
 80033f2:	f1ba 0f01 	cmp.w	sl, #1
 80033f6:	bf0c      	ite	eq
 80033f8:	695c      	ldreq	r4, [r3, #20]
 80033fa:	699c      	ldrne	r4, [r3, #24]
 80033fc:	ea27 0404 	bic.w	r4, r7, r4
 8003400:	b2a4      	uxth	r4, r4
 8003402:	fab4 f484 	clz	r4, r4
 8003406:	0964      	lsrs	r4, r4, #5
 8003408:	45a1      	cmp	r9, r4
 800340a:	d001      	beq.n	8003410 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 800340c:	2000      	movs	r0, #0
 800340e:	e017      	b.n	8003440 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8003410:	1c6a      	adds	r2, r5, #1
 8003412:	d0ee      	beq.n	80033f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003414:	f7ff faf6 	bl	8002a04 <HAL_GetTick>
 8003418:	9b08      	ldr	r3, [sp, #32]
 800341a:	1ac0      	subs	r0, r0, r3
 800341c:	42a8      	cmp	r0, r5
 800341e:	d801      	bhi.n	8003424 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003420:	2d00      	cmp	r5, #0
 8003422:	d1e5      	bne.n	80033f0 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003424:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003426:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003428:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800342a:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800342e:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003432:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003434:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003438:	f042 0220 	orr.w	r2, r2, #32
 800343c:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800343e:	2001      	movs	r0, #1
}
 8003440:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08003444 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003444:	b570      	push	{r4, r5, r6, lr}
 8003446:	4604      	mov	r4, r0
 8003448:	460d      	mov	r5, r1
 800344a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	061b      	lsls	r3, r3, #24
 8003452:	d501      	bpl.n	8003458 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8003454:	2000      	movs	r0, #0
}
 8003456:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003458:	4620      	mov	r0, r4
 800345a:	f7ff ff17 	bl	800328c <I2C_IsAcknowledgeFailed>
 800345e:	b9a8      	cbnz	r0, 800348c <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003460:	1c6a      	adds	r2, r5, #1
 8003462:	d0f3      	beq.n	800344c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003464:	f7ff face 	bl	8002a04 <HAL_GetTick>
 8003468:	1b80      	subs	r0, r0, r6
 800346a:	42a8      	cmp	r0, r5
 800346c:	d801      	bhi.n	8003472 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800346e:	2d00      	cmp	r5, #0
 8003470:	d1ec      	bne.n	800344c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003472:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003474:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003476:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003478:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800347c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003480:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003482:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003486:	f042 0220 	orr.w	r2, r2, #32
 800348a:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800348c:	2001      	movs	r0, #1
 800348e:	e7e2      	b.n	8003456 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08003490 <I2C_RequestMemoryWrite>:
{
 8003490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003494:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003496:	6802      	ldr	r2, [r0, #0]
{
 8003498:	b085      	sub	sp, #20
 800349a:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800349e:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a0:	6813      	ldr	r3, [r2, #0]
 80034a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a6:	6013      	str	r3, [r2, #0]
{
 80034a8:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034aa:	463b      	mov	r3, r7
 80034ac:	f8cd 8000 	str.w	r8, [sp]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80034b6:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034b8:	f7ff ff92 	bl	80033e0 <I2C_WaitOnFlagUntilTimeout>
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	b138      	cbz	r0, 80034d0 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	05db      	lsls	r3, r3, #23
 80034c4:	d502      	bpl.n	80034cc <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ca:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80034cc:	2003      	movs	r0, #3
 80034ce:	e00a      	b.n	80034e6 <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034d0:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80034d4:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034d6:	4919      	ldr	r1, [pc, #100]	; (800353c <I2C_RequestMemoryWrite+0xac>)
 80034d8:	4643      	mov	r3, r8
 80034da:	463a      	mov	r2, r7
 80034dc:	4620      	mov	r0, r4
 80034de:	f7ff feef 	bl	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e2:	b118      	cbz	r0, 80034ec <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 80034e4:	2001      	movs	r0, #1
}
 80034e6:	b005      	add	sp, #20
 80034e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	9003      	str	r0, [sp, #12]
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	9203      	str	r2, [sp, #12]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f8:	4642      	mov	r2, r8
 80034fa:	4639      	mov	r1, r7
 80034fc:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fe:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003500:	f7ff ffa0 	bl	8003444 <I2C_WaitOnTXEFlagUntilTimeout>
 8003504:	b140      	cbz	r0, 8003518 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003506:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003508:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350a:	bf01      	itttt	eq
 800350c:	6822      	ldreq	r2, [r4, #0]
 800350e:	6813      	ldreq	r3, [r2, #0]
 8003510:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003514:	6013      	streq	r3, [r2, #0]
 8003516:	e7e5      	b.n	80034e4 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003518:	f1b9 0f01 	cmp.w	r9, #1
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	d102      	bne.n	8003526 <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003520:	b2ed      	uxtb	r5, r5
 8003522:	611d      	str	r5, [r3, #16]
 8003524:	e7df      	b.n	80034e6 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003526:	0a2a      	lsrs	r2, r5, #8
 8003528:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800352a:	4639      	mov	r1, r7
 800352c:	4642      	mov	r2, r8
 800352e:	4620      	mov	r0, r4
 8003530:	f7ff ff88 	bl	8003444 <I2C_WaitOnTXEFlagUntilTimeout>
 8003534:	2800      	cmp	r0, #0
 8003536:	d1e6      	bne.n	8003506 <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	e7f1      	b.n	8003520 <I2C_RequestMemoryWrite+0x90>
 800353c:	00010002 	.word	0x00010002

08003540 <I2C_RequestMemoryRead>:
{
 8003540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003544:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003546:	6803      	ldr	r3, [r0, #0]
{
 8003548:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003550:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003552:	681a      	ldr	r2, [r3, #0]
{
 8003554:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800355c:	601a      	str	r2, [r3, #0]
{
 800355e:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003560:	463b      	mov	r3, r7
 8003562:	f8cd 8000 	str.w	r8, [sp]
 8003566:	2200      	movs	r2, #0
 8003568:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 800356c:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800356e:	f7ff ff37 	bl	80033e0 <I2C_WaitOnFlagUntilTimeout>
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	b148      	cbz	r0, 800358a <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003576:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003578:	05db      	lsls	r3, r3, #23
 800357a:	d502      	bpl.n	8003582 <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800357c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003580:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003582:	2003      	movs	r0, #3
}
 8003584:	b004      	add	sp, #16
 8003586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800358a:	fa5f f986 	uxtb.w	r9, r6
 800358e:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8003592:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003594:	492a      	ldr	r1, [pc, #168]	; (8003640 <I2C_RequestMemoryRead+0x100>)
 8003596:	4643      	mov	r3, r8
 8003598:	463a      	mov	r2, r7
 800359a:	4620      	mov	r0, r4
 800359c:	f7ff fe90 	bl	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a0:	b108      	cbz	r0, 80035a6 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 80035a2:	2001      	movs	r0, #1
 80035a4:	e7ee      	b.n	8003584 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	9003      	str	r0, [sp, #12]
 80035aa:	695a      	ldr	r2, [r3, #20]
 80035ac:	9203      	str	r2, [sp, #12]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b2:	4642      	mov	r2, r8
 80035b4:	4639      	mov	r1, r7
 80035b6:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b8:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ba:	f7ff ff43 	bl	8003444 <I2C_WaitOnTXEFlagUntilTimeout>
 80035be:	b140      	cbz	r0, 80035d2 <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035c2:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c4:	bf01      	itttt	eq
 80035c6:	6822      	ldreq	r2, [r4, #0]
 80035c8:	6813      	ldreq	r3, [r2, #0]
 80035ca:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80035ce:	6013      	streq	r3, [r2, #0]
 80035d0:	e7e7      	b.n	80035a2 <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035d2:	f1ba 0f01 	cmp.w	sl, #1
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	d11a      	bne.n	8003610 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035da:	b2ed      	uxtb	r5, r5
 80035dc:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035de:	4642      	mov	r2, r8
 80035e0:	4639      	mov	r1, r7
 80035e2:	4620      	mov	r0, r4
 80035e4:	f7ff ff2e 	bl	8003444 <I2C_WaitOnTXEFlagUntilTimeout>
 80035e8:	2800      	cmp	r0, #0
 80035ea:	d1e9      	bne.n	80035c0 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ec:	6822      	ldr	r2, [r4, #0]
 80035ee:	6813      	ldr	r3, [r2, #0]
 80035f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f4:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035fa:	4602      	mov	r2, r0
 80035fc:	f8cd 8000 	str.w	r8, [sp]
 8003600:	463b      	mov	r3, r7
 8003602:	4620      	mov	r0, r4
 8003604:	f7ff feec 	bl	80033e0 <I2C_WaitOnFlagUntilTimeout>
 8003608:	6822      	ldr	r2, [r4, #0]
 800360a:	b160      	cbz	r0, 8003626 <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800360c:	6813      	ldr	r3, [r2, #0]
 800360e:	e7b3      	b.n	8003578 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003610:	0a2a      	lsrs	r2, r5, #8
 8003612:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003614:	4639      	mov	r1, r7
 8003616:	4642      	mov	r2, r8
 8003618:	4620      	mov	r0, r4
 800361a:	f7ff ff13 	bl	8003444 <I2C_WaitOnTXEFlagUntilTimeout>
 800361e:	2800      	cmp	r0, #0
 8003620:	d1ce      	bne.n	80035c0 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	e7d9      	b.n	80035da <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003626:	f049 0301 	orr.w	r3, r9, #1
 800362a:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800362c:	4904      	ldr	r1, [pc, #16]	; (8003640 <I2C_RequestMemoryRead+0x100>)
 800362e:	4643      	mov	r3, r8
 8003630:	463a      	mov	r2, r7
 8003632:	4620      	mov	r0, r4
 8003634:	f7ff fe44 	bl	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8003638:	3800      	subs	r0, #0
 800363a:	bf18      	it	ne
 800363c:	2001      	movne	r0, #1
 800363e:	e7a1      	b.n	8003584 <I2C_RequestMemoryRead+0x44>
 8003640:	00010002 	.word	0x00010002

08003644 <HAL_I2C_MspInit>:
}
 8003644:	4770      	bx	lr
	...

08003648 <HAL_I2C_Init>:
{
 8003648:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800364a:	4604      	mov	r4, r0
 800364c:	b908      	cbnz	r0, 8003652 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800364e:	2001      	movs	r0, #1
}
 8003650:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003652:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003656:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800365a:	b91b      	cbnz	r3, 8003664 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800365c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003660:	f7ff fff0 	bl	8003644 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003664:	2324      	movs	r3, #36	; 0x24
 8003666:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800367a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003682:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003684:	f000 fe28 	bl	80042d8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003688:	4a3f      	ldr	r2, [pc, #252]	; (8003788 <HAL_I2C_Init+0x140>)
 800368a:	6863      	ldr	r3, [r4, #4]
 800368c:	4293      	cmp	r3, r2
 800368e:	bf94      	ite	ls
 8003690:	4a3e      	ldrls	r2, [pc, #248]	; (800378c <HAL_I2C_Init+0x144>)
 8003692:	4a3f      	ldrhi	r2, [pc, #252]	; (8003790 <HAL_I2C_Init+0x148>)
 8003694:	4290      	cmp	r0, r2
 8003696:	bf8c      	ite	hi
 8003698:	2200      	movhi	r2, #0
 800369a:	2201      	movls	r2, #1
 800369c:	2a00      	cmp	r2, #0
 800369e:	d1d6      	bne.n	800364e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036a0:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80036a2:	4e3c      	ldr	r6, [pc, #240]	; (8003794 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036a4:	684a      	ldr	r2, [r1, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80036a6:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036aa:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80036ae:	4332      	orrs	r2, r6
 80036b0:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036b2:	4a35      	ldr	r2, [pc, #212]	; (8003788 <HAL_I2C_Init+0x140>)
 80036b4:	6a0d      	ldr	r5, [r1, #32]
 80036b6:	4293      	cmp	r3, r2
 80036b8:	bf84      	itt	hi
 80036ba:	f44f 7296 	movhi.w	r2, #300	; 0x12c
 80036be:	4372      	mulhi	r2, r6
 80036c0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80036c4:	bf91      	iteee	ls
 80036c6:	1c72      	addls	r2, r6, #1
 80036c8:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80036cc:	fbb2 f2f6 	udivhi	r2, r2, r6
 80036d0:	3201      	addhi	r2, #1
 80036d2:	432a      	orrs	r2, r5
 80036d4:	620a      	str	r2, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036d6:	69cd      	ldr	r5, [r1, #28]
 80036d8:	1e42      	subs	r2, r0, #1
 80036da:	482b      	ldr	r0, [pc, #172]	; (8003788 <HAL_I2C_Init+0x140>)
 80036dc:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 80036e0:	4283      	cmp	r3, r0
 80036e2:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80036e6:	d832      	bhi.n	800374e <HAL_I2C_Init+0x106>
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ee:	f640 72fc 	movw	r2, #4092	; 0xffc
 80036f2:	3301      	adds	r3, #1
 80036f4:	4213      	tst	r3, r2
 80036f6:	d042      	beq.n	800377e <HAL_I2C_Init+0x136>
 80036f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fc:	432b      	orrs	r3, r5
 80036fe:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003700:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003704:	680a      	ldr	r2, [r1, #0]
 8003706:	4303      	orrs	r3, r0
 8003708:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800370c:	4313      	orrs	r3, r2
 800370e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003710:	688a      	ldr	r2, [r1, #8]
 8003712:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003716:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 800371a:	4303      	orrs	r3, r0
 800371c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003724:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003728:	68ca      	ldr	r2, [r1, #12]
 800372a:	4303      	orrs	r3, r0
 800372c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003730:	4313      	orrs	r3, r2
 8003732:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003734:	680b      	ldr	r3, [r1, #0]
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800373c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800373e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003740:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003742:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003746:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003748:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800374c:	e780      	b.n	8003650 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800374e:	68a0      	ldr	r0, [r4, #8]
 8003750:	b950      	cbnz	r0, 8003768 <HAL_I2C_Init+0x120>
 8003752:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003756:	fbb2 f3f3 	udiv	r3, r2, r3
 800375a:	3301      	adds	r3, #1
 800375c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003760:	b17b      	cbz	r3, 8003782 <HAL_I2C_Init+0x13a>
 8003762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003766:	e7c9      	b.n	80036fc <HAL_I2C_Init+0xb4>
 8003768:	2019      	movs	r0, #25
 800376a:	4343      	muls	r3, r0
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	3301      	adds	r3, #1
 8003772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003776:	b123      	cbz	r3, 8003782 <HAL_I2C_Init+0x13a>
 8003778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800377c:	e7be      	b.n	80036fc <HAL_I2C_Init+0xb4>
 800377e:	2304      	movs	r3, #4
 8003780:	e7bc      	b.n	80036fc <HAL_I2C_Init+0xb4>
 8003782:	2301      	movs	r3, #1
 8003784:	e7ba      	b.n	80036fc <HAL_I2C_Init+0xb4>
 8003786:	bf00      	nop
 8003788:	000186a0 	.word	0x000186a0
 800378c:	001e847f 	.word	0x001e847f
 8003790:	003d08ff 	.word	0x003d08ff
 8003794:	000f4240 	.word	0x000f4240

08003798 <HAL_I2C_MspDeInit>:
 8003798:	4770      	bx	lr

0800379a <HAL_I2C_DeInit>:
{
 800379a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800379c:	4604      	mov	r4, r0
 800379e:	b198      	cbz	r0, 80037c8 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80037a0:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a2:	2324      	movs	r3, #36	; 0x24
 80037a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80037a8:	6813      	ldr	r3, [r2, #0]
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80037b0:	f7ff fff2 	bl	8003798 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80037b4:	2000      	movs	r0, #0
 80037b6:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 80037b8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 80037bc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037c0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037c2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80037c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80037c8:	2001      	movs	r0, #1
 80037ca:	e7fc      	b.n	80037c6 <HAL_I2C_DeInit+0x2c>

080037cc <HAL_I2C_Mem_Write>:
{
 80037cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80037d0:	4604      	mov	r4, r0
 80037d2:	4699      	mov	r9, r3
 80037d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80037d6:	460f      	mov	r7, r1
 80037d8:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80037da:	f7ff f913 	bl	8002a04 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037de:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80037e2:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80037e4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e6:	d003      	beq.n	80037f0 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80037e8:	2002      	movs	r0, #2
}
 80037ea:	b003      	add	sp, #12
 80037ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037f0:	9000      	str	r0, [sp, #0]
 80037f2:	493c      	ldr	r1, [pc, #240]	; (80038e4 <HAL_I2C_Mem_Write+0x118>)
 80037f4:	2319      	movs	r3, #25
 80037f6:	2201      	movs	r2, #1
 80037f8:	4620      	mov	r0, r4
 80037fa:	f7ff fdf1 	bl	80033e0 <I2C_WaitOnFlagUntilTimeout>
 80037fe:	2800      	cmp	r0, #0
 8003800:	d1f2      	bne.n	80037e8 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8003802:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003806:	2b01      	cmp	r3, #1
 8003808:	d0ee      	beq.n	80037e8 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800380a:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800380c:	2301      	movs	r3, #1
 800380e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003812:	6803      	ldr	r3, [r0, #0]
 8003814:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003816:	bf5e      	ittt	pl
 8003818:	6803      	ldrpl	r3, [r0, #0]
 800381a:	f043 0301 	orrpl.w	r3, r3, #1
 800381e:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003820:	6803      	ldr	r3, [r0, #0]
 8003822:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003826:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003828:	2321      	movs	r3, #33	; 0x21
 800382a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800382e:	2340      	movs	r3, #64	; 0x40
 8003830:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003834:	2300      	movs	r3, #0
 8003836:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800383a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800383c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8003840:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003842:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003844:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003846:	4b28      	ldr	r3, [pc, #160]	; (80038e8 <HAL_I2C_Mem_Write+0x11c>)
 8003848:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800384a:	e9cd 6500 	strd	r6, r5, [sp]
 800384e:	464b      	mov	r3, r9
 8003850:	4642      	mov	r2, r8
 8003852:	4639      	mov	r1, r7
 8003854:	4620      	mov	r0, r4
 8003856:	f7ff fe1b 	bl	8003490 <I2C_RequestMemoryWrite>
 800385a:	2800      	cmp	r0, #0
 800385c:	d02a      	beq.n	80038b4 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 800385e:	2001      	movs	r0, #1
 8003860:	e7c3      	b.n	80037ea <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003862:	f7ff fdef 	bl	8003444 <I2C_WaitOnTXEFlagUntilTimeout>
 8003866:	b140      	cbz	r0, 800387a <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003868:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800386a:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386c:	bf01      	itttt	eq
 800386e:	6822      	ldreq	r2, [r4, #0]
 8003870:	6813      	ldreq	r3, [r2, #0]
 8003872:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003876:	6013      	streq	r3, [r2, #0]
 8003878:	e7f1      	b.n	800385e <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800387a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800387c:	6827      	ldr	r7, [r4, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003884:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8003886:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003888:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800388a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800388c:	3a01      	subs	r2, #1
 800388e:	b292      	uxth	r2, r2
 8003890:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003892:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8003894:	1e48      	subs	r0, r1, #1
 8003896:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003898:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800389a:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800389c:	d50a      	bpl.n	80038b4 <HAL_I2C_Mem_Write+0xe8>
 800389e:	b148      	cbz	r0, 80038b4 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038a0:	785a      	ldrb	r2, [r3, #1]
 80038a2:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80038a4:	3302      	adds	r3, #2
 80038a6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80038a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038aa:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 80038ac:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80038ae:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80038b0:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80038b2:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b6:	462a      	mov	r2, r5
 80038b8:	4631      	mov	r1, r6
 80038ba:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1d0      	bne.n	8003862 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c0:	f7ff fd39 	bl	8003336 <I2C_WaitOnBTFFlagUntilTimeout>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d1cf      	bne.n	8003868 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c8:	6822      	ldr	r2, [r4, #0]
 80038ca:	6813      	ldr	r3, [r2, #0]
 80038cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038d0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80038d2:	2320      	movs	r3, #32
 80038d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80038d8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038dc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80038e0:	e783      	b.n	80037ea <HAL_I2C_Mem_Write+0x1e>
 80038e2:	bf00      	nop
 80038e4:	00100002 	.word	0x00100002
 80038e8:	ffff0000 	.word	0xffff0000

080038ec <HAL_I2C_Mem_Read>:
{
 80038ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038f0:	4604      	mov	r4, r0
 80038f2:	b087      	sub	sp, #28
 80038f4:	4699      	mov	r9, r3
 80038f6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80038f8:	460d      	mov	r5, r1
 80038fa:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80038fc:	f7ff f882 	bl	8002a04 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003900:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003904:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8003906:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003908:	d004      	beq.n	8003914 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 800390a:	2502      	movs	r5, #2
}
 800390c:	4628      	mov	r0, r5
 800390e:	b007      	add	sp, #28
 8003910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003914:	9000      	str	r0, [sp, #0]
 8003916:	4976      	ldr	r1, [pc, #472]	; (8003af0 <HAL_I2C_Mem_Read+0x204>)
 8003918:	2319      	movs	r3, #25
 800391a:	2201      	movs	r2, #1
 800391c:	4620      	mov	r0, r4
 800391e:	f7ff fd5f 	bl	80033e0 <I2C_WaitOnFlagUntilTimeout>
 8003922:	2800      	cmp	r0, #0
 8003924:	d1f1      	bne.n	800390a <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8003926:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800392a:	2b01      	cmp	r3, #1
 800392c:	d0ed      	beq.n	800390a <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800392e:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8003930:	2301      	movs	r3, #1
 8003932:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003936:	6803      	ldr	r3, [r0, #0]
 8003938:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800393a:	bf5e      	ittt	pl
 800393c:	6803      	ldrpl	r3, [r0, #0]
 800393e:	f043 0301 	orrpl.w	r3, r3, #1
 8003942:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003944:	6803      	ldr	r3, [r0, #0]
 8003946:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800394a:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800394c:	2322      	movs	r3, #34	; 0x22
 800394e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003952:	2340      	movs	r3, #64	; 0x40
 8003954:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003958:	2300      	movs	r3, #0
 800395a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800395c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800395e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003960:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8003964:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003966:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003968:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800396a:	4b62      	ldr	r3, [pc, #392]	; (8003af4 <HAL_I2C_Mem_Read+0x208>)
 800396c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800396e:	4629      	mov	r1, r5
 8003970:	e9cd 7600 	strd	r7, r6, [sp]
 8003974:	464b      	mov	r3, r9
 8003976:	4642      	mov	r2, r8
 8003978:	4620      	mov	r0, r4
 800397a:	f7ff fde1 	bl	8003540 <I2C_RequestMemoryRead>
 800397e:	4605      	mov	r5, r0
 8003980:	b108      	cbz	r0, 8003986 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8003982:	2501      	movs	r5, #1
 8003984:	e7c2      	b.n	800390c <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8003986:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	b9b2      	cbnz	r2, 80039ba <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398c:	9002      	str	r0, [sp, #8]
 800398e:	695a      	ldr	r2, [r3, #20]
 8003990:	9202      	str	r2, [sp, #8]
 8003992:	699a      	ldr	r2, [r3, #24]
 8003994:	9202      	str	r2, [sp, #8]
 8003996:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399e:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039a0:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8003af8 <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 80039a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d12c      	bne.n	8003a04 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	2220      	movs	r2, #32
 80039ac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80039b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80039b8:	e7a8      	b.n	800390c <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 80039ba:	2a01      	cmp	r2, #1
 80039bc:	d10a      	bne.n	80039d4 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c6:	9003      	str	r0, [sp, #12]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	9203      	str	r2, [sp, #12]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	9203      	str	r2, [sp, #12]
 80039d0:	9a03      	ldr	r2, [sp, #12]
 80039d2:	e7e1      	b.n	8003998 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 80039d4:	2a02      	cmp	r2, #2
 80039d6:	d10e      	bne.n	80039f6 <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039de:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039e6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e8:	9004      	str	r0, [sp, #16]
 80039ea:	695a      	ldr	r2, [r3, #20]
 80039ec:	9204      	str	r2, [sp, #16]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	9304      	str	r3, [sp, #16]
 80039f2:	9b04      	ldr	r3, [sp, #16]
 80039f4:	e7d4      	b.n	80039a0 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f6:	9005      	str	r0, [sp, #20]
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	9205      	str	r2, [sp, #20]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	9305      	str	r3, [sp, #20]
 8003a00:	9b05      	ldr	r3, [sp, #20]
 8003a02:	e7cd      	b.n	80039a0 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d856      	bhi.n	8003ab6 <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d115      	bne.n	8003a38 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0c:	4632      	mov	r2, r6
 8003a0e:	4639      	mov	r1, r7
 8003a10:	4620      	mov	r0, r4
 8003a12:	f7ff fcb6 	bl	8003382 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d1b3      	bne.n	8003982 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a20:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a24:	3301      	adds	r3, #1
 8003a26:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003a28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003a2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003a36:	e7b5      	b.n	80039a4 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 8003a38:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a3a:	9600      	str	r6, [sp, #0]
 8003a3c:	463b      	mov	r3, r7
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	4641      	mov	r1, r8
 8003a44:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8003a46:	d119      	bne.n	8003a7c <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a48:	f7ff fcca 	bl	80033e0 <I2C_WaitOnFlagUntilTimeout>
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	d198      	bne.n	8003982 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a58:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a5e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003a60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a62:	1c53      	adds	r3, r2, #1
 8003a64:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003a66:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003a6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a74:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	7053      	strb	r3, [r2, #1]
 8003a7a:	e7d2      	b.n	8003a22 <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a7c:	f7ff fcb0 	bl	80033e0 <I2C_WaitOnFlagUntilTimeout>
 8003a80:	2800      	cmp	r0, #0
 8003a82:	f47f af7e 	bne.w	8003982 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a8e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a94:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a98:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003a9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003aa4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aac:	4602      	mov	r2, r0
 8003aae:	463b      	mov	r3, r7
 8003ab0:	4641      	mov	r1, r8
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	e7c8      	b.n	8003a48 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab6:	4632      	mov	r2, r6
 8003ab8:	4639      	mov	r1, r7
 8003aba:	4620      	mov	r0, r4
 8003abc:	f7ff fc61 	bl	8003382 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	f47f af5e 	bne.w	8003982 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003acc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ace:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ad0:	1c53      	adds	r3, r2, #1
 8003ad2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003ad4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003ada:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	6959      	ldr	r1, [r3, #20]
 8003ae6:	0749      	lsls	r1, r1, #29
 8003ae8:	f57f af5c 	bpl.w	80039a4 <HAL_I2C_Mem_Read+0xb8>
 8003aec:	e7c3      	b.n	8003a76 <HAL_I2C_Mem_Read+0x18a>
 8003aee:	bf00      	nop
 8003af0:	00100002 	.word	0x00100002
 8003af4:	ffff0000 	.word	0xffff0000
 8003af8:	00010004 	.word	0x00010004

08003afc <HAL_I2C_GetState>:
  return hi2c->State;
 8003afc:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8003b00:	4770      	bx	lr

08003b02 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003b02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003b06:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003b08:	6804      	ldr	r4, [r0, #0]
 8003b0a:	684f      	ldr	r7, [r1, #4]
 8003b0c:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b0e:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003b12:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003b16:	3284      	adds	r2, #132	; 0x84
 8003b18:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b1a:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003b1e:	6858      	ldr	r0, [r3, #4]
 8003b20:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8003b24:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b26:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003b28:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b2c:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8003b30:	4430      	add	r0, r6
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003b32:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b34:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003b38:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003b3a:	68e0      	ldr	r0, [r4, #12]
 8003b3c:	68cd      	ldr	r5, [r1, #12]
 8003b3e:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003b42:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003b44:	6898      	ldr	r0, [r3, #8]
 8003b46:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8003b4a:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003b4c:	68e6      	ldr	r6, [r4, #12]
 8003b4e:	6888      	ldr	r0, [r1, #8]
 8003b50:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8003b54:	3001      	adds	r0, #1
 8003b56:	4430      	add	r0, r6
 8003b58:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003b5c:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003b5e:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003b60:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003b62:	f020 0007 	bic.w	r0, r0, #7
 8003b66:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003b68:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003b6c:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003b6e:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003b70:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003b74:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003b78:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003b7c:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8003b80:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8003b84:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003b88:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003b8c:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003b8e:	6958      	ldr	r0, [r3, #20]
 8003b90:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003b94:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003b96:	6948      	ldr	r0, [r1, #20]
 8003b98:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003b9a:	69d8      	ldr	r0, [r3, #28]
 8003b9c:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8003ba0:	f020 0007 	bic.w	r0, r0, #7
 8003ba4:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003ba6:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8003baa:	4305      	orrs	r5, r0
 8003bac:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003bae:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003bb0:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003bb2:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003bb6:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003bb8:	b31e      	cbz	r6, 8003c02 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003bba:	2e01      	cmp	r6, #1
 8003bbc:	d023      	beq.n	8003c06 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003bbe:	1eb0      	subs	r0, r6, #2
 8003bc0:	2802      	cmp	r0, #2
 8003bc2:	d922      	bls.n	8003c0a <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003bc4:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003bc6:	bf0c      	ite	eq
 8003bc8:	2002      	moveq	r0, #2
 8003bca:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003bcc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003bce:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8003bd2:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003bd4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003bd6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003bd8:	eba7 070c 	sub.w	r7, r7, ip
 8003bdc:	4345      	muls	r5, r0
 8003bde:	4378      	muls	r0, r7
 8003be0:	3003      	adds	r0, #3
 8003be2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003be6:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003be8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003bea:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8003bee:	f020 0007 	bic.w	r0, r0, #7
 8003bf2:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003bf4:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003bf6:	58a3      	ldr	r3, [r4, r2]
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	50a3      	str	r3, [r4, r2]
}
 8003bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8003c02:	2004      	movs	r0, #4
 8003c04:	e7e2      	b.n	8003bcc <LTDC_SetConfig+0xca>
    tmp = 3U;
 8003c06:	2003      	movs	r0, #3
 8003c08:	e7e0      	b.n	8003bcc <LTDC_SetConfig+0xca>
    tmp = 2U;
 8003c0a:	2002      	movs	r0, #2
 8003c0c:	e7de      	b.n	8003bcc <LTDC_SetConfig+0xca>

08003c0e <HAL_LTDC_MspInit>:
}
 8003c0e:	4770      	bx	lr

08003c10 <HAL_LTDC_Init>:
{
 8003c10:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8003c12:	4604      	mov	r4, r0
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d063      	beq.n	8003ce0 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003c18:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003c1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c20:	b91b      	cbnz	r3, 8003c2a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8003c22:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003c26:	f7ff fff2 	bl	8003c0e <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	699a      	ldr	r2, [r3, #24]
 8003c34:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003c38:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c3a:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8003c3e:	4302      	orrs	r2, r0
 8003c40:	68e0      	ldr	r0, [r4, #12]
 8003c42:	6999      	ldr	r1, [r3, #24]
 8003c44:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c46:	6920      	ldr	r0, [r4, #16]
 8003c48:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	4924      	ldr	r1, [pc, #144]	; (8003ce4 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003c52:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003c54:	400a      	ands	r2, r1
 8003c56:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003c5e:	69a0      	ldr	r0, [r4, #24]
 8003c60:	4302      	orrs	r2, r0
 8003c62:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003c64:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003c66:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003c68:	400a      	ands	r2, r1
 8003c6a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003c72:	6a20      	ldr	r0, [r4, #32]
 8003c74:	4302      	orrs	r2, r0
 8003c76:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003c78:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003c7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003c7c:	400a      	ands	r2, r1
 8003c7e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003c86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003c88:	4302      	orrs	r2, r0
 8003c8a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	4011      	ands	r1, r2
 8003c90:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003c92:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003c94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003c96:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003c9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003ca0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003ca2:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003ca6:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003caa:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8003cae:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cb2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003cbc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc4:	f042 0206 	orr.w	r2, r2, #6
 8003cc8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003cca:	699a      	ldr	r2, [r3, #24]
 8003ccc:	f042 0201 	orr.w	r2, r2, #1
 8003cd0:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003cd2:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8003cd4:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003cd6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003cda:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003ce0:	2001      	movs	r0, #1
 8003ce2:	e7fc      	b.n	8003cde <HAL_LTDC_Init+0xce>
 8003ce4:	f000f800 	.word	0xf000f800

08003ce8 <HAL_LTDC_ConfigLayer>:
{
 8003ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8003cec:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003cf0:	2b01      	cmp	r3, #1
{
 8003cf2:	4606      	mov	r6, r0
 8003cf4:	460f      	mov	r7, r1
 8003cf6:	4694      	mov	ip, r2
 8003cf8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8003cfc:	d01f      	beq.n	8003d3e <HAL_LTDC_ConfigLayer+0x56>
 8003cfe:	f04f 0801 	mov.w	r8, #1
 8003d02:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d06:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003d0a:	2434      	movs	r4, #52	; 0x34
 8003d0c:	460d      	mov	r5, r1
 8003d0e:	fb04 6402 	mla	r4, r4, r2, r6
 8003d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d14:	3438      	adds	r4, #56	; 0x38
 8003d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003d24:	4630      	mov	r0, r6
 8003d26:	4662      	mov	r2, ip
 8003d28:	4639      	mov	r1, r7
 8003d2a:	f7ff feea 	bl	8003b02 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d2e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8003d30:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d32:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003d36:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003d3a:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8003d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003d44 <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 8003d44:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	f04f 0302 	mov.w	r3, #2
 8003d4e:	d00c      	beq.n	8003d6a <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003d50:	4a07      	ldr	r2, [pc, #28]	; (8003d70 <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d52:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003d56:	6993      	ldr	r3, [r2, #24]
 8003d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5c:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003d64:	2300      	movs	r3, #0
 8003d66:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8003d6a:	4618      	mov	r0, r3
}
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40016800 	.word	0x40016800

08003d74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d7c:	4d18      	ldr	r5, [pc, #96]	; (8003de0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d90:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <HAL_PWREx_EnableOverDrive+0x70>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003d96:	f7fe fe35 	bl	8002a04 <HAL_GetTick>
 8003d9a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d9c:	686b      	ldr	r3, [r5, #4]
 8003d9e:	03da      	lsls	r2, r3, #15
 8003da0:	d50b      	bpl.n	8003dba <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003da2:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003da4:	4d0e      	ldr	r5, [pc, #56]	; (8003de0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003da6:	2201      	movs	r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003daa:	f7fe fe2b 	bl	8002a04 <HAL_GetTick>
 8003dae:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003db0:	686b      	ldr	r3, [r5, #4]
 8003db2:	039b      	lsls	r3, r3, #14
 8003db4:	d50a      	bpl.n	8003dcc <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003db6:	2000      	movs	r0, #0
 8003db8:	e006      	b.n	8003dc8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dba:	f7fe fe23 	bl	8002a04 <HAL_GetTick>
 8003dbe:	1b00      	subs	r0, r0, r4
 8003dc0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003dc4:	d9ea      	bls.n	8003d9c <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8003dc6:	2003      	movs	r0, #3
}
 8003dc8:	b003      	add	sp, #12
 8003dca:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dcc:	f7fe fe1a 	bl	8002a04 <HAL_GetTick>
 8003dd0:	1b00      	subs	r0, r0, r4
 8003dd2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003dd6:	d9eb      	bls.n	8003db0 <HAL_PWREx_EnableOverDrive+0x3c>
 8003dd8:	e7f5      	b.n	8003dc6 <HAL_PWREx_EnableOverDrive+0x52>
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40007000 	.word	0x40007000
 8003de4:	420e0040 	.word	0x420e0040
 8003de8:	420e0044 	.word	0x420e0044

08003dec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003df0:	4604      	mov	r4, r0
 8003df2:	b340      	cbz	r0, 8003e46 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df4:	6803      	ldr	r3, [r0, #0]
 8003df6:	07dd      	lsls	r5, r3, #31
 8003df8:	d410      	bmi.n	8003e1c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	0798      	lsls	r0, r3, #30
 8003dfe:	d45e      	bmi.n	8003ebe <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	071a      	lsls	r2, r3, #28
 8003e04:	f100 80a0 	bmi.w	8003f48 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	075b      	lsls	r3, r3, #29
 8003e0c:	f100 80be 	bmi.w	8003f8c <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e10:	69a0      	ldr	r0, [r4, #24]
 8003e12:	2800      	cmp	r0, #0
 8003e14:	f040 811f 	bne.w	8004056 <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003e18:	2000      	movs	r0, #0
 8003e1a:	e02b      	b.n	8003e74 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e1c:	4ba6      	ldr	r3, [pc, #664]	; (80040b8 <HAL_RCC_OscConfig+0x2cc>)
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	f002 020c 	and.w	r2, r2, #12
 8003e24:	2a04      	cmp	r2, #4
 8003e26:	d007      	beq.n	8003e38 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e2e:	2a08      	cmp	r2, #8
 8003e30:	d10b      	bne.n	8003e4a <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	0251      	lsls	r1, r2, #9
 8003e36:	d508      	bpl.n	8003e4a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e38:	4b9f      	ldr	r3, [pc, #636]	; (80040b8 <HAL_RCC_OscConfig+0x2cc>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	039a      	lsls	r2, r3, #14
 8003e3e:	d5dc      	bpl.n	8003dfa <HAL_RCC_OscConfig+0xe>
 8003e40:	6863      	ldr	r3, [r4, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1d9      	bne.n	8003dfa <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8003e46:	2001      	movs	r0, #1
 8003e48:	e014      	b.n	8003e74 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e4a:	6862      	ldr	r2, [r4, #4]
 8003e4c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003e50:	d113      	bne.n	8003e7a <HAL_RCC_OscConfig+0x8e>
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e58:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e5a:	f7fe fdd3 	bl	8002a04 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5e:	4e96      	ldr	r6, [pc, #600]	; (80040b8 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8003e60:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e62:	6833      	ldr	r3, [r6, #0]
 8003e64:	039b      	lsls	r3, r3, #14
 8003e66:	d4c8      	bmi.n	8003dfa <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e68:	f7fe fdcc 	bl	8002a04 <HAL_GetTick>
 8003e6c:	1b40      	subs	r0, r0, r5
 8003e6e:	2864      	cmp	r0, #100	; 0x64
 8003e70:	d9f7      	bls.n	8003e62 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8003e72:	2003      	movs	r0, #3
}
 8003e74:	b002      	add	sp, #8
 8003e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e7a:	4d8f      	ldr	r5, [pc, #572]	; (80040b8 <HAL_RCC_OscConfig+0x2cc>)
 8003e7c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	d107      	bne.n	8003e94 <HAL_RCC_OscConfig+0xa8>
 8003e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e88:	602b      	str	r3, [r5, #0]
 8003e8a:	682b      	ldr	r3, [r5, #0]
 8003e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e90:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e92:	e7e2      	b.n	8003e5a <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e98:	602b      	str	r3, [r5, #0]
 8003e9a:	682b      	ldr	r3, [r5, #0]
 8003e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ea0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ea2:	2a00      	cmp	r2, #0
 8003ea4:	d1d9      	bne.n	8003e5a <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8003ea6:	f7fe fdad 	bl	8002a04 <HAL_GetTick>
 8003eaa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eac:	682b      	ldr	r3, [r5, #0]
 8003eae:	039f      	lsls	r7, r3, #14
 8003eb0:	d5a3      	bpl.n	8003dfa <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb2:	f7fe fda7 	bl	8002a04 <HAL_GetTick>
 8003eb6:	1b80      	subs	r0, r0, r6
 8003eb8:	2864      	cmp	r0, #100	; 0x64
 8003eba:	d9f7      	bls.n	8003eac <HAL_RCC_OscConfig+0xc0>
 8003ebc:	e7d9      	b.n	8003e72 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ebe:	4b7e      	ldr	r3, [pc, #504]	; (80040b8 <HAL_RCC_OscConfig+0x2cc>)
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	f012 0f0c 	tst.w	r2, #12
 8003ec6:	d007      	beq.n	8003ed8 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ece:	2a08      	cmp	r2, #8
 8003ed0:	d111      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	025e      	lsls	r6, r3, #9
 8003ed6:	d40e      	bmi.n	8003ef6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed8:	4b77      	ldr	r3, [pc, #476]	; (80040b8 <HAL_RCC_OscConfig+0x2cc>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	0795      	lsls	r5, r2, #30
 8003ede:	d502      	bpl.n	8003ee6 <HAL_RCC_OscConfig+0xfa>
 8003ee0:	68e2      	ldr	r2, [r4, #12]
 8003ee2:	2a01      	cmp	r2, #1
 8003ee4:	d1af      	bne.n	8003e46 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	6921      	ldr	r1, [r4, #16]
 8003eea:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003eee:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003ef2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ef4:	e784      	b.n	8003e00 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ef6:	68e2      	ldr	r2, [r4, #12]
 8003ef8:	4b70      	ldr	r3, [pc, #448]	; (80040bc <HAL_RCC_OscConfig+0x2d0>)
 8003efa:	b1b2      	cbz	r2, 8003f2a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8003efc:	2201      	movs	r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003f00:	f7fe fd80 	bl	8002a04 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f04:	4d6c      	ldr	r5, [pc, #432]	; (80040b8 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8003f06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f08:	682b      	ldr	r3, [r5, #0]
 8003f0a:	0798      	lsls	r0, r3, #30
 8003f0c:	d507      	bpl.n	8003f1e <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0e:	682b      	ldr	r3, [r5, #0]
 8003f10:	6922      	ldr	r2, [r4, #16]
 8003f12:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003f16:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003f1a:	602b      	str	r3, [r5, #0]
 8003f1c:	e770      	b.n	8003e00 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f1e:	f7fe fd71 	bl	8002a04 <HAL_GetTick>
 8003f22:	1b80      	subs	r0, r0, r6
 8003f24:	2802      	cmp	r0, #2
 8003f26:	d9ef      	bls.n	8003f08 <HAL_RCC_OscConfig+0x11c>
 8003f28:	e7a3      	b.n	8003e72 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8003f2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003f2c:	f7fe fd6a 	bl	8002a04 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f30:	4e61      	ldr	r6, [pc, #388]	; (80040b8 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8003f32:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f34:	6833      	ldr	r3, [r6, #0]
 8003f36:	0799      	lsls	r1, r3, #30
 8003f38:	f57f af62 	bpl.w	8003e00 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f3c:	f7fe fd62 	bl	8002a04 <HAL_GetTick>
 8003f40:	1b40      	subs	r0, r0, r5
 8003f42:	2802      	cmp	r0, #2
 8003f44:	d9f6      	bls.n	8003f34 <HAL_RCC_OscConfig+0x148>
 8003f46:	e794      	b.n	8003e72 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f48:	6962      	ldr	r2, [r4, #20]
 8003f4a:	4b5d      	ldr	r3, [pc, #372]	; (80040c0 <HAL_RCC_OscConfig+0x2d4>)
 8003f4c:	b17a      	cbz	r2, 8003f6e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003f52:	f7fe fd57 	bl	8002a04 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f56:	4e58      	ldr	r6, [pc, #352]	; (80040b8 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8003f58:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003f5c:	079f      	lsls	r7, r3, #30
 8003f5e:	f53f af53 	bmi.w	8003e08 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f62:	f7fe fd4f 	bl	8002a04 <HAL_GetTick>
 8003f66:	1b40      	subs	r0, r0, r5
 8003f68:	2802      	cmp	r0, #2
 8003f6a:	d9f6      	bls.n	8003f5a <HAL_RCC_OscConfig+0x16e>
 8003f6c:	e781      	b.n	8003e72 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8003f6e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003f70:	f7fe fd48 	bl	8002a04 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f74:	4e50      	ldr	r6, [pc, #320]	; (80040b8 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8003f76:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f78:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003f7a:	0798      	lsls	r0, r3, #30
 8003f7c:	f57f af44 	bpl.w	8003e08 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f80:	f7fe fd40 	bl	8002a04 <HAL_GetTick>
 8003f84:	1b40      	subs	r0, r0, r5
 8003f86:	2802      	cmp	r0, #2
 8003f88:	d9f6      	bls.n	8003f78 <HAL_RCC_OscConfig+0x18c>
 8003f8a:	e772      	b.n	8003e72 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8c:	4b4a      	ldr	r3, [pc, #296]	; (80040b8 <HAL_RCC_OscConfig+0x2cc>)
 8003f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f90:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8003f94:	d128      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	9201      	str	r2, [sp, #4]
 8003f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	9301      	str	r3, [sp, #4]
 8003fa8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003faa:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fac:	4d45      	ldr	r5, [pc, #276]	; (80040c4 <HAL_RCC_OscConfig+0x2d8>)
 8003fae:	682b      	ldr	r3, [r5, #0]
 8003fb0:	05d9      	lsls	r1, r3, #23
 8003fb2:	d51b      	bpl.n	8003fec <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb4:	68a3      	ldr	r3, [r4, #8]
 8003fb6:	4d40      	ldr	r5, [pc, #256]	; (80040b8 <HAL_RCC_OscConfig+0x2cc>)
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d127      	bne.n	800400c <HAL_RCC_OscConfig+0x220>
 8003fbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003fc4:	f7fe fd1e 	bl	8002a04 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc8:	4e3b      	ldr	r6, [pc, #236]	; (80040b8 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8003fca:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fcc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003fd2:	079b      	lsls	r3, r3, #30
 8003fd4:	d539      	bpl.n	800404a <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 8003fd6:	2f00      	cmp	r7, #0
 8003fd8:	f43f af1a 	beq.w	8003e10 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fdc:	4a36      	ldr	r2, [pc, #216]	; (80040b8 <HAL_RCC_OscConfig+0x2cc>)
 8003fde:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe6:	e713      	b.n	8003e10 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003fe8:	2700      	movs	r7, #0
 8003fea:	e7df      	b.n	8003fac <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003ff4:	f7fe fd06 	bl	8002a04 <HAL_GetTick>
 8003ff8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffa:	682b      	ldr	r3, [r5, #0]
 8003ffc:	05da      	lsls	r2, r3, #23
 8003ffe:	d4d9      	bmi.n	8003fb4 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004000:	f7fe fd00 	bl	8002a04 <HAL_GetTick>
 8004004:	1b80      	subs	r0, r0, r6
 8004006:	2802      	cmp	r0, #2
 8004008:	d9f7      	bls.n	8003ffa <HAL_RCC_OscConfig+0x20e>
 800400a:	e732      	b.n	8003e72 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800400c:	2b05      	cmp	r3, #5
 800400e:	d104      	bne.n	800401a <HAL_RCC_OscConfig+0x22e>
 8004010:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004012:	f043 0304 	orr.w	r3, r3, #4
 8004016:	672b      	str	r3, [r5, #112]	; 0x70
 8004018:	e7d0      	b.n	8003fbc <HAL_RCC_OscConfig+0x1d0>
 800401a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800401c:	f022 0201 	bic.w	r2, r2, #1
 8004020:	672a      	str	r2, [r5, #112]	; 0x70
 8004022:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8004024:	f022 0204 	bic.w	r2, r2, #4
 8004028:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1ca      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 800402e:	f7fe fce9 	bl	8002a04 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004032:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004036:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004038:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800403a:	0798      	lsls	r0, r3, #30
 800403c:	d5cb      	bpl.n	8003fd6 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800403e:	f7fe fce1 	bl	8002a04 <HAL_GetTick>
 8004042:	1b80      	subs	r0, r0, r6
 8004044:	4540      	cmp	r0, r8
 8004046:	d9f7      	bls.n	8004038 <HAL_RCC_OscConfig+0x24c>
 8004048:	e713      	b.n	8003e72 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fe fcdb 	bl	8002a04 <HAL_GetTick>
 800404e:	1b40      	subs	r0, r0, r5
 8004050:	4540      	cmp	r0, r8
 8004052:	d9bd      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x1e4>
 8004054:	e70d      	b.n	8003e72 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004056:	4d18      	ldr	r5, [pc, #96]	; (80040b8 <HAL_RCC_OscConfig+0x2cc>)
 8004058:	68ab      	ldr	r3, [r5, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
 800405e:	2b08      	cmp	r3, #8
 8004060:	d047      	beq.n	80040f2 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004062:	4e19      	ldr	r6, [pc, #100]	; (80040c8 <HAL_RCC_OscConfig+0x2dc>)
 8004064:	2300      	movs	r3, #0
 8004066:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004068:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800406a:	d135      	bne.n	80040d8 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 800406c:	f7fe fcca 	bl	8002a04 <HAL_GetTick>
 8004070:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	682b      	ldr	r3, [r5, #0]
 8004074:	0199      	lsls	r1, r3, #6
 8004076:	d429      	bmi.n	80040cc <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004078:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800407c:	4313      	orrs	r3, r2
 800407e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004080:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004084:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004086:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800408a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800408c:	0852      	lsrs	r2, r2, #1
 800408e:	3a01      	subs	r2, #1
 8004090:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004094:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004096:	2301      	movs	r3, #1
 8004098:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800409a:	f7fe fcb3 	bl	8002a04 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409e:	4d06      	ldr	r5, [pc, #24]	; (80040b8 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80040a0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a2:	682b      	ldr	r3, [r5, #0]
 80040a4:	019a      	lsls	r2, r3, #6
 80040a6:	f53f aeb7 	bmi.w	8003e18 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040aa:	f7fe fcab 	bl	8002a04 <HAL_GetTick>
 80040ae:	1b00      	subs	r0, r0, r4
 80040b0:	2802      	cmp	r0, #2
 80040b2:	d9f6      	bls.n	80040a2 <HAL_RCC_OscConfig+0x2b6>
 80040b4:	e6dd      	b.n	8003e72 <HAL_RCC_OscConfig+0x86>
 80040b6:	bf00      	nop
 80040b8:	40023800 	.word	0x40023800
 80040bc:	42470000 	.word	0x42470000
 80040c0:	42470e80 	.word	0x42470e80
 80040c4:	40007000 	.word	0x40007000
 80040c8:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fe fc9a 	bl	8002a04 <HAL_GetTick>
 80040d0:	1bc0      	subs	r0, r0, r7
 80040d2:	2802      	cmp	r0, #2
 80040d4:	d9cd      	bls.n	8004072 <HAL_RCC_OscConfig+0x286>
 80040d6:	e6cc      	b.n	8003e72 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80040d8:	f7fe fc94 	bl	8002a04 <HAL_GetTick>
 80040dc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040de:	682b      	ldr	r3, [r5, #0]
 80040e0:	019b      	lsls	r3, r3, #6
 80040e2:	f57f ae99 	bpl.w	8003e18 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e6:	f7fe fc8d 	bl	8002a04 <HAL_GetTick>
 80040ea:	1b00      	subs	r0, r0, r4
 80040ec:	2802      	cmp	r0, #2
 80040ee:	d9f6      	bls.n	80040de <HAL_RCC_OscConfig+0x2f2>
 80040f0:	e6bf      	b.n	8003e72 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040f2:	2801      	cmp	r0, #1
 80040f4:	f43f aebe 	beq.w	8003e74 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 80040f8:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040fa:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fc:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004100:	4291      	cmp	r1, r2
 8004102:	f47f aea0 	bne.w	8003e46 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004106:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004108:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410c:	428a      	cmp	r2, r1
 800410e:	f47f ae9a 	bne.w	8003e46 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004112:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004114:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004118:	401a      	ands	r2, r3
 800411a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800411e:	f47f ae92 	bne.w	8003e46 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004122:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004124:	0852      	lsrs	r2, r2, #1
 8004126:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800412a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800412c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004130:	f47f ae89 	bne.w	8003e46 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004134:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004136:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800413a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800413e:	f43f ae6b 	beq.w	8003e18 <HAL_RCC_OscConfig+0x2c>
 8004142:	e680      	b.n	8003e46 <HAL_RCC_OscConfig+0x5a>

08004144 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004144:	4913      	ldr	r1, [pc, #76]	; (8004194 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8004146:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004148:	688b      	ldr	r3, [r1, #8]
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	2b04      	cmp	r3, #4
 8004150:	d01c      	beq.n	800418c <HAL_RCC_GetSysClockFreq+0x48>
 8004152:	2b08      	cmp	r3, #8
 8004154:	d11c      	bne.n	8004190 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004156:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004158:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800415c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004160:	bf14      	ite	ne
 8004162:	480d      	ldrne	r0, [pc, #52]	; (8004198 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004164:	480d      	ldreq	r0, [pc, #52]	; (800419c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004166:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800416a:	bf18      	it	ne
 800416c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800416e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004172:	fba1 0100 	umull	r0, r1, r1, r0
 8004176:	f7fc f88b 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <HAL_RCC_GetSysClockFreq+0x50>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004182:	3301      	adds	r3, #1
 8004184:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004186:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800418a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800418c:	4802      	ldr	r0, [pc, #8]	; (8004198 <HAL_RCC_GetSysClockFreq+0x54>)
 800418e:	e7fc      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8004190:	4802      	ldr	r0, [pc, #8]	; (800419c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8004192:	e7fa      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x46>
 8004194:	40023800 	.word	0x40023800
 8004198:	007a1200 	.word	0x007a1200
 800419c:	00f42400 	.word	0x00f42400

080041a0 <HAL_RCC_ClockConfig>:
{
 80041a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80041a6:	4604      	mov	r4, r0
 80041a8:	b910      	cbnz	r0, 80041b0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80041aa:	2001      	movs	r0, #1
}
 80041ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041b0:	4b44      	ldr	r3, [pc, #272]	; (80042c4 <HAL_RCC_ClockConfig+0x124>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	f002 020f 	and.w	r2, r2, #15
 80041b8:	428a      	cmp	r2, r1
 80041ba:	d328      	bcc.n	800420e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041bc:	6822      	ldr	r2, [r4, #0]
 80041be:	0797      	lsls	r7, r2, #30
 80041c0:	d42d      	bmi.n	800421e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c2:	07d0      	lsls	r0, r2, #31
 80041c4:	d441      	bmi.n	800424a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041c6:	4b3f      	ldr	r3, [pc, #252]	; (80042c4 <HAL_RCC_ClockConfig+0x124>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	f002 020f 	and.w	r2, r2, #15
 80041ce:	42aa      	cmp	r2, r5
 80041d0:	d866      	bhi.n	80042a0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d2:	6822      	ldr	r2, [r4, #0]
 80041d4:	0751      	lsls	r1, r2, #29
 80041d6:	d46c      	bmi.n	80042b2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d8:	0713      	lsls	r3, r2, #28
 80041da:	d507      	bpl.n	80041ec <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041dc:	4a3a      	ldr	r2, [pc, #232]	; (80042c8 <HAL_RCC_ClockConfig+0x128>)
 80041de:	6921      	ldr	r1, [r4, #16]
 80041e0:	6893      	ldr	r3, [r2, #8]
 80041e2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80041e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80041ea:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ec:	f7ff ffaa 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 80041f0:	4b35      	ldr	r3, [pc, #212]	; (80042c8 <HAL_RCC_ClockConfig+0x128>)
 80041f2:	4a36      	ldr	r2, [pc, #216]	; (80042cc <HAL_RCC_ClockConfig+0x12c>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80041fa:	5cd3      	ldrb	r3, [r2, r3]
 80041fc:	40d8      	lsrs	r0, r3
 80041fe:	4b34      	ldr	r3, [pc, #208]	; (80042d0 <HAL_RCC_ClockConfig+0x130>)
 8004200:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8004202:	4b34      	ldr	r3, [pc, #208]	; (80042d4 <HAL_RCC_ClockConfig+0x134>)
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	f7fe fbb5 	bl	8002974 <HAL_InitTick>
  return HAL_OK;
 800420a:	2000      	movs	r0, #0
 800420c:	e7ce      	b.n	80041ac <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420e:	b2ca      	uxtb	r2, r1
 8004210:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	428b      	cmp	r3, r1
 800421a:	d1c6      	bne.n	80041aa <HAL_RCC_ClockConfig+0xa>
 800421c:	e7ce      	b.n	80041bc <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800421e:	4b2a      	ldr	r3, [pc, #168]	; (80042c8 <HAL_RCC_ClockConfig+0x128>)
 8004220:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004224:	bf1e      	ittt	ne
 8004226:	6899      	ldrne	r1, [r3, #8]
 8004228:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 800422c:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422e:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004230:	bf42      	ittt	mi
 8004232:	6899      	ldrmi	r1, [r3, #8]
 8004234:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8004238:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423a:	4923      	ldr	r1, [pc, #140]	; (80042c8 <HAL_RCC_ClockConfig+0x128>)
 800423c:	68a0      	ldr	r0, [r4, #8]
 800423e:	688b      	ldr	r3, [r1, #8]
 8004240:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004244:	4303      	orrs	r3, r0
 8004246:	608b      	str	r3, [r1, #8]
 8004248:	e7bb      	b.n	80041c2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424a:	6862      	ldr	r2, [r4, #4]
 800424c:	4b1e      	ldr	r3, [pc, #120]	; (80042c8 <HAL_RCC_ClockConfig+0x128>)
 800424e:	2a01      	cmp	r2, #1
 8004250:	d11c      	bne.n	800428c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004258:	d0a7      	beq.n	80041aa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800425a:	4e1b      	ldr	r6, [pc, #108]	; (80042c8 <HAL_RCC_ClockConfig+0x128>)
 800425c:	68b3      	ldr	r3, [r6, #8]
 800425e:	f023 0303 	bic.w	r3, r3, #3
 8004262:	4313      	orrs	r3, r2
 8004264:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004266:	f7fe fbcd 	bl	8002a04 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800426a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800426e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004270:	68b3      	ldr	r3, [r6, #8]
 8004272:	6862      	ldr	r2, [r4, #4]
 8004274:	f003 030c 	and.w	r3, r3, #12
 8004278:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800427c:	d0a3      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800427e:	f7fe fbc1 	bl	8002a04 <HAL_GetTick>
 8004282:	1bc0      	subs	r0, r0, r7
 8004284:	4540      	cmp	r0, r8
 8004286:	d9f3      	bls.n	8004270 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8004288:	2003      	movs	r0, #3
 800428a:	e78f      	b.n	80041ac <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800428c:	1e91      	subs	r1, r2, #2
 800428e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004290:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004292:	d802      	bhi.n	800429a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004294:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004298:	e7de      	b.n	8004258 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429a:	f013 0f02 	tst.w	r3, #2
 800429e:	e7db      	b.n	8004258 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a0:	b2ea      	uxtb	r2, r5
 80042a2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	42ab      	cmp	r3, r5
 80042ac:	f47f af7d 	bne.w	80041aa <HAL_RCC_ClockConfig+0xa>
 80042b0:	e78f      	b.n	80041d2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b2:	4905      	ldr	r1, [pc, #20]	; (80042c8 <HAL_RCC_ClockConfig+0x128>)
 80042b4:	68e0      	ldr	r0, [r4, #12]
 80042b6:	688b      	ldr	r3, [r1, #8]
 80042b8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80042bc:	4303      	orrs	r3, r0
 80042be:	608b      	str	r3, [r1, #8]
 80042c0:	e78a      	b.n	80041d8 <HAL_RCC_ClockConfig+0x38>
 80042c2:	bf00      	nop
 80042c4:	40023c00 	.word	0x40023c00
 80042c8:	40023800 	.word	0x40023800
 80042cc:	0800c668 	.word	0x0800c668
 80042d0:	20000100 	.word	0x20000100
 80042d4:	20000108 	.word	0x20000108

080042d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042d8:	4b04      	ldr	r3, [pc, #16]	; (80042ec <HAL_RCC_GetPCLK1Freq+0x14>)
 80042da:	4a05      	ldr	r2, [pc, #20]	; (80042f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80042e2:	5cd3      	ldrb	r3, [r2, r3]
 80042e4:	4a03      	ldr	r2, [pc, #12]	; (80042f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80042e6:	6810      	ldr	r0, [r2, #0]
}
 80042e8:	40d8      	lsrs	r0, r3
 80042ea:	4770      	bx	lr
 80042ec:	40023800 	.word	0x40023800
 80042f0:	0800c678 	.word	0x0800c678
 80042f4:	20000100 	.word	0x20000100

080042f8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <HAL_RCC_GetPCLK2Freq+0x14>)
 80042fa:	4a05      	ldr	r2, [pc, #20]	; (8004310 <HAL_RCC_GetPCLK2Freq+0x18>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004302:	5cd3      	ldrb	r3, [r2, r3]
 8004304:	4a03      	ldr	r2, [pc, #12]	; (8004314 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004306:	6810      	ldr	r0, [r2, #0]
}
 8004308:	40d8      	lsrs	r0, r3
 800430a:	4770      	bx	lr
 800430c:	40023800 	.word	0x40023800
 8004310:	0800c678 	.word	0x0800c678
 8004314:	20000100 	.word	0x20000100

08004318 <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004318:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800431a:	f013 0f43 	tst.w	r3, #67	; 0x43
{
 800431e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004320:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004322:	f040 808a 	bne.w	800443a <HAL_RCCEx_PeriphCLKConfig+0x122>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	f013 0f0c 	tst.w	r3, #12
 800432c:	d044      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800432e:	4d89      	ldr	r5, [pc, #548]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004330:	4e89      	ldr	r6, [pc, #548]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    __HAL_RCC_PLLSAI_DISABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004336:	f7fe fb65 	bl	8002a04 <HAL_GetTick>
 800433a:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800433c:	6833      	ldr	r3, [r6, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	f100 80cc 	bmi.w	80044dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004344:	6821      	ldr	r1, [r4, #0]
 8004346:	074f      	lsls	r7, r1, #29
 8004348:	d515      	bpl.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800434a:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800434e:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004352:	061b      	lsls	r3, r3, #24
 8004354:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8004358:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004362:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8004366:	6a22      	ldr	r2, [r4, #32]
 8004368:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800436c:	3a01      	subs	r2, #1
 800436e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004372:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004376:	070e      	lsls	r6, r1, #28
 8004378:	d514      	bpl.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800437a:	4a77      	ldr	r2, [pc, #476]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x240>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800437c:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800437e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004382:	6920      	ldr	r0, [r4, #16]
 8004384:	071b      	lsls	r3, r3, #28
 8004386:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800438a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800438e:	430b      	orrs	r3, r1
 8004390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004394:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004398:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800439a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800439e:	430b      	orrs	r3, r1
 80043a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80043a4:	2301      	movs	r3, #1
 80043a6:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043a8:	f7fe fb2c 	bl	8002a04 <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043ac:	4e6a      	ldr	r6, [pc, #424]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    tickstart = HAL_GetTick();
 80043ae:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043b0:	6833      	ldr	r3, [r6, #0]
 80043b2:	0098      	lsls	r0, r3, #2
 80043b4:	f140 8099 	bpl.w	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	069a      	lsls	r2, r3, #26
 80043bc:	d533      	bpl.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	9301      	str	r3, [sp, #4]
 80043c2:	4b65      	ldr	r3, [pc, #404]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x240>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043c4:	4d65      	ldr	r5, [pc, #404]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x244>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80043c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043cc:	641a      	str	r2, [r3, #64]	; 0x40
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80043d8:	682b      	ldr	r3, [r5, #0]
 80043da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043de:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043e0:	f7fe fb10 	bl	8002a04 <HAL_GetTick>
 80043e4:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043e6:	682b      	ldr	r3, [r5, #0]
 80043e8:	05d9      	lsls	r1, r3, #23
 80043ea:	f140 8085 	bpl.w	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043ee:	4d5a      	ldr	r5, [pc, #360]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043f2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80043f6:	f040 8086 	bne.w	8004506 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80043fc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004400:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004404:	4a54      	ldr	r2, [pc, #336]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004406:	f040 80a0 	bne.w	800454a <HAL_RCCEx_PeriphCLKConfig+0x232>
 800440a:	6891      	ldr	r1, [r2, #8]
 800440c:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8004410:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004414:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004418:	4301      	orrs	r1, r0
 800441a:	6091      	str	r1, [r2, #8]
 800441c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800441e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004422:	430b      	orrs	r3, r1
 8004424:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004426:	6820      	ldr	r0, [r4, #0]
 8004428:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800442c:	bf1f      	itttt	ne
 800442e:	4b4c      	ldrne	r3, [pc, #304]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004430:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 8004434:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 8004436:	2000      	movne	r0, #0
 8004438:	e04e      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_PLLI2S_DISABLE();
 800443a:	4d4a      	ldr	r5, [pc, #296]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800443c:	4f46      	ldr	r7, [pc, #280]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    __HAL_RCC_PLLI2S_DISABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004442:	f7fe fadf 	bl	8002a04 <HAL_GetTick>
 8004446:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	011a      	lsls	r2, r3, #4
 800444c:	d43e      	bmi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800444e:	6821      	ldr	r1, [r4, #0]
 8004450:	07cb      	lsls	r3, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004452:	bf41      	itttt	mi
 8004454:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 8004458:	071b      	lslmi	r3, r3, #28
 800445a:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 800445e:	f8c7 3084 	strmi.w	r3, [r7, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004462:	078e      	lsls	r6, r1, #30
 8004464:	d515      	bpl.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004466:	4a3c      	ldr	r2, [pc, #240]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x240>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004468:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800446a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800446e:	6866      	ldr	r6, [r4, #4]
 8004470:	061b      	lsls	r3, r3, #24
 8004472:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004476:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800447a:	4303      	orrs	r3, r0
 800447c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004480:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8004484:	69e3      	ldr	r3, [r4, #28]
 8004486:	f020 001f 	bic.w	r0, r0, #31
 800448a:	3b01      	subs	r3, #1
 800448c:	4303      	orrs	r3, r0
 800448e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004492:	0648      	lsls	r0, r1, #25
 8004494:	d50a      	bpl.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004496:	68e3      	ldr	r3, [r4, #12]
 8004498:	6862      	ldr	r2, [r4, #4]
 800449a:	061b      	lsls	r3, r3, #24
 800449c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80044a0:	68a2      	ldr	r2, [r4, #8]
 80044a2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80044a6:	4a2c      	ldr	r2, [pc, #176]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80044ac:	2301      	movs	r3, #1
 80044ae:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80044b0:	f7fe faa8 	bl	8002a04 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044b4:	4e28      	ldr	r6, [pc, #160]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    tickstart = HAL_GetTick();
 80044b6:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044b8:	6833      	ldr	r3, [r6, #0]
 80044ba:	0119      	lsls	r1, r3, #4
 80044bc:	f53f af33 	bmi.w	8004326 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044c0:	f7fe faa0 	bl	8002a04 <HAL_GetTick>
 80044c4:	1b40      	subs	r0, r0, r5
 80044c6:	2802      	cmp	r0, #2
 80044c8:	d9f6      	bls.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 80044ca:	e004      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044cc:	f7fe fa9a 	bl	8002a04 <HAL_GetTick>
 80044d0:	1b80      	subs	r0, r0, r6
 80044d2:	2802      	cmp	r0, #2
 80044d4:	d9b8      	bls.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>
        return HAL_TIMEOUT;
 80044d6:	2003      	movs	r0, #3
}
 80044d8:	b003      	add	sp, #12
 80044da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80044dc:	f7fe fa92 	bl	8002a04 <HAL_GetTick>
 80044e0:	1bc0      	subs	r0, r0, r7
 80044e2:	2802      	cmp	r0, #2
 80044e4:	f67f af2a 	bls.w	800433c <HAL_RCCEx_PeriphCLKConfig+0x24>
 80044e8:	e7f5      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80044ea:	f7fe fa8b 	bl	8002a04 <HAL_GetTick>
 80044ee:	1b40      	subs	r0, r0, r5
 80044f0:	2802      	cmp	r0, #2
 80044f2:	f67f af5d 	bls.w	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80044f6:	e7ee      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044f8:	f7fe fa84 	bl	8002a04 <HAL_GetTick>
 80044fc:	1b80      	subs	r0, r0, r6
 80044fe:	2802      	cmp	r0, #2
 8004500:	f67f af71 	bls.w	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8004504:	e7e7      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004506:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004508:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800450c:	4293      	cmp	r3, r2
 800450e:	f43f af74 	beq.w	80043fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004512:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004514:	4a14      	ldr	r2, [pc, #80]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004516:	2101      	movs	r1, #1
 8004518:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800451a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800451e:	2100      	movs	r1, #0
 8004520:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8004522:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004524:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004526:	07da      	lsls	r2, r3, #31
 8004528:	f57f af67 	bpl.w	80043fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
        tickstart = HAL_GetTick();
 800452c:	f7fe fa6a 	bl	8002a04 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004530:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004534:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004536:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004538:	079b      	lsls	r3, r3, #30
 800453a:	f53f af5e 	bmi.w	80043fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fe fa61 	bl	8002a04 <HAL_GetTick>
 8004542:	1b80      	subs	r0, r0, r6
 8004544:	42b8      	cmp	r0, r7
 8004546:	d9f6      	bls.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004548:	e7c5      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800454a:	6891      	ldr	r1, [r2, #8]
 800454c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004550:	e763      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x102>
 8004552:	bf00      	nop
 8004554:	42470070 	.word	0x42470070
 8004558:	40023800 	.word	0x40023800
 800455c:	40007000 	.word	0x40007000
 8004560:	424711e0 	.word	0x424711e0
 8004564:	42470068 	.word	0x42470068
 8004568:	42470e40 	.word	0x42470e40

0800456c <HAL_SDRAM_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800456c:	4770      	bx	lr

0800456e <HAL_SDRAM_Init>:
{   
 800456e:	b538      	push	{r3, r4, r5, lr}
 8004570:	460d      	mov	r5, r1
  if(hsdram == NULL)
 8004572:	4604      	mov	r4, r0
 8004574:	b1c8      	cbz	r0, 80045aa <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004576:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800457a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800457e:	b91b      	cbnz	r3, 8004588 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8004580:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004584:	f7ff fff2 	bl	800456c <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004588:	2302      	movs	r3, #2
 800458a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800458e:	1d21      	adds	r1, r4, #4
 8004590:	6820      	ldr	r0, [r4, #0]
 8004592:	f000 fddf 	bl	8005154 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004596:	6862      	ldr	r2, [r4, #4]
 8004598:	6820      	ldr	r0, [r4, #0]
 800459a:	4629      	mov	r1, r5
 800459c:	f000 fe10 	bl	80051c0 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 80045a0:	2301      	movs	r3, #1
 80045a2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80045a6:	2000      	movs	r0, #0
}
 80045a8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80045aa:	2001      	movs	r0, #1
 80045ac:	e7fc      	b.n	80045a8 <HAL_SDRAM_Init+0x3a>

080045ae <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80045ae:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80045b0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80045b4:	2b02      	cmp	r3, #2
{
 80045b6:	4604      	mov	r4, r0
 80045b8:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80045ba:	b2d8      	uxtb	r0, r3
 80045bc:	d00d      	beq.n	80045da <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80045be:	2302      	movs	r3, #2
 80045c0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80045c4:	6820      	ldr	r0, [r4, #0]
 80045c6:	f000 fe37 	bl	8005238 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80045ca:	682b      	ldr	r3, [r5, #0]
 80045cc:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80045ce:	bf0c      	ite	eq
 80045d0:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80045d2:	2301      	movne	r3, #1
 80045d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80045d8:	2000      	movs	r0, #0
}
 80045da:	bd38      	pop	{r3, r4, r5, pc}

080045dc <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80045dc:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80045de:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80045e2:	2b02      	cmp	r3, #2
{
 80045e4:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80045e6:	b2d8      	uxtb	r0, r3
 80045e8:	d009      	beq.n	80045fe <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80045ea:	2302      	movs	r3, #2
 80045ec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80045f0:	6820      	ldr	r0, [r4, #0]
 80045f2:	f000 fe48 	bl	8005286 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 80045fc:	2000      	movs	r0, #0
}
 80045fe:	bd10      	pop	{r4, pc}

08004600 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004600:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004604:	461f      	mov	r7, r3
 8004606:	4689      	mov	r9, r1
 8004608:	4690      	mov	r8, r2
 800460a:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800460c:	f7fe f9fa 	bl	8002a04 <HAL_GetTick>
 8004610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004612:	443b      	add	r3, r7
 8004614:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8004616:	f7fe f9f5 	bl	8002a04 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800461a:	4b26      	ldr	r3, [pc, #152]	; (80046b4 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 800461c:	681e      	ldr	r6, [r3, #0]
 800461e:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8004622:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8004624:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004626:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004628:	6822      	ldr	r2, [r4, #0]
 800462a:	6893      	ldr	r3, [r2, #8]
 800462c:	ea39 0303 	bics.w	r3, r9, r3
 8004630:	bf0c      	ite	eq
 8004632:	2301      	moveq	r3, #1
 8004634:	2300      	movne	r3, #0
 8004636:	4543      	cmp	r3, r8
 8004638:	d101      	bne.n	800463e <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 800463a:	2000      	movs	r0, #0
 800463c:	e02e      	b.n	800469c <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 800463e:	1c7b      	adds	r3, r7, #1
 8004640:	d0f3      	beq.n	800462a <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004642:	f7fe f9df 	bl	8002a04 <HAL_GetTick>
 8004646:	eba0 000a 	sub.w	r0, r0, sl
 800464a:	42a8      	cmp	r0, r5
 800464c:	d329      	bcc.n	80046a2 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004656:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004658:	6862      	ldr	r2, [r4, #4]
 800465a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800465e:	d10a      	bne.n	8004676 <SPI_WaitFlagStateUntilTimeout+0x76>
 8004660:	68a2      	ldr	r2, [r4, #8]
 8004662:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004666:	d002      	beq.n	800466e <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004668:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800466c:	d103      	bne.n	8004676 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004674:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004676:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004678:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800467c:	d107      	bne.n	800468e <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800468c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800468e:	2301      	movs	r3, #1
 8004690:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004694:	2300      	movs	r3, #0
 8004696:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800469a:	2003      	movs	r0, #3
}
 800469c:	b002      	add	sp, #8
 800469e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 80046a2:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80046a4:	2b00      	cmp	r3, #0
      count--;
 80046a6:	9b01      	ldr	r3, [sp, #4]
 80046a8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 80046ac:	bf08      	it	eq
 80046ae:	2500      	moveq	r5, #0
      count--;
 80046b0:	9301      	str	r3, [sp, #4]
 80046b2:	e7b9      	b.n	8004628 <SPI_WaitFlagStateUntilTimeout+0x28>
 80046b4:	20000100 	.word	0x20000100

080046b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046b8:	b530      	push	{r4, r5, lr}
 80046ba:	460b      	mov	r3, r1
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046bc:	4913      	ldr	r1, [pc, #76]	; (800470c <SPI_EndRxTxTransaction+0x54>)
 80046be:	4d14      	ldr	r5, [pc, #80]	; (8004710 <SPI_EndRxTxTransaction+0x58>)
 80046c0:	6809      	ldr	r1, [r1, #0]
 80046c2:	fbb1 f5f5 	udiv	r5, r1, r5
{
 80046c6:	b085      	sub	sp, #20
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80046cc:	4369      	muls	r1, r5
 80046ce:	9103      	str	r1, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046d0:	6841      	ldr	r1, [r0, #4]
 80046d2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 80046d6:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046d8:	d10c      	bne.n	80046f4 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046da:	9200      	str	r2, [sp, #0]
 80046dc:	2180      	movs	r1, #128	; 0x80
 80046de:	2200      	movs	r2, #0
 80046e0:	f7ff ff8e 	bl	8004600 <SPI_WaitFlagStateUntilTimeout>
 80046e4:	b178      	cbz	r0, 8004706 <SPI_EndRxTxTransaction+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046e8:	f043 0320 	orr.w	r3, r3, #32
 80046ec:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80046ee:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 80046f0:	b005      	add	sp, #20
 80046f2:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 80046f4:	9b03      	ldr	r3, [sp, #12]
 80046f6:	b133      	cbz	r3, 8004706 <SPI_EndRxTxTransaction+0x4e>
      count--;
 80046f8:	9b03      	ldr	r3, [sp, #12]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	061b      	lsls	r3, r3, #24
 8004704:	d4f6      	bmi.n	80046f4 <SPI_EndRxTxTransaction+0x3c>
  return HAL_OK;
 8004706:	2000      	movs	r0, #0
 8004708:	e7f2      	b.n	80046f0 <SPI_EndRxTxTransaction+0x38>
 800470a:	bf00      	nop
 800470c:	20000100 	.word	0x20000100
 8004710:	016e3600 	.word	0x016e3600

08004714 <SPI_EndRxTransaction>:
{
 8004714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004716:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004718:	6841      	ldr	r1, [r0, #4]
 800471a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 800471e:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004720:	d122      	bne.n	8004768 <SPI_EndRxTransaction+0x54>
 8004722:	6881      	ldr	r1, [r0, #8]
 8004724:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004728:	d002      	beq.n	8004730 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800472a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800472e:	d107      	bne.n	8004740 <SPI_EndRxTransaction+0x2c>
    __HAL_SPI_DISABLE(hspi);
 8004730:	6825      	ldr	r5, [r4, #0]
 8004732:	6828      	ldr	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004734:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8004738:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800473c:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800473e:	d009      	beq.n	8004754 <SPI_EndRxTransaction+0x40>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004740:	9200      	str	r2, [sp, #0]
 8004742:	2180      	movs	r1, #128	; 0x80
 8004744:	2200      	movs	r2, #0
 8004746:	4620      	mov	r0, r4
 8004748:	f7ff ff5a 	bl	8004600 <SPI_WaitFlagStateUntilTimeout>
 800474c:	b930      	cbnz	r0, 800475c <SPI_EndRxTransaction+0x48>
  return HAL_OK;
 800474e:	2000      	movs	r0, #0
}
 8004750:	b003      	add	sp, #12
 8004752:	bd30      	pop	{r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004754:	9200      	str	r2, [sp, #0]
 8004756:	2101      	movs	r1, #1
 8004758:	2200      	movs	r2, #0
 800475a:	e7f4      	b.n	8004746 <SPI_EndRxTransaction+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800475c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800475e:	f043 0320 	orr.w	r3, r3, #32
 8004762:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004764:	2003      	movs	r0, #3
 8004766:	e7f3      	b.n	8004750 <SPI_EndRxTransaction+0x3c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004768:	9200      	str	r2, [sp, #0]
 800476a:	2101      	movs	r1, #1
 800476c:	2200      	movs	r2, #0
 800476e:	e7eb      	b.n	8004748 <SPI_EndRxTransaction+0x34>

08004770 <HAL_SPI_Init>:
{
 8004770:	b538      	push	{r3, r4, r5, lr}
  if (hspi == NULL)
 8004772:	4604      	mov	r4, r0
 8004774:	2800      	cmp	r0, #0
 8004776:	d05a      	beq.n	800482e <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004778:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800477a:	2b00      	cmp	r3, #0
 800477c:	d153      	bne.n	8004826 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800477e:	6842      	ldr	r2, [r0, #4]
 8004780:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004784:	d000      	beq.n	8004788 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004786:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004788:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800478c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004790:	b923      	cbnz	r3, 800479c <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8004792:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004796:	4620      	mov	r0, r4
 8004798:	f002 fa9a 	bl	8006cd0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800479c:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800479e:	68a5      	ldr	r5, [r4, #8]
 80047a0:	69a2      	ldr	r2, [r4, #24]
 80047a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hspi->State = HAL_SPI_STATE_BUSY;
 80047a4:	2302      	movs	r3, #2
 80047a6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80047aa:	680b      	ldr	r3, [r1, #0]
 80047ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047b2:	6863      	ldr	r3, [r4, #4]
 80047b4:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 80047b8:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80047bc:	432b      	orrs	r3, r5
 80047be:	68e5      	ldr	r5, [r4, #12]
 80047c0:	f405 6500 	and.w	r5, r5, #2048	; 0x800
 80047c4:	432b      	orrs	r3, r5
 80047c6:	6925      	ldr	r5, [r4, #16]
 80047c8:	f005 0502 	and.w	r5, r5, #2
 80047cc:	432b      	orrs	r3, r5
 80047ce:	6965      	ldr	r5, [r4, #20]
 80047d0:	f005 0501 	and.w	r5, r5, #1
 80047d4:	432b      	orrs	r3, r5
 80047d6:	f402 7500 	and.w	r5, r2, #512	; 0x200
 80047da:	432b      	orrs	r3, r5
 80047dc:	69e5      	ldr	r5, [r4, #28]
 80047de:	f005 0538 	and.w	r5, r5, #56	; 0x38
 80047e2:	432b      	orrs	r3, r5
 80047e4:	6a25      	ldr	r5, [r4, #32]
 80047e6:	f005 0580 	and.w	r5, r5, #128	; 0x80
 80047ea:	432b      	orrs	r3, r5
 80047ec:	f400 5500 	and.w	r5, r0, #8192	; 0x2000
 80047f0:	432b      	orrs	r3, r5
 80047f2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047f6:	0c12      	lsrs	r2, r2, #16
 80047f8:	f003 0310 	and.w	r3, r3, #16
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047fc:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004800:	f002 0204 	and.w	r2, r2, #4
 8004804:	ea42 0203 	orr.w	r2, r2, r3
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004808:	bf08      	it	eq
 800480a:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800480c:	604a      	str	r2, [r1, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800480e:	bf08      	it	eq
 8004810:	610b      	streq	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004812:	69cb      	ldr	r3, [r1, #28]
 8004814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004818:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800481a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800481c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800481e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004820:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004824:	bd38      	pop	{r3, r4, r5, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004826:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004828:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800482c:	e7ac      	b.n	8004788 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800482e:	2001      	movs	r0, #1
 8004830:	e7f8      	b.n	8004824 <HAL_SPI_Init+0xb4>

08004832 <HAL_SPI_DeInit>:
{
 8004832:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8004834:	4604      	mov	r4, r0
 8004836:	b180      	cbz	r0, 800485a <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8004838:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800483a:	2302      	movs	r3, #2
 800483c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004840:	6813      	ldr	r3, [r2, #0]
 8004842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004846:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8004848:	f002 faa6 	bl	8006d98 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800484c:	2000      	movs	r0, #0
 800484e:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8004850:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 8004854:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 8004858:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800485a:	2001      	movs	r0, #1
 800485c:	e7fc      	b.n	8004858 <HAL_SPI_DeInit+0x26>

0800485e <HAL_SPI_Transmit>:
{
 800485e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004862:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8004864:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004868:	2b01      	cmp	r3, #1
{
 800486a:	4604      	mov	r4, r0
 800486c:	460e      	mov	r6, r1
 800486e:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8004870:	f000 80b3 	beq.w	80049da <HAL_SPI_Transmit+0x17c>
 8004874:	2301      	movs	r3, #1
 8004876:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800487a:	f7fe f8c3 	bl	8002a04 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800487e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004882:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004884:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004886:	b2d8      	uxtb	r0, r3
 8004888:	f040 80a5 	bne.w	80049d6 <HAL_SPI_Transmit+0x178>
  if ((pData == NULL) || (Size == 0U))
 800488c:	2e00      	cmp	r6, #0
 800488e:	d077      	beq.n	8004980 <HAL_SPI_Transmit+0x122>
 8004890:	f1b8 0f00 	cmp.w	r8, #0
 8004894:	d074      	beq.n	8004980 <HAL_SPI_Transmit+0x122>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004896:	2303      	movs	r3, #3
 8004898:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800489c:	2300      	movs	r3, #0
 800489e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80048a0:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 80048a4:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048a8:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80048aa:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ae:	68a3      	ldr	r3, [r4, #8]
 80048b0:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048b2:	6326      	str	r6, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 80048b8:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048bc:	d107      	bne.n	80048ce <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 80048be:	682b      	ldr	r3, [r5, #0]
 80048c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c4:	602b      	str	r3, [r5, #0]
    SPI_1LINE_TX(hspi);
 80048c6:	682b      	ldr	r3, [r5, #0]
 80048c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048cc:	602b      	str	r3, [r5, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80048d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d4:	d107      	bne.n	80048e6 <HAL_SPI_Transmit+0x88>
    SPI_RESET_CRC(hspi);
 80048d6:	682b      	ldr	r3, [r5, #0]
 80048d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048dc:	602b      	str	r3, [r5, #0]
 80048de:	682b      	ldr	r3, [r5, #0]
 80048e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048e4:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048e6:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048e8:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ea:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80048ec:	bf5e      	ittt	pl
 80048ee:	682b      	ldrpl	r3, [r5, #0]
 80048f0:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80048f4:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048f6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80048fa:	6863      	ldr	r3, [r4, #4]
 80048fc:	d149      	bne.n	8004992 <HAL_SPI_Transmit+0x134>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048fe:	b113      	cbz	r3, 8004906 <HAL_SPI_Transmit+0xa8>
 8004900:	f1b8 0f01 	cmp.w	r8, #1
 8004904:	d107      	bne.n	8004916 <HAL_SPI_Transmit+0xb8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004906:	f836 3b02 	ldrh.w	r3, [r6], #2
 800490a:	60eb      	str	r3, [r5, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800490c:	6326      	str	r6, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800490e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004910:	3b01      	subs	r3, #1
 8004912:	b29b      	uxth	r3, r3
 8004914:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004916:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004918:	b29b      	uxth	r3, r3
 800491a:	b9f3      	cbnz	r3, 800495a <HAL_SPI_Transmit+0xfc>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800491c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800491e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004922:	d104      	bne.n	800492e <HAL_SPI_Transmit+0xd0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004924:	6822      	ldr	r2, [r4, #0]
 8004926:	6813      	ldr	r3, [r2, #0]
 8004928:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800492c:	6013      	str	r3, [r2, #0]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800492e:	464a      	mov	r2, r9
 8004930:	4639      	mov	r1, r7
 8004932:	4620      	mov	r0, r4
 8004934:	f7ff fec0 	bl	80046b8 <SPI_EndRxTxTransaction>
 8004938:	b108      	cbz	r0, 800493e <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800493a:	2320      	movs	r3, #32
 800493c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800493e:	68a3      	ldr	r3, [r4, #8]
 8004940:	b933      	cbnz	r3, 8004950 <HAL_SPI_Transmit+0xf2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	9201      	str	r2, [sp, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004950:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8004952:	3800      	subs	r0, #0
 8004954:	bf18      	it	ne
 8004956:	2001      	movne	r0, #1
error:
 8004958:	e012      	b.n	8004980 <HAL_SPI_Transmit+0x122>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800495a:	6822      	ldr	r2, [r4, #0]
 800495c:	6893      	ldr	r3, [r2, #8]
 800495e:	0798      	lsls	r0, r3, #30
 8004960:	d505      	bpl.n	800496e <HAL_SPI_Transmit+0x110>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004962:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004964:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004968:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800496a:	6323      	str	r3, [r4, #48]	; 0x30
 800496c:	e7cf      	b.n	800490e <HAL_SPI_Transmit+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800496e:	f7fe f849 	bl	8002a04 <HAL_GetTick>
 8004972:	eba0 0009 	sub.w	r0, r0, r9
 8004976:	42b8      	cmp	r0, r7
 8004978:	d3cd      	bcc.n	8004916 <HAL_SPI_Transmit+0xb8>
 800497a:	1c79      	adds	r1, r7, #1
 800497c:	d0cb      	beq.n	8004916 <HAL_SPI_Transmit+0xb8>
          errorcode = HAL_TIMEOUT;
 800497e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004980:	2301      	movs	r3, #1
 8004982:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004986:	2300      	movs	r3, #0
 8004988:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800498c:	b003      	add	sp, #12
 800498e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004992:	b113      	cbz	r3, 800499a <HAL_SPI_Transmit+0x13c>
 8004994:	f1b8 0f01 	cmp.w	r8, #1
 8004998:	d108      	bne.n	80049ac <HAL_SPI_Transmit+0x14e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800499a:	7833      	ldrb	r3, [r6, #0]
 800499c:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800499e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049a0:	3301      	adds	r3, #1
 80049a2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80049a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80049ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0b3      	beq.n	800491c <HAL_SPI_Transmit+0xbe>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	0792      	lsls	r2, r2, #30
 80049ba:	d503      	bpl.n	80049c4 <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80049be:	7812      	ldrb	r2, [r2, #0]
 80049c0:	731a      	strb	r2, [r3, #12]
 80049c2:	e7ec      	b.n	800499e <HAL_SPI_Transmit+0x140>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049c4:	f7fe f81e 	bl	8002a04 <HAL_GetTick>
 80049c8:	eba0 0009 	sub.w	r0, r0, r9
 80049cc:	42b8      	cmp	r0, r7
 80049ce:	d3ed      	bcc.n	80049ac <HAL_SPI_Transmit+0x14e>
 80049d0:	1c7b      	adds	r3, r7, #1
 80049d2:	d0eb      	beq.n	80049ac <HAL_SPI_Transmit+0x14e>
 80049d4:	e7d3      	b.n	800497e <HAL_SPI_Transmit+0x120>
    errorcode = HAL_BUSY;
 80049d6:	2002      	movs	r0, #2
 80049d8:	e7d2      	b.n	8004980 <HAL_SPI_Transmit+0x122>
  __HAL_LOCK(hspi);
 80049da:	2002      	movs	r0, #2
 80049dc:	e7d6      	b.n	800498c <HAL_SPI_Transmit+0x12e>

080049de <HAL_SPI_TransmitReceive>:
{
 80049de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049e2:	b085      	sub	sp, #20
 80049e4:	4698      	mov	r8, r3
  __IO uint32_t tmpreg = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hspi);
 80049ea:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80049ee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 80049f0:	2b01      	cmp	r3, #1
{
 80049f2:	4604      	mov	r4, r0
 80049f4:	460d      	mov	r5, r1
 80049f6:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80049f8:	f000 8133 	beq.w	8004c62 <HAL_SPI_TransmitReceive+0x284>
 80049fc:	2301      	movs	r3, #1
 80049fe:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004a02:	f7fd ffff 	bl	8002a04 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004a06:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8004a0a:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a0c:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8004a0e:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8004a10:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a12:	d00a      	beq.n	8004a2a <HAL_SPI_TransmitReceive+0x4c>
 8004a14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a18:	f040 8121 	bne.w	8004c5e <HAL_SPI_TransmitReceive+0x280>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a1c:	68a2      	ldr	r2, [r4, #8]
 8004a1e:	2a00      	cmp	r2, #0
 8004a20:	f040 811d 	bne.w	8004c5e <HAL_SPI_TransmitReceive+0x280>
 8004a24:	2904      	cmp	r1, #4
 8004a26:	f040 811a 	bne.w	8004c5e <HAL_SPI_TransmitReceive+0x280>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a2a:	2d00      	cmp	r5, #0
 8004a2c:	f000 8109 	beq.w	8004c42 <HAL_SPI_TransmitReceive+0x264>
 8004a30:	f1b9 0f00 	cmp.w	r9, #0
 8004a34:	f000 8105 	beq.w	8004c42 <HAL_SPI_TransmitReceive+0x264>
 8004a38:	f1b8 0f00 	cmp.w	r8, #0
 8004a3c:	f000 8101 	beq.w	8004c42 <HAL_SPI_TransmitReceive+0x264>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a40:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a44:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a46:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a4a:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a4c:	bf1c      	itt	ne
 8004a4e:	2205      	movne	r2, #5
 8004a50:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a54:	2200      	movs	r2, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a56:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a5a:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8004a5c:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004a60:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a64:	6822      	ldr	r2, [r4, #0]
 8004a66:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a6a:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a6c:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a70:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a74:	d107      	bne.n	8004a86 <HAL_SPI_TransmitReceive+0xa8>
    SPI_RESET_CRC(hspi);
 8004a76:	6811      	ldr	r1, [r2, #0]
 8004a78:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8004a7c:	6011      	str	r1, [r2, #0]
 8004a7e:	6811      	ldr	r1, [r2, #0]
 8004a80:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8004a84:	6011      	str	r1, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a86:	6811      	ldr	r1, [r2, #0]
 8004a88:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8004a8a:	bf5e      	ittt	pl
 8004a8c:	6811      	ldrpl	r1, [r2, #0]
 8004a8e:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
 8004a92:	6011      	strpl	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a94:	68e1      	ldr	r1, [r4, #12]
 8004a96:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004a9a:	d168      	bne.n	8004b6e <HAL_SPI_TransmitReceive+0x190>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a9c:	b113      	cbz	r3, 8004aa4 <HAL_SPI_TransmitReceive+0xc6>
 8004a9e:	f1b8 0f01 	cmp.w	r8, #1
 8004aa2:	d107      	bne.n	8004ab4 <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa4:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004aa8:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8004aaa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aac:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004ab4:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ab6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	b9b3      	cbnz	r3, 8004aea <HAL_SPI_TransmitReceive+0x10c>
 8004abc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	b99b      	cbnz	r3, 8004aea <HAL_SPI_TransmitReceive+0x10c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ac2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac8:	f040 80a6 	bne.w	8004c18 <HAL_SPI_TransmitReceive+0x23a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004acc:	2201      	movs	r2, #1
 8004ace:	9700      	str	r7, [sp, #0]
 8004ad0:	4633      	mov	r3, r6
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	f7ff fd93 	bl	8004600 <SPI_WaitFlagStateUntilTimeout>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	f000 8098 	beq.w	8004c10 <HAL_SPI_TransmitReceive+0x232>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004ae0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ae2:	f043 0302 	orr.w	r3, r3, #2
 8004ae6:	6563      	str	r3, [r4, #84]	; 0x54
 8004ae8:	e020      	b.n	8004b2c <HAL_SPI_TransmitReceive+0x14e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	6893      	ldr	r3, [r2, #8]
 8004aee:	079b      	lsls	r3, r3, #30
 8004af0:	d504      	bpl.n	8004afc <HAL_SPI_TransmitReceive+0x11e>
 8004af2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	b10b      	cbz	r3, 8004afc <HAL_SPI_TransmitReceive+0x11e>
 8004af8:	bb1d      	cbnz	r5, 8004b42 <HAL_SPI_TransmitReceive+0x164>
{
 8004afa:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004afc:	6891      	ldr	r1, [r2, #8]
 8004afe:	f011 0101 	ands.w	r1, r1, #1
 8004b02:	d00c      	beq.n	8004b1e <HAL_SPI_TransmitReceive+0x140>
 8004b04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	b14b      	cbz	r3, 8004b1e <HAL_SPI_TransmitReceive+0x140>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b0c:	68d2      	ldr	r2, [r2, #12]
 8004b0e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b12:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004b14:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004b1c:	460d      	mov	r5, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b1e:	f7fd ff71 	bl	8002a04 <HAL_GetTick>
 8004b22:	1bc0      	subs	r0, r0, r7
 8004b24:	42b0      	cmp	r0, r6
 8004b26:	d3c6      	bcc.n	8004ab6 <HAL_SPI_TransmitReceive+0xd8>
 8004b28:	1c70      	adds	r0, r6, #1
 8004b2a:	d0c4      	beq.n	8004ab6 <HAL_SPI_TransmitReceive+0xd8>
      errorcode = HAL_TIMEOUT;
 8004b2c:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b34:	2300      	movs	r3, #0
 8004b36:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	b005      	add	sp, #20
 8004b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b44:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004b48:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b4a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004b4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004b54:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8004b56:	b2ad      	uxth	r5, r5
 8004b58:	2d00      	cmp	r5, #0
 8004b5a:	d1ce      	bne.n	8004afa <HAL_SPI_TransmitReceive+0x11c>
 8004b5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b62:	d1ca      	bne.n	8004afa <HAL_SPI_TransmitReceive+0x11c>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004b64:	6813      	ldr	r3, [r2, #0]
 8004b66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	e7c6      	b.n	8004afc <HAL_SPI_TransmitReceive+0x11e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b6e:	b113      	cbz	r3, 8004b76 <HAL_SPI_TransmitReceive+0x198>
 8004b70:	f1b8 0f01 	cmp.w	r8, #1
 8004b74:	d108      	bne.n	8004b88 <HAL_SPI_TransmitReceive+0x1aa>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b76:	782b      	ldrb	r3, [r5, #0]
 8004b78:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004b80:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004b88:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	b91b      	cbnz	r3, 8004b98 <HAL_SPI_TransmitReceive+0x1ba>
 8004b90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d094      	beq.n	8004ac2 <HAL_SPI_TransmitReceive+0xe4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b98:	6822      	ldr	r2, [r4, #0]
 8004b9a:	6893      	ldr	r3, [r2, #8]
 8004b9c:	0799      	lsls	r1, r3, #30
 8004b9e:	d504      	bpl.n	8004baa <HAL_SPI_TransmitReceive+0x1cc>
 8004ba0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	b10b      	cbz	r3, 8004baa <HAL_SPI_TransmitReceive+0x1cc>
 8004ba6:	b9dd      	cbnz	r5, 8004be0 <HAL_SPI_TransmitReceive+0x202>
        txallowed = 1U;
 8004ba8:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004baa:	6822      	ldr	r2, [r4, #0]
 8004bac:	6891      	ldr	r1, [r2, #8]
 8004bae:	f011 0101 	ands.w	r1, r1, #1
 8004bb2:	d00d      	beq.n	8004bd0 <HAL_SPI_TransmitReceive+0x1f2>
 8004bb4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	b153      	cbz	r3, 8004bd0 <HAL_SPI_TransmitReceive+0x1f2>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bbc:	68d2      	ldr	r2, [r2, #12]
 8004bbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004bc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004bc6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004bce:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bd0:	f7fd ff18 	bl	8002a04 <HAL_GetTick>
 8004bd4:	1bc0      	subs	r0, r0, r7
 8004bd6:	42b0      	cmp	r0, r6
 8004bd8:	d3d7      	bcc.n	8004b8a <HAL_SPI_TransmitReceive+0x1ac>
 8004bda:	1c73      	adds	r3, r6, #1
 8004bdc:	d0d5      	beq.n	8004b8a <HAL_SPI_TransmitReceive+0x1ac>
 8004bde:	e7a5      	b.n	8004b2c <HAL_SPI_TransmitReceive+0x14e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004be0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8004be6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004be8:	3301      	adds	r3, #1
 8004bea:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004bec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004bf4:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8004bf6:	b2ad      	uxth	r5, r5
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	d1d5      	bne.n	8004ba8 <HAL_SPI_TransmitReceive+0x1ca>
 8004bfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c02:	d1d1      	bne.n	8004ba8 <HAL_SPI_TransmitReceive+0x1ca>
 8004c04:	6822      	ldr	r2, [r4, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004c06:	6813      	ldr	r3, [r2, #0]
 8004c08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	e7cc      	b.n	8004baa <HAL_SPI_TransmitReceive+0x1cc>
    tmpreg = READ_REG(hspi->Instance->DR);
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	9302      	str	r3, [sp, #8]
    UNUSED(tmpreg);
 8004c16:	9b02      	ldr	r3, [sp, #8]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004c18:	6822      	ldr	r2, [r4, #0]
 8004c1a:	6895      	ldr	r5, [r2, #8]
 8004c1c:	f015 0510 	ands.w	r5, r5, #16
 8004c20:	d007      	beq.n	8004c32 <HAL_SPI_TransmitReceive+0x254>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004c22:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c24:	f043 0302 	orr.w	r3, r3, #2
 8004c28:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004c2a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004c2e:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8004c30:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c32:	463a      	mov	r2, r7
 8004c34:	4631      	mov	r1, r6
 8004c36:	4620      	mov	r0, r4
 8004c38:	f7ff fd3e 	bl	80046b8 <SPI_EndRxTxTransaction>
 8004c3c:	b118      	cbz	r0, 8004c46 <HAL_SPI_TransmitReceive+0x268>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c3e:	2320      	movs	r3, #32
 8004c40:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004c42:	2501      	movs	r5, #1
 8004c44:	e773      	b.n	8004b2e <HAL_SPI_TransmitReceive+0x150>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c46:	68a3      	ldr	r3, [r4, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f47f af70 	bne.w	8004b2e <HAL_SPI_TransmitReceive+0x150>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c4e:	9303      	str	r3, [sp, #12]
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	9203      	str	r2, [sp, #12]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	9303      	str	r3, [sp, #12]
 8004c5a:	9b03      	ldr	r3, [sp, #12]
 8004c5c:	e767      	b.n	8004b2e <HAL_SPI_TransmitReceive+0x150>
    errorcode = HAL_BUSY;
 8004c5e:	2502      	movs	r5, #2
 8004c60:	e765      	b.n	8004b2e <HAL_SPI_TransmitReceive+0x150>
  __HAL_LOCK(hspi);
 8004c62:	2502      	movs	r5, #2
 8004c64:	e769      	b.n	8004b3a <HAL_SPI_TransmitReceive+0x15c>

08004c66 <HAL_SPI_Receive>:
{
 8004c66:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004c6a:	461d      	mov	r5, r3
  __IO uint32_t tmpreg = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	9303      	str	r3, [sp, #12]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c70:	6843      	ldr	r3, [r0, #4]
 8004c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8004c76:	4604      	mov	r4, r0
 8004c78:	4688      	mov	r8, r1
 8004c7a:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c7c:	d10c      	bne.n	8004c98 <HAL_SPI_Receive+0x32>
 8004c7e:	6883      	ldr	r3, [r0, #8]
 8004c80:	b953      	cbnz	r3, 8004c98 <HAL_SPI_Receive+0x32>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c82:	2304      	movs	r3, #4
 8004c84:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c88:	4613      	mov	r3, r2
 8004c8a:	9500      	str	r5, [sp, #0]
 8004c8c:	460a      	mov	r2, r1
 8004c8e:	f7ff fea6 	bl	80049de <HAL_SPI_TransmitReceive>
}
 8004c92:	b004      	add	sp, #16
 8004c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8004c98:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	f000 80c7 	beq.w	8004e30 <HAL_SPI_Receive+0x1ca>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004ca8:	f7fd feac 	bl	8002a04 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004cac:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004cb0:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004cb2:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004cb4:	b2d8      	uxtb	r0, r3
 8004cb6:	f040 80b9 	bne.w	8004e2c <HAL_SPI_Receive+0x1c6>
  if ((pData == NULL) || (Size == 0U))
 8004cba:	f1b8 0f00 	cmp.w	r8, #0
 8004cbe:	f000 808a 	beq.w	8004dd6 <HAL_SPI_Receive+0x170>
 8004cc2:	2f00      	cmp	r7, #0
 8004cc4:	f000 8087 	beq.w	8004dd6 <HAL_SPI_Receive+0x170>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cc8:	2304      	movs	r3, #4
 8004cca:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8004cd2:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004cd6:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004cd8:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004cda:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004cdc:	86e3      	strh	r3, [r4, #54]	; 0x36
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ce0:	6822      	ldr	r2, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ce2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 8004cea:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cec:	d10b      	bne.n	8004d06 <HAL_SPI_Receive+0xa0>
    SPI_RESET_CRC(hspi);
 8004cee:	6813      	ldr	r3, [r2, #0]
 8004cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	6813      	ldr	r3, [r2, #0]
 8004cf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cfc:	6013      	str	r3, [r2, #0]
    hspi->RxXferCount--;
 8004cfe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d06:	68a3      	ldr	r3, [r4, #8]
 8004d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0c:	d107      	bne.n	8004d1e <HAL_SPI_Receive+0xb8>
    __HAL_SPI_DISABLE(hspi);
 8004d0e:	6813      	ldr	r3, [r2, #0]
 8004d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d14:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8004d16:	6813      	ldr	r3, [r2, #0]
 8004d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d1c:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d1e:	6813      	ldr	r3, [r2, #0]
 8004d20:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004d22:	bf5e      	ittt	pl
 8004d24:	6813      	ldrpl	r3, [r2, #0]
 8004d26:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004d2a:	6013      	strpl	r3, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d2c:	68e3      	ldr	r3, [r4, #12]
 8004d2e:	b1f3      	cbz	r3, 8004d6e <HAL_SPI_Receive+0x108>
    while (hspi->RxXferCount > 0U)
 8004d30:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	b1fb      	cbz	r3, 8004d76 <HAL_SPI_Receive+0x110>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	07d1      	lsls	r1, r2, #31
 8004d3c:	d552      	bpl.n	8004de4 <HAL_SPI_Receive+0x17e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d42:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d46:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004d48:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004d50:	e7ee      	b.n	8004d30 <HAL_SPI_Receive+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	07d7      	lsls	r7, r2, #31
 8004d58:	d535      	bpl.n	8004dc6 <HAL_SPI_Receive+0x160>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d5c:	7b1b      	ldrb	r3, [r3, #12]
 8004d5e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d62:	3301      	adds	r3, #1
 8004d64:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004d66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004d6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1ed      	bne.n	8004d52 <HAL_SPI_Receive+0xec>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7c:	d13e      	bne.n	8004dfc <HAL_SPI_Receive+0x196>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004d7e:	6822      	ldr	r2, [r4, #0]
 8004d80:	6813      	ldr	r3, [r2, #0]
 8004d82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d86:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004d88:	2201      	movs	r2, #1
 8004d8a:	9600      	str	r6, [sp, #0]
 8004d8c:	462b      	mov	r3, r5
 8004d8e:	4611      	mov	r1, r2
 8004d90:	4620      	mov	r0, r4
 8004d92:	f7ff fc35 	bl	8004600 <SPI_WaitFlagStateUntilTimeout>
 8004d96:	b9e8      	cbnz	r0, 8004dd4 <HAL_SPI_Receive+0x16e>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d98:	68e1      	ldr	r1, [r4, #12]
 8004d9a:	6822      	ldr	r2, [r4, #0]
 8004d9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d9e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004da2:	bf0b      	itete	eq
 8004da4:	68d2      	ldreq	r2, [r2, #12]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004da6:	7b12      	ldrbne	r2, [r2, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004da8:	801a      	strheq	r2, [r3, #0]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004daa:	701a      	strbne	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004dac:	2201      	movs	r2, #1
 8004dae:	9600      	str	r6, [sp, #0]
 8004db0:	462b      	mov	r3, r5
 8004db2:	4611      	mov	r1, r2
 8004db4:	4620      	mov	r0, r4
 8004db6:	f7ff fc23 	bl	8004600 <SPI_WaitFlagStateUntilTimeout>
 8004dba:	b1d8      	cbz	r0, 8004df4 <HAL_SPI_Receive+0x18e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004dbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004dbe:	f043 0302 	orr.w	r3, r3, #2
 8004dc2:	6563      	str	r3, [r4, #84]	; 0x54
 8004dc4:	e006      	b.n	8004dd4 <HAL_SPI_Receive+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dc6:	f7fd fe1d 	bl	8002a04 <HAL_GetTick>
 8004dca:	1b80      	subs	r0, r0, r6
 8004dcc:	42a8      	cmp	r0, r5
 8004dce:	d3ce      	bcc.n	8004d6e <HAL_SPI_Receive+0x108>
 8004dd0:	1c68      	adds	r0, r5, #1
 8004dd2:	d0cc      	beq.n	8004d6e <HAL_SPI_Receive+0x108>
      errorcode = HAL_TIMEOUT;
 8004dd4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8004de2:	e756      	b.n	8004c92 <HAL_SPI_Receive+0x2c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004de4:	f7fd fe0e 	bl	8002a04 <HAL_GetTick>
 8004de8:	1b80      	subs	r0, r0, r6
 8004dea:	42a8      	cmp	r0, r5
 8004dec:	d3a0      	bcc.n	8004d30 <HAL_SPI_Receive+0xca>
 8004dee:	1c6a      	adds	r2, r5, #1
 8004df0:	d09e      	beq.n	8004d30 <HAL_SPI_Receive+0xca>
 8004df2:	e7ef      	b.n	8004dd4 <HAL_SPI_Receive+0x16e>
    tmpreg = READ_REG(hspi->Instance->DR);
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	9303      	str	r3, [sp, #12]
    UNUSED(tmpreg);
 8004dfa:	9b03      	ldr	r3, [sp, #12]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dfc:	4632      	mov	r2, r6
 8004dfe:	4629      	mov	r1, r5
 8004e00:	4620      	mov	r0, r4
 8004e02:	f7ff fc87 	bl	8004714 <SPI_EndRxTransaction>
 8004e06:	b108      	cbz	r0, 8004e0c <HAL_SPI_Receive+0x1a6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e08:	2320      	movs	r3, #32
 8004e0a:	6563      	str	r3, [r4, #84]	; 0x54
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004e0c:	6822      	ldr	r2, [r4, #0]
 8004e0e:	6893      	ldr	r3, [r2, #8]
 8004e10:	06db      	lsls	r3, r3, #27
 8004e12:	d506      	bpl.n	8004e22 <HAL_SPI_Receive+0x1bc>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004e14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e16:	f043 0302 	orr.w	r3, r3, #2
 8004e1a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004e1c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004e20:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e22:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8004e24:	3800      	subs	r0, #0
 8004e26:	bf18      	it	ne
 8004e28:	2001      	movne	r0, #1
error :
 8004e2a:	e7d4      	b.n	8004dd6 <HAL_SPI_Receive+0x170>
    errorcode = HAL_BUSY;
 8004e2c:	2002      	movs	r0, #2
 8004e2e:	e7d2      	b.n	8004dd6 <HAL_SPI_Receive+0x170>
  __HAL_LOCK(hspi);
 8004e30:	2002      	movs	r0, #2
 8004e32:	e72e      	b.n	8004c92 <HAL_SPI_Receive+0x2c>

08004e34 <HAL_SPI_GetState>:
  return hspi->State;
 8004e34:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8004e38:	4770      	bx	lr
	...

08004e3c <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e3c:	6802      	ldr	r2, [r0, #0]
 8004e3e:	68c1      	ldr	r1, [r0, #12]
{
 8004e40:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e42:	6913      	ldr	r3, [r2, #16]
 8004e44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	6113      	str	r3, [r2, #16]
{
 8004e4c:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e4e:	6883      	ldr	r3, [r0, #8]
 8004e50:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004e52:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e54:	4303      	orrs	r3, r0
 8004e56:	6968      	ldr	r0, [r5, #20]
 8004e58:	4303      	orrs	r3, r0
 8004e5a:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8004e5c:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8004e60:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e64:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8004e66:	430b      	orrs	r3, r1
 8004e68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e6a:	6953      	ldr	r3, [r2, #20]
 8004e6c:	69a9      	ldr	r1, [r5, #24]
 8004e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e72:	430b      	orrs	r3, r1
 8004e74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e76:	4b1f      	ldr	r3, [pc, #124]	; (8004ef4 <UART_SetConfig+0xb8>)
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d003      	beq.n	8004e84 <UART_SetConfig+0x48>
 8004e7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d124      	bne.n	8004ece <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e84:	f7ff fa38 	bl	80042f8 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e88:	69ea      	ldr	r2, [r5, #28]
 8004e8a:	2319      	movs	r3, #25
 8004e8c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004e90:	fba0 0103 	umull	r0, r1, r0, r3
 8004e94:	e9d5 4300 	ldrd	r4, r3, [r5]
 8004e98:	d11c      	bne.n	8004ed4 <UART_SetConfig+0x98>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	1892      	adds	r2, r2, r2
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	415b      	adcs	r3, r3
 8004ea4:	f7fb f9f4 	bl	8000290 <__aeabi_uldivmod>
 8004ea8:	2164      	movs	r1, #100	; 0x64
 8004eaa:	fbb0 f5f1 	udiv	r5, r0, r1
 8004eae:	fb01 0315 	mls	r3, r1, r5, r0
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	3332      	adds	r3, #50	; 0x32
 8004eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004eba:	f003 0207 	and.w	r2, r3, #7
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8004ec4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ec8:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eca:	60a3      	str	r3, [r4, #8]
  }
}
 8004ecc:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ece:	f7ff fa03 	bl	80042d8 <HAL_RCC_GetPCLK1Freq>
 8004ed2:	e7d9      	b.n	8004e88 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ed4:	009a      	lsls	r2, r3, #2
 8004ed6:	0f9b      	lsrs	r3, r3, #30
 8004ed8:	f7fb f9da 	bl	8000290 <__aeabi_uldivmod>
 8004edc:	2264      	movs	r2, #100	; 0x64
 8004ede:	fbb0 f1f2 	udiv	r1, r0, r2
 8004ee2:	fb02 0311 	mls	r3, r2, r1, r0
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	3332      	adds	r3, #50	; 0x32
 8004eea:	fbb3 f3f2 	udiv	r3, r3, r2
 8004eee:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004ef2:	e7ea      	b.n	8004eca <UART_SetConfig+0x8e>
 8004ef4:	40011000 	.word	0x40011000

08004ef8 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8004ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efa:	4604      	mov	r4, r0
 8004efc:	460e      	mov	r6, r1
 8004efe:	4617      	mov	r7, r2
 8004f00:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f02:	6822      	ldr	r2, [r4, #0]
 8004f04:	6813      	ldr	r3, [r2, #0]
 8004f06:	ea36 0303 	bics.w	r3, r6, r3
 8004f0a:	d101      	bne.n	8004f10 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	e028      	b.n	8004f62 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8004f10:	1c6b      	adds	r3, r5, #1
 8004f12:	d0f7      	beq.n	8004f04 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f14:	b125      	cbz	r5, 8004f20 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8004f16:	f7fd fd75 	bl	8002a04 <HAL_GetTick>
 8004f1a:	1bc0      	subs	r0, r0, r7
 8004f1c:	4285      	cmp	r5, r0
 8004f1e:	d2f0      	bcs.n	8004f02 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f20:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	f102 030c 	add.w	r3, r2, #12
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	320c      	adds	r2, #12
 8004f30:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8004f34:	6821      	ldr	r1, [r4, #0]
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d1f2      	bne.n	8004f20 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3a:	f101 0314 	add.w	r3, r1, #20
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f42:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	f101 0014 	add.w	r0, r1, #20
 8004f4a:	e840 3200 	strex	r2, r3, [r0]
 8004f4e:	2a00      	cmp	r2, #0
 8004f50:	d1f3      	bne.n	8004f3a <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8004f52:	2320      	movs	r3, #32
 8004f54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8004f58:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8004f5c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8004f60:	2003      	movs	r0, #3
}
 8004f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004f64 <HAL_UART_Init>:
{
 8004f64:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004f66:	4604      	mov	r4, r0
 8004f68:	b340      	cbz	r0, 8004fbc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004f6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004f6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f72:	b91b      	cbnz	r3, 8004f7c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004f74:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004f78:	f001 ff2e 	bl	8006dd8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004f7c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004f7e:	2324      	movs	r3, #36	; 0x24
 8004f80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004f84:	68d3      	ldr	r3, [r2, #12]
 8004f86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f8a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	f7ff ff55 	bl	8004e3c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	691a      	ldr	r2, [r3, #16]
 8004f96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f9c:	695a      	ldr	r2, [r3, #20]
 8004f9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fa2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004faa:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fac:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004fae:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb0:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fb6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004fba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004fbc:	2001      	movs	r0, #1
 8004fbe:	e7fc      	b.n	8004fba <HAL_UART_Init+0x56>

08004fc0 <HAL_UART_DeInit>:
{
 8004fc0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	b198      	cbz	r0, 8004fee <HAL_UART_DeInit+0x2e>
  __HAL_UART_DISABLE(huart);
 8004fc6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004fc8:	2324      	movs	r3, #36	; 0x24
 8004fca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004fce:	68d3      	ldr	r3, [r2, #12]
 8004fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fd4:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8004fd6:	f001 ff51 	bl	8006e7c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fda:	2000      	movs	r0, #0
 8004fdc:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(huart);
 8004fde:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8004fe2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004fe6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fea:	6320      	str	r0, [r4, #48]	; 0x30
}
 8004fec:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004fee:	2001      	movs	r0, #1
 8004ff0:	e7fc      	b.n	8004fec <HAL_UART_DeInit+0x2c>

08004ff2 <HAL_UART_Transmit>:
{
 8004ff2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ff4:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004ff6:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8004ffa:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8004ffc:	2a20      	cmp	r2, #32
{
 8004ffe:	4604      	mov	r4, r0
 8005000:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8005002:	d149      	bne.n	8005098 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8005004:	2900      	cmp	r1, #0
 8005006:	d045      	beq.n	8005094 <HAL_UART_Transmit+0xa2>
 8005008:	2f00      	cmp	r7, #0
 800500a:	d043      	beq.n	8005094 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 800500c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8005010:	2a01      	cmp	r2, #1
 8005012:	d041      	beq.n	8005098 <HAL_UART_Transmit+0xa6>
 8005014:	2201      	movs	r2, #1
 8005016:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501a:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800501c:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501e:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005020:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8005024:	f7fd fcee 	bl	8002a04 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005028:	68a1      	ldr	r1, [r4, #8]
 800502a:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 800502c:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800502e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8005032:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8005034:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005036:	d103      	bne.n	8005040 <HAL_UART_Transmit+0x4e>
 8005038:	6921      	ldr	r1, [r4, #16]
 800503a:	b909      	cbnz	r1, 8005040 <HAL_UART_Transmit+0x4e>
 800503c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800503e:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8005040:	2100      	movs	r1, #0
 8005042:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8005046:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8005048:	b289      	uxth	r1, r1
 800504a:	b941      	cbnz	r1, 800505e <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800504c:	2140      	movs	r1, #64	; 0x40
 800504e:	4620      	mov	r0, r4
 8005050:	f7ff ff52 	bl	8004ef8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8005054:	b960      	cbnz	r0, 8005070 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8005056:	2320      	movs	r3, #32
 8005058:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800505c:	e009      	b.n	8005072 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800505e:	2180      	movs	r1, #128	; 0x80
 8005060:	4620      	mov	r0, r4
 8005062:	e9cd 2300 	strd	r2, r3, [sp]
 8005066:	f7ff ff47 	bl	8004ef8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800506a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800506e:	b110      	cbz	r0, 8005076 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8005070:	2003      	movs	r0, #3
}
 8005072:	b003      	add	sp, #12
 8005074:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdata8bits == NULL)
 8005076:	6820      	ldr	r0, [r4, #0]
 8005078:	b94e      	cbnz	r6, 800508e <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800507a:	f835 1b02 	ldrh.w	r1, [r5], #2
 800507e:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005082:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8005084:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8005086:	3901      	subs	r1, #1
 8005088:	b289      	uxth	r1, r1
 800508a:	84e1      	strh	r1, [r4, #38]	; 0x26
 800508c:	e7db      	b.n	8005046 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800508e:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005092:	e7f6      	b.n	8005082 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8005094:	2001      	movs	r0, #1
 8005096:	e7ec      	b.n	8005072 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8005098:	2002      	movs	r0, #2
 800509a:	e7ea      	b.n	8005072 <HAL_UART_Transmit+0x80>

0800509c <HAL_UART_Receive>:
{
 800509c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050a0:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80050a2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80050a6:	2b20      	cmp	r3, #32
{
 80050a8:	4604      	mov	r4, r0
 80050aa:	460f      	mov	r7, r1
 80050ac:	4615      	mov	r5, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80050ae:	d14d      	bne.n	800514c <HAL_UART_Receive+0xb0>
    if ((pData == NULL) || (Size == 0U))
 80050b0:	2900      	cmp	r1, #0
 80050b2:	d049      	beq.n	8005148 <HAL_UART_Receive+0xac>
 80050b4:	2a00      	cmp	r2, #0
 80050b6:	d047      	beq.n	8005148 <HAL_UART_Receive+0xac>
    __HAL_LOCK(huart);
 80050b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d045      	beq.n	800514c <HAL_UART_Receive+0xb0>
 80050c0:	2301      	movs	r3, #1
 80050c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c6:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050c8:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ca:	6406      	str	r6, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050cc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d0:	6306      	str	r6, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 80050d2:	f7fd fc97 	bl	8002a04 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d6:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 80050d8:	85a5      	strh	r5, [r4, #44]	; 0x2c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80050de:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 80050e0:	85e5      	strh	r5, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050e2:	d103      	bne.n	80050ec <HAL_UART_Receive+0x50>
 80050e4:	6923      	ldr	r3, [r4, #16]
 80050e6:	b90b      	cbnz	r3, 80050ec <HAL_UART_Receive+0x50>
 80050e8:	463e      	mov	r6, r7
      pdata8bits  = NULL;
 80050ea:	461f      	mov	r7, r3
    __HAL_UNLOCK(huart);
 80050ec:	2300      	movs	r3, #0
 80050ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 80050f2:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 80050f4:	b2a8      	uxth	r0, r5
 80050f6:	b920      	cbnz	r0, 8005102 <HAL_UART_Receive+0x66>
    huart->RxState = HAL_UART_STATE_READY;
 80050f8:	2320      	movs	r3, #32
 80050fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80050fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005102:	464b      	mov	r3, r9
 8005104:	4642      	mov	r2, r8
 8005106:	2120      	movs	r1, #32
 8005108:	4620      	mov	r0, r4
 800510a:	f7ff fef5 	bl	8004ef8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800510e:	b9f8      	cbnz	r0, 8005150 <HAL_UART_Receive+0xb4>
      if (pdata8bits == NULL)
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	b94f      	cbnz	r7, 8005128 <HAL_UART_Receive+0x8c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511a:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 800511e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8005120:	3b01      	subs	r3, #1
 8005122:	b29b      	uxth	r3, r3
 8005124:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8005126:	e7e4      	b.n	80050f2 <HAL_UART_Receive+0x56>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005128:	68a2      	ldr	r2, [r4, #8]
 800512a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800512e:	d002      	beq.n	8005136 <HAL_UART_Receive+0x9a>
 8005130:	b932      	cbnz	r2, 8005140 <HAL_UART_Receive+0xa4>
 8005132:	6922      	ldr	r2, [r4, #16]
 8005134:	b922      	cbnz	r2, 8005140 <HAL_UART_Receive+0xa4>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005136:	6859      	ldr	r1, [r3, #4]
 8005138:	b2c9      	uxtb	r1, r1
 800513a:	f807 1b01 	strb.w	r1, [r7], #1
        pdata8bits++;
 800513e:	e7ee      	b.n	800511e <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005140:	6859      	ldr	r1, [r3, #4]
 8005142:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005146:	e7f8      	b.n	800513a <HAL_UART_Receive+0x9e>
      return  HAL_ERROR;
 8005148:	2001      	movs	r0, #1
 800514a:	e7d8      	b.n	80050fe <HAL_UART_Receive+0x62>
    return HAL_BUSY;
 800514c:	2002      	movs	r0, #2
 800514e:	e7d6      	b.n	80050fe <HAL_UART_Receive+0x62>
        return HAL_TIMEOUT;
 8005150:	2003      	movs	r0, #3
 8005152:	e7d4      	b.n	80050fe <HAL_UART_Receive+0x62>

08005154 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005158:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800515a:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800515e:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8005162:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8005166:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800516a:	6809      	ldr	r1, [r1, #0]
 800516c:	2901      	cmp	r1, #1
 800516e:	ea43 0304 	orr.w	r3, r3, r4
 8005172:	4912      	ldr	r1, [pc, #72]	; (80051bc <FMC_SDRAM_Init+0x68>)
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005174:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005176:	d00f      	beq.n	8005198 <FMC_SDRAM_Init+0x44>
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005178:	431a      	orrs	r2, r3
 800517a:	432a      	orrs	r2, r5
 800517c:	ea42 0308 	orr.w	r3, r2, r8
 8005180:	ea43 030e 	orr.w	r3, r3, lr
 8005184:	ea43 030c 	orr.w	r3, r3, ip
 8005188:	433b      	orrs	r3, r7
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800518a:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800518c:	4333      	orrs	r3, r6
 800518e:	430b      	orrs	r3, r1
                                               Init->WriteProtection    |\
                                               Init->SDClockPeriod      |\
                                               Init->ReadBurst          |\
                                               Init->ReadPipeDelay
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005190:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 8005192:	2000      	movs	r0, #0
 8005194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005198:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800519a:	6842      	ldr	r2, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800519c:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800519e:	ea45 0208 	orr.w	r2, r5, r8
 80051a2:	ea42 020e 	orr.w	r2, r2, lr
 80051a6:	ea42 020c 	orr.w	r2, r2, ip
 80051aa:	433a      	orrs	r2, r7
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80051ac:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80051b0:	4332      	orrs	r2, r6
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80051b2:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80051b4:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80051b6:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80051b8:	6042      	str	r2, [r0, #4]
 80051ba:	e7ea      	b.n	8005192 <FMC_SDRAM_Init+0x3e>
 80051bc:	ffff8000 	.word	0xffff8000

080051c0 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80051c0:	68cb      	ldr	r3, [r1, #12]
{
 80051c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051c4:	680c      	ldr	r4, [r1, #0]
 80051c6:	688e      	ldr	r6, [r1, #8]
 80051c8:	690d      	ldr	r5, [r1, #16]
 80051ca:	1e5f      	subs	r7, r3, #1
 80051cc:	694b      	ldr	r3, [r1, #20]
 80051ce:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 80051d2:	684c      	ldr	r4, [r1, #4]
 80051d4:	6989      	ldr	r1, [r1, #24]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	051b      	lsls	r3, r3, #20
 80051da:	3c01      	subs	r4, #1
 80051dc:	3e01      	subs	r6, #1
 80051de:	3d01      	subs	r5, #1
 80051e0:	3901      	subs	r1, #1
  if (Bank != FMC_SDRAM_BANK2) 
 80051e2:	2a01      	cmp	r2, #1
 80051e4:	ea4f 1404 	mov.w	r4, r4, lsl #4
 80051e8:	ea4f 2606 	mov.w	r6, r6, lsl #8
 80051ec:	ea4f 4505 	mov.w	r5, r5, lsl #16
 80051f0:	ea4f 6101 	mov.w	r1, r1, lsl #24
 80051f4:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
 80051f8:	d00c      	beq.n	8005214 <FMC_SDRAM_Timing_Init+0x54>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80051fa:	ea43 030c 	orr.w	r3, r3, ip
 80051fe:	4323      	orrs	r3, r4
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005200:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005202:	4333      	orrs	r3, r6
 8005204:	432b      	orrs	r3, r5
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005206:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800520a:	430b      	orrs	r3, r1
 800520c:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
                       (((Timing->RPDelay)-1U) << 20U)             |\
                       (((Timing->RCDDelay)-1U) << 24U));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800520e:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 8005210:	2000      	movs	r0, #0
 8005212:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005214:	6887      	ldr	r7, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005216:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
 800521a:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800521e:	4334      	orrs	r4, r6
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005220:	433b      	orrs	r3, r7
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005222:	ea44 020c 	orr.w	r2, r4, ip
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005226:	68c7      	ldr	r7, [r0, #12]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005228:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800522a:	432a      	orrs	r2, r5
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800522c:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005230:	430a      	orrs	r2, r1
 8005232:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005234:	60c2      	str	r2, [r0, #12]
 8005236:	e7eb      	b.n	8005210 <FMC_SDRAM_Timing_Init+0x50>

08005238 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005238:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tmpr = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	9301      	str	r3, [sp, #4]
{
 800523e:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005240:	e9d1 3200 	ldrd	r3, r2, [r1]
 8005244:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
                    ((Command->ModeRegisterDefinition) << 9U)
 8005246:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005248:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800524c:	688a      	ldr	r2, [r1, #8]
 800524e:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005250:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8005254:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8005256:	9b01      	ldr	r3, [sp, #4]
 8005258:	6103      	str	r3, [r0, #16]
{
 800525a:	4604      	mov	r4, r0

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800525c:	f7fd fbd2 	bl	8002a04 <HAL_GetTick>
 8005260:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005262:	69a3      	ldr	r3, [r4, #24]
 8005264:	f013 0320 	ands.w	r3, r3, #32
 8005268:	d101      	bne.n	800526e <FMC_SDRAM_SendCommand+0x36>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800526a:	4618      	mov	r0, r3
 800526c:	e003      	b.n	8005276 <FMC_SDRAM_SendCommand+0x3e>
    if(Timeout != HAL_MAX_DELAY)
 800526e:	1c6b      	adds	r3, r5, #1
 8005270:	d0f7      	beq.n	8005262 <FMC_SDRAM_SendCommand+0x2a>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005272:	b915      	cbnz	r5, 800527a <FMC_SDRAM_SendCommand+0x42>
        return HAL_TIMEOUT;
 8005274:	2003      	movs	r0, #3
}
 8005276:	b002      	add	sp, #8
 8005278:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800527a:	f7fd fbc3 	bl	8002a04 <HAL_GetTick>
 800527e:	1b80      	subs	r0, r0, r6
 8005280:	42a8      	cmp	r0, r5
 8005282:	d9ee      	bls.n	8005262 <FMC_SDRAM_SendCommand+0x2a>
 8005284:	e7f6      	b.n	8005274 <FMC_SDRAM_SendCommand+0x3c>

08005286 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8005286:	6943      	ldr	r3, [r0, #20]
 8005288:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800528c:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 800528e:	2000      	movs	r0, #0
 8005290:	4770      	bx	lr
	...

08005294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052cc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005298:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800529a:	e003      	b.n	80052a4 <LoopCopyDataInit>

0800529c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800529c:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800529e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80052a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80052a2:	3104      	adds	r1, #4

080052a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80052a4:	480b      	ldr	r0, [pc, #44]	; (80052d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80052a6:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80052a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80052aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80052ac:	d3f6      	bcc.n	800529c <CopyDataInit>
  ldr  r2, =_sbss
 80052ae:	4a0b      	ldr	r2, [pc, #44]	; (80052dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80052b0:	e002      	b.n	80052b8 <LoopFillZerobss>

080052b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80052b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80052b4:	f842 3b04 	str.w	r3, [r2], #4

080052b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80052b8:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80052ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80052bc:	d3f9      	bcc.n	80052b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80052be:	f7fd fb31 	bl	8002924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052c2:	f002 fa7f 	bl	80077c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052c6:	f001 f801 	bl	80062cc <main>
  bx  lr    
 80052ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80052cc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80052d0:	0801f4e4 	.word	0x0801f4e4
  ldr  r0, =_sdata
 80052d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80052d8:	20000284 	.word	0x20000284
  ldr  r2, =_sbss
 80052dc:	20000284 	.word	0x20000284
  ldr  r3, = _ebss
 80052e0:	20004794 	.word	0x20004794

080052e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80052e4:	e7fe      	b.n	80052e4 <ADC_IRQHandler>
	...

080052e8 <GPIOB_Init>:
 *      Author: patricio
 */

#include "main.h"

void GPIOB_Init(void) {
 80052e8:	b530      	push	{r4, r5, lr}
 80052ea:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;

  __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ec:	2300      	movs	r3, #0
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	4b0d      	ldr	r3, [pc, #52]	; (8005328 <GPIOB_Init+0x40>)
  GPIO_InitStruct.Pin = RELAY_IN_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052f2:	480e      	ldr	r0, [pc, #56]	; (800532c <GPIOB_Init+0x44>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80052f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f6:	f042 0202 	orr.w	r2, r2, #2
 80052fa:	631a      	str	r2, [r3, #48]	; 0x30
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005304:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005306:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005308:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800530a:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800530c:	2510      	movs	r5, #16
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800530e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8005310:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005312:	e9cd 5401 	strd	r5, r4, [sp, #4]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005316:	f7fd fe19 	bl	8002f4c <HAL_GPIO_Init>

  // Disable Relay input at init
  HAL_GPIO_WritePin(GPIOB, RELAY_IN_PIN, GPIO_PIN_SET);
 800531a:	4804      	ldr	r0, [pc, #16]	; (800532c <GPIOB_Init+0x44>)
 800531c:	4622      	mov	r2, r4
 800531e:	4629      	mov	r1, r5
 8005320:	f7fd ffa2 	bl	8003268 <HAL_GPIO_WritePin>

}
 8005324:	b007      	add	sp, #28
 8005326:	bd30      	pop	{r4, r5, pc}
 8005328:	40023800 	.word	0x40023800
 800532c:	40020400 	.word	0x40020400

08005330 <PCD_WriteRegister>:


/* Public functions ----------------------------------------------------------*/
void PCD_WriteRegister(	uint8_t reg,		///< The register to write to. One of the PCD_Register enums.
						uint8_t value		///< The value to write.
						) {
 8005330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		MFRC522_CS_LOW;				// Select slave
 8005332:	4e0c      	ldr	r6, [pc, #48]	; (8005364 <PCD_WriteRegister+0x34>)
		SPI_TransmitByte(MFRC522_SPI, (reg & 0x7E));	// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 8005334:	4f0c      	ldr	r7, [pc, #48]	; (8005368 <PCD_WriteRegister+0x38>)
		MFRC522_CS_LOW;				// Select slave
 8005336:	2200      	movs	r2, #0
						) {
 8005338:	4605      	mov	r5, r0
 800533a:	460c      	mov	r4, r1
		MFRC522_CS_LOW;				// Select slave
 800533c:	4630      	mov	r0, r6
 800533e:	2108      	movs	r1, #8
 8005340:	f7fd ff92 	bl	8003268 <HAL_GPIO_WritePin>
		SPI_TransmitByte(MFRC522_SPI, (reg & 0x7E));	// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 8005344:	f005 017e 	and.w	r1, r5, #126	; 0x7e
 8005348:	4638      	mov	r0, r7
 800534a:	f000 fc6f 	bl	8005c2c <SPI_TransmitByte>
		SPI_TransmitByte(MFRC522_SPI, value);
 800534e:	4621      	mov	r1, r4
 8005350:	4638      	mov	r0, r7
 8005352:	f000 fc6b 	bl	8005c2c <SPI_TransmitByte>
		MFRC522_CS_HIGH;			// Release slave again
 8005356:	4630      	mov	r0, r6
 8005358:	2201      	movs	r2, #1
} // End PCD_WriteRegister()
 800535a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		MFRC522_CS_HIGH;			// Release slave again
 800535e:	2108      	movs	r1, #8
 8005360:	f7fd bf82 	b.w	8003268 <HAL_GPIO_WritePin>
 8005364:	40021000 	.word	0x40021000
 8005368:	20000a98 	.word	0x20000a98

0800536c <PCD_WriteRegisterMulti>:
 * The interface is described in the datasheet section 8.1.2.
 */
void PCD_WriteRegisterMulti( uint8_t reg,		///< The register to write to. One of the PCD_Register enums.
							 uint8_t count,		///< The number of uint8_ts to write to the register
							 uint8_t *values	///< The values to write. uint8_t array.
							) {
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	4606      	mov	r6, r0
 8005370:	460d      	mov	r5, r1
	MFRC522_CS_LOW;		// Select slave
 8005372:	480e      	ldr	r0, [pc, #56]	; (80053ac <PCD_WriteRegisterMulti+0x40>)
							) {
 8005374:	4614      	mov	r4, r2
	MFRC522_CS_LOW;		// Select slave
 8005376:	2108      	movs	r1, #8
 8005378:	2200      	movs	r2, #0
 800537a:	f7fd ff75 	bl	8003268 <HAL_GPIO_WritePin>
	SPI_TransmitByte(MFRC522_SPI, (reg & 0x7E));	// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 800537e:	f006 017e 	and.w	r1, r6, #126	; 0x7e
 8005382:	480b      	ldr	r0, [pc, #44]	; (80053b0 <PCD_WriteRegisterMulti+0x44>)
	for (uint8_t index = 0; index < count; index++) {
		SPI_TransmitByte(MFRC522_SPI, values[index]);
 8005384:	4e0a      	ldr	r6, [pc, #40]	; (80053b0 <PCD_WriteRegisterMulti+0x44>)
	SPI_TransmitByte(MFRC522_SPI, (reg & 0x7E));	// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 8005386:	f000 fc51 	bl	8005c2c <SPI_TransmitByte>
	for (uint8_t index = 0; index < count; index++) {
 800538a:	4425      	add	r5, r4
 800538c:	42ac      	cmp	r4, r5
 800538e:	d106      	bne.n	800539e <PCD_WriteRegisterMulti+0x32>
	}
	MFRC522_CS_HIGH;	// Release slave again
} // End PCD_WriteRegister()
 8005390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	MFRC522_CS_HIGH;	// Release slave again
 8005394:	4805      	ldr	r0, [pc, #20]	; (80053ac <PCD_WriteRegisterMulti+0x40>)
 8005396:	2201      	movs	r2, #1
 8005398:	2108      	movs	r1, #8
 800539a:	f7fd bf65 	b.w	8003268 <HAL_GPIO_WritePin>
		SPI_TransmitByte(MFRC522_SPI, values[index]);
 800539e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a2:	4630      	mov	r0, r6
 80053a4:	f000 fc42 	bl	8005c2c <SPI_TransmitByte>
	for (uint8_t index = 0; index < count; index++) {
 80053a8:	e7f0      	b.n	800538c <PCD_WriteRegisterMulti+0x20>
 80053aa:	bf00      	nop
 80053ac:	40021000 	.word	0x40021000
 80053b0:	20000a98 	.word	0x20000a98

080053b4 <PCD_ReadRegister>:
/**
 * Reads a uint8_t from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
uint8_t PCD_ReadRegister( uint8_t reg	///< The register to read from. One of the PCD_Register enums.
						 ) {
 80053b4:	b538      	push	{r3, r4, r5, lr}
	uint8_t value;
	MFRC522_CS_LOW;			// Select slave
 80053b6:	4d0d      	ldr	r5, [pc, #52]	; (80053ec <PCD_ReadRegister+0x38>)
 80053b8:	2200      	movs	r2, #0
						 ) {
 80053ba:	4604      	mov	r4, r0
	MFRC522_CS_LOW;			// Select slave
 80053bc:	2108      	movs	r1, #8
 80053be:	4628      	mov	r0, r5
 80053c0:	f7fd ff52 	bl	8003268 <HAL_GPIO_WritePin>
	SPI_TransmitByte(MFRC522_SPI, (0x80 | (reg & 0x7E)));	// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80053c4:	f004 017e 	and.w	r1, r4, #126	; 0x7e
 80053c8:	4c09      	ldr	r4, [pc, #36]	; (80053f0 <PCD_ReadRegister+0x3c>)
 80053ca:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80053ce:	4620      	mov	r0, r4
 80053d0:	f000 fc2c 	bl	8005c2c <SPI_TransmitByte>
	value = SPI_TransmitByte(MFRC522_SPI, 0);				// Read the value back. Send 0 to stop reading.
 80053d4:	2100      	movs	r1, #0
 80053d6:	4620      	mov	r0, r4
 80053d8:	f000 fc28 	bl	8005c2c <SPI_TransmitByte>
	MFRC522_CS_HIGH;		// Release slave again
 80053dc:	2201      	movs	r2, #1
	value = SPI_TransmitByte(MFRC522_SPI, 0);				// Read the value back. Send 0 to stop reading.
 80053de:	4604      	mov	r4, r0
	MFRC522_CS_HIGH;		// Release slave again
 80053e0:	2108      	movs	r1, #8
 80053e2:	4628      	mov	r0, r5
 80053e4:	f7fd ff40 	bl	8003268 <HAL_GPIO_WritePin>
	return value;
} // End PCD_ReadRegister()
 80053e8:	4620      	mov	r0, r4
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
 80053ec:	40021000 	.word	0x40021000
 80053f0:	20000a98 	.word	0x20000a98

080053f4 <PCD_ReadRegisterMulti>:
 */
void PCD_ReadRegisterMulti(	uint8_t reg,		///< The register to read from. One of the PCD_Register enums.
								uint8_t count,		///< The number of uint8_ts to read
								uint8_t *rcvData,	///< uint8_t array to store the values in.
								uint8_t rxAlign	    ///< Only bit positions rxAlign..7 in values[0] are updated.
								) {
 80053f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f8:	4615      	mov	r5, r2
 80053fa:	461e      	mov	r6, r3
	uint8_t dummy;		// this is actualy never used - only for the sake of code readability
	uint8_t readdata;
	if (count == 0) {
 80053fc:	460c      	mov	r4, r1
 80053fe:	2900      	cmp	r1, #0
 8005400:	d041      	beq.n	8005486 <PCD_ReadRegisterMulti+0x92>
		return;
	}
	//Form the register address:
	uint8_t address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address.
 8005402:	f000 007e 	and.w	r0, r0, #126	; 0x7e
 8005406:	f040 0780 	orr.w	r7, r0, #128	; 0x80
												// MFRC522 Datasheet section 8.1.2.3.
	uint8_t index = 0;							// Index in values array.
	MFRC522_CS_LOW;		// Select slave
 800540a:	2200      	movs	r2, #0
 800540c:	481f      	ldr	r0, [pc, #124]	; (800548c <PCD_ReadRegisterMulti+0x98>)
	count--;								// One read is performed outside of the loop - this is dummy read
	dummy = SPI_TransmitByte(MFRC522_SPI, address);		// The first read is dummy - just tell MFRC522 which address we want to read

	while (index < count) {
		// Read value and tell that we want to read the same address again:
		readdata = SPI_TransmitByte(MFRC522_SPI, address);
 800540e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8005490 <PCD_ReadRegisterMulti+0x9c>
	MFRC522_CS_LOW;		// Select slave
 8005412:	2108      	movs	r1, #8
 8005414:	f7fd ff28 	bl	8003268 <HAL_GPIO_WritePin>
	dummy = SPI_TransmitByte(MFRC522_SPI, address);		// The first read is dummy - just tell MFRC522 which address we want to read
 8005418:	481d      	ldr	r0, [pc, #116]	; (8005490 <PCD_ReadRegisterMulti+0x9c>)
 800541a:	4639      	mov	r1, r7
 800541c:	f000 fc06 	bl	8005c2c <SPI_TransmitByte>
	count--;								// One read is performed outside of the loop - this is dummy read
 8005420:	3c01      	subs	r4, #1
 8005422:	b2e4      	uxtb	r4, r4
	while (index < count) {
 8005424:	f04f 0800 	mov.w	r8, #0
		// If this is the first byte in the bit oriented frame, check where is the first received bit:
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in rcvData[0]
			// Create bit mask for bit positions rxAlign..7
			uint8_t mask = 0;
			for (uint8_t i = rxAlign; i <= 7; i++) {
				mask |= (1 << i);
 8005428:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
 800542c:	fa5f fb88 	uxtb.w	fp, r8
 8005430:	45a3      	cmp	fp, r4
 8005432:	d30b      	bcc.n	800544c <PCD_ReadRegisterMulti+0x58>
		else { // Normal case
			rcvData[index] = readdata;	// Read value and tell that we want to read the same address again.
		}
		index++;
	}
	rcvData[index] = SPI_TransmitByte(MFRC522_SPI, 0);			// Read the final uint8_t. Send 0 to stop reading.
 8005434:	2100      	movs	r1, #0
 8005436:	4816      	ldr	r0, [pc, #88]	; (8005490 <PCD_ReadRegisterMulti+0x9c>)
 8005438:	f000 fbf8 	bl	8005c2c <SPI_TransmitByte>
	MFRC522_CS_HIGH;			// Release slave again
 800543c:	2201      	movs	r2, #1
	rcvData[index] = SPI_TransmitByte(MFRC522_SPI, 0);			// Read the final uint8_t. Send 0 to stop reading.
 800543e:	5528      	strb	r0, [r5, r4]
	MFRC522_CS_HIGH;			// Release slave again
 8005440:	2108      	movs	r1, #8
} // End PCD_ReadRegister()
 8005442:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	MFRC522_CS_HIGH;			// Release slave again
 8005446:	4811      	ldr	r0, [pc, #68]	; (800548c <PCD_ReadRegisterMulti+0x98>)
 8005448:	f7fd bf0e 	b.w	8003268 <HAL_GPIO_WritePin>
		readdata = SPI_TransmitByte(MFRC522_SPI, address);
 800544c:	4639      	mov	r1, r7
 800544e:	4648      	mov	r0, r9
 8005450:	f000 fbec 	bl	8005c2c <SPI_TransmitByte>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in rcvData[0]
 8005454:	f1bb 0f00 	cmp.w	fp, #0
 8005458:	d112      	bne.n	8005480 <PCD_ReadRegisterMulti+0x8c>
 800545a:	b18e      	cbz	r6, 8005480 <PCD_ReadRegisterMulti+0x8c>
 800545c:	4633      	mov	r3, r6
			for (uint8_t i = rxAlign; i <= 7; i++) {
 800545e:	b2da      	uxtb	r2, r3
 8005460:	2a07      	cmp	r2, #7
 8005462:	d905      	bls.n	8005470 <PCD_ReadRegisterMulti+0x7c>
			rcvData[0] = (rcvData[0] & 0x00) | (readdata & mask);
 8005464:	ea00 000b 	and.w	r0, r0, fp
 8005468:	7028      	strb	r0, [r5, #0]
		index++;
 800546a:	f108 0801 	add.w	r8, r8, #1
 800546e:	e7dd      	b.n	800542c <PCD_ReadRegisterMulti+0x38>
				mask |= (1 << i);
 8005470:	fa0a f203 	lsl.w	r2, sl, r3
 8005474:	ea42 0b0b 	orr.w	fp, r2, fp
 8005478:	fa5f fb8b 	uxtb.w	fp, fp
			for (uint8_t i = rxAlign; i <= 7; i++) {
 800547c:	3301      	adds	r3, #1
 800547e:	e7ee      	b.n	800545e <PCD_ReadRegisterMulti+0x6a>
			rcvData[index] = readdata;	// Read value and tell that we want to read the same address again.
 8005480:	f805 0008 	strb.w	r0, [r5, r8]
 8005484:	e7f1      	b.n	800546a <PCD_ReadRegisterMulti+0x76>
} // End PCD_ReadRegister()
 8005486:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548a:	bf00      	nop
 800548c:	40021000 	.word	0x40021000
 8005490:	20000a98 	.word	0x20000a98

08005494 <PCD_SetRegisterBitMask>:
/**
 * Sets the bits given in mask in register reg.
 */
void PCD_SetRegisterBitMask( uint8_t reg,	///< The register to update. One of the PCD_Register enums.
							 uint8_t mask	///< The bits to set.
							) {
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	4604      	mov	r4, r0
 8005498:	460d      	mov	r5, r1
	uint8_t tmp;
	tmp = PCD_ReadRegister(reg);
 800549a:	f7ff ff8b 	bl	80053b4 <PCD_ReadRegister>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 800549e:	ea40 0105 	orr.w	r1, r0, r5
 80054a2:	b2c9      	uxtb	r1, r1
 80054a4:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
 80054a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80054aa:	f7ff bf41 	b.w	8005330 <PCD_WriteRegister>

080054ae <PCD_ClearRegisterBitMask>:
/**
 * Clears the bits given in mask from register reg.
 */
void PCD_ClearRegisterBitMask(	uint8_t reg,	///< The register to update. One of the PCD_Register enums.
								uint8_t mask	///< The bits to clear.
								) {
 80054ae:	b538      	push	{r3, r4, r5, lr}
 80054b0:	4604      	mov	r4, r0
 80054b2:	460d      	mov	r5, r1
	uint8_t tmp;
	tmp = PCD_ReadRegister(reg);
 80054b4:	f7ff ff7e 	bl	80053b4 <PCD_ReadRegister>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80054b8:	ea20 0105 	bic.w	r1, r0, r5
 80054bc:	b2c9      	uxtb	r1, r1
 80054be:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
 80054c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80054c4:	f7ff bf34 	b.w	8005330 <PCD_WriteRegister>

080054c8 <PCD_CalculateCRC>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode_t PCD_CalculateCRC(	uint8_t *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
						 	 uint8_t length,	///< In: The number of uint8_ts to transfer.
							uint8_t *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low uint8_t first.
					 	 ) {
 80054c8:	b570      	push	{r4, r5, r6, lr}
 80054ca:	460d      	mov	r5, r1
 80054cc:	4606      	mov	r6, r0
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80054ce:	2100      	movs	r1, #0
 80054d0:	2002      	movs	r0, #2
					 	 ) {
 80054d2:	4614      	mov	r4, r2
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80054d4:	f7ff ff2c 	bl	8005330 <PCD_WriteRegister>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
 80054d8:	2104      	movs	r1, #4
 80054da:	200a      	movs	r0, #10
 80054dc:	f7ff ff28 	bl	8005330 <PCD_WriteRegister>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80054e0:	2180      	movs	r1, #128	; 0x80
 80054e2:	2014      	movs	r0, #20
 80054e4:	f7ff ffd6 	bl	8005494 <PCD_SetRegisterBitMask>
	PCD_WriteRegisterMulti(FIFODataReg, length, data);		// Write data to the FIFO
 80054e8:	4629      	mov	r1, r5
 80054ea:	4632      	mov	r2, r6
 80054ec:	2012      	movs	r0, #18
 80054ee:	f7ff ff3d 	bl	800536c <PCD_WriteRegisterMulti>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
 80054f2:	2103      	movs	r1, #3
 80054f4:	2002      	movs	r0, #2
 80054f6:	f7ff ff1b 	bl	8005330 <PCD_WriteRegister>
 80054fa:	f241 3588 	movw	r5, #5000	; 0x1388

	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73µs.
	int32_t i = 5000;
	uint8_t n;
	while (1) {
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
 80054fe:	200a      	movs	r0, #10
 8005500:	f7ff ff58 	bl	80053b4 <PCD_ReadRegister>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
 8005504:	0743      	lsls	r3, r0, #29
 8005506:	d403      	bmi.n	8005510 <PCD_CalculateCRC+0x48>
			break;
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
 8005508:	3d01      	subs	r5, #1
 800550a:	d1f8      	bne.n	80054fe <PCD_CalculateCRC+0x36>
			return STATUS_TIMEOUT;
 800550c:	2004      	movs	r0, #4
 800550e:	e00c      	b.n	800552a <PCD_CalculateCRC+0x62>
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
 8005510:	2100      	movs	r1, #0
 8005512:	2002      	movs	r0, #2
 8005514:	f7ff ff0c 	bl	8005330 <PCD_WriteRegister>

	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
 8005518:	2044      	movs	r0, #68	; 0x44
 800551a:	f7ff ff4b 	bl	80053b4 <PCD_ReadRegister>
 800551e:	7020      	strb	r0, [r4, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
 8005520:	2042      	movs	r0, #66	; 0x42
 8005522:	f7ff ff47 	bl	80053b4 <PCD_ReadRegister>
 8005526:	7060      	strb	r0, [r4, #1]
	return STATUS_OK;
 8005528:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
 800552a:	bd70      	pop	{r4, r5, r6, pc}

0800552c <PCD_Reset>:

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void PCD_Reset() {
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 800552c:	2002      	movs	r0, #2
void PCD_Reset() {
 800552e:	b508      	push	{r3, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 8005530:	210f      	movs	r1, #15
 8005532:	f7ff fefd 	bl	8005330 <PCD_WriteRegister>
	//uint8_t tmp = PCD_ReadRegister(CommandReg);
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg)
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74µs. Let us be generous: 50ms.
	HAL_Delay(50);
 8005536:	2032      	movs	r0, #50	; 0x32
 8005538:	f7fd fa6a 	bl	8002a10 <HAL_Delay>
	//tmp = PCD_ReadRegister(CommandReg);
	// Wait for the PowerDown bit in CommandReg to be cleared
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
 800553c:	2002      	movs	r0, #2
 800553e:	f7ff ff39 	bl	80053b4 <PCD_ReadRegister>
 8005542:	06c3      	lsls	r3, r0, #27
 8005544:	d4fa      	bmi.n	800553c <PCD_Reset+0x10>
		// PCD still restarting - unlikely after waiting 50ms, but better safe than sorry.
	}
	//tmp = PCD_ReadRegister(CommandReg);
} // End PCD_Reset()
 8005546:	bd08      	pop	{r3, pc}

08005548 <PCD_AntennaOn>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void PCD_AntennaOn() {
 8005548:	b508      	push	{r3, lr}
	uint8_t value = PCD_ReadRegister(TxControlReg);
 800554a:	2028      	movs	r0, #40	; 0x28
 800554c:	f7ff ff32 	bl	80053b4 <PCD_ReadRegister>
	if ((value & 0x03) != 0x03) {
 8005550:	f000 0303 	and.w	r3, r0, #3
 8005554:	2b03      	cmp	r3, #3
 8005556:	d00a      	beq.n	800556e <PCD_AntennaOn+0x26>
		PCD_WriteRegister(TxControlReg, value | 0x03);
 8005558:	f040 0003 	orr.w	r0, r0, #3
 800555c:	b2c1      	uxtb	r1, r0
 800555e:	2028      	movs	r0, #40	; 0x28
 8005560:	f7ff fee6 	bl	8005330 <PCD_WriteRegister>
		uint8_t tmp = PCD_ReadRegister(TxControlReg);
	}
} // End PCD_AntennaOn()
 8005564:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		uint8_t tmp = PCD_ReadRegister(TxControlReg);
 8005568:	2028      	movs	r0, #40	; 0x28
 800556a:	f7ff bf23 	b.w	80053b4 <PCD_ReadRegister>
} // End PCD_AntennaOn()
 800556e:	bd08      	pop	{r3, pc}

08005570 <PCD_Init>:
void PCD_Init() {
 8005570:	b508      	push	{r3, lr}
	InitSPI(MFRC522_SPI);
 8005572:	4810      	ldr	r0, [pc, #64]	; (80055b4 <PCD_Init+0x44>)
 8005574:	f000 fb3c 	bl	8005bf0 <InitSPI>
	PCD_Reset();
 8005578:	f7ff ffd8 	bl	800552c <PCD_Reset>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 800557c:	2180      	movs	r1, #128	; 0x80
 800557e:	2054      	movs	r0, #84	; 0x54
 8005580:	f7ff fed6 	bl	8005330 <PCD_WriteRegister>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25µs.
 8005584:	21a9      	movs	r1, #169	; 0xa9
 8005586:	2056      	movs	r0, #86	; 0x56
 8005588:	f7ff fed2 	bl	8005330 <PCD_WriteRegister>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 800558c:	2103      	movs	r1, #3
 800558e:	2058      	movs	r0, #88	; 0x58
 8005590:	f7ff fece 	bl	8005330 <PCD_WriteRegister>
    PCD_WriteRegister(TReloadRegL, 0xE8);
 8005594:	21e8      	movs	r1, #232	; 0xe8
 8005596:	205a      	movs	r0, #90	; 0x5a
 8005598:	f7ff feca 	bl	8005330 <PCD_WriteRegister>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 800559c:	2140      	movs	r1, #64	; 0x40
 800559e:	202a      	movs	r0, #42	; 0x2a
 80055a0:	f7ff fec6 	bl	8005330 <PCD_WriteRegister>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 80055a4:	213d      	movs	r1, #61	; 0x3d
 80055a6:	2022      	movs	r0, #34	; 0x22
 80055a8:	f7ff fec2 	bl	8005330 <PCD_WriteRegister>
} // End PCD_Init()
 80055ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80055b0:	f7ff bfca 	b.w	8005548 <PCD_AntennaOn>
 80055b4:	20000a98 	.word	0x20000a98

080055b8 <PCD_CommunicateWithPICC>:
								uint8_t *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
								uint8_t *backLen,		///< In: Max number of uint8_ts to write to *backData. Out: The number of uint8_ts returned.
								uint8_t *validBits,	///< In/Out: The number of valid bits in the last uint8_t. 0 for 8 valid bits.
								uint8_t rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
								bool checkCRC		///< In: True => The last two uint8_ts of the response is assumed to be a CRC_A that must be validated.
								) {
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	b087      	sub	sp, #28
 80055be:	468a      	mov	sl, r1
 80055c0:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 80055c4:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 80055c8:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 80055cc:	9101      	str	r1, [sp, #4]
 80055ce:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 80055d2:	4681      	mov	r9, r0
 80055d4:	2600      	movs	r6, #0
	uint8_t n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	uint8_t txLastBits = validBits ? *validBits : 0;
 80055d6:	f1b8 0f00 	cmp.w	r8, #0
 80055da:	d035      	beq.n	8005648 <PCD_CommunicateWithPICC+0x90>
 80055dc:	f898 7000 	ldrb.w	r7, [r8]
	uint8_t bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]

	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80055e0:	2100      	movs	r1, #0
 80055e2:	2002      	movs	r0, #2
 80055e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055e8:	f7ff fea2 	bl	8005330 <PCD_WriteRegister>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
 80055ec:	217f      	movs	r1, #127	; 0x7f
 80055ee:	2008      	movs	r0, #8
 80055f0:	f7ff fe9e 	bl	8005330 <PCD_WriteRegister>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80055f4:	2180      	movs	r1, #128	; 0x80
 80055f6:	2014      	movs	r0, #20
 80055f8:	f7ff ff4c 	bl	8005494 <PCD_SetRegisterBitMask>
	PCD_WriteRegisterMulti(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 80055fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	uint8_t bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 8005600:	eb07 170b 	add.w	r7, r7, fp, lsl #4
	PCD_WriteRegisterMulti(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 8005604:	4619      	mov	r1, r3
 8005606:	2012      	movs	r0, #18
	uint8_t bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 8005608:	b2ff      	uxtb	r7, r7
	PCD_WriteRegisterMulti(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 800560a:	f7ff feaf 	bl	800536c <PCD_WriteRegisterMulti>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
 800560e:	4639      	mov	r1, r7
 8005610:	201a      	movs	r0, #26
 8005612:	f7ff fe8d 	bl	8005330 <PCD_WriteRegister>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
 8005616:	4649      	mov	r1, r9
 8005618:	2002      	movs	r0, #2
 800561a:	f7ff fe89 	bl	8005330 <PCD_WriteRegister>
	if (command == PCD_Transceive) 	{
 800561e:	f1b9 0f0c 	cmp.w	r9, #12
 8005622:	d103      	bne.n	800562c <PCD_CommunicateWithPICC+0x74>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
 8005624:	2180      	movs	r1, #128	; 0x80
 8005626:	201a      	movs	r0, #26
 8005628:	f7ff ff34 	bl	8005494 <PCD_SetRegisterBitMask>
	uint8_t txLastBits = validBits ? *validBits : 0;
 800562c:	f242 7710 	movw	r7, #10000	; 0x2710
	// Wait for the command to complete.
	// In PCD_Init() we set the TAuto flag in TModeReg. This means the timer automatically starts when the PCD stops transmitting.
	// Each iteration of the do-while-loop takes 17.86µs.
	i = 10000;
	while (1) {
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
 8005630:	2008      	movs	r0, #8
 8005632:	f7ff febf 	bl	80053b4 <PCD_ReadRegister>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
 8005636:	ea10 0f0a 	tst.w	r0, sl
 800563a:	d107      	bne.n	800564c <PCD_CommunicateWithPICC+0x94>
			break;
		}
		if (n & 0x01) {	// Timer interrupt - nothing received in 25ms
 800563c:	07c2      	lsls	r2, r0, #31
 800563e:	d401      	bmi.n	8005644 <PCD_CommunicateWithPICC+0x8c>
			return STATUS_TIMEOUT;
		}
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
 8005640:	3f01      	subs	r7, #1
 8005642:	d1f5      	bne.n	8005630 <PCD_CommunicateWithPICC+0x78>
			return STATUS_TIMEOUT;
 8005644:	2004      	movs	r0, #4
 8005646:	e046      	b.n	80056d6 <PCD_CommunicateWithPICC+0x11e>
	uint8_t txLastBits = validBits ? *validBits : 0;
 8005648:	4647      	mov	r7, r8
 800564a:	e7c9      	b.n	80055e0 <PCD_CommunicateWithPICC+0x28>
			return STATUS_TIMEOUT;
		}
	}

	// Stop now if any errors except collisions were detected.
	uint8_t errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 800564c:	200c      	movs	r0, #12
 800564e:	f7ff feb1 	bl	80053b4 <PCD_ReadRegister>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 8005652:	f010 0f13 	tst.w	r0, #19
	uint8_t errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 8005656:	4607      	mov	r7, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 8005658:	d140      	bne.n	80056dc <PCD_CommunicateWithPICC+0x124>
		return STATUS_ERROR;
	}

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
 800565a:	b1bc      	cbz	r4, 800568c <PCD_CommunicateWithPICC+0xd4>
 800565c:	b1b5      	cbz	r5, 800568c <PCD_CommunicateWithPICC+0xd4>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of uint8_ts in the FIFO
 800565e:	2014      	movs	r0, #20
 8005660:	f7ff fea8 	bl	80053b4 <PCD_ReadRegister>
		if (n > *backLen) {
 8005664:	782b      	ldrb	r3, [r5, #0]
 8005666:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of uint8_ts in the FIFO
 8005668:	4601      	mov	r1, r0
		if (n > *backLen) {
 800566a:	d339      	bcc.n	80056e0 <PCD_CommunicateWithPICC+0x128>
			return STATUS_NO_ROOM;
		}
		*backLen = n;												// Number of uint8_ts returned
 800566c:	7028      	strb	r0, [r5, #0]
		PCD_ReadRegisterMulti(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
 800566e:	465b      	mov	r3, fp
 8005670:	4622      	mov	r2, r4
 8005672:	2012      	movs	r0, #18
 8005674:	f7ff febe 	bl	80053f4 <PCD_ReadRegisterMulti>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received uint8_t. If this value is 000b, the whole uint8_t is valid.
 8005678:	2018      	movs	r0, #24
 800567a:	f7ff fe9b 	bl	80053b4 <PCD_ReadRegister>
 800567e:	f000 0607 	and.w	r6, r0, #7
		if (validBits) {
 8005682:	f1b8 0f00 	cmp.w	r8, #0
 8005686:	d001      	beq.n	800568c <PCD_CommunicateWithPICC+0xd4>
			*validBits = _validBits;
 8005688:	f888 6000 	strb.w	r6, [r8]
		}
	}

	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
 800568c:	073b      	lsls	r3, r7, #28
 800568e:	d429      	bmi.n	80056e4 <PCD_CommunicateWithPICC+0x12c>
		return STATUS_COLLISION;
	}

	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
 8005690:	b354      	cbz	r4, 80056e8 <PCD_CommunicateWithPICC+0x130>
 8005692:	b34d      	cbz	r5, 80056e8 <PCD_CommunicateWithPICC+0x130>
 8005694:	9b01      	ldr	r3, [sp, #4]
 8005696:	b33b      	cbz	r3, 80056e8 <PCD_CommunicateWithPICC+0x130>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
 8005698:	7829      	ldrb	r1, [r5, #0]
 800569a:	2901      	cmp	r1, #1
 800569c:	d103      	bne.n	80056a6 <PCD_CommunicateWithPICC+0xee>
 800569e:	2e04      	cmp	r6, #4
 80056a0:	d124      	bne.n	80056ec <PCD_CommunicateWithPICC+0x134>
			return STATUS_MIFARE_NACK;
 80056a2:	2009      	movs	r0, #9
 80056a4:	e017      	b.n	80056d6 <PCD_CommunicateWithPICC+0x11e>
		}
		// We need at least the CRC_A value and all 8 bits of the last uint8_t must be received.
		if (*backLen < 2 || _validBits != 0) {
 80056a6:	d921      	bls.n	80056ec <PCD_CommunicateWithPICC+0x134>
 80056a8:	bb06      	cbnz	r6, 80056ec <PCD_CommunicateWithPICC+0x134>
			return STATUS_CRC_WRONG;
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		uint8_t controlBuffer[2];
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
 80056aa:	3902      	subs	r1, #2
 80056ac:	aa05      	add	r2, sp, #20
 80056ae:	b2c9      	uxtb	r1, r1
 80056b0:	4620      	mov	r0, r4
 80056b2:	f7ff ff09 	bl	80054c8 <PCD_CalculateCRC>
		if (n != STATUS_OK) {
 80056b6:	2801      	cmp	r0, #1
 80056b8:	d10d      	bne.n	80056d6 <PCD_CommunicateWithPICC+0x11e>
			return n;
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
 80056ba:	782b      	ldrb	r3, [r5, #0]
 80056bc:	441c      	add	r4, r3
 80056be:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80056c2:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d110      	bne.n	80056ec <PCD_CommunicateWithPICC+0x134>
 80056ca:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80056ce:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d10a      	bne.n	80056ec <PCD_CommunicateWithPICC+0x134>
			return STATUS_CRC_WRONG;
		}
	}

	return STATUS_OK;
} // End PCD_CommunicateWithPICC()
 80056d6:	b007      	add	sp, #28
 80056d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
 80056dc:	2002      	movs	r0, #2
 80056de:	e7fa      	b.n	80056d6 <PCD_CommunicateWithPICC+0x11e>
			return STATUS_NO_ROOM;
 80056e0:	2005      	movs	r0, #5
 80056e2:	e7f8      	b.n	80056d6 <PCD_CommunicateWithPICC+0x11e>
		return STATUS_COLLISION;
 80056e4:	2003      	movs	r0, #3
 80056e6:	e7f6      	b.n	80056d6 <PCD_CommunicateWithPICC+0x11e>
	return STATUS_OK;
 80056e8:	2001      	movs	r0, #1
 80056ea:	e7f4      	b.n	80056d6 <PCD_CommunicateWithPICC+0x11e>
			return STATUS_CRC_WRONG;
 80056ec:	2008      	movs	r0, #8
 80056ee:	e7f2      	b.n	80056d6 <PCD_CommunicateWithPICC+0x11e>

080056f0 <PCD_TransceiveData>:
							) {
 80056f0:	b510      	push	{r4, lr}
 80056f2:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
 80056f4:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 80056f8:	9404      	str	r4, [sp, #16]
 80056fa:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80056fe:	9403      	str	r4, [sp, #12]
 8005700:	9c08      	ldr	r4, [sp, #32]
 8005702:	9200      	str	r2, [sp, #0]
 8005704:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	200c      	movs	r0, #12
 800570e:	2130      	movs	r1, #48	; 0x30
 8005710:	f7ff ff52 	bl	80055b8 <PCD_CommunicateWithPICC>
} // End PCD_TransceiveData()
 8005714:	b006      	add	sp, #24
 8005716:	bd10      	pop	{r4, pc}

08005718 <PICC_REQA_or_WUPA>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode_t PICC_REQA_or_WUPA(	uint8_t command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
							uint8_t *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
							uint8_t *bufferSize	///< Buffer size, at least two uint8_ts. Also number of uint8_ts returned if STATUS_OK.
						 ) {
 8005718:	b530      	push	{r4, r5, lr}
 800571a:	b089      	sub	sp, #36	; 0x24
 800571c:	4614      	mov	r4, r2
 800571e:	f88d 0017 	strb.w	r0, [sp, #23]
	uint8_t validBits;
	StatusCode_t status;

	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 uint8_ts long.
 8005722:	460d      	mov	r5, r1
 8005724:	b311      	cbz	r1, 800576c <PICC_REQA_or_WUPA+0x54>
 8005726:	7813      	ldrb	r3, [r2, #0]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d91f      	bls.n	800576c <PICC_REQA_or_WUPA+0x54>
		return STATUS_NO_ROOM;
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 800572c:	2180      	movs	r1, #128	; 0x80
 800572e:	201c      	movs	r0, #28
 8005730:	f7ff febd 	bl	80054ae <PCD_ClearRegisterBitMask>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) uint8_t. TxLastBits = BitFramingReg[2..0]
 8005734:	2307      	movs	r3, #7
 8005736:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits, 0, false);
 800573a:	2300      	movs	r3, #0
 800573c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8005740:	f10d 031f 	add.w	r3, sp, #31
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	462a      	mov	r2, r5
 8005748:	4623      	mov	r3, r4
 800574a:	2101      	movs	r1, #1
 800574c:	f10d 0017 	add.w	r0, sp, #23
 8005750:	f7ff ffce 	bl	80056f0 <PCD_TransceiveData>
	if (status != STATUS_OK) {
 8005754:	2801      	cmp	r0, #1
 8005756:	d107      	bne.n	8005768 <PICC_REQA_or_WUPA+0x50>
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
 8005758:	7823      	ldrb	r3, [r4, #0]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d108      	bne.n	8005770 <PICC_REQA_or_WUPA+0x58>
 800575e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8005762:	2b00      	cmp	r3, #0
		return STATUS_ERROR;
 8005764:	bf18      	it	ne
 8005766:	2002      	movne	r0, #2
	}
	return STATUS_OK;
} // End PICC_REQA_or_WUPA()
 8005768:	b009      	add	sp, #36	; 0x24
 800576a:	bd30      	pop	{r4, r5, pc}
		return STATUS_NO_ROOM;
 800576c:	2005      	movs	r0, #5
 800576e:	e7fb      	b.n	8005768 <PICC_REQA_or_WUPA+0x50>
		return STATUS_ERROR;
 8005770:	2002      	movs	r0, #2
 8005772:	e7f9      	b.n	8005768 <PICC_REQA_or_WUPA+0x50>

08005774 <PICC_RequestA>:
							) {
 8005774:	460a      	mov	r2, r1
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
 8005776:	4601      	mov	r1, r0
 8005778:	2026      	movs	r0, #38	; 0x26
 800577a:	f7ff bfcd 	b.w	8005718 <PICC_REQA_or_WUPA>

0800577e <PICC_AnticollisionLoop>:

StatusCode_t PICC_AnticollisionLoop(uint8_t CollisionLevel,
									UID* puid,
									uint8_t* anticollision_frame,
									uint8_t acframe_size,
									uint8_t* SAK_frame){
 800577e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005782:	b087      	sub	sp, #28

	uint8_t result;

	StatusCode_t status;

	switch (CollisionLevel) {
 8005784:	2802      	cmp	r0, #2
									uint8_t* SAK_frame){
 8005786:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800578a:	4615      	mov	r5, r2
 800578c:	461f      	mov	r7, r3
	switch (CollisionLevel) {
 800578e:	d059      	beq.n	8005844 <PICC_AnticollisionLoop+0xc6>
 8005790:	2803      	cmp	r0, #3
 8005792:	d059      	beq.n	8005848 <PICC_AnticollisionLoop+0xca>
 8005794:	2801      	cmp	r0, #1
 8005796:	f040 8090 	bne.w	80058ba <PICC_AnticollisionLoop+0x13c>
		case PICC_CL1:
			anticollision_frame[0] = PICC_CMD_SEL_CL1;
 800579a:	2393      	movs	r3, #147	; 0x93
		case PICC_CL2:
			anticollision_frame[0] = PICC_CMD_SEL_CL2;
			//uid_startindex = 3;
			break;
		case PICC_CL3:
			anticollision_frame[0] = PICC_CMD_SEL_CL3;
 800579c:	702b      	strb	r3, [r5, #0]

	// prepare frames and buffers
	bytecountUID	= currentLevelKnownBits / 8;	// Number of whole uint8_ts in the UID part.
	bytecountNVB	= 2 + bytecountUID;				// Number of whole uint8_ts: SEL + NVB + UIDs
	bitcountNVB		= currentLevelKnownBits % 8;
	anticollision_frame[1]	= (bytecountNVB << 4) + bitcountNVB	;	// NVB - Number of Valid Bits
 800579e:	2320      	movs	r3, #32
	txLastBits = 0;		// for nvb=0x20, all bits of the last byte should be transmitted
 80057a0:	2400      	movs	r4, #0
	anticollision_frame[1]	= (bytecountNVB << 4) + bitcountNVB	;	// NVB - Number of Valid Bits
 80057a2:	706b      	strb	r3, [r5, #1]
	// Having a seperate variable is overkill. But it makes the code easier to read:
	txLastBits			= bitcountNVB; // Transmit only txLastBits from FIFO

	// Store response in the unused part of anticolision frame buffer
	pResponseBuffer	= &anticollision_frame[bytecountNVB]; // pointer to the first byte to receive response from FIFO
	responseBufferLength = acframe_size - bytecountNVB;  // length of the response buffer
 80057a4:	1ebb      	subs	r3, r7, #2
	txLastBits = 0;		// for nvb=0x20, all bits of the last byte should be transmitted
 80057a6:	f88d 4016 	strb.w	r4, [sp, #22]
	pResponseBuffer	= &anticollision_frame[bytecountNVB]; // pointer to the first byte to receive response from FIFO
 80057aa:	f105 0b02 	add.w	fp, r5, #2
	responseBufferLength = acframe_size - bytecountNVB;  // length of the response buffer
 80057ae:	f88d 3017 	strb.w	r3, [sp, #23]
	currentLevelKnownBits = 0;
 80057b2:	46a1      	mov	r9, r4
	Part1LengthInFIFO	= bytecountNVB + (bitcountNVB ? 1 : 0); // length of Part1 in full bytes in FIFO
 80057b4:	f04f 0a02 	mov.w	sl, #2
	rxAlign = txLastBits;	// the first bit to be received is stored in FIFO at bit position txLastBits+1


	while(1) {
		// Prepare MFRC522 for transcieve:
		PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80057b8:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80057bc:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 80057c0:	b2c9      	uxtb	r1, r1
 80057c2:	201a      	movs	r0, #26
 80057c4:	f7ff fdb4 	bl	8005330 <PCD_WriteRegister>
		PCD_ClearRegisterBitMask(CollReg, 0x80);  // ValuesAfterColl=1 => Bits received after collision will be cleared.
		// Transmit Anticollision command in anticollision frame
		status = PCD_TransceiveData(anticollision_frame,
 80057c8:	2600      	movs	r6, #0
		PCD_ClearRegisterBitMask(CollReg, 0x80);  // ValuesAfterColl=1 => Bits received after collision will be cleared.
 80057ca:	2180      	movs	r1, #128	; 0x80
 80057cc:	201c      	movs	r0, #28
 80057ce:	f7ff fe6e 	bl	80054ae <PCD_ClearRegisterBitMask>
		status = PCD_TransceiveData(anticollision_frame,
 80057d2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80057d6:	f10d 0416 	add.w	r4, sp, #22
 80057da:	9400      	str	r4, [sp, #0]
 80057dc:	f10d 0317 	add.w	r3, sp, #23
 80057e0:	465a      	mov	r2, fp
 80057e2:	4651      	mov	r1, sl
 80057e4:	4628      	mov	r0, r5
 80057e6:	f7ff ff83 	bl	80056f0 <PCD_TransceiveData>
									&txLastBits,
									rxAlign,
									false);

		// Detect collision:
		if (status == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80057ea:	2803      	cmp	r0, #3
 80057ec:	d12e      	bne.n	800584c <PICC_AnticollisionLoop+0xce>
			result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
 80057ee:	201c      	movs	r0, #28
 80057f0:	f7ff fde0 	bl	80053b4 <PCD_ReadRegister>
			// First check if we have the valid position of collision:
			if (result & 0x20) { // CollPosNotValid
 80057f4:	0681      	lsls	r1, r0, #26
 80057f6:	d45e      	bmi.n	80058b6 <PICC_AnticollisionLoop+0x138>
				return STATUS_INV_COLL_POS; // Without a valid collision position we cannot continue
			}
			// find out the collision position:
			collisionPos = result & 0x1F; // Values 0-31, 0 means bit 32.
			if (collisionPos == 0) {
				collisionPos = 32;
 80057f8:	f010 041f 	ands.w	r4, r0, #31
 80057fc:	bf08      	it	eq
 80057fe:	2420      	moveq	r4, #32
			}
			if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen
 8005800:	454c      	cmp	r4, r9
 8005802:	d95a      	bls.n	80058ba <PICC_AnticollisionLoop+0x13c>
				return STATUS_INTERNAL_ERROR;
			}

			currentLevelKnownBits = currentLevelKnownBits + collisionPos;
 8005804:	444c      	add	r4, r9


			// prepare frames and buffers for the new reception:
			bytecountUID	= currentLevelKnownBits / 8;	// Number of whole uint8_ts in the UID part.
 8005806:	f3c4 03c4 	ubfx	r3, r4, #3, #5
			bytecountNVB	= 2 + bytecountUID;				// Number of whole uint8_ts: SEL + NVB + UIDs
 800580a:	3302      	adds	r3, #2
			currentLevelKnownBits = currentLevelKnownBits + collisionPos;
 800580c:	fa5f f984 	uxtb.w	r9, r4
			bitcountNVB		= currentLevelKnownBits % 8;
 8005810:	f004 0407 	and.w	r4, r4, #7
			anticollision_frame[1]	= (bytecountNVB << 4) + bitcountNVB	;	// NVB - Number of Valid Bits
 8005814:	eb04 1203 	add.w	r2, r4, r3, lsl #4
 8005818:	706a      	strb	r2, [r5, #1]

			// I decided to choose the PICC with the bit set
			//    - its position is bitcountNVB within the last byte in the anticollision frame:
			anticollision_frame[bytecountNVB] |= (1 << bitcountNVB);
 800581a:	2201      	movs	r2, #1
 800581c:	fa02 f104 	lsl.w	r1, r2, r4
 8005820:	5cea      	ldrb	r2, [r5, r3]

			Part1LengthInFIFO	= bytecountNVB + (bitcountNVB ? 1 : 0); // length of Part1 in full bytes in FIFO
			// Having a seperate variable is overkill. But it makes the code easier to read:
			txLastBits			= bitcountNVB; // Transmit only txLastBits from FIFO
 8005822:	f88d 4016 	strb.w	r4, [sp, #22]
			anticollision_frame[bytecountNVB] |= (1 << bitcountNVB);
 8005826:	430a      	orrs	r2, r1
			Part1LengthInFIFO	= bytecountNVB + (bitcountNVB ? 1 : 0); // length of Part1 in full bytes in FIFO
 8005828:	42b4      	cmp	r4, r6
 800582a:	bf0c      	ite	eq
 800582c:	469a      	moveq	sl, r3
 800582e:	f103 0a01 	addne.w	sl, r3, #1
			anticollision_frame[bytecountNVB] |= (1 << bitcountNVB);
 8005832:	54ea      	strb	r2, [r5, r3]
 8005834:	eb05 0b03 	add.w	fp, r5, r3

			// Store response in the unused part of anticolision frame buffer
			pResponseBuffer	= &anticollision_frame[bytecountNVB]; // pointer to the first byte to receive response from FIFO
			responseBufferLength = acframe_size - bytecountNVB;  // length of the response buffer
 8005838:	1afb      	subs	r3, r7, r3
			Part1LengthInFIFO	= bytecountNVB + (bitcountNVB ? 1 : 0); // length of Part1 in full bytes in FIFO
 800583a:	fa5f fa8a 	uxtb.w	sl, sl
			responseBufferLength = acframe_size - bytecountNVB;  // length of the response buffer
 800583e:	f88d 3017 	strb.w	r3, [sp, #23]
		PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 8005842:	e7b9      	b.n	80057b8 <PICC_AnticollisionLoop+0x3a>
			anticollision_frame[0] = PICC_CMD_SEL_CL2;
 8005844:	2395      	movs	r3, #149	; 0x95
 8005846:	e7a9      	b.n	800579c <PICC_AnticollisionLoop+0x1e>
			anticollision_frame[0] = PICC_CMD_SEL_CL3;
 8005848:	2397      	movs	r3, #151	; 0x97
 800584a:	e7a7      	b.n	800579c <PICC_AnticollisionLoop+0x1e>
			// Having a seperate variable is overkill. But it makes the code easier to read:
			rxAlign = txLastBits;	// the first bit to be received is stored in FIFO at bit position txLastBits+1
		}
		else if (status != STATUS_OK) {  // in case of error return the status
 800584c:	2801      	cmp	r0, #1
 800584e:	d12f      	bne.n	80058b0 <PICC_AnticollisionLoop+0x132>
		}
	} // while (collision)


	// There is no more collisions and we have to send the SELECT command:
	anticollision_frame[1] = 0x70; // NVB - Number of Valid Bits: Seven whole uint8_ts
 8005850:	2370      	movs	r3, #112	; 0x70
	// Calculate BCC - Block Check Character
	anticollision_frame[6] = anticollision_frame[2] ^ anticollision_frame[3] ^ anticollision_frame[4] ^ anticollision_frame[5];
 8005852:	78ea      	ldrb	r2, [r5, #3]
	anticollision_frame[1] = 0x70; // NVB - Number of Valid Bits: Seven whole uint8_ts
 8005854:	706b      	strb	r3, [r5, #1]
	anticollision_frame[6] = anticollision_frame[2] ^ anticollision_frame[3] ^ anticollision_frame[4] ^ anticollision_frame[5];
 8005856:	78ab      	ldrb	r3, [r5, #2]
 8005858:	4053      	eors	r3, r2
 800585a:	792a      	ldrb	r2, [r5, #4]
 800585c:	4053      	eors	r3, r2
 800585e:	796a      	ldrb	r2, [r5, #5]
 8005860:	4053      	eors	r3, r2
 8005862:	71ab      	strb	r3, [r5, #6]
	// Calculate CRC_A
	status = PCD_CalculateCRC(anticollision_frame, 7, &anticollision_frame[7]);
 8005864:	1dea      	adds	r2, r5, #7
 8005866:	2107      	movs	r1, #7
 8005868:	4628      	mov	r0, r5
 800586a:	f7ff fe2d 	bl	80054c8 <PCD_CalculateCRC>
	if (status != STATUS_OK) {
 800586e:	2801      	cmp	r0, #1
 8005870:	d11e      	bne.n	80058b0 <PICC_AnticollisionLoop+0x132>
		return status;
	}
	txLastBits				= 0; // 0 => All 8 bits of the last byte will be transmitted.
	Part1LengthInFIFO		= 9; // the length of the SELECT frame is 9: SEL-NVB + 4 UIDs + BCC + 2 CRC
	responseBufferLength	= 3; // SAK response is 3-byte long
 8005872:	2303      	movs	r3, #3

	rxAlign = txLastBits; // the first bit to be received is stored in FIFO at bit position txLastBits (0 in this case)
	PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 8005874:	4631      	mov	r1, r6
 8005876:	201a      	movs	r0, #26
	responseBufferLength	= 3; // SAK response is 3-byte long
 8005878:	f88d 3017 	strb.w	r3, [sp, #23]
	txLastBits				= 0; // 0 => All 8 bits of the last byte will be transmitted.
 800587c:	f88d 6016 	strb.w	r6, [sp, #22]
	PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 8005880:	f7ff fd56 	bl	8005330 <PCD_WriteRegister>
	status = PCD_TransceiveData(anticollision_frame,
 8005884:	f10d 0317 	add.w	r3, sp, #23
 8005888:	4642      	mov	r2, r8
 800588a:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800588e:	9400      	str	r4, [sp, #0]
 8005890:	2109      	movs	r1, #9
 8005892:	4628      	mov	r0, r5
 8005894:	f7ff ff2c 	bl	80056f0 <PCD_TransceiveData>
								&responseBufferLength,
								&txLastBits,
								rxAlign,
								false);

	if (SAK_frame[0] & 0x04) { // Cascade bit set: UID not complete
 8005898:	f898 3000 	ldrb.w	r3, [r8]
 800589c:	075a      	lsls	r2, r3, #29
 800589e:	d40e      	bmi.n	80058be <PICC_AnticollisionLoop+0x140>
		return STATUS_UID_NOTCOMPLETE;
	}
	else if ((SAK_frame[0] & 0x20) && !(SAK_frame[0] & 0x04)) { // UID complete, PICC compliant with ISO/IEC 14443-4
 80058a0:	f003 0324 	and.w	r3, r3, #36	; 0x24
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d00c      	beq.n	80058c2 <PICC_AnticollisionLoop+0x144>
	}
	else if (!(SAK_frame[0] & 0x20) && !(SAK_frame[0] & 0x04)) { // UID complete, PICC non-compliant with ISO/IEC 14443-4
			return STATUS_UID_COMPLETE_NC;
		}
	else {
		return STATUS_ERROR;
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	bf0c      	ite	eq
 80058ac:	200b      	moveq	r0, #11
 80058ae:	2002      	movne	r0, #2
	}


	return STATUS_ERROR; // should not get here!
}
 80058b0:	b007      	add	sp, #28
 80058b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return STATUS_INV_COLL_POS; // Without a valid collision position we cannot continue
 80058b6:	200d      	movs	r0, #13
 80058b8:	e7fa      	b.n	80058b0 <PICC_AnticollisionLoop+0x132>
				return STATUS_INTERNAL_ERROR;
 80058ba:	2006      	movs	r0, #6
 80058bc:	e7f8      	b.n	80058b0 <PICC_AnticollisionLoop+0x132>
		return STATUS_UID_NOTCOMPLETE;
 80058be:	200c      	movs	r0, #12
 80058c0:	e7f6      	b.n	80058b0 <PICC_AnticollisionLoop+0x132>
		return STATUS_UID_COMPLETE;
 80058c2:	200a      	movs	r0, #10
 80058c4:	e7f4      	b.n	80058b0 <PICC_AnticollisionLoop+0x132>

080058c6 <PICC_Select>:
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode_t PICC_Select(	UID *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
						uint8_t validBits	///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						) {
 80058c6:	b530      	push	{r4, r5, lr}
 80058c8:	b08d      	sub	sp, #52	; 0x34
	uint8_t anticollision_frame_CL3[9];
	uint8_t SAK_frame[3];

	uint8_t acframe_size = sizeof(anticollision_frame_CL1) / sizeof(anticollision_frame_CL1[0]);

	StatusCode_t status = PICC_AnticollisionLoop(PICC_CL1, uid, anticollision_frame_CL1, acframe_size, SAK_frame);
 80058ca:	ad02      	add	r5, sp, #8
 80058cc:	4601      	mov	r1, r0
						) {
 80058ce:	4604      	mov	r4, r0
	StatusCode_t status = PICC_AnticollisionLoop(PICC_CL1, uid, anticollision_frame_CL1, acframe_size, SAK_frame);
 80058d0:	9500      	str	r5, [sp, #0]
 80058d2:	2309      	movs	r3, #9
 80058d4:	aa03      	add	r2, sp, #12
 80058d6:	2001      	movs	r0, #1
 80058d8:	f7ff ff51 	bl	800577e <PICC_AnticollisionLoop>
	if (status == STATUS_UID_NOTCOMPLETE) {
 80058dc:	280c      	cmp	r0, #12
 80058de:	d135      	bne.n	800594c <PICC_Select+0x86>
		status = PICC_AnticollisionLoop(PICC_CL2, uid, anticollision_frame_CL2, acframe_size, SAK_frame);
 80058e0:	9500      	str	r5, [sp, #0]
 80058e2:	2309      	movs	r3, #9
 80058e4:	aa06      	add	r2, sp, #24
 80058e6:	4621      	mov	r1, r4
 80058e8:	2002      	movs	r0, #2
 80058ea:	f7ff ff48 	bl	800577e <PICC_AnticollisionLoop>
		if (status == STATUS_UID_NOTCOMPLETE) {
 80058ee:	280c      	cmp	r0, #12
 80058f0:	d12a      	bne.n	8005948 <PICC_Select+0x82>
			status = PICC_AnticollisionLoop(PICC_CL3, uid, anticollision_frame_CL3, acframe_size, SAK_frame);
 80058f2:	2309      	movs	r3, #9
 80058f4:	9500      	str	r5, [sp, #0]
 80058f6:	aa09      	add	r2, sp, #36	; 0x24
 80058f8:	4621      	mov	r1, r4
 80058fa:	2003      	movs	r0, #3
 80058fc:	f7ff ff3f 	bl	800577e <PICC_AnticollisionLoop>
			uid->size = 10;
 8005900:	230a      	movs	r3, #10
		else{
			uid->size = 7;
		}
	}
	else{
		uid->size = 4;
 8005902:	7023      	strb	r3, [r4, #0]
	}

	for (int i = 0; i<10; i++) uid->uids[i] = 0;
 8005904:	f104 020b 	add.w	r2, r4, #11
 8005908:	1c63      	adds	r3, r4, #1
 800590a:	2100      	movs	r1, #0
 800590c:	f803 1b01 	strb.w	r1, [r3], #1
 8005910:	4293      	cmp	r3, r2
 8005912:	d1fb      	bne.n	800590c <PICC_Select+0x46>

	// Copy UIDs form anticollision frames into uid buffer:
	if (uid->size == 4){
 8005914:	7823      	ldrb	r3, [r4, #0]
 8005916:	2b04      	cmp	r3, #4
 8005918:	d11a      	bne.n	8005950 <PICC_Select+0x8a>
		for (int i = 0; i < 4; i++){
			uid->uids[i] = anticollision_frame_CL1[i+2];
 800591a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800591e:	7063      	strb	r3, [r4, #1]
 8005920:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005924:	70a3      	strb	r3, [r4, #2]
 8005926:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800592a:	70e3      	strb	r3, [r4, #3]
 800592c:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8005930:	7123      	strb	r3, [r4, #4]
			uid->uids[i+3] = anticollision_frame_CL2[i+2];
		}
	}
	// Copy final SAK frame:
	for (int i = 0; i<3; i++){
		uid->sak[i] = SAK_frame[i];
 8005932:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005936:	72e3      	strb	r3, [r4, #11]
 8005938:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800593c:	7323      	strb	r3, [r4, #12]
 800593e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8005942:	7363      	strb	r3, [r4, #13]
	}
	return status;
}
 8005944:	b00d      	add	sp, #52	; 0x34
 8005946:	bd30      	pop	{r4, r5, pc}
			uid->size = 7;
 8005948:	2307      	movs	r3, #7
 800594a:	e7da      	b.n	8005902 <PICC_Select+0x3c>
		uid->size = 4;
 800594c:	2304      	movs	r3, #4
 800594e:	e7d8      	b.n	8005902 <PICC_Select+0x3c>
	if (uid->size == 7){
 8005950:	2b07      	cmp	r3, #7
 8005952:	d1ee      	bne.n	8005932 <PICC_Select+0x6c>
			uid->uids[i] = anticollision_frame_CL1[i+3];
 8005954:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005958:	7063      	strb	r3, [r4, #1]
 800595a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800595e:	70a3      	strb	r3, [r4, #2]
 8005960:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8005964:	70e3      	strb	r3, [r4, #3]
			uid->uids[i+3] = anticollision_frame_CL2[i+2];
 8005966:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800596a:	7123      	strb	r3, [r4, #4]
 800596c:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005970:	7163      	strb	r3, [r4, #5]
 8005972:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8005976:	71a3      	strb	r3, [r4, #6]
 8005978:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800597c:	71e3      	strb	r3, [r4, #7]
		for (int i = 0; i<4; i++){
 800597e:	e7d8      	b.n	8005932 <PICC_Select+0x6c>

08005980 <PICC_HaltA>:
/**
 * Instructs a PICC in state ACTIVE(*) to go to state HALT.
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode_t PICC_HaltA() {
 8005980:	b510      	push	{r4, lr}
 8005982:	b086      	sub	sp, #24
	StatusCode_t status;
	uint8_t buffer[4];

	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
 8005984:	2350      	movs	r3, #80	; 0x50
	buffer[1] = 0;
	// Calculate CRC_A
	status = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 8005986:	f10d 0216 	add.w	r2, sp, #22
 800598a:	2102      	movs	r1, #2
 800598c:	a805      	add	r0, sp, #20
	buffer[0] = PICC_CMD_HLTA;
 800598e:	f8ad 3014 	strh.w	r3, [sp, #20]
	status = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 8005992:	f7ff fd99 	bl	80054c8 <PCD_CalculateCRC>
	if (status != STATUS_OK) {
 8005996:	2801      	cmp	r0, #1
	status = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 8005998:	4604      	mov	r4, r0
	if (status != STATUS_OK) {
 800599a:	d10e      	bne.n	80059ba <PICC_HaltA+0x3a>
	// Send the command.
	// The standard says:
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is a success.
	status = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0, NULL, 0, false);
 800599c:	2300      	movs	r3, #0
 800599e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	2104      	movs	r1, #4
 80059a8:	a805      	add	r0, sp, #20
 80059aa:	f7ff fea1 	bl	80056f0 <PCD_TransceiveData>
	if (status == STATUS_TIMEOUT) {
 80059ae:	2804      	cmp	r0, #4
 80059b0:	d003      	beq.n	80059ba <PICC_HaltA+0x3a>
		return STATUS_OK;
	}
	if (status == STATUS_OK) { // That is ironically NOT ok in this case ;-)
		return STATUS_ERROR;
 80059b2:	2801      	cmp	r0, #1
 80059b4:	bf14      	ite	ne
 80059b6:	4604      	movne	r4, r0
 80059b8:	2402      	moveq	r4, #2
	}
	return status;
} // End PICC_HaltA()
 80059ba:	4620      	mov	r0, r4
 80059bc:	b006      	add	sp, #24
 80059be:	bd10      	pop	{r4, pc}

080059c0 <PCD_Authenticate>:
 */
StatusCode_t PCD_Authenticate(	uint8_t command,		///< PICC_CMD_MF_AUTH_KEY_A or PICC_CMD_MF_AUTH_KEY_B
							uint8_t blockAddr, 	///< The block number. See numbering in the comments in the .h file.
							MIFARE_Key *key,	///< Pointer to the Crypto key to use (6 uint8_ts)
							UID *uid			///< Pointer to Uid struct. The first 4 uint8_ts of the UID is used.
							) {
 80059c0:	b510      	push	{r4, lr}
 80059c2:	b08a      	sub	sp, #40	; 0x28
	// Build command buffer
	uint8_t sendData[12];
	sendData[0] = command;
	sendData[1] = blockAddr;
	// copy authentication key into sendData[]:
	if (command == PICC_CMD_MF_AUTH_KEY_A){
 80059c4:	2860      	cmp	r0, #96	; 0x60
	sendData[0] = command;
 80059c6:	f88d 001c 	strb.w	r0, [sp, #28]
	sendData[1] = blockAddr;
 80059ca:	f88d 101d 	strb.w	r1, [sp, #29]
	if (command == PICC_CMD_MF_AUTH_KEY_A){
 80059ce:	d123      	bne.n	8005a18 <PCD_Authenticate+0x58>
 80059d0:	1e51      	subs	r1, r2, #1
 80059d2:	f10d 001e 	add.w	r0, sp, #30
 80059d6:	3205      	adds	r2, #5
		for (uint8_t i = 0; i < MF_KEY_SIZE; i++) {	// 6 key uint8_ts
			sendData[2+i] = key->keyA[i];
 80059d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80059dc:	f800 4b01 	strb.w	r4, [r0], #1
		for (uint8_t i = 0; i < MF_KEY_SIZE; i++) {	// 6 key uint8_ts
 80059e0:	4291      	cmp	r1, r2
 80059e2:	d1f9      	bne.n	80059d8 <PCD_Authenticate+0x18>
	}
	else return STATUS_ERROR;

	// copy UID into authentication data
	for (uint8_t i = 0; i < 4; i++) {				// The first 4 uint8_ts of the UID
		sendData[8+i] = uid->uids[i];
 80059e4:	785a      	ldrb	r2, [r3, #1]
 80059e6:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80059ea:	789a      	ldrb	r2, [r3, #2]
 80059ec:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 80059f0:	78da      	ldrb	r2, [r3, #3]
 80059f2:	791b      	ldrb	r3, [r3, #4]
 80059f4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	}

	// Start the authentication.
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData), NULL, 0, 0, 0, false);
 80059f8:	2300      	movs	r3, #0
 80059fa:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80059fe:	e9cd 3301 	strd	r3, r3, [sp, #4]
		sendData[8+i] = uid->uids[i];
 8005a02:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData), NULL, 0, 0, 0, false);
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	aa07      	add	r2, sp, #28
 8005a0a:	230c      	movs	r3, #12
 8005a0c:	2110      	movs	r1, #16
 8005a0e:	200e      	movs	r0, #14
 8005a10:	f7ff fdd2 	bl	80055b8 <PCD_CommunicateWithPICC>
} // End PCD_Authenticate()
 8005a14:	b00a      	add	sp, #40	; 0x28
 8005a16:	bd10      	pop	{r4, pc}
	else if (command == PICC_CMD_MF_AUTH_KEY_B){
 8005a18:	2861      	cmp	r0, #97	; 0x61
 8005a1a:	d10a      	bne.n	8005a32 <PCD_Authenticate+0x72>
 8005a1c:	1d91      	adds	r1, r2, #6
 8005a1e:	f10d 001e 	add.w	r0, sp, #30
 8005a22:	320c      	adds	r2, #12
			sendData[2+i] = key->keyB[i];
 8005a24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a28:	f800 4b01 	strb.w	r4, [r0], #1
		for (uint8_t i = 0; i < MF_KEY_SIZE; i++) {	// 6 key uint8_ts
 8005a2c:	4291      	cmp	r1, r2
 8005a2e:	d1f9      	bne.n	8005a24 <PCD_Authenticate+0x64>
 8005a30:	e7d8      	b.n	80059e4 <PCD_Authenticate+0x24>
	else return STATUS_ERROR;
 8005a32:	2002      	movs	r0, #2
 8005a34:	e7ee      	b.n	8005a14 <PCD_Authenticate+0x54>

08005a36 <PCD_StopCrypto1>:
 * Used to exit the PCD from its authenticated state.
 * Remember to call this function after communicating with an authenticated PICC - otherwise no new communications can start.
 */
void PCD_StopCrypto1() {
	// Clear MFCrypto1On bit
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
 8005a36:	2108      	movs	r1, #8
 8005a38:	2010      	movs	r0, #16
 8005a3a:	f7ff bd38 	b.w	80054ae <PCD_ClearRegisterBitMask>

08005a3e <MIFARE_Read>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode_t MIFARE_Read(uint8_t blockAddr, 	///< MIFARE Classic: The block (0-0xff) number. MIFARE Ultralight: The first page to return data from.
					uint8_t *buffer,		///< The buffer to store the data in
					uint8_t *bufferSize	///< Buffer size, at least 18 uint8_ts. Also number of uint8_ts returned if STATUS_OK.
					) {
 8005a3e:	b530      	push	{r4, r5, lr}
 8005a40:	4615      	mov	r5, r2
 8005a42:	b085      	sub	sp, #20
	StatusCode_t status;

	// Sanity check
	if (buffer == NULL || *bufferSize < 18) {
 8005a44:	460c      	mov	r4, r1
 8005a46:	b1c1      	cbz	r1, 8005a7a <MIFARE_Read+0x3c>
 8005a48:	7813      	ldrb	r3, [r2, #0]
 8005a4a:	2b11      	cmp	r3, #17
 8005a4c:	d915      	bls.n	8005a7a <MIFARE_Read+0x3c>
		return STATUS_NO_ROOM;
	}

	// Build command buffer
	buffer[0] = PICC_CMD_MF_READ;
 8005a4e:	2330      	movs	r3, #48	; 0x30
	buffer[1] = blockAddr;
 8005a50:	7048      	strb	r0, [r1, #1]
	buffer[0] = PICC_CMD_MF_READ;
 8005a52:	700b      	strb	r3, [r1, #0]
	// Calculate CRC_A
	status = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 8005a54:	1c8a      	adds	r2, r1, #2
 8005a56:	4620      	mov	r0, r4
 8005a58:	2102      	movs	r1, #2
 8005a5a:	f7ff fd35 	bl	80054c8 <PCD_CalculateCRC>
	if (status != STATUS_OK) {
 8005a5e:	2801      	cmp	r0, #1
 8005a60:	d109      	bne.n	8005a76 <MIFARE_Read+0x38>
		return status;
	}

	// Transmit the buffer and receive the response, validate CRC_A.
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
 8005a62:	2300      	movs	r3, #0
 8005a64:	e9cd 3300 	strd	r3, r3, [sp]
 8005a68:	9002      	str	r0, [sp, #8]
 8005a6a:	462b      	mov	r3, r5
 8005a6c:	4622      	mov	r2, r4
 8005a6e:	2104      	movs	r1, #4
 8005a70:	4620      	mov	r0, r4
 8005a72:	f7ff fe3d 	bl	80056f0 <PCD_TransceiveData>
} // End MIFARE_Read()
 8005a76:	b005      	add	sp, #20
 8005a78:	bd30      	pop	{r4, r5, pc}
		return STATUS_NO_ROOM;
 8005a7a:	2005      	movs	r0, #5
 8005a7c:	e7fb      	b.n	8005a76 <MIFARE_Read+0x38>

08005a7e <PICC_IsNewCardPresent>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 *
 * @return bool
 */
bool PICC_IsNewCardPresent() {
 8005a7e:	b507      	push	{r0, r1, r2, lr}
	uint8_t bufferATQA[2];
	uint8_t bufferSize = sizeof(bufferATQA);
 8005a80:	2302      	movs	r3, #2
	StatusCode_t status = PICC_RequestA(bufferATQA, &bufferSize);
 8005a82:	f10d 0103 	add.w	r1, sp, #3
 8005a86:	a801      	add	r0, sp, #4
	uint8_t bufferSize = sizeof(bufferATQA);
 8005a88:	f88d 3003 	strb.w	r3, [sp, #3]
	StatusCode_t status = PICC_RequestA(bufferATQA, &bufferSize);
 8005a8c:	f7ff fe72 	bl	8005774 <PICC_RequestA>
	return (status == STATUS_OK || status == STATUS_COLLISION);
 8005a90:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
 8005a94:	1e43      	subs	r3, r0, #1
 8005a96:	4258      	negs	r0, r3
 8005a98:	4158      	adcs	r0, r3
 8005a9a:	b003      	add	sp, #12
 8005a9c:	f85d fb04 	ldr.w	pc, [sp], #4

08005aa0 <PICC_ReadCardSerial>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 *
 * @return bool
 */
bool PICC_ReadCardSerial(UID* uid) {
 8005aa0:	b508      	push	{r3, lr}
	//uint8_t result = PICC_Select(uid, 0);
	StatusCode_t status = PICC_Select(uid, 0);
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	f7ff ff0f 	bl	80058c6 <PICC_Select>

	return ((status == STATUS_UID_COMPLETE) || (status == STATUS_UID_COMPLETE_NC)); //return a '1' if PICC_Select returns a valid UID, else a '0'
 8005aa8:	380a      	subs	r0, #10
 8005aaa:	b2c0      	uxtb	r0, r0
} // End PICC_ReadCardSerial()
 8005aac:	2801      	cmp	r0, #1
 8005aae:	bf8c      	ite	hi
 8005ab0:	2000      	movhi	r0, #0
 8005ab2:	2001      	movls	r0, #1
 8005ab4:	bd08      	pop	{r3, pc}
	...

08005ab8 <PICC_ReadBlock>:
  *
  *
  */
StatusCode_t PICC_ReadBlock(int blockNumber, uint8_t arrayAddress[], MIFARE_Key *key, auth_key_t authkey)
{
  int largestModulo4Number=blockNumber/4*4;
 8005ab8:	2800      	cmp	r0, #0
{
 8005aba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005abc:	4604      	mov	r4, r0
  int largestModulo4Number=blockNumber/4*4;
 8005abe:	bfb8      	it	lt
 8005ac0:	3003      	addlt	r0, #3
{
 8005ac2:	460d      	mov	r5, r1
  int trailerBlock=largestModulo4Number+3;//determine trailer block for the sector
 8005ac4:	f040 0103 	orr.w	r1, r0, #3
  //this method is used to authenticate a certain block for writing or reading
  //command: See enumerations above -> PICC_CMD_MF_AUTH_KEY_A	= 0x60 (=1100000),		// this command performs authentication with Key A
  //blockAddr is the number of the block from 0 to 15.
  //MIFARE_Key *key is a pointer to the MIFARE_Key struct defined above, this struct needs to be defined for each block. New cards have all A/B= FF FF FF FF FF FF
  //Uid *uid is a pointer to the UID struct that contains the user ID of the card.
  if (authkey == AUTH_KEY_A) {
 8005ac8:	b9a3      	cbnz	r3, 8005af4 <PICC_ReadBlock+0x3c>
	  status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_A, trailerBlock, key, &(uid));
 8005aca:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <PICC_ReadBlock+0x50>)
 8005acc:	b2c9      	uxtb	r1, r1
 8005ace:	2060      	movs	r0, #96	; 0x60
  }
  else if (authkey == AUTH_KEY_B) {
	  status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_B, trailerBlock, key, &(uid));
 8005ad0:	f7ff ff76 	bl	80059c0 <PCD_Authenticate>
  }
  else return STATUS_ERROR;
  if (status != STATUS_OK) {
 8005ad4:	2801      	cmp	r0, #1
 8005ad6:	d115      	bne.n	8005b04 <PICC_ReadBlock+0x4c>
  //If a different sector is being authenticated access to the previous one is lost.


  /*****************************************reading a block***********************************************************/

  uint8_t buffersize = 18;//we need to define a variable with the read buffer size, since the MIFARE_Read method below needs a pointer to the variable that contains the size...
 8005ad8:	2312      	movs	r3, #18
  status = MIFARE_Read(blockNumber, arrayAddress, &buffersize);//&buffersize is a pointer to the buffersize variable; MIFARE_Read requires a pointer instead of just a number
 8005ada:	f10d 0207 	add.w	r2, sp, #7
 8005ade:	4629      	mov	r1, r5
 8005ae0:	b2e0      	uxtb	r0, r4
  uint8_t buffersize = 18;//we need to define a variable with the read buffer size, since the MIFARE_Read method below needs a pointer to the variable that contains the size...
 8005ae2:	f88d 3007 	strb.w	r3, [sp, #7]
  status = MIFARE_Read(blockNumber, arrayAddress, &buffersize);//&buffersize is a pointer to the buffersize variable; MIFARE_Read requires a pointer instead of just a number
 8005ae6:	f7ff ffaa 	bl	8005a3e <MIFARE_Read>
  if (status != STATUS_OK) {
 8005aea:	2801      	cmp	r0, #1
	  //printf("MIFARE_read() failed: %s\r\n", GetStatusCodeName(status));
	  return STATUS_MIFARE_R_FAIL;
 8005aec:	bf18      	it	ne
 8005aee:	2010      	movne	r0, #16
  }
  //printf("block was read\r\n");
  return status;
}
 8005af0:	b003      	add	sp, #12
 8005af2:	bd30      	pop	{r4, r5, pc}
  else if (authkey == AUTH_KEY_B) {
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d103      	bne.n	8005b00 <PICC_ReadBlock+0x48>
	  status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_B, trailerBlock, key, &(uid));
 8005af8:	4b03      	ldr	r3, [pc, #12]	; (8005b08 <PICC_ReadBlock+0x50>)
 8005afa:	b2c9      	uxtb	r1, r1
 8005afc:	2061      	movs	r0, #97	; 0x61
 8005afe:	e7e7      	b.n	8005ad0 <PICC_ReadBlock+0x18>
  else return STATUS_ERROR;
 8005b00:	2002      	movs	r0, #2
 8005b02:	e7f5      	b.n	8005af0 <PICC_ReadBlock+0x38>
      return STATUS_AUTH_FAILED;
 8005b04:	200e      	movs	r0, #14
 8005b06:	e7f3      	b.n	8005af0 <PICC_ReadBlock+0x38>
 8005b08:	20000a23 	.word	0x20000a23

08005b0c <TAG_CheckID>:
}



StatusCode_t TAG_CheckID(uint8_t *id, uint8_t* codeTable, uint8_t numCodes, uint8_t codeSize, int8_t* indexUID)
{
 8005b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t id_c = 0;
	for (uint8_t i = 0; i < numCodes; i++) {
 8005b10:	2500      	movs	r5, #0
 8005b12:	462e      	mov	r6, r5
 8005b14:	eb00 0e03 	add.w	lr, r0, r3
 8005b18:	b2f4      	uxtb	r4, r6
 8005b1a:	42a2      	cmp	r2, r4
 8005b1c:	d91a      	bls.n	8005b54 <TAG_CheckID+0x48>
 8005b1e:	4607      	mov	r7, r0
 8005b20:	eb01 0c05 	add.w	ip, r1, r5
 8005b24:	2400      	movs	r4, #0
 8005b26:	e007      	b.n	8005b38 <TAG_CheckID+0x2c>
		for (uint8_t j = 0; j < codeSize; j++) {
			if (id[j] == *(codeTable + i*codeSize + j)){
 8005b28:	f817 9b01 	ldrb.w	r9, [r7], #1
 8005b2c:	f81c 8b01 	ldrb.w	r8, [ip], #1
 8005b30:	45c1      	cmp	r9, r8
				id_c++;
 8005b32:	bf04      	itt	eq
 8005b34:	3401      	addeq	r4, #1
 8005b36:	b2e4      	uxtbeq	r4, r4
		for (uint8_t j = 0; j < codeSize; j++) {
 8005b38:	4577      	cmp	r7, lr
 8005b3a:	d1f5      	bne.n	8005b28 <TAG_CheckID+0x1c>
			}
		}
		if (id_c == codeSize) {
 8005b3c:	429c      	cmp	r4, r3
 8005b3e:	f106 0701 	add.w	r7, r6, #1
 8005b42:	441d      	add	r5, r3
 8005b44:	d104      	bne.n	8005b50 <TAG_CheckID+0x44>
			*indexUID = i;		// index of the matched uid in the known UIDS table
 8005b46:	9b07      	ldr	r3, [sp, #28]
			return STATUS_OK;
 8005b48:	2001      	movs	r0, #1
			*indexUID = i;		// index of the matched uid in the known UIDS table
 8005b4a:	701e      	strb	r6, [r3, #0]
		} else {
			id_c = 0;
		}
	}
	return STATUS_INVALID;
}
 8005b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b50:	463e      	mov	r6, r7
 8005b52:	e7e1      	b.n	8005b18 <TAG_CheckID+0xc>
	return STATUS_INVALID;
 8005b54:	2007      	movs	r0, #7
 8005b56:	e7f9      	b.n	8005b4c <TAG_CheckID+0x40>

08005b58 <TAG_ReadMifareClassicSector>:



StatusCode_t TAG_ReadMifareClassicSector(UID* uid, MIFARE_CLASSIC_1K_Card_t* card, uint8_t sector, MIFARE_Key *key, auth_key_t authkey){
 8005b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b5c:	b087      	sub	sp, #28
	uint8_t in[PICC_BLOCK_SIZE+2];
	StatusCode_t status;
	uint8_t block;
	uint8_t firstblock = sector*4;
 8005b5e:	0096      	lsls	r6, r2, #2
StatusCode_t TAG_ReadMifareClassicSector(UID* uid, MIFARE_CLASSIC_1K_Card_t* card, uint8_t sector, MIFARE_Key *key, auth_key_t authkey){
 8005b60:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
 8005b64:	4688      	mov	r8, r1
 8005b66:	4615      	mov	r5, r2
 8005b68:	461f      	mov	r7, r3
	uint8_t firstblock = sector*4;
 8005b6a:	b2f6      	uxtb	r6, r6
	uint8_t trailer = sector*4 + 3;


	// 1. Authenticate sector:
	if (authkey == AUTH_KEY_A) {
 8005b6c:	f1b9 0f00 	cmp.w	r9, #0
 8005b70:	d110      	bne.n	8005b94 <TAG_ReadMifareClassicSector+0x3c>
		status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_A, firstblock, key, uid);
 8005b72:	4603      	mov	r3, r0
 8005b74:	463a      	mov	r2, r7
 8005b76:	4631      	mov	r1, r6
 8005b78:	2060      	movs	r0, #96	; 0x60
	}
	else if (authkey == AUTH_KEY_B) {
		status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_B, firstblock, key, uid);
 8005b7a:	f7ff ff21 	bl	80059c0 <PCD_Authenticate>
	}
	else return STATUS_ERROR;
	//status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_B, firstblock, key, uid);
	if (status != STATUS_OK) {
 8005b7e:	2801      	cmp	r0, #1
		status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_B, firstblock, key, uid);
 8005b80:	4604      	mov	r4, r0
	if (status != STATUS_OK) {
 8005b82:	d00f      	beq.n	8005ba4 <TAG_ReadMifareClassicSector+0x4c>
		printf("Authentication FAILED in Sector %d \n", sector);
 8005b84:	4819      	ldr	r0, [pc, #100]	; (8005bec <TAG_ReadMifareClassicSector+0x94>)
 8005b86:	4629      	mov	r1, r5
 8005b88:	f001 fe48 	bl	800781c <iprintf>
			card->sector[sector].Block[j][k] = in[k];
		}
	}

	return STATUS_OK;
}
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	b007      	add	sp, #28
 8005b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else if (authkey == AUTH_KEY_B) {
 8005b94:	f1b9 0f01 	cmp.w	r9, #1
 8005b98:	d125      	bne.n	8005be6 <TAG_ReadMifareClassicSector+0x8e>
		status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_B, firstblock, key, uid);
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	463a      	mov	r2, r7
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	2061      	movs	r0, #97	; 0x61
 8005ba2:	e7ea      	b.n	8005b7a <TAG_ReadMifareClassicSector+0x22>
 8005ba4:	eb05 1585 	add.w	r5, r5, r5, lsl #6
 8005ba8:	4445      	add	r5, r8
	for (int j = 0; j < 4; j++){
 8005baa:	f04f 0800 	mov.w	r8, #0
		status = PICC_ReadBlock(block, (uint8_t*)in, key, authkey);
 8005bae:	eb06 0008 	add.w	r0, r6, r8
 8005bb2:	464b      	mov	r3, r9
 8005bb4:	463a      	mov	r2, r7
 8005bb6:	a901      	add	r1, sp, #4
 8005bb8:	b2c0      	uxtb	r0, r0
 8005bba:	f7ff ff7d 	bl	8005ab8 <PICC_ReadBlock>
		if (status != STATUS_OK){
 8005bbe:	2801      	cmp	r0, #1
		status = PICC_ReadBlock(block, (uint8_t*)in, key, authkey);
 8005bc0:	4604      	mov	r4, r0
		if (status != STATUS_OK){
 8005bc2:	d1e3      	bne.n	8005b8c <TAG_ReadMifareClassicSector+0x34>
 8005bc4:	a901      	add	r1, sp, #4
 8005bc6:	1d2a      	adds	r2, r5, #4
 8005bc8:	2310      	movs	r3, #16
			card->sector[sector].Block[j][k] = in[k];
 8005bca:	f811 0b01 	ldrb.w	r0, [r1], #1
 8005bce:	f802 0b01 	strb.w	r0, [r2], #1
		for (int k= 0; k<16; k++){
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	d1f9      	bne.n	8005bca <TAG_ReadMifareClassicSector+0x72>
	for (int j = 0; j < 4; j++){
 8005bd6:	f108 0801 	add.w	r8, r8, #1
 8005bda:	f1b8 0f04 	cmp.w	r8, #4
 8005bde:	f105 0510 	add.w	r5, r5, #16
 8005be2:	d1e4      	bne.n	8005bae <TAG_ReadMifareClassicSector+0x56>
 8005be4:	e7d2      	b.n	8005b8c <TAG_ReadMifareClassicSector+0x34>
	else return STATUS_ERROR;
 8005be6:	2402      	movs	r4, #2
 8005be8:	e7d0      	b.n	8005b8c <TAG_ReadMifareClassicSector+0x34>
 8005bea:	bf00      	nop
 8005bec:	0801f132 	.word	0x0801f132

08005bf0 <InitSPI>:


HAL_StatusTypeDef InitSPI (SPI_HandleTypeDef* SpiHandle){

	// Set the SPI parameters
	SpiHandle->Instance               = SPIx;
 8005bf0:	4a0d      	ldr	r2, [pc, #52]	; (8005c28 <InitSPI+0x38>)
HAL_StatusTypeDef InitSPI (SPI_HandleTypeDef* SpiHandle){
 8005bf2:	b508      	push	{r3, lr}
	SpiHandle->Instance               = SPIx;
 8005bf4:	6002      	str	r2, [r0, #0]
	SpiHandle->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	61c2      	str	r2, [r0, #28]
	SpiHandle->Init.Direction         = SPI_DIRECTION_2LINES;
	SpiHandle->Init.CLKPhase          = SPI_PHASE_1EDGE;
	SpiHandle->Init.CLKPolarity       = SPI_POLARITY_LOW;
	SpiHandle->Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
	SpiHandle->Init.CRCPolynomial     = 10;
 8005bfa:	210a      	movs	r1, #10
	SpiHandle->Init.Direction         = SPI_DIRECTION_2LINES;
 8005bfc:	2200      	movs	r2, #0
	SpiHandle->Init.CLKPolarity       = SPI_POLARITY_LOW;
 8005bfe:	e9c0 2204 	strd	r2, r2, [r0, #16]
	SpiHandle->Init.Direction         = SPI_DIRECTION_2LINES;
 8005c02:	6082      	str	r2, [r0, #8]
	SpiHandle->Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8005c04:	6282      	str	r2, [r0, #40]	; 0x28
	SpiHandle->Init.CRCPolynomial     = 10;
 8005c06:	62c1      	str	r1, [r0, #44]	; 0x2c
	SpiHandle->Init.DataSize          = SPI_DATASIZE_8BIT;
 8005c08:	60c2      	str	r2, [r0, #12]
	SpiHandle->Init.FirstBit          = SPI_FIRSTBIT_MSB;
	SpiHandle->Init.NSS               = SPI_NSS_SOFT;
 8005c0a:	f44f 7100 	mov.w	r1, #512	; 0x200
	SpiHandle->Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8005c0e:	6202      	str	r2, [r0, #32]
	SpiHandle->Init.TIMode            = SPI_TIMODE_DISABLE;
 8005c10:	6242      	str	r2, [r0, #36]	; 0x24
	SpiHandle->Init.Mode 			  = SPI_MODE_MASTER;
 8005c12:	f44f 7282 	mov.w	r2, #260	; 0x104
	SpiHandle->Init.NSS               = SPI_NSS_SOFT;
 8005c16:	6181      	str	r1, [r0, #24]
	SpiHandle->Init.Mode 			  = SPI_MODE_MASTER;
 8005c18:	6042      	str	r2, [r0, #4]


	if(HAL_SPI_Init(SpiHandle) != HAL_OK)
 8005c1a:	f7fe fda9 	bl	8004770 <HAL_SPI_Init>
	{
		//Error_Handler();
		return HAL_ERROR;
	}
	return HAL_OK;
}
 8005c1e:	3800      	subs	r0, #0
 8005c20:	bf18      	it	ne
 8005c22:	2001      	movne	r0, #1
 8005c24:	bd08      	pop	{r3, pc}
 8005c26:	bf00      	nop
 8005c28:	40013400 	.word	0x40013400

08005c2c <SPI_TransmitByte>:
/**
  * @brief  SPI transmit byte in full duplex mode
  * @param  hspi: SPI handle, data - trasmit data
  * @retval recv data
  */
uint8_t SPI_TransmitByte(SPI_HandleTypeDef *hspi, uint8_t data){
 8005c2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t TxData[1];
	uint8_t RxData[1];

	TxData[0] = data;
	HAL_SPI_TransmitReceive(hspi, TxData, RxData, 1, HAL_MAX_DELAY);
 8005c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	TxData[0] = data;
 8005c32:	f88d 1008 	strb.w	r1, [sp, #8]
	HAL_SPI_TransmitReceive(hspi, TxData, RxData, 1, HAL_MAX_DELAY);
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	aa03      	add	r2, sp, #12
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	a902      	add	r1, sp, #8
 8005c3e:	f7fe fece 	bl	80049de <HAL_SPI_TransmitReceive>

	return RxData[0];
}
 8005c42:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8005c46:	b005      	add	sp, #20
 8005c48:	f85d fb04 	ldr.w	pc, [sp], #4

08005c4c <USART_Init>:
   * USART1 Init
   *
   */


void USART_Init(UART_HandleTypeDef* pUartHandle){
 8005c4c:	b510      	push	{r4, lr}
        - Parity = None
        - BaudRate = 9600 baud
        - Hardware flow control disabled (RTS and CTS signals) */
  pUartHandle->Instance        = USARTx;

  pUartHandle->Init.BaudRate   = USART_SPEED;
 8005c4e:	4a0a      	ldr	r2, [pc, #40]	; (8005c78 <USART_Init+0x2c>)
 8005c50:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005c54:	e9c0 2300 	strd	r2, r3, [r0]
  pUartHandle->Init.WordLength = UART_WORDLENGTH_8B;
 8005c58:	2300      	movs	r3, #0
  pUartHandle->Init.StopBits   = UART_STOPBITS_1;
 8005c5a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  pUartHandle->Init.Parity     = UART_PARITY_NONE;
 8005c5e:	6103      	str	r3, [r0, #16]
  pUartHandle->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8005c60:	6183      	str	r3, [r0, #24]
  pUartHandle->Init.Mode       = UART_MODE_TX_RX;
 8005c62:	230c      	movs	r3, #12
void USART_Init(UART_HandleTypeDef* pUartHandle){
 8005c64:	4604      	mov	r4, r0
  pUartHandle->Init.Mode       = UART_MODE_TX_RX;
 8005c66:	6143      	str	r3, [r0, #20]
  //pUartHandle->Init.Mode       = UART_MODE_TX;
  if(HAL_UART_DeInit(pUartHandle) != HAL_OK)
 8005c68:	f7ff f9aa 	bl	8004fc0 <HAL_UART_DeInit>
  {
    //Error_Handler();
  }
  if(HAL_UART_Init(pUartHandle) != HAL_OK)
 8005c6c:	4620      	mov	r0, r4
  {
    //Error_Handler();
  }
}
 8005c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_UART_Init(pUartHandle) != HAL_OK)
 8005c72:	f7ff b977 	b.w	8004f64 <HAL_UART_Init>
 8005c76:	bf00      	nop
 8005c78:	40011000 	.word	0x40011000

08005c7c <LCD_Show_Feature>:
  * @brief  Show LCD Features
  * @param  feature: feature index
  * @retval None
  */
static void LCD_Show_Feature(uint8_t feature)
{
 8005c7c:	b570      	push	{r4, r5, r6, lr}
  Point Points[]= {{100, 100}, {160, 100}, {160, 140}};
 8005c7e:	4b9f      	ldr	r3, [pc, #636]	; (8005efc <LCD_Show_Feature+0x280>)
{
 8005c80:	b086      	sub	sp, #24
  Point Points[]= {{100, 100}, {160, 100}, {160, 140}};
 8005c82:	6859      	ldr	r1, [r3, #4]
{
 8005c84:	4604      	mov	r4, r0
  Point Points[]= {{100, 100}, {160, 100}, {160, 140}};
 8005c86:	6818      	ldr	r0, [r3, #0]
 8005c88:	466a      	mov	r2, sp
 8005c8a:	c203      	stmia	r2!, {r0, r1}
 8005c8c:	6898      	ldr	r0, [r3, #8]
 8005c8e:	6010      	str	r0, [r2, #0]
  Point Points2[]= {{100, 150}, {160, 150}, {160, 200}};
 8005c90:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 8005c94:	6859      	ldr	r1, [r3, #4]
 8005c96:	aa03      	add	r2, sp, #12
 8005c98:	c203      	stmia	r2!, {r0, r1}
 8005c9a:	6898      	ldr	r0, [r3, #8]
 8005c9c:	6010      	str	r0, [r2, #0]
  
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);  
 8005c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ca2:	f7fb fe1d 	bl	80018e0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);    
 8005ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005caa:	f7fb fe0f 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(12, 92, BSP_LCD_GetXSize() - 24, BSP_LCD_GetYSize()- 104);
 8005cae:	f7fb fdb9 	bl	8001824 <BSP_LCD_GetXSize>
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	f7fb fdbe 	bl	8001834 <BSP_LCD_GetYSize>
 8005cb8:	f1a5 0218 	sub.w	r2, r5, #24
 8005cbc:	3868      	subs	r0, #104	; 0x68
 8005cbe:	b283      	uxth	r3, r0
 8005cc0:	b292      	uxth	r2, r2
 8005cc2:	215c      	movs	r1, #92	; 0x5c
 8005cc4:	200c      	movs	r0, #12
 8005cc6:	f7fb ff39 	bl	8001b3c <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005cca:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005cce:	f7fb fdfd 	bl	80018cc <BSP_LCD_SetTextColor>
  
  switch (feature)
 8005cd2:	2c01      	cmp	r4, #1
 8005cd4:	d043      	beq.n	8005d5e <LCD_Show_Feature+0xe2>
 8005cd6:	2c02      	cmp	r4, #2
 8005cd8:	f000 80bf 	beq.w	8005e5a <LCD_Show_Feature+0x1de>
 8005cdc:	2c00      	cmp	r4, #0
 8005cde:	d13c      	bne.n	8005d5a <LCD_Show_Feature+0xde>
  {
  case 0:
    /* Text Feature */
    BSP_LCD_DisplayStringAt(14, 100, (uint8_t*)"Left aligned Text", LEFT_MODE);
 8005ce0:	4a87      	ldr	r2, [pc, #540]	; (8005f00 <LCD_Show_Feature+0x284>)
    BSP_LCD_DisplayStringAt((uint16_t)(-14), 130, (uint8_t*)"Right aligned Text", RIGHT_MODE);
    BSP_LCD_SetFont(&Font24);
    BSP_LCD_DisplayStringAt(14, 180, (uint8_t*)"Font24", LEFT_MODE);
    BSP_LCD_SetFont(&Font20);
    BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()/2 -20, 180 + Font20.Height, (uint8_t*)"Font20", LEFT_MODE);
    BSP_LCD_SetFont(&Font16);
 8005ce2:	4d88      	ldr	r5, [pc, #544]	; (8005f04 <LCD_Show_Feature+0x288>)
    BSP_LCD_DisplayStringAt(14, 100, (uint8_t*)"Left aligned Text", LEFT_MODE);
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	2164      	movs	r1, #100	; 0x64
 8005ce8:	200e      	movs	r0, #14
 8005cea:	f7fc f939 	bl	8001f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 115, (uint8_t*)"Center aligned Text", CENTER_MODE);
 8005cee:	4620      	mov	r0, r4
 8005cf0:	4a85      	ldr	r2, [pc, #532]	; (8005f08 <LCD_Show_Feature+0x28c>)
    BSP_LCD_SetFont(&Font20);
 8005cf2:	4c86      	ldr	r4, [pc, #536]	; (8005f0c <LCD_Show_Feature+0x290>)
    BSP_LCD_DisplayStringAt(0, 115, (uint8_t*)"Center aligned Text", CENTER_MODE);
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	2173      	movs	r1, #115	; 0x73
 8005cf8:	f7fc f932 	bl	8001f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt((uint16_t)(-14), 130, (uint8_t*)"Right aligned Text", RIGHT_MODE);
 8005cfc:	4a84      	ldr	r2, [pc, #528]	; (8005f10 <LCD_Show_Feature+0x294>)
 8005cfe:	2302      	movs	r3, #2
 8005d00:	2182      	movs	r1, #130	; 0x82
 8005d02:	f64f 70f2 	movw	r0, #65522	; 0xfff2
 8005d06:	f7fc f92b 	bl	8001f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font24);
 8005d0a:	4882      	ldr	r0, [pc, #520]	; (8005f14 <LCD_Show_Feature+0x298>)
 8005d0c:	f7fb fdf2 	bl	80018f4 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(14, 180, (uint8_t*)"Font24", LEFT_MODE);
 8005d10:	4a81      	ldr	r2, [pc, #516]	; (8005f18 <LCD_Show_Feature+0x29c>)
 8005d12:	2303      	movs	r3, #3
 8005d14:	21b4      	movs	r1, #180	; 0xb4
 8005d16:	200e      	movs	r0, #14
 8005d18:	f7fc f922 	bl	8001f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font20);
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f7fb fde9 	bl	80018f4 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()/2 -20, 180 + Font20.Height, (uint8_t*)"Font20", LEFT_MODE);
 8005d22:	f7fb fd7f 	bl	8001824 <BSP_LCD_GetXSize>
 8005d26:	88e1      	ldrh	r1, [r4, #6]
 8005d28:	4a7c      	ldr	r2, [pc, #496]	; (8005f1c <LCD_Show_Feature+0x2a0>)
 8005d2a:	0840      	lsrs	r0, r0, #1
 8005d2c:	31b4      	adds	r1, #180	; 0xb4
 8005d2e:	3814      	subs	r0, #20
 8005d30:	2303      	movs	r3, #3
 8005d32:	b289      	uxth	r1, r1
 8005d34:	b280      	uxth	r0, r0
 8005d36:	f7fc f913 	bl	8001f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f7fb fdda 	bl	80018f4 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize() - 80, 180 + Font20.Height + Font16.Height, (uint8_t*)"Font16", LEFT_MODE);
 8005d40:	f7fb fd70 	bl	8001824 <BSP_LCD_GetXSize>
 8005d44:	88eb      	ldrh	r3, [r5, #6]
 8005d46:	88e1      	ldrh	r1, [r4, #6]
 8005d48:	4a75      	ldr	r2, [pc, #468]	; (8005f20 <LCD_Show_Feature+0x2a4>)
 8005d4a:	4419      	add	r1, r3
 8005d4c:	31b4      	adds	r1, #180	; 0xb4
 8005d4e:	3850      	subs	r0, #80	; 0x50
 8005d50:	2303      	movs	r3, #3
 8005d52:	b289      	uxth	r1, r1
 8005d54:	b280      	uxth	r0, r0
 8005d56:	f7fc f903 	bl	8001f60 <BSP_LCD_DisplayStringAt>
    
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize()-100, BSP_LCD_GetYSize()- 80, (uint8_t *)stlogo);
    HAL_Delay(500);    
    break;
  }
}
 8005d5a:	b006      	add	sp, #24
 8005d5c:	bd70      	pop	{r4, r5, r6, pc}
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK); 
 8005d5e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005d62:	f7fb fdb3 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(20, 100, 60 , 40);
 8005d66:	2328      	movs	r3, #40	; 0x28
 8005d68:	223c      	movs	r2, #60	; 0x3c
 8005d6a:	2164      	movs	r1, #100	; 0x64
 8005d6c:	2014      	movs	r0, #20
 8005d6e:	f7fb fe3f 	bl	80019f0 <BSP_LCD_DrawRect>
    BSP_LCD_FillRect(20, 150, 60 , 40); 
 8005d72:	2328      	movs	r3, #40	; 0x28
 8005d74:	223c      	movs	r2, #60	; 0x3c
 8005d76:	2196      	movs	r1, #150	; 0x96
 8005d78:	2014      	movs	r0, #20
 8005d7a:	f7fb fedf 	bl	8001b3c <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_GRAY); 
 8005d7e:	4869      	ldr	r0, [pc, #420]	; (8005f24 <LCD_Show_Feature+0x2a8>)
 8005d80:	f7fb fda4 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_DrawCircle(50, 220, 20);
 8005d84:	2214      	movs	r2, #20
 8005d86:	21dc      	movs	r1, #220	; 0xdc
 8005d88:	2032      	movs	r0, #50	; 0x32
 8005d8a:	f7fc faaf 	bl	80022ec <BSP_LCD_DrawCircle>
    BSP_LCD_FillCircle(120, 220, 20);
 8005d8e:	2214      	movs	r2, #20
 8005d90:	21dc      	movs	r1, #220	; 0xdc
 8005d92:	2078      	movs	r0, #120	; 0x78
 8005d94:	f7fc fb3c 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 8005d98:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8005d9c:	f7fb fd96 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_DrawPolygon(Points, 3);
 8005da0:	4668      	mov	r0, sp
 8005da2:	2103      	movs	r1, #3
 8005da4:	f7fc f99a 	bl	80020dc <BSP_LCD_DrawPolygon>
    BSP_LCD_FillPolygon(Points2, 3);
 8005da8:	2103      	movs	r1, #3
 8005daa:	a803      	add	r0, sp, #12
 8005dac:	f7fc fa1f 	bl	80021ee <BSP_LCD_FillPolygon>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8005db0:	485d      	ldr	r0, [pc, #372]	; (8005f28 <LCD_Show_Feature+0x2ac>)
 8005db2:	f7fb fd8b 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_DrawEllipse(BSP_LCD_GetXSize() - 45, 120, 30, 20);
 8005db6:	f7fb fd35 	bl	8001824 <BSP_LCD_GetXSize>
 8005dba:	2314      	movs	r3, #20
 8005dbc:	221e      	movs	r2, #30
 8005dbe:	2178      	movs	r1, #120	; 0x78
 8005dc0:	382d      	subs	r0, #45	; 0x2d
 8005dc2:	f7fc fb75 	bl	80024b0 <BSP_LCD_DrawEllipse>
    BSP_LCD_FillEllipse(BSP_LCD_GetXSize() - 45, 170, 30, 20);
 8005dc6:	f7fb fd2d 	bl	8001824 <BSP_LCD_GetXSize>
 8005dca:	2314      	movs	r3, #20
 8005dcc:	221e      	movs	r2, #30
 8005dce:	21aa      	movs	r1, #170	; 0xaa
 8005dd0:	382d      	subs	r0, #45	; 0x2d
 8005dd2:	f7fb ff03 	bl	8001bdc <BSP_LCD_FillEllipse>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK); 
 8005dd6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005dda:	f7fb fd77 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_DrawHLine(20, BSP_LCD_GetYSize() - 30, BSP_LCD_GetXSize() / 5);
 8005dde:	f7fb fd29 	bl	8001834 <BSP_LCD_GetYSize>
 8005de2:	4604      	mov	r4, r0
 8005de4:	f7fb fd1e 	bl	8001824 <BSP_LCD_GetXSize>
 8005de8:	f1a4 011e 	sub.w	r1, r4, #30
 8005dec:	b289      	uxth	r1, r1
 8005dee:	2205      	movs	r2, #5
 8005df0:	fbb0 f2f2 	udiv	r2, r0, r2
 8005df4:	2014      	movs	r0, #20
 8005df6:	b292      	uxth	r2, r2
 8005df8:	f7fb fda6 	bl	8001948 <BSP_LCD_DrawHLine>
    BSP_LCD_DrawLine (BSP_LCD_GetXSize() - 150, BSP_LCD_GetYSize()- 20, BSP_LCD_GetXSize()- 20, BSP_LCD_GetYSize()- 50);
 8005dfc:	f7fb fd12 	bl	8001824 <BSP_LCD_GetXSize>
 8005e00:	4604      	mov	r4, r0
 8005e02:	f7fb fd17 	bl	8001834 <BSP_LCD_GetYSize>
 8005e06:	4605      	mov	r5, r0
 8005e08:	f7fb fd0c 	bl	8001824 <BSP_LCD_GetXSize>
 8005e0c:	4606      	mov	r6, r0
 8005e0e:	f7fb fd11 	bl	8001834 <BSP_LCD_GetYSize>
 8005e12:	3c96      	subs	r4, #150	; 0x96
 8005e14:	3832      	subs	r0, #50	; 0x32
 8005e16:	f1a6 0214 	sub.w	r2, r6, #20
 8005e1a:	f1a5 0114 	sub.w	r1, r5, #20
 8005e1e:	b283      	uxth	r3, r0
 8005e20:	b292      	uxth	r2, r2
 8005e22:	b289      	uxth	r1, r1
 8005e24:	b2a0      	uxth	r0, r4
 8005e26:	f7fc f8f1 	bl	800200c <BSP_LCD_DrawLine>
    BSP_LCD_DrawLine (BSP_LCD_GetXSize() - 150, BSP_LCD_GetYSize()- 50, BSP_LCD_GetXSize()- 20, BSP_LCD_GetYSize()- 20);
 8005e2a:	f7fb fcfb 	bl	8001824 <BSP_LCD_GetXSize>
 8005e2e:	4604      	mov	r4, r0
 8005e30:	f7fb fd00 	bl	8001834 <BSP_LCD_GetYSize>
 8005e34:	4605      	mov	r5, r0
 8005e36:	f7fb fcf5 	bl	8001824 <BSP_LCD_GetXSize>
 8005e3a:	4606      	mov	r6, r0
 8005e3c:	f7fb fcfa 	bl	8001834 <BSP_LCD_GetYSize>
 8005e40:	3c96      	subs	r4, #150	; 0x96
 8005e42:	3814      	subs	r0, #20
 8005e44:	f1a6 0214 	sub.w	r2, r6, #20
 8005e48:	f1a5 0132 	sub.w	r1, r5, #50	; 0x32
 8005e4c:	b283      	uxth	r3, r0
 8005e4e:	b292      	uxth	r2, r2
 8005e50:	b289      	uxth	r1, r1
 8005e52:	b2a0      	uxth	r0, r4
 8005e54:	f7fc f8da 	bl	800200c <BSP_LCD_DrawLine>
    break;
 8005e58:	e77f      	b.n	8005d5a <LCD_Show_Feature+0xde>
    BSP_LCD_DrawBitmap(20, 100, (uint8_t *)stlogo);
 8005e5a:	4a34      	ldr	r2, [pc, #208]	; (8005f2c <LCD_Show_Feature+0x2b0>)
 8005e5c:	2164      	movs	r1, #100	; 0x64
 8005e5e:	2014      	movs	r0, #20
 8005e60:	f7fb fde0 	bl	8001a24 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);
 8005e64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e68:	f7fc fdd2 	bl	8002a10 <HAL_Delay>
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize()-100, 100, (uint8_t *)stlogo);
 8005e6c:	f7fb fcda 	bl	8001824 <BSP_LCD_GetXSize>
 8005e70:	4a2e      	ldr	r2, [pc, #184]	; (8005f2c <LCD_Show_Feature+0x2b0>)
 8005e72:	2164      	movs	r1, #100	; 0x64
 8005e74:	3864      	subs	r0, #100	; 0x64
 8005e76:	f7fb fdd5 	bl	8001a24 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);
 8005e7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e7e:	f7fc fdc7 	bl	8002a10 <HAL_Delay>
    BSP_LCD_DrawBitmap(20, (BSP_LCD_GetYSize()-104-92)/2+100, (uint8_t *)stlogo);
 8005e82:	f7fb fcd7 	bl	8001834 <BSP_LCD_GetYSize>
 8005e86:	38c4      	subs	r0, #196	; 0xc4
 8005e88:	0841      	lsrs	r1, r0, #1
 8005e8a:	4a28      	ldr	r2, [pc, #160]	; (8005f2c <LCD_Show_Feature+0x2b0>)
 8005e8c:	3164      	adds	r1, #100	; 0x64
 8005e8e:	2014      	movs	r0, #20
 8005e90:	f7fb fdc8 	bl	8001a24 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);    
 8005e94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e98:	f7fc fdba 	bl	8002a10 <HAL_Delay>
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize()-100, (BSP_LCD_GetYSize()-104-92)/2+100, (uint8_t *)stlogo);
 8005e9c:	f7fb fcc2 	bl	8001824 <BSP_LCD_GetXSize>
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	f7fb fcc7 	bl	8001834 <BSP_LCD_GetYSize>
 8005ea6:	f1a0 01c4 	sub.w	r1, r0, #196	; 0xc4
 8005eaa:	0849      	lsrs	r1, r1, #1
 8005eac:	4a1f      	ldr	r2, [pc, #124]	; (8005f2c <LCD_Show_Feature+0x2b0>)
 8005eae:	3164      	adds	r1, #100	; 0x64
 8005eb0:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
 8005eb4:	f7fb fdb6 	bl	8001a24 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);     
 8005eb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ebc:	f7fc fda8 	bl	8002a10 <HAL_Delay>
    BSP_LCD_DrawBitmap(20, BSP_LCD_GetYSize()- 80, (uint8_t *)stlogo);
 8005ec0:	f7fb fcb8 	bl	8001834 <BSP_LCD_GetYSize>
 8005ec4:	4a19      	ldr	r2, [pc, #100]	; (8005f2c <LCD_Show_Feature+0x2b0>)
 8005ec6:	f1a0 0150 	sub.w	r1, r0, #80	; 0x50
 8005eca:	2014      	movs	r0, #20
 8005ecc:	f7fb fdaa 	bl	8001a24 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);
 8005ed0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ed4:	f7fc fd9c 	bl	8002a10 <HAL_Delay>
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize()-100, BSP_LCD_GetYSize()- 80, (uint8_t *)stlogo);
 8005ed8:	f7fb fca4 	bl	8001824 <BSP_LCD_GetXSize>
 8005edc:	4604      	mov	r4, r0
 8005ede:	f7fb fca9 	bl	8001834 <BSP_LCD_GetYSize>
 8005ee2:	4a12      	ldr	r2, [pc, #72]	; (8005f2c <LCD_Show_Feature+0x2b0>)
 8005ee4:	f1a0 0150 	sub.w	r1, r0, #80	; 0x50
 8005ee8:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
 8005eec:	f7fb fd9a 	bl	8001a24 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);    
 8005ef0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ef4:	f7fc fd8c 	bl	8002a10 <HAL_Delay>
}
 8005ef8:	e72f      	b.n	8005d5a <LCD_Show_Feature+0xde>
 8005efa:	bf00      	nop
 8005efc:	0800c688 	.word	0x0800c688
 8005f00:	0801f157 	.word	0x0801f157
 8005f04:	200000ec 	.word	0x200000ec
 8005f08:	0801f169 	.word	0x0801f169
 8005f0c:	200000f4 	.word	0x200000f4
 8005f10:	0801f17d 	.word	0x0801f17d
 8005f14:	200000d4 	.word	0x200000d4
 8005f18:	0801f190 	.word	0x0801f190
 8005f1c:	0801f197 	.word	0x0801f197
 8005f20:	0801f19e 	.word	0x0801f19e
 8005f24:	ff808080 	.word	0xff808080
 8005f28:	ffff0000 	.word	0xffff0000
 8005f2c:	0800c6dc 	.word	0x0800c6dc

08005f30 <LCD_demo>:
{ 
 8005f30:	b510      	push	{r4, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8005f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f36:	f7fb fce7 	bl	8001908 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8005f3a:	4832      	ldr	r0, [pc, #200]	; (8006004 <LCD_demo+0xd4>)
 8005f3c:	f7fb fcc6 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8005f40:	f7fb fc70 	bl	8001824 <BSP_LCD_GetXSize>
 8005f44:	2100      	movs	r1, #0
 8005f46:	b282      	uxth	r2, r0
 8005f48:	2350      	movs	r3, #80	; 0x50
 8005f4a:	4608      	mov	r0, r1
 8005f4c:	f7fb fdf6 	bl	8001b3c <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f54:	f7fb fcba 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 8005f58:	482a      	ldr	r0, [pc, #168]	; (8006004 <LCD_demo+0xd4>)
 8005f5a:	f7fb fcc1 	bl	80018e0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8005f5e:	482a      	ldr	r0, [pc, #168]	; (8006008 <LCD_demo+0xd8>)
 8005f60:	f7fb fcc8 	bl	80018f4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"LCD", CENTER_MODE);
 8005f64:	2100      	movs	r1, #0
 8005f66:	4608      	mov	r0, r1
 8005f68:	4a28      	ldr	r2, [pc, #160]	; (800600c <LCD_demo+0xdc>)
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f7fb fff8 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8005f70:	4827      	ldr	r0, [pc, #156]	; (8006010 <LCD_demo+0xe0>)
 8005f72:	f7fb fcbf 	bl	80018f4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"This example shows the different", CENTER_MODE);
 8005f76:	4a27      	ldr	r2, [pc, #156]	; (8006014 <LCD_demo+0xe4>)
 8005f78:	2301      	movs	r3, #1
 8005f7a:	211e      	movs	r1, #30
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	f7fb ffef 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t*)"LCD Features, use BUTTON", CENTER_MODE);
 8005f82:	4a25      	ldr	r2, [pc, #148]	; (8006018 <LCD_demo+0xe8>)
 8005f84:	2301      	movs	r3, #1
 8005f86:	212d      	movs	r1, #45	; 0x2d
 8005f88:	2000      	movs	r0, #0
 8005f8a:	f7fb ffe9 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"to display next page", CENTER_MODE);
 8005f8e:	4a23      	ldr	r2, [pc, #140]	; (800601c <LCD_demo+0xec>)
 8005f90:	2301      	movs	r3, #1
 8005f92:	213c      	movs	r1, #60	; 0x3c
 8005f94:	2000      	movs	r0, #0
 8005f96:	f7fb ffe3 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);  
 8005f9a:	481a      	ldr	r0, [pc, #104]	; (8006004 <LCD_demo+0xd4>)
 8005f9c:	f7fb fc96 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize()- 100);
 8005fa0:	f7fb fc40 	bl	8001824 <BSP_LCD_GetXSize>
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	f7fb fc45 	bl	8001834 <BSP_LCD_GetYSize>
 8005faa:	f1a4 0214 	sub.w	r2, r4, #20
 8005fae:	3864      	subs	r0, #100	; 0x64
 8005fb0:	b283      	uxth	r3, r0
 8005fb2:	b292      	uxth	r2, r2
 8005fb4:	215a      	movs	r1, #90	; 0x5a
 8005fb6:	200a      	movs	r0, #10
 8005fb8:	f7fb fd1a 	bl	80019f0 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102);
 8005fbc:	f7fb fc32 	bl	8001824 <BSP_LCD_GetXSize>
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	f7fb fc37 	bl	8001834 <BSP_LCD_GetYSize>
 8005fc6:	f1a4 0216 	sub.w	r2, r4, #22
 8005fca:	3866      	subs	r0, #102	; 0x66
 8005fcc:	b283      	uxth	r3, r0
  LCD_Feature = 0;
 8005fce:	4c14      	ldr	r4, [pc, #80]	; (8006020 <LCD_demo+0xf0>)
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102);
 8005fd0:	200b      	movs	r0, #11
 8005fd2:	b292      	uxth	r2, r2
 8005fd4:	215b      	movs	r1, #91	; 0x5b
 8005fd6:	f7fb fd0b 	bl	80019f0 <BSP_LCD_DrawRect>
  LCD_Feature = 0;
 8005fda:	2000      	movs	r0, #0
 8005fdc:	7020      	strb	r0, [r4, #0]
  LCD_Show_Feature (LCD_Feature); 
 8005fde:	f7ff fe4d 	bl	8005c7c <LCD_Show_Feature>
    if(CheckForUserInput() > 0)
 8005fe2:	f000 fb35 	bl	8006650 <CheckForUserInput>
 8005fe6:	b138      	cbz	r0, 8005ff8 <LCD_demo+0xc8>
      if(++LCD_Feature < LCD_FEATURES_NUM)
 8005fe8:	7820      	ldrb	r0, [r4, #0]
 8005fea:	3001      	adds	r0, #1
 8005fec:	b2c0      	uxtb	r0, r0
 8005fee:	2802      	cmp	r0, #2
 8005ff0:	7020      	strb	r0, [r4, #0]
 8005ff2:	d805      	bhi.n	8006000 <LCD_demo+0xd0>
        LCD_Show_Feature (LCD_Feature); 
 8005ff4:	f7ff fe42 	bl	8005c7c <LCD_Show_Feature>
    HAL_Delay(100);
 8005ff8:	2064      	movs	r0, #100	; 0x64
 8005ffa:	f7fc fd09 	bl	8002a10 <HAL_Delay>
    if(CheckForUserInput() > 0)
 8005ffe:	e7f0      	b.n	8005fe2 <LCD_demo+0xb2>
}
 8006000:	bd10      	pop	{r4, pc}
 8006002:	bf00      	nop
 8006004:	ff0000ff 	.word	0xff0000ff
 8006008:	200000d4 	.word	0x200000d4
 800600c:	0801f1a5 	.word	0x0801f1a5
 8006010:	200000e4 	.word	0x200000e4
 8006014:	0801f1a9 	.word	0x0801f1a9
 8006018:	0801f1ca 	.word	0x0801f1ca
 800601c:	0801f1e3 	.word	0x0801f1e3
 8006020:	200004c0 	.word	0x200004c0

08006024 <Log_demo>:
  * @brief  LCD Log demo 
  * @param  None
  * @retval None
  */
void Log_demo(void)
{ 
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i = 0;

  /* Initialize LCD Log module */
  LCD_LOG_Init();
 8006026:	f001 fb39 	bl	800769c <LCD_LOG_Init>
  
  /* Show Header and Footer texts */
  LCD_LOG_SetHeader((uint8_t*)"This is the header");
 800602a:	481a      	ldr	r0, [pc, #104]	; (8006094 <Log_demo+0x70>)
 800602c:	f001 fb40 	bl	80076b0 <LCD_LOG_SetHeader>
  LCD_LOG_SetFooter((uint8_t*)"This is the footer");
 8006030:	4819      	ldr	r0, [pc, #100]	; (8006098 <Log_demo+0x74>)
 8006032:	f001 fb73 	bl	800771c <LCD_LOG_SetFooter>
  
  /* Wait For User inputs */
  while(CheckForUserInput() == 0);
 8006036:	f000 fb0b 	bl	8006650 <CheckForUserInput>
 800603a:	2800      	cmp	r0, #0
 800603c:	d0fb      	beq.n	8006036 <Log_demo+0x12>
  
  /* Output User logs */
  for (i = 0; i < 10; i++)
  {
    LCD_UsrLog ("This is Line %d \n", i);
 800603e:	4d17      	ldr	r5, [pc, #92]	; (800609c <Log_demo+0x78>)
 8006040:	4f17      	ldr	r7, [pc, #92]	; (80060a0 <Log_demo+0x7c>)
 8006042:	4e18      	ldr	r6, [pc, #96]	; (80060a4 <Log_demo+0x80>)
 8006044:	2400      	movs	r4, #0
 8006046:	4621      	mov	r1, r4
 8006048:	4630      	mov	r0, r6
 800604a:	602f      	str	r7, [r5, #0]
 800604c:	3401      	adds	r4, #1
 800604e:	f001 fbe5 	bl	800781c <iprintf>
    HAL_Delay(100);
 8006052:	2064      	movs	r0, #100	; 0x64
 8006054:	f7fc fcdc 	bl	8002a10 <HAL_Delay>
  for (i = 0; i < 10; i++)
 8006058:	2c0a      	cmp	r4, #10
 800605a:	d1f4      	bne.n	8006046 <Log_demo+0x22>
  }
  
  HAL_Delay(1500);
 800605c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006060:	f7fc fcd6 	bl	8002a10 <HAL_Delay>
  
   /* Clear Old logs */
  LCD_LOG_ClearTextZone();
 8006064:	f001 fb9c 	bl	80077a0 <LCD_LOG_ClearTextZone>
  
   /* Output new user logs */
  for (i = 0; i < 30; i++)
  {
    LCD_UsrLog ("This is Line %d \n", i);
 8006068:	4f0d      	ldr	r7, [pc, #52]	; (80060a0 <Log_demo+0x7c>)
 800606a:	4e0e      	ldr	r6, [pc, #56]	; (80060a4 <Log_demo+0x80>)
  LCD_LOG_ClearTextZone();
 800606c:	2400      	movs	r4, #0
    LCD_UsrLog ("This is Line %d \n", i);
 800606e:	4621      	mov	r1, r4
 8006070:	4630      	mov	r0, r6
 8006072:	602f      	str	r7, [r5, #0]
 8006074:	3401      	adds	r4, #1
 8006076:	f001 fbd1 	bl	800781c <iprintf>
    HAL_Delay(100);
 800607a:	2064      	movs	r0, #100	; 0x64
 800607c:	f7fc fcc8 	bl	8002a10 <HAL_Delay>
  for (i = 0; i < 30; i++)
 8006080:	2c1e      	cmp	r4, #30
 8006082:	d1f4      	bne.n	800606e <Log_demo+0x4a>
  }
  
  /* Check for joystick user input for scroll (back and forward) */
  while (1)
  {
    if(CheckForUserInput() > 0)
 8006084:	f000 fae4 	bl	8006650 <CheckForUserInput>
 8006088:	b918      	cbnz	r0, 8006092 <Log_demo+0x6e>
    {
      return;
    }    
    HAL_Delay (10);
 800608a:	200a      	movs	r0, #10
 800608c:	f7fc fcc0 	bl	8002a10 <HAL_Delay>
    if(CheckForUserInput() > 0)
 8006090:	e7f8      	b.n	8006084 <Log_demo+0x60>
  }
}
 8006092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006094:	0801f1f8 	.word	0x0801f1f8
 8006098:	0801f20b 	.word	0x0801f20b
 800609c:	20004780 	.word	0x20004780
 80060a0:	ff000080 	.word	0xff000080
 80060a4:	0801f21e 	.word	0x0801f21e

080060a8 <Display_InitContent>:
  * @brief  Display main messages
  * @param  None
  * @retval None
  */
static void Display_InitContent(void)
{
 80060a8:	b510      	push	{r4, lr}
  uint8_t desc[50];

  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(1);
 80060aa:	2001      	movs	r0, #1
 80060ac:	f7fb fc08 	bl	80018c0 <BSP_LCD_SelectLayer>

  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80060b0:	481a      	ldr	r0, [pc, #104]	; (800611c <Display_InitContent+0x74>)
 80060b2:	f7fb fc1f 	bl	80018f4 <BSP_LCD_SetFont>

  /* Clear the LCD */
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80060b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060ba:	f7fb fc11 	bl	80018e0 <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80060be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060c2:	f7fb fc21 	bl	8001908 <BSP_LCD_Clear>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80060c6:	4816      	ldr	r0, [pc, #88]	; (8006120 <Display_InitContent+0x78>)
 80060c8:	f7fb fc00 	bl	80018cc <BSP_LCD_SetTextColor>

  /* Display LCD messages */
  //BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)"STM32F429I BSP", CENTER_MODE);
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)"Kontrola", CENTER_MODE);
 80060cc:	4a15      	ldr	r2, [pc, #84]	; (8006124 <Display_InitContent+0x7c>)
 80060ce:	2301      	movs	r3, #1
 80060d0:	210a      	movs	r1, #10
 80060d2:	2000      	movs	r0, #0
 80060d4:	f7fb ff44 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"vstopa", CENTER_MODE);
 80060d8:	2301      	movs	r3, #1
 80060da:	4a13      	ldr	r2, [pc, #76]	; (8006128 <Display_InitContent+0x80>)
 80060dc:	211e      	movs	r1, #30
 80060de:	2000      	movs	r0, #0
 80060e0:	f7fb ff3e 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  //BSP_LCD_DisplayStringAt(0, 55, (uint8_t*)"Prislonite RFID", CENTER_MODE);
  //BSP_LCD_DisplayStringAt(0, 68, (uint8_t*)"kljucek", CENTER_MODE);

  /* Draw Bitmap */
  //BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80)/2, 75, (uint8_t *)stlogo);
  PB_BSP_LCD_DrawBitmap(0, 70, (uint8_t *)hisa);
 80060e4:	4a11      	ldr	r2, [pc, #68]	; (800612c <Display_InitContent+0x84>)
 80060e6:	2146      	movs	r1, #70	; 0x46
 80060e8:	2000      	movs	r0, #0
 80060ea:	f7fb fcff 	bl	8001aec <PB_BSP_LCD_DrawBitmap>

  BSP_LCD_SetFont(&Font20);
 80060ee:	4810      	ldr	r0, [pc, #64]	; (8006130 <Display_InitContent+0x88>)
 80060f0:	f7fb fc00 	bl	80018f4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize( )- 40, (uint8_t*)"Razvil:", CENTER_MODE);
 80060f4:	f7fb fb9e 	bl	8001834 <BSP_LCD_GetYSize>
 80060f8:	3828      	subs	r0, #40	; 0x28
 80060fa:	b281      	uxth	r1, r0
 80060fc:	4a0d      	ldr	r2, [pc, #52]	; (8006134 <Display_InitContent+0x8c>)
 80060fe:	2301      	movs	r3, #1
 8006100:	2000      	movs	r0, #0
 8006102:	f7fb ff2d 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize( )- 20, (uint8_t*)"Pa3cio 2022", CENTER_MODE);
 8006106:	f7fb fb95 	bl	8001834 <BSP_LCD_GetYSize>
 800610a:	3814      	subs	r0, #20
 800610c:	b281      	uxth	r1, r0
  /* Draw Bitmap */
  //BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 180)/2, 0, (uint8_t *)stlogo);
  //PB_BSP_LCD_DrawBitmap(0, 20, (uint8_t *)hisa);
  //sprintf((char *)desc,"%s example", BSP_examples[DemoIndex].DemoName);
  //BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 45, (uint8_t *)desc, CENTER_MODE);
}
 800610e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize( )- 20, (uint8_t*)"Pa3cio 2022", CENTER_MODE);
 8006112:	4a09      	ldr	r2, [pc, #36]	; (8006138 <Display_InitContent+0x90>)
 8006114:	2301      	movs	r3, #1
 8006116:	2000      	movs	r0, #0
 8006118:	f7fb bf22 	b.w	8001f60 <BSP_LCD_DisplayStringAt>
 800611c:	200000d4 	.word	0x200000d4
 8006120:	ff000080 	.word	0xff000080
 8006124:	0801f230 	.word	0x0801f230
 8006128:	0801f239 	.word	0x0801f239
 800612c:	0800eab2 	.word	0x0800eab2
 8006130:	200000f4 	.word	0x200000f4
 8006134:	0801f240 	.word	0x0801f240
 8006138:	0801f248 	.word	0x0801f248

0800613c <Display_AccesDenied>:
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 30, (uint8_t*)"RFID prebran!", CENTER_MODE);
	//BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 50, (uint8_t*)"kljucek", CENTER_MODE);
}

static void Display_AccesDenied(void)
{
 800613c:	b570      	push	{r4, r5, r6, lr}
	BSP_LCD_SetFont(&Font24);
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800613e:	4d32      	ldr	r5, [pc, #200]	; (8006208 <Display_AccesDenied+0xcc>)
	BSP_LCD_SetFont(&Font24);
 8006140:	4832      	ldr	r0, [pc, #200]	; (800620c <Display_AccesDenied+0xd0>)
 8006142:	f7fb fbd7 	bl	80018f4 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8006146:	4628      	mov	r0, r5
 8006148:	f7fb fbc0 	bl	80018cc <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, BSP_LCD_GetYSize()/2 - 85, BSP_LCD_GetXSize(), 90);
 800614c:	f7fb fb72 	bl	8001834 <BSP_LCD_GetYSize>
 8006150:	4604      	mov	r4, r0
 8006152:	f7fb fb67 	bl	8001824 <BSP_LCD_GetXSize>
 8006156:	0861      	lsrs	r1, r4, #1
 8006158:	3955      	subs	r1, #85	; 0x55
 800615a:	b282      	uxth	r2, r0
 800615c:	235a      	movs	r3, #90	; 0x5a
 800615e:	b289      	uxth	r1, r1
 8006160:	2000      	movs	r0, #0
 8006162:	f7fb fceb 	bl	8001b3c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8006166:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800616a:	f7fb fbaf 	bl	80018cc <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800616e:	4628      	mov	r0, r5
 8006170:	f7fb fbb6 	bl	80018e0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 85 + 10, (uint8_t*)"Dostop", CENTER_MODE);
 8006174:	f7fb fb5e 	bl	8001834 <BSP_LCD_GetYSize>
 8006178:	0840      	lsrs	r0, r0, #1
 800617a:	f1a0 014b 	sub.w	r1, r0, #75	; 0x4b
 800617e:	4a24      	ldr	r2, [pc, #144]	; (8006210 <Display_AccesDenied+0xd4>)
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 85 + 30, (uint8_t*)"zavrnjen!", CENTER_MODE);
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 85 + 50, strUID, CENTER_MODE);

	BSP_LCD_SetFont(&Font20);
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8006180:	4d24      	ldr	r5, [pc, #144]	; (8006214 <Display_AccesDenied+0xd8>)
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 85 + 10, (uint8_t*)"Dostop", CENTER_MODE);
 8006182:	2301      	movs	r3, #1
 8006184:	b289      	uxth	r1, r1
 8006186:	2000      	movs	r0, #0
 8006188:	f7fb feea 	bl	8001f60 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 85 + 30, (uint8_t*)"zavrnjen!", CENTER_MODE);
 800618c:	f7fb fb52 	bl	8001834 <BSP_LCD_GetYSize>
 8006190:	0840      	lsrs	r0, r0, #1
 8006192:	f1a0 0137 	sub.w	r1, r0, #55	; 0x37
 8006196:	4a20      	ldr	r2, [pc, #128]	; (8006218 <Display_AccesDenied+0xdc>)
 8006198:	2301      	movs	r3, #1
 800619a:	b289      	uxth	r1, r1
 800619c:	2000      	movs	r0, #0
 800619e:	f7fb fedf 	bl	8001f60 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 85 + 50, strUID, CENTER_MODE);
 80061a2:	f7fb fb47 	bl	8001834 <BSP_LCD_GetYSize>
 80061a6:	0840      	lsrs	r0, r0, #1
 80061a8:	f1a0 0123 	sub.w	r1, r0, #35	; 0x23
 80061ac:	4a1b      	ldr	r2, [pc, #108]	; (800621c <Display_AccesDenied+0xe0>)
 80061ae:	2301      	movs	r3, #1
 80061b0:	b289      	uxth	r1, r1
 80061b2:	2000      	movs	r0, #0
 80061b4:	f7fb fed4 	bl	8001f60 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font20);
 80061b8:	4819      	ldr	r0, [pc, #100]	; (8006220 <Display_AccesDenied+0xe4>)
 80061ba:	f7fb fb9b 	bl	80018f4 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80061be:	4628      	mov	r0, r5
 80061c0:	f7fb fb84 	bl	80018cc <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, BSP_LCD_GetYSize()/2 + 15, BSP_LCD_GetXSize(), 60);
 80061c4:	f7fb fb36 	bl	8001834 <BSP_LCD_GetYSize>
 80061c8:	4604      	mov	r4, r0
 80061ca:	f7fb fb2b 	bl	8001824 <BSP_LCD_GetXSize>
 80061ce:	0861      	lsrs	r1, r4, #1
 80061d0:	310f      	adds	r1, #15
 80061d2:	b282      	uxth	r2, r0
 80061d4:	233c      	movs	r3, #60	; 0x3c
 80061d6:	b289      	uxth	r1, r1
 80061d8:	2000      	movs	r0, #0
 80061da:	f7fb fcaf 	bl	8001b3c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80061de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061e2:	f7fb fb73 	bl	80018cc <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80061e6:	4628      	mov	r0, r5
 80061e8:	f7fb fb7a 	bl	80018e0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 30, (uint8_t*)"RFID prebran!", CENTER_MODE);
 80061ec:	f7fb fb22 	bl	8001834 <BSP_LCD_GetYSize>
 80061f0:	0840      	lsrs	r0, r0, #1
 80061f2:	f100 011e 	add.w	r1, r0, #30
	//BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 50, (uint8_t*)"kljucek", CENTER_MODE);
}
 80061f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 30, (uint8_t*)"RFID prebran!", CENTER_MODE);
 80061fa:	4a0a      	ldr	r2, [pc, #40]	; (8006224 <Display_AccesDenied+0xe8>)
 80061fc:	2301      	movs	r3, #1
 80061fe:	b289      	uxth	r1, r1
 8006200:	2000      	movs	r0, #0
 8006202:	f7fb bead 	b.w	8001f60 <BSP_LCD_DisplayStringAt>
 8006206:	bf00      	nop
 8006208:	ffff0000 	.word	0xffff0000
 800620c:	200000d4 	.word	0x200000d4
 8006210:	0801f254 	.word	0x0801f254
 8006214:	ff0000ff 	.word	0xff0000ff
 8006218:	0801f25b 	.word	0x0801f25b
 800621c:	20000a7c 	.word	0x20000a7c
 8006220:	200000f4 	.word	0x200000f4
 8006224:	0801f265 	.word	0x0801f265

08006228 <Clear_AccesGranted>:


static void Clear_AccesGranted(void)
{
 8006228:	b570      	push	{r4, r5, r6, lr}
	BSP_LCD_SetFont(&Font16);
 800622a:	4d24      	ldr	r5, [pc, #144]	; (80062bc <Clear_AccesGranted+0x94>)
 800622c:	4628      	mov	r0, r5
 800622e:	f7fb fb61 	bl	80018f4 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8006232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006236:	f7fb fb49 	bl	80018cc <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, BSP_LCD_GetYSize()/2 - 85, BSP_LCD_GetXSize(), 60);
 800623a:	f7fb fafb 	bl	8001834 <BSP_LCD_GetYSize>
 800623e:	4604      	mov	r4, r0
 8006240:	f7fb faf0 	bl	8001824 <BSP_LCD_GetXSize>
 8006244:	0861      	lsrs	r1, r4, #1
 8006246:	3955      	subs	r1, #85	; 0x55
 8006248:	b282      	uxth	r2, r0
 800624a:	233c      	movs	r3, #60	; 0x3c
 800624c:	b289      	uxth	r1, r1
 800624e:	2000      	movs	r0, #0
 8006250:	f7fb fc74 	bl	8001b3c <BSP_LCD_FillRect>

	BSP_LCD_SetFont(&Font16);
 8006254:	4628      	mov	r0, r5
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8006256:	4d1a      	ldr	r5, [pc, #104]	; (80062c0 <Clear_AccesGranted+0x98>)
	BSP_LCD_SetFont(&Font16);
 8006258:	f7fb fb4c 	bl	80018f4 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800625c:	4628      	mov	r0, r5
 800625e:	f7fb fb35 	bl	80018cc <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, BSP_LCD_GetYSize()/2 + 15, BSP_LCD_GetXSize(), 60);
 8006262:	f7fb fae7 	bl	8001834 <BSP_LCD_GetYSize>
 8006266:	4604      	mov	r4, r0
 8006268:	f7fb fadc 	bl	8001824 <BSP_LCD_GetXSize>
 800626c:	0861      	lsrs	r1, r4, #1
 800626e:	310f      	adds	r1, #15
 8006270:	b282      	uxth	r2, r0
 8006272:	233c      	movs	r3, #60	; 0x3c
 8006274:	b289      	uxth	r1, r1
 8006276:	2000      	movs	r0, #0
 8006278:	f7fb fc60 	bl	8001b3c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800627c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006280:	f7fb fb24 	bl	80018cc <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8006284:	4628      	mov	r0, r5
 8006286:	f7fb fb2b 	bl	80018e0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 30, (uint8_t*)"Prislonite RFID", CENTER_MODE);
 800628a:	f7fb fad3 	bl	8001834 <BSP_LCD_GetYSize>
 800628e:	0840      	lsrs	r0, r0, #1
 8006290:	f100 011e 	add.w	r1, r0, #30
 8006294:	4a0b      	ldr	r2, [pc, #44]	; (80062c4 <Clear_AccesGranted+0x9c>)
 8006296:	2301      	movs	r3, #1
 8006298:	b289      	uxth	r1, r1
 800629a:	2000      	movs	r0, #0
 800629c:	f7fb fe60 	bl	8001f60 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 50, (uint8_t*)"kljucek", CENTER_MODE);
 80062a0:	f7fb fac8 	bl	8001834 <BSP_LCD_GetYSize>
 80062a4:	0840      	lsrs	r0, r0, #1
 80062a6:	f100 0132 	add.w	r1, r0, #50	; 0x32
}
 80062aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 50, (uint8_t*)"kljucek", CENTER_MODE);
 80062ae:	4a06      	ldr	r2, [pc, #24]	; (80062c8 <Clear_AccesGranted+0xa0>)
 80062b0:	2301      	movs	r3, #1
 80062b2:	b289      	uxth	r1, r1
 80062b4:	2000      	movs	r0, #0
 80062b6:	f7fb be53 	b.w	8001f60 <BSP_LCD_DisplayStringAt>
 80062ba:	bf00      	nop
 80062bc:	200000ec 	.word	0x200000ec
 80062c0:	ff0000ff 	.word	0xff0000ff
 80062c4:	0801f273 	.word	0x0801f273
 80062c8:	0801f283 	.word	0x0801f283

080062cc <main>:
{ 
 80062cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d0:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 80062d2:	f7fc fb71 	bl	80029b8 <HAL_Init>
  GPIOB_Init();
 80062d6:	f7ff f807 	bl	80052e8 <GPIOB_Init>
  HAL_GPIO_WritePin(RELAY_PORT, RELAY_IN_PIN, GPIO_PIN_SET);
 80062da:	2110      	movs	r1, #16
 80062dc:	2201      	movs	r2, #1
 80062de:	48c1      	ldr	r0, [pc, #772]	; (80065e4 <main+0x318>)
 80062e0:	f7fc ffc2 	bl	8003268 <HAL_GPIO_WritePin>
  BSP_LED_Init(LED3);
 80062e4:	2000      	movs	r0, #0
 80062e6:	f7fa ff9f 	bl	8001228 <BSP_LED_Init>
  BSP_LED_Init(LED4); 
 80062ea:	2001      	movs	r0, #1
 80062ec:	f7fa ff9c 	bl	8001228 <BSP_LED_Init>
  BSP_LED_Off(LED3);
 80062f0:	2000      	movs	r0, #0
 80062f2:	f7fa ffe1 	bl	80012b8 <BSP_LED_Off>
  BSP_LED_Off(LED4);
 80062f6:	2001      	movs	r0, #1
 80062f8:	f7fa ffde 	bl	80012b8 <BSP_LED_Off>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80062fc:	2400      	movs	r4, #0
 80062fe:	4bba      	ldr	r3, [pc, #744]	; (80065e8 <main+0x31c>)
 8006300:	9403      	str	r4, [sp, #12]
 8006302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006304:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006308:	641a      	str	r2, [r3, #64]	; 0x40
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006310:	9303      	str	r3, [sp, #12]
 8006312:	9b03      	ldr	r3, [sp, #12]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006314:	4bb5      	ldr	r3, [pc, #724]	; (80065ec <main+0x320>)
 8006316:	9404      	str	r4, [sp, #16]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006326:	9304      	str	r3, [sp, #16]
 8006328:	9b04      	ldr	r3, [sp, #16]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800632a:	2601      	movs	r6, #1
 800632c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006330:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006332:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006336:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 360;
 800633a:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800633c:	e9cd 5310 	strd	r5, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8006340:	af0a      	add	r7, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 360;
 8006342:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8006346:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800634a:	4638      	mov	r0, r7
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800634c:	2307      	movs	r3, #7
 800634e:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006350:	9514      	str	r5, [sp, #80]	; 0x50
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8006352:	f7fd fd4b 	bl	8003dec <HAL_RCC_OscConfig>

  /* Activate the Over-Drive mode */
  HAL_PWREx_EnableOverDrive();
 8006356:	f7fd fd0d 	bl	8003d74 <HAL_PWREx_EnableOverDrive>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800635a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800635c:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006360:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8006364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006368:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800636c:	a805      	add	r0, sp, #20
 800636e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006370:	9407      	str	r4, [sp, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8006372:	f7fd ff15 	bl	80041a0 <HAL_RCC_ClockConfig>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8006376:	4631      	mov	r1, r6
 8006378:	4620      	mov	r0, r4
 800637a:	f7fa ffab 	bl	80012d4 <BSP_PB_Init>
  USART_Init(&UartHandle);
 800637e:	489c      	ldr	r0, [pc, #624]	; (80065f0 <main+0x324>)
 8006380:	f7ff fc64 	bl	8005c4c <USART_Init>
  RetargetInit(&UartHandle);
 8006384:	489a      	ldr	r0, [pc, #616]	; (80065f0 <main+0x324>)
 8006386:	f000 fc35 	bl	8006bf4 <RetargetInit>
  printf("\n RFID STM32F429i Discovery \n\n");
 800638a:	489a      	ldr	r0, [pc, #616]	; (80065f4 <main+0x328>)
 800638c:	f001 facc 	bl	8007928 <puts>
  for (byte i = 0; i < 6; i++) {
 8006390:	4a99      	ldr	r2, [pc, #612]	; (80065f8 <main+0x32c>)
  printf("\n RFID STM32F429i Discovery \n\n");
 8006392:	2306      	movs	r3, #6
	  key.keyA[i] = 0xFF;	// keyA is defined in the "MIFARE_Key" 'struct' definition in the .h file of the library
 8006394:	21ff      	movs	r1, #255	; 0xff
 8006396:	f802 1b01 	strb.w	r1, [r2], #1
	  key.keyB[i] = 0xFF;
 800639a:	3b01      	subs	r3, #1
  for (byte i = 0; i < 6; i++) {
 800639c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
	  key.keyB[i] = 0xFF;
 80063a0:	7151      	strb	r1, [r2, #5]
  for (byte i = 0; i < 6; i++) {
 80063a2:	d1f8      	bne.n	8006396 <main+0xca>
  	  new_key.keyA[i] = cKEYA[i];	// keyA is defined in the "MIFARE_Key" 'struct' definition in the .h file of the library
 80063a4:	4a95      	ldr	r2, [pc, #596]	; (80065fc <main+0x330>)
		status = TAG_CheckID(uid.uids, (uint8_t*)RFIDcodes, NRFIDCODES4, 4, &(uid.index));
 80063a6:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 800664c <main+0x380>
  	  new_key.keyB[i] = 0xFF;
 80063aa:	7191      	strb	r1, [r2, #6]
  	  new_key.keyA[i] = cKEYA[i];	// keyA is defined in the "MIFARE_Key" 'struct' definition in the .h file of the library
 80063ac:	205e      	movs	r0, #94	; 0x5e
 80063ae:	7010      	strb	r0, [r2, #0]
 80063b0:	2024      	movs	r0, #36	; 0x24
 80063b2:	7050      	strb	r0, [r2, #1]
 80063b4:	20a6      	movs	r0, #166	; 0xa6
 80063b6:	7090      	strb	r0, [r2, #2]
 80063b8:	2062      	movs	r0, #98	; 0x62
 80063ba:	70d0      	strb	r0, [r2, #3]
 80063bc:	2069      	movs	r0, #105	; 0x69
 80063be:	7110      	strb	r0, [r2, #4]
 80063c0:	20fd      	movs	r0, #253	; 0xfd
  	  new_key.keyB[i] = 0xFF;
 80063c2:	71d1      	strb	r1, [r2, #7]
 80063c4:	7211      	strb	r1, [r2, #8]
 80063c6:	7251      	strb	r1, [r2, #9]
 80063c8:	7291      	strb	r1, [r2, #10]
 80063ca:	72d1      	strb	r1, [r2, #11]
  	  new_key.keyA[i] = cKEYA[i];	// keyA is defined in the "MIFARE_Key" 'struct' definition in the .h file of the library
 80063cc:	7150      	strb	r0, [r2, #5]
  B0.c1bit = ACC_BIT_RESET; B0.c2bit = ACC_BIT_RESET; B0.c3bit = ACC_BIT_RESET;
 80063ce:	4a8c      	ldr	r2, [pc, #560]	; (8006600 <main+0x334>)
					HAL_GPIO_WritePin(RELAY_PORT, RELAY_IN_PIN, GPIO_PIN_RESET);
 80063d0:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80065e4 <main+0x318>
  B0.c1bit = ACC_BIT_RESET; B0.c2bit = ACC_BIT_RESET; B0.c3bit = ACC_BIT_RESET;
 80063d4:	7013      	strb	r3, [r2, #0]
 80063d6:	7053      	strb	r3, [r2, #1]
 80063d8:	7093      	strb	r3, [r2, #2]
  B1.c1bit = ACC_BIT_RESET; B1.c2bit = ACC_BIT_RESET; B1.c3bit = ACC_BIT_RESET;
 80063da:	4a8a      	ldr	r2, [pc, #552]	; (8006604 <main+0x338>)
 80063dc:	7013      	strb	r3, [r2, #0]
 80063de:	7053      	strb	r3, [r2, #1]
 80063e0:	7093      	strb	r3, [r2, #2]
  B2.c1bit = ACC_BIT_RESET; B2.c2bit = ACC_BIT_RESET; B2.c3bit = ACC_BIT_RESET;
 80063e2:	4a89      	ldr	r2, [pc, #548]	; (8006608 <main+0x33c>)
 80063e4:	7013      	strb	r3, [r2, #0]
 80063e6:	7053      	strb	r3, [r2, #1]
 80063e8:	7093      	strb	r3, [r2, #2]
  TB.c1bit = ACC_BIT_RESET; TB.c2bit = ACC_BIT_RESET; TB.c3bit = ACC_BIT_SET;
 80063ea:	4a88      	ldr	r2, [pc, #544]	; (800660c <main+0x340>)
 80063ec:	2401      	movs	r4, #1
 80063ee:	7013      	strb	r3, [r2, #0]
 80063f0:	7053      	strb	r3, [r2, #1]
 80063f2:	7094      	strb	r4, [r2, #2]
  BSP_LCD_Init();
 80063f4:	f7fb fcea 	bl	8001dcc <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 80063f8:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80063fc:	4620      	mov	r0, r4
 80063fe:	f7fb fa21 	bl	8001844 <BSP_LCD_LayerDefaultInit>
  Display_InitContent();
 8006402:	f7ff fe51 	bl	80060a8 <Display_InitContent>
  PCD_Init();
 8006406:	f7ff f8b3 	bl	8005570 <PCD_Init>
		status = TAG_CheckID(uid.uids, (uint8_t*)RFIDcodes, NRFIDCODES4, 4, &(uid.index));
 800640a:	f1a8 0a0d 	sub.w	sl, r8, #13
		  cardPresent = PICC_IsNewCardPresent(); 	// sets successRead to 1 when we get read from reader otherwise 0
 800640e:	4c80      	ldr	r4, [pc, #512]	; (8006610 <main+0x344>)
		  BSP_LED_On(LED3);
 8006410:	2000      	movs	r0, #0
 8006412:	f7fa ff43 	bl	800129c <BSP_LED_On>
		  HAL_Delay(80);
 8006416:	2050      	movs	r0, #80	; 0x50
 8006418:	f7fc fafa 	bl	8002a10 <HAL_Delay>
		  BSP_LED_Off(LED3);
 800641c:	2000      	movs	r0, #0
 800641e:	f7fa ff4b 	bl	80012b8 <BSP_LED_Off>
		  HAL_Delay(80);
 8006422:	2050      	movs	r0, #80	; 0x50
 8006424:	f7fc faf4 	bl	8002a10 <HAL_Delay>
		  cardPresent = PICC_IsNewCardPresent(); 	// sets successRead to 1 when we get read from reader otherwise 0
 8006428:	f7ff fb29 	bl	8005a7e <PICC_IsNewCardPresent>
 800642c:	7020      	strb	r0, [r4, #0]
	  } while (!cardPresent); 	//the program will not go further while you not get a successful read
 800642e:	2800      	cmp	r0, #0
 8006430:	d0ee      	beq.n	8006410 <main+0x144>
	if (PICC_ReadCardSerial(&uid)) {
 8006432:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 8006620 <main+0x354>
	  cardPresent = false;
 8006436:	2300      	movs	r3, #0
	if (PICC_ReadCardSerial(&uid)) {
 8006438:	4658      	mov	r0, fp
	  cardPresent = false;
 800643a:	7023      	strb	r3, [r4, #0]
	if (PICC_ReadCardSerial(&uid)) {
 800643c:	f7ff fb30 	bl	8005aa0 <PICC_ReadCardSerial>
 8006440:	465e      	mov	r6, fp
 8006442:	2300      	movs	r3, #0
 8006444:	2800      	cmp	r0, #0
 8006446:	d0e2      	beq.n	800640e <main+0x142>
		card.uid = &uid;
 8006448:	4972      	ldr	r1, [pc, #456]	; (8006614 <main+0x348>)
	for (i = 0; i<uid->size; i++){
 800644a:	f89b 5000 	ldrb.w	r5, [fp]
		card.uid = &uid;
 800644e:	f8c1 b000 	str.w	fp, [r1]
		uid.index = -1;
 8006452:	4c71      	ldr	r4, [pc, #452]	; (8006618 <main+0x34c>)
 8006454:	21ff      	movs	r1, #255	; 0xff
 8006456:	f88b 100e 	strb.w	r1, [fp, #14]
	for (i = 0; i<uid->size; i++){
 800645a:	42ab      	cmp	r3, r5
 800645c:	f2c0 80ac 	blt.w	80065b8 <main+0x2ec>
		status = TAG_CheckID(uid.uids, (uint8_t*)RFIDcodes, NRFIDCODES4, 4, &(uid.index));
 8006460:	496e      	ldr	r1, [pc, #440]	; (800661c <main+0x350>)
 8006462:	f8cd 8000 	str.w	r8, [sp]
 8006466:	2304      	movs	r3, #4
 8006468:	220d      	movs	r2, #13
 800646a:	4650      	mov	r0, sl
 800646c:	f7ff fb4e 	bl	8005b0c <TAG_CheckID>
		if (status == STATUS_OK){
 8006470:	2801      	cmp	r0, #1
 8006472:	f040 80b3 	bne.w	80065dc <main+0x310>
			status = TAG_ReadMifareClassicSector(&uid, &card, 15, &new_key, AUTH_KEY_A);
 8006476:	2400      	movs	r4, #0
 8006478:	220f      	movs	r2, #15
 800647a:	4b60      	ldr	r3, [pc, #384]	; (80065fc <main+0x330>)
 800647c:	4965      	ldr	r1, [pc, #404]	; (8006614 <main+0x348>)
 800647e:	4868      	ldr	r0, [pc, #416]	; (8006620 <main+0x354>)
 8006480:	9400      	str	r4, [sp, #0]
 8006482:	f7ff fb69 	bl	8005b58 <TAG_ReadMifareClassicSector>
			if (status == STATUS_OK){
 8006486:	2801      	cmp	r0, #1
			status = TAG_ReadMifareClassicSector(&uid, &card, 15, &new_key, AUTH_KEY_A);
 8006488:	4602      	mov	r2, r0
			if (status == STATUS_OK){
 800648a:	f040 80a7 	bne.w	80065dc <main+0x310>
				status = TAG_CheckID(id, &RFIDcodesSize16[0][0], 1, 16, &dummy);
 800648e:	4965      	ldr	r1, [pc, #404]	; (8006624 <main+0x358>)
 8006490:	4865      	ldr	r0, [pc, #404]	; (8006628 <main+0x35c>)
 8006492:	9700      	str	r7, [sp, #0]
 8006494:	2310      	movs	r3, #16
 8006496:	f7ff fb39 	bl	8005b0c <TAG_CheckID>
				if (status == STATUS_OK){
 800649a:	2801      	cmp	r0, #1
				status = TAG_CheckID(id, &RFIDcodesSize16[0][0], 1, 16, &dummy);
 800649c:	4605      	mov	r5, r0
				if (status == STATUS_OK){
 800649e:	f040 8086 	bne.w	80065ae <main+0x2e2>
	BSP_LCD_SetFont(&Font24);
 80064a2:	4862      	ldr	r0, [pc, #392]	; (800662c <main+0x360>)
 80064a4:	f7fb fa26 	bl	80018f4 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 80064a8:	4861      	ldr	r0, [pc, #388]	; (8006630 <main+0x364>)
 80064aa:	f7fb fa0f 	bl	80018cc <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, BSP_LCD_GetYSize()/2 - 85, BSP_LCD_GetXSize(), 90);
 80064ae:	f7fb f9c1 	bl	8001834 <BSP_LCD_GetYSize>
 80064b2:	4606      	mov	r6, r0
 80064b4:	f7fb f9b6 	bl	8001824 <BSP_LCD_GetXSize>
 80064b8:	0871      	lsrs	r1, r6, #1
 80064ba:	3955      	subs	r1, #85	; 0x55
 80064bc:	b282      	uxth	r2, r0
 80064be:	235a      	movs	r3, #90	; 0x5a
 80064c0:	b289      	uxth	r1, r1
 80064c2:	4620      	mov	r0, r4
 80064c4:	f7fb fb3a 	bl	8001b3c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80064c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064cc:	f7fb f9fe 	bl	80018cc <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
 80064d0:	4857      	ldr	r0, [pc, #348]	; (8006630 <main+0x364>)
 80064d2:	f7fb fa05 	bl	80018e0 <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font20);
 80064d6:	4857      	ldr	r0, [pc, #348]	; (8006634 <main+0x368>)
 80064d8:	f7fb fa0c 	bl	80018f4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 85 + 10, (uint8_t*)"Dostop:", CENTER_MODE);
 80064dc:	f7fb f9aa 	bl	8001834 <BSP_LCD_GetYSize>
 80064e0:	0840      	lsrs	r0, r0, #1
 80064e2:	f1a0 014b 	sub.w	r1, r0, #75	; 0x4b
 80064e6:	4a54      	ldr	r2, [pc, #336]	; (8006638 <main+0x36c>)
 80064e8:	462b      	mov	r3, r5
 80064ea:	b289      	uxth	r1, r1
 80064ec:	4620      	mov	r0, r4
 80064ee:	f7fb fd37 	bl	8001f60 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font24);
 80064f2:	484e      	ldr	r0, [pc, #312]	; (800662c <main+0x360>)
 80064f4:	f7fb f9fe 	bl	80018f4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 85 + 30, sNames[uid.index], CENTER_MODE);
 80064f8:	f7fb f99c 	bl	8001834 <BSP_LCD_GetYSize>
 80064fc:	f99b 600e 	ldrsb.w	r6, [fp, #14]
 8006500:	4a4e      	ldr	r2, [pc, #312]	; (800663c <main+0x370>)
 8006502:	0840      	lsrs	r0, r0, #1
 8006504:	f1a0 0137 	sub.w	r1, r0, #55	; 0x37
 8006508:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 800650c:	462b      	mov	r3, r5
 800650e:	b289      	uxth	r1, r1
 8006510:	4620      	mov	r0, r4
 8006512:	f7fb fd25 	bl	8001f60 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 8006516:	484a      	ldr	r0, [pc, #296]	; (8006640 <main+0x374>)
 8006518:	f7fb f9ec 	bl	80018f4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 85 + 60, strUID, CENTER_MODE);
 800651c:	f7fb f98a 	bl	8001834 <BSP_LCD_GetYSize>
 8006520:	0840      	lsrs	r0, r0, #1
 8006522:	f1a0 0119 	sub.w	r1, r0, #25
 8006526:	4a3c      	ldr	r2, [pc, #240]	; (8006618 <main+0x34c>)
 8006528:	462b      	mov	r3, r5
 800652a:	b289      	uxth	r1, r1
 800652c:	4620      	mov	r0, r4
 800652e:	f7fb fd17 	bl	8001f60 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font20);
 8006532:	4840      	ldr	r0, [pc, #256]	; (8006634 <main+0x368>)
 8006534:	f7fb f9de 	bl	80018f4 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8006538:	4842      	ldr	r0, [pc, #264]	; (8006644 <main+0x378>)
 800653a:	f7fb f9c7 	bl	80018cc <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, BSP_LCD_GetYSize()/2 + 15, BSP_LCD_GetXSize(), 60);
 800653e:	f7fb f979 	bl	8001834 <BSP_LCD_GetYSize>
 8006542:	4606      	mov	r6, r0
 8006544:	f7fb f96e 	bl	8001824 <BSP_LCD_GetXSize>
 8006548:	0871      	lsrs	r1, r6, #1
 800654a:	310f      	adds	r1, #15
 800654c:	b282      	uxth	r2, r0
 800654e:	233c      	movs	r3, #60	; 0x3c
 8006550:	b289      	uxth	r1, r1
 8006552:	4620      	mov	r0, r4
 8006554:	f7fb faf2 	bl	8001b3c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8006558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800655c:	f7fb f9b6 	bl	80018cc <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8006560:	4838      	ldr	r0, [pc, #224]	; (8006644 <main+0x378>)
 8006562:	f7fb f9bd 	bl	80018e0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 30, (uint8_t*)"RFID prebran!", CENTER_MODE);
 8006566:	f7fb f965 	bl	8001834 <BSP_LCD_GetYSize>
 800656a:	0840      	lsrs	r0, r0, #1
 800656c:	f100 011e 	add.w	r1, r0, #30
 8006570:	462b      	mov	r3, r5
 8006572:	4a35      	ldr	r2, [pc, #212]	; (8006648 <main+0x37c>)
 8006574:	b289      	uxth	r1, r1
 8006576:	4620      	mov	r0, r4
 8006578:	f7fb fcf2 	bl	8001f60 <BSP_LCD_DisplayStringAt>
					HAL_GPIO_WritePin(RELAY_PORT, RELAY_IN_PIN, GPIO_PIN_RESET);
 800657c:	4622      	mov	r2, r4
 800657e:	2110      	movs	r1, #16
 8006580:	4648      	mov	r0, r9
 8006582:	f7fc fe71 	bl	8003268 <HAL_GPIO_WritePin>
					BSP_LED_On(LED3);
 8006586:	4620      	mov	r0, r4
 8006588:	f7fa fe88 	bl	800129c <BSP_LED_On>
					HAL_Delay(1000);
 800658c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006590:	f7fc fa3e 	bl	8002a10 <HAL_Delay>
					HAL_GPIO_WritePin(RELAY_PORT, RELAY_IN_PIN, GPIO_PIN_SET);
 8006594:	462a      	mov	r2, r5
 8006596:	2110      	movs	r1, #16
 8006598:	4648      	mov	r0, r9
 800659a:	f7fc fe65 	bl	8003268 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 800659e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065a2:	f7fc fa35 	bl	8002a10 <HAL_Delay>
				Clear_AccesGranted();
 80065a6:	f7ff fe3f 	bl	8006228 <Clear_AccesGranted>
				Display_InitContent();
 80065aa:	f7ff fd7d 	bl	80060a8 <Display_InitContent>
		PICC_HaltA();
 80065ae:	f7ff f9e7 	bl	8005980 <PICC_HaltA>
		PCD_StopCrypto1();
 80065b2:	f7ff fa40 	bl	8005a36 <PCD_StopCrypto1>
}
 80065b6:	e72a      	b.n	800640e <main+0x142>
		nibbleH = (uid->uids[i] >> 4) & 0x0F;
 80065b8:	7870      	ldrb	r0, [r6, #1]
		nibbleL = uid->uids[i] & 0x0F;
 80065ba:	f000 020f 	and.w	r2, r0, #15
		nibbleH = (uid->uids[i] >> 4) & 0x0F;
 80065be:	0901      	lsrs	r1, r0, #4
		if (nibbleH < 10) {
 80065c0:	289f      	cmp	r0, #159	; 0x9f
			c1 = nibbleH + 0x30;
 80065c2:	bf94      	ite	ls
 80065c4:	3130      	addls	r1, #48	; 0x30
		else c1 = nibbleH + 0x37;
 80065c6:	3137      	addhi	r1, #55	; 0x37
		if (nibbleL < 10) {
 80065c8:	2a09      	cmp	r2, #9
			c2 = nibbleL + 0x30;
 80065ca:	bf94      	ite	ls
 80065cc:	3230      	addls	r2, #48	; 0x30
		else c2 = nibbleL + 0x37;
 80065ce:	3237      	addhi	r2, #55	; 0x37
		strUID[2*i] = c1;
 80065d0:	7021      	strb	r1, [r4, #0]
		strUID[2*i+1] = c2;
 80065d2:	7062      	strb	r2, [r4, #1]
	for (i = 0; i<uid->size; i++){
 80065d4:	3301      	adds	r3, #1
 80065d6:	3402      	adds	r4, #2
 80065d8:	3601      	adds	r6, #1
 80065da:	e73e      	b.n	800645a <main+0x18e>
				Display_AccesDenied();
 80065dc:	f7ff fdae 	bl	800613c <Display_AccesDenied>
 80065e0:	e7dd      	b.n	800659e <main+0x2d2>
 80065e2:	bf00      	nop
 80065e4:	40020400 	.word	0x40020400
 80065e8:	40023800 	.word	0x40023800
 80065ec:	40007000 	.word	0x40007000
 80065f0:	20000a38 	.word	0x20000a38
 80065f4:	0801f28b 	.word	0x0801f28b
 80065f8:	20000af3 	.word	0x20000af3
 80065fc:	20000a8a 	.word	0x20000a8a
 8006600:	20000a32 	.word	0x20000a32
 8006604:	20000aff 	.word	0x20000aff
 8006608:	20000af0 	.word	0x20000af0
 800660c:	20000a20 	.word	0x20000a20
 8006610:	200004c1 	.word	0x200004c1
 8006614:	2000060c 	.word	0x2000060c
 8006618:	20000a7c 	.word	0x20000a7c
 800661c:	0800c6a0 	.word	0x0800c6a0
 8006620:	20000a23 	.word	0x20000a23
 8006624:	0800c6c4 	.word	0x0800c6c4
 8006628:	200009df 	.word	0x200009df
 800662c:	200000d4 	.word	0x200000d4
 8006630:	ff008000 	.word	0xff008000
 8006634:	200000f4 	.word	0x200000f4
 8006638:	0801f2a9 	.word	0x0801f2a9
 800663c:	2000010c 	.word	0x2000010c
 8006640:	200000ec 	.word	0x200000ec
 8006644:	ff0000ff 	.word	0xff0000ff
 8006648:	0801f265 	.word	0x0801f265
 800664c:	20000a31 	.word	0x20000a31

08006650 <CheckForUserInput>:
  * @brief  Check for user input
  * @param  None
  * @retval Input state (1 : active / 0 : Inactive)
  */
uint8_t CheckForUserInput(void)
{
 8006650:	b508      	push	{r3, lr}
  if(BSP_PB_GetState(BUTTON_KEY) == RESET)
 8006652:	2000      	movs	r0, #0
 8006654:	f7fa fe78 	bl	8001348 <BSP_PB_GetState>
 8006658:	b930      	cbnz	r0, 8006668 <CheckForUserInput+0x18>
  {
    while (BSP_PB_GetState(BUTTON_KEY) == RESET);
 800665a:	2000      	movs	r0, #0
 800665c:	f7fa fe74 	bl	8001348 <BSP_PB_GetState>
 8006660:	2800      	cmp	r0, #0
 8006662:	d0fa      	beq.n	800665a <CheckForUserInput+0xa>
    return 1;
 8006664:	2001      	movs	r0, #1
  }
  return 0;
}
 8006666:	bd08      	pop	{r3, pc}
  return 0;
 8006668:	2000      	movs	r0, #0
 800666a:	e7fc      	b.n	8006666 <CheckForUserInput+0x16>

0800666c <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 if (GPIO_Pin == KEY_BUTTON_PIN)
 800666c:	2801      	cmp	r0, #1
 {
   ubKeyPressed = SET;
 800666e:	bf04      	itt	eq
 8006670:	4b01      	ldreq	r3, [pc, #4]	; (8006678 <HAL_GPIO_EXTI_Callback+0xc>)
 8006672:	7098      	strbeq	r0, [r3, #2]
 }
}
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	200004c1 	.word	0x200004c1

0800667c <Gyroscope_DrawBackground>:
  * @param  Localstate: Touch zone state
  * @retval None
  */
static void Gyroscope_DrawBackground (uint8_t Localstate)
{
  switch(Localstate)
 800667c:	2810      	cmp	r0, #16
{
 800667e:	b510      	push	{r4, lr}
  switch(Localstate)
 8006680:	d814      	bhi.n	80066ac <Gyroscope_DrawBackground+0x30>
 8006682:	2810      	cmp	r0, #16
 8006684:	d815      	bhi.n	80066b2 <Gyroscope_DrawBackground+0x36>
 8006686:	e8df f010 	tbh	[pc, r0, lsl #1]
 800668a:	0015      	.short	0x0015
 800668c:	00a70085 	.word	0x00a70085
 8006690:	00c60014 	.word	0x00c60014
 8006694:	00140014 	.word	0x00140014
 8006698:	00e60014 	.word	0x00e60014
 800669c:	00140014 	.word	0x00140014
 80066a0:	00140014 	.word	0x00140014
 80066a4:	00140014 	.word	0x00140014
 80066a8:	01090014 	.word	0x01090014
 80066ac:	2820      	cmp	r0, #32
 80066ae:	f000 8115 	beq.w	80068dc <Gyroscope_DrawBackground+0x260>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
    BSP_LCD_SetBackColor(LCD_COLOR_ORANGE);
    BSP_LCD_DisplayStringAt(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, (uint8_t*)"Z+", LEFT_MODE);
    break;
  }
}
 80066b2:	bd10      	pop	{r4, pc}
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 80066b4:	489a      	ldr	r0, [pc, #616]	; (8006920 <Gyroscope_DrawBackground+0x2a4>)
 80066b6:	f7fb f909 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_LEFT_X_POS, CIRCLE_LEFT_Y_POS, CIRCLE_RADIUS);
 80066ba:	f7fb f8b3 	bl	8001824 <BSP_LCD_GetXSize>
 80066be:	2405      	movs	r4, #5
 80066c0:	221e      	movs	r2, #30
 80066c2:	21c8      	movs	r1, #200	; 0xc8
 80066c4:	fbb0 f0f4 	udiv	r0, r0, r4
 80066c8:	b280      	uxth	r0, r0
 80066ca:	f7fb fea1 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 80066ce:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80066d2:	f7fb f8fb 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_RIGHT_X_POS, CIRCLE_RIGHT_Y_POS, CIRCLE_RADIUS);
 80066d6:	f7fb f8a5 	bl	8001824 <BSP_LCD_GetXSize>
 80066da:	fbb0 f0f4 	udiv	r0, r0, r4
 80066de:	0080      	lsls	r0, r0, #2
 80066e0:	221e      	movs	r2, #30
 80066e2:	21c8      	movs	r1, #200	; 0xc8
 80066e4:	b280      	uxth	r0, r0
 80066e6:	f7fb fe93 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 80066ea:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80066ee:	f7fb f8ed 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_UP_X_POS, CIRCLE_UP_Y_POS, CIRCLE_RADIUS);
 80066f2:	f7fb f897 	bl	8001824 <BSP_LCD_GetXSize>
 80066f6:	221e      	movs	r2, #30
 80066f8:	2182      	movs	r1, #130	; 0x82
 80066fa:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80066fe:	f7fb fe87 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8006702:	4888      	ldr	r0, [pc, #544]	; (8006924 <Gyroscope_DrawBackground+0x2a8>)
 8006704:	f7fb f8e2 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_DOWN_X_POS, CIRCLE_DOWN_Y_POS, CIRCLE_RADIUS);
 8006708:	f7fb f88c 	bl	8001824 <BSP_LCD_GetXSize>
 800670c:	221e      	movs	r2, #30
 800670e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8006712:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8006716:	f7fb fe7b 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_ORANGE); 
 800671a:	4883      	ldr	r0, [pc, #524]	; (8006928 <Gyroscope_DrawBackground+0x2ac>)
 800671c:	f7fb f8d6 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS);
 8006720:	f7fb f880 	bl	8001824 <BSP_LCD_GetXSize>
 8006724:	221e      	movs	r2, #30
 8006726:	21c8      	movs	r1, #200	; 0xc8
 8006728:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800672c:	f7fb fe70 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8006730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006734:	f7fb f8ca 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_LEFT_X_POS, CIRCLE_LEFT_Y_POS, CIRCLE_RADIUS - 2);        
 8006738:	f7fb f874 	bl	8001824 <BSP_LCD_GetXSize>
 800673c:	221c      	movs	r2, #28
 800673e:	21c8      	movs	r1, #200	; 0xc8
 8006740:	fbb0 f0f4 	udiv	r0, r0, r4
 8006744:	b280      	uxth	r0, r0
 8006746:	f7fb fe63 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_RIGHT_X_POS, CIRCLE_RIGHT_Y_POS,  CIRCLE_RADIUS - 2); 
 800674a:	f7fb f86b 	bl	8001824 <BSP_LCD_GetXSize>
 800674e:	fbb0 f0f4 	udiv	r0, r0, r4
 8006752:	0080      	lsls	r0, r0, #2
 8006754:	221c      	movs	r2, #28
 8006756:	21c8      	movs	r1, #200	; 0xc8
 8006758:	b280      	uxth	r0, r0
 800675a:	f7fb fe59 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_UP_X_POS, CIRCLE_UP_Y_POS, CIRCLE_RADIUS - 2);
 800675e:	f7fb f861 	bl	8001824 <BSP_LCD_GetXSize>
 8006762:	221c      	movs	r2, #28
 8006764:	2182      	movs	r1, #130	; 0x82
 8006766:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800676a:	f7fb fe51 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_DOWN_X_POS, CIRCLE_DOWN_Y_POS, CIRCLE_RADIUS - 2);
 800676e:	f7fb f859 	bl	8001824 <BSP_LCD_GetXSize>
 8006772:	221c      	movs	r2, #28
 8006774:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8006778:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800677c:	f7fb fe48 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS - 2);
 8006780:	f7fb f850 	bl	8001824 <BSP_LCD_GetXSize>
}
 8006784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS - 2);
 8006788:	221c      	movs	r2, #28
 800678a:	21c8      	movs	r1, #200	; 0xc8
 800678c:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8006790:	f7fb be3e 	b.w	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8006794:	4863      	ldr	r0, [pc, #396]	; (8006924 <Gyroscope_DrawBackground+0x2a8>)
 8006796:	f7fb f899 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_DOWN_X_POS, CIRCLE_DOWN_Y_POS, CIRCLE_RADIUS);
 800679a:	f7fb f843 	bl	8001824 <BSP_LCD_GetXSize>
 800679e:	221e      	movs	r2, #30
 80067a0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80067a4:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80067a8:	f7fb fe32 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font24);
 80067ac:	485f      	ldr	r0, [pc, #380]	; (800692c <Gyroscope_DrawBackground+0x2b0>)
 80067ae:	f7fb f8a1 	bl	80018f4 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80067b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067b6:	f7fb f889 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80067ba:	485a      	ldr	r0, [pc, #360]	; (8006924 <Gyroscope_DrawBackground+0x2a8>)
 80067bc:	f7fb f890 	bl	80018e0 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_DOWN_X_POS-(CIRCLE_RADIUS/2), CIRCLE_DOWN_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"X+",LEFT_MODE);
 80067c0:	f7fb f830 	bl	8001824 <BSP_LCD_GetXSize>
 80067c4:	4a5a      	ldr	r2, [pc, #360]	; (8006930 <Gyroscope_DrawBackground+0x2b4>)
 80067c6:	0840      	lsrs	r0, r0, #1
 80067c8:	380f      	subs	r0, #15
 80067ca:	2303      	movs	r3, #3
 80067cc:	21ff      	movs	r1, #255	; 0xff
    BSP_LCD_DisplayStringAt(CIRCLE_UP_X_POS-(CIRCLE_RADIUS/2), CIRCLE_UP_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"X-", LEFT_MODE);
 80067ce:	b280      	uxth	r0, r0
}
 80067d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    BSP_LCD_DisplayStringAt(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, (uint8_t*)"Z+", LEFT_MODE);
 80067d4:	f7fb bbc4 	b.w	8001f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 80067d8:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80067dc:	f7fb f876 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_UP_X_POS, CIRCLE_UP_Y_POS, CIRCLE_RADIUS);
 80067e0:	f7fb f820 	bl	8001824 <BSP_LCD_GetXSize>
 80067e4:	221e      	movs	r2, #30
 80067e6:	2182      	movs	r1, #130	; 0x82
 80067e8:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80067ec:	f7fb fe10 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font24);
 80067f0:	484e      	ldr	r0, [pc, #312]	; (800692c <Gyroscope_DrawBackground+0x2b0>)
 80067f2:	f7fb f87f 	bl	80018f4 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80067f6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80067fa:	f7fb f867 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_YELLOW);
 80067fe:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8006802:	f7fb f86d 	bl	80018e0 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_UP_X_POS-(CIRCLE_RADIUS/2), CIRCLE_UP_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"X-", LEFT_MODE);
 8006806:	f7fb f80d 	bl	8001824 <BSP_LCD_GetXSize>
 800680a:	0840      	lsrs	r0, r0, #1
 800680c:	4a49      	ldr	r2, [pc, #292]	; (8006934 <Gyroscope_DrawBackground+0x2b8>)
 800680e:	380f      	subs	r0, #15
 8006810:	2303      	movs	r3, #3
 8006812:	2173      	movs	r1, #115	; 0x73
 8006814:	e7db      	b.n	80067ce <Gyroscope_DrawBackground+0x152>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8006816:	4842      	ldr	r0, [pc, #264]	; (8006920 <Gyroscope_DrawBackground+0x2a4>)
 8006818:	f7fb f858 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_LEFT_X_POS, CIRCLE_LEFT_Y_POS, CIRCLE_RADIUS);
 800681c:	f7fb f802 	bl	8001824 <BSP_LCD_GetXSize>
 8006820:	2405      	movs	r4, #5
 8006822:	221e      	movs	r2, #30
 8006824:	21c8      	movs	r1, #200	; 0xc8
 8006826:	fbb0 f0f4 	udiv	r0, r0, r4
 800682a:	b280      	uxth	r0, r0
 800682c:	f7fb fdf0 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font24);
 8006830:	483e      	ldr	r0, [pc, #248]	; (800692c <Gyroscope_DrawBackground+0x2b0>)
 8006832:	f7fb f85f 	bl	80018f4 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8006836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800683a:	f7fb f847 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800683e:	4838      	ldr	r0, [pc, #224]	; (8006920 <Gyroscope_DrawBackground+0x2a4>)
 8006840:	f7fb f84e 	bl	80018e0 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_LEFT_X_POS-(CIRCLE_RADIUS/2), CIRCLE_LEFT_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"Y-", LEFT_MODE);
 8006844:	f7fa ffee 	bl	8001824 <BSP_LCD_GetXSize>
 8006848:	4a3b      	ldr	r2, [pc, #236]	; (8006938 <Gyroscope_DrawBackground+0x2bc>)
 800684a:	fbb0 f0f4 	udiv	r0, r0, r4
 800684e:	2303      	movs	r3, #3
 8006850:	380f      	subs	r0, #15
    BSP_LCD_DisplayStringAt(CIRCLE_RIGHT_X_POS-(CIRCLE_RADIUS/2), CIRCLE_RIGHT_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"Y+", LEFT_MODE);
 8006852:	21b9      	movs	r1, #185	; 0xb9
 8006854:	e7bb      	b.n	80067ce <Gyroscope_DrawBackground+0x152>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 8006856:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800685a:	f7fb f837 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_RIGHT_X_POS, CIRCLE_RIGHT_Y_POS, CIRCLE_RADIUS);
 800685e:	f7fa ffe1 	bl	8001824 <BSP_LCD_GetXSize>
 8006862:	2405      	movs	r4, #5
 8006864:	fbb0 f0f4 	udiv	r0, r0, r4
 8006868:	0080      	lsls	r0, r0, #2
 800686a:	221e      	movs	r2, #30
 800686c:	21c8      	movs	r1, #200	; 0xc8
 800686e:	b280      	uxth	r0, r0
 8006870:	f7fb fdce 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font24);
 8006874:	482d      	ldr	r0, [pc, #180]	; (800692c <Gyroscope_DrawBackground+0x2b0>)
 8006876:	f7fb f83d 	bl	80018f4 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800687a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800687e:	f7fb f825 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8006882:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8006886:	f7fb f82b 	bl	80018e0 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_RIGHT_X_POS-(CIRCLE_RADIUS/2), CIRCLE_RIGHT_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"Y+", LEFT_MODE);
 800688a:	f7fa ffcb 	bl	8001824 <BSP_LCD_GetXSize>
 800688e:	fbb0 f0f4 	udiv	r0, r0, r4
 8006892:	0080      	lsls	r0, r0, #2
 8006894:	4a29      	ldr	r2, [pc, #164]	; (800693c <Gyroscope_DrawBackground+0x2c0>)
 8006896:	380f      	subs	r0, #15
 8006898:	2303      	movs	r3, #3
 800689a:	e7da      	b.n	8006852 <Gyroscope_DrawBackground+0x1d6>
    if((state & 32) == 0)
 800689c:	4b28      	ldr	r3, [pc, #160]	; (8006940 <Gyroscope_DrawBackground+0x2c4>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	069a      	lsls	r2, r3, #26
 80068a2:	d40a      	bmi.n	80068ba <Gyroscope_DrawBackground+0x23e>
      BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 80068a4:	4820      	ldr	r0, [pc, #128]	; (8006928 <Gyroscope_DrawBackground+0x2ac>)
 80068a6:	f7fb f811 	bl	80018cc <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS);
 80068aa:	f7fa ffbb 	bl	8001824 <BSP_LCD_GetXSize>
 80068ae:	221e      	movs	r2, #30
 80068b0:	21c8      	movs	r1, #200	; 0xc8
 80068b2:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80068b6:	f7fb fdab 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font16);
 80068ba:	4822      	ldr	r0, [pc, #136]	; (8006944 <Gyroscope_DrawBackground+0x2c8>)
 80068bc:	f7fb f81a 	bl	80018f4 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80068c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068c4:	f7fb f802 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_ORANGE);
 80068c8:	4817      	ldr	r0, [pc, #92]	; (8006928 <Gyroscope_DrawBackground+0x2ac>)
 80068ca:	f7fb f809 	bl	80018e0 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_CENTRAL_X_POS-(CIRCLE_RADIUS/2), CIRCLE_CENTRAL_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"Z-", LEFT_MODE);
 80068ce:	f7fa ffa9 	bl	8001824 <BSP_LCD_GetXSize>
 80068d2:	0840      	lsrs	r0, r0, #1
 80068d4:	4a1c      	ldr	r2, [pc, #112]	; (8006948 <Gyroscope_DrawBackground+0x2cc>)
 80068d6:	380f      	subs	r0, #15
 80068d8:	2303      	movs	r3, #3
 80068da:	e7ba      	b.n	8006852 <Gyroscope_DrawBackground+0x1d6>
    if((state & 16) == 0)
 80068dc:	4b18      	ldr	r3, [pc, #96]	; (8006940 <Gyroscope_DrawBackground+0x2c4>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	06db      	lsls	r3, r3, #27
 80068e2:	d40a      	bmi.n	80068fa <Gyroscope_DrawBackground+0x27e>
      BSP_LCD_SetTextColor(LCD_COLOR_ORANGE); 
 80068e4:	4810      	ldr	r0, [pc, #64]	; (8006928 <Gyroscope_DrawBackground+0x2ac>)
 80068e6:	f7fa fff1 	bl	80018cc <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS);
 80068ea:	f7fa ff9b 	bl	8001824 <BSP_LCD_GetXSize>
 80068ee:	221e      	movs	r2, #30
 80068f0:	21c8      	movs	r1, #200	; 0xc8
 80068f2:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80068f6:	f7fb fd8b 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font16);
 80068fa:	4812      	ldr	r0, [pc, #72]	; (8006944 <Gyroscope_DrawBackground+0x2c8>)
 80068fc:	f7fa fffa 	bl	80018f4 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8006900:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8006904:	f7fa ffe2 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_ORANGE);
 8006908:	4807      	ldr	r0, [pc, #28]	; (8006928 <Gyroscope_DrawBackground+0x2ac>)
 800690a:	f7fa ffe9 	bl	80018e0 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, (uint8_t*)"Z+", LEFT_MODE);
 800690e:	f7fa ff89 	bl	8001824 <BSP_LCD_GetXSize>
 8006912:	4a0e      	ldr	r2, [pc, #56]	; (800694c <Gyroscope_DrawBackground+0x2d0>)
 8006914:	2303      	movs	r3, #3
 8006916:	21c8      	movs	r1, #200	; 0xc8
 8006918:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800691c:	e758      	b.n	80067d0 <Gyroscope_DrawBackground+0x154>
 800691e:	bf00      	nop
 8006920:	ff0000ff 	.word	0xff0000ff
 8006924:	ffff0000 	.word	0xffff0000
 8006928:	ffffa500 	.word	0xffffa500
 800692c:	200000d4 	.word	0x200000d4
 8006930:	0801f2fa 	.word	0x0801f2fa
 8006934:	0801f2fd 	.word	0x0801f2fd
 8006938:	0801f300 	.word	0x0801f300
 800693c:	0801f303 	.word	0x0801f303
 8006940:	200004c8 	.word	0x200004c8
 8006944:	200000ec 	.word	0x200000ec
 8006948:	0801f306 	.word	0x0801f306
 800694c:	0801f309 	.word	0x0801f309

08006950 <MEMS_demo>:
{
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8006952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006956:	f7fa ffd7 	bl	8001908 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800695a:	4896      	ldr	r0, [pc, #600]	; (8006bb4 <MEMS_demo+0x264>)
 800695c:	f7fa ffb6 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8006960:	f7fa ff60 	bl	8001824 <BSP_LCD_GetXSize>
 8006964:	2100      	movs	r1, #0
 8006966:	b282      	uxth	r2, r0
 8006968:	2350      	movs	r3, #80	; 0x50
 800696a:	4608      	mov	r0, r1
 800696c:	f7fb f8e6 	bl	8001b3c <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8006970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006974:	f7fa ffaa 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 8006978:	488e      	ldr	r0, [pc, #568]	; (8006bb4 <MEMS_demo+0x264>)
 800697a:	f7fa ffb1 	bl	80018e0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800697e:	488e      	ldr	r0, [pc, #568]	; (8006bb8 <MEMS_demo+0x268>)
 8006980:	f7fa ffb8 	bl	80018f4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"MEMS", CENTER_MODE);
 8006984:	2100      	movs	r1, #0
 8006986:	4608      	mov	r0, r1
 8006988:	4a8c      	ldr	r2, [pc, #560]	; (8006bbc <MEMS_demo+0x26c>)
 800698a:	2301      	movs	r3, #1
 800698c:	f7fb fae8 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8006990:	488b      	ldr	r0, [pc, #556]	; (8006bc0 <MEMS_demo+0x270>)
 8006992:	f7fa ffaf 	bl	80018f4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"This example shows MEMS Features", CENTER_MODE);
 8006996:	4a8b      	ldr	r2, [pc, #556]	; (8006bc4 <MEMS_demo+0x274>)
 8006998:	2301      	movs	r3, #1
 800699a:	211e      	movs	r1, #30
 800699c:	2000      	movs	r0, #0
 800699e:	f7fb fadf 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t*)"move board around axis", CENTER_MODE);
 80069a2:	4a89      	ldr	r2, [pc, #548]	; (8006bc8 <MEMS_demo+0x278>)
 80069a4:	2301      	movs	r3, #1
 80069a6:	212d      	movs	r1, #45	; 0x2d
 80069a8:	2000      	movs	r0, #0
 80069aa:	f7fb fad9 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"to start test", CENTER_MODE);
 80069ae:	4a87      	ldr	r2, [pc, #540]	; (8006bcc <MEMS_demo+0x27c>)
 80069b0:	2301      	movs	r3, #1
 80069b2:	213c      	movs	r1, #60	; 0x3c
 80069b4:	2000      	movs	r0, #0
 80069b6:	f7fb fad3 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);  
 80069ba:	487e      	ldr	r0, [pc, #504]	; (8006bb4 <MEMS_demo+0x264>)
 80069bc:	f7fa ff86 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize()- 100);
 80069c0:	f7fa ff30 	bl	8001824 <BSP_LCD_GetXSize>
 80069c4:	4604      	mov	r4, r0
 80069c6:	f7fa ff35 	bl	8001834 <BSP_LCD_GetYSize>
 80069ca:	f1a4 0214 	sub.w	r2, r4, #20
 80069ce:	3864      	subs	r0, #100	; 0x64
 80069d0:	b283      	uxth	r3, r0
 80069d2:	b292      	uxth	r2, r2
 80069d4:	215a      	movs	r1, #90	; 0x5a
 80069d6:	200a      	movs	r0, #10
 80069d8:	f7fb f80a 	bl	80019f0 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102);
 80069dc:	f7fa ff22 	bl	8001824 <BSP_LCD_GetXSize>
 80069e0:	4604      	mov	r4, r0
 80069e2:	f7fa ff27 	bl	8001834 <BSP_LCD_GetYSize>
 80069e6:	f1a4 0216 	sub.w	r2, r4, #22
 80069ea:	3866      	subs	r0, #102	; 0x66
 80069ec:	b283      	uxth	r3, r0
 80069ee:	b292      	uxth	r2, r2
 80069f0:	215b      	movs	r1, #91	; 0x5b
 80069f2:	200b      	movs	r0, #11
 80069f4:	f7fa fffc 	bl	80019f0 <BSP_LCD_DrawRect>
  if (BSP_GYRO_Init() != GYRO_OK)
 80069f8:	f7fa fe7c 	bl	80016f4 <BSP_GYRO_Init>
 80069fc:	4c74      	ldr	r4, [pc, #464]	; (8006bd0 <MEMS_demo+0x280>)
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d070      	beq.n	8006ae4 <MEMS_demo+0x194>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 8006a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a06:	f7fa ff6b 	bl	80018e0 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8006a0a:	4872      	ldr	r0, [pc, #456]	; (8006bd4 <MEMS_demo+0x284>)
 8006a0c:	f7fa ff5e 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 8006a10:	f7fa ff10 	bl	8001834 <BSP_LCD_GetYSize>
 8006a14:	385f      	subs	r0, #95	; 0x5f
 8006a16:	b281      	uxth	r1, r0
 8006a18:	4a6f      	ldr	r2, [pc, #444]	; (8006bd8 <MEMS_demo+0x288>)
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	f7fb fa9f 	bl	8001f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"MEMS cannot be initialized", CENTER_MODE);
 8006a22:	f7fa ff07 	bl	8001834 <BSP_LCD_GetYSize>
 8006a26:	3850      	subs	r0, #80	; 0x50
 8006a28:	b281      	uxth	r1, r0
 8006a2a:	4a6c      	ldr	r2, [pc, #432]	; (8006bdc <MEMS_demo+0x28c>)
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	2000      	movs	r0, #0
 8006a30:	f7fb fa96 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  BSP_GYRO_Reset();
 8006a34:	f7fa fe80 	bl	8001738 <BSP_GYRO_Reset>
    BSP_GYRO_GetXYZ(Buffer);
 8006a38:	4d69      	ldr	r5, [pc, #420]	; (8006be0 <MEMS_demo+0x290>)
    Xval = ABS((Buffer[0]));
 8006a3a:	4e6a      	ldr	r6, [pc, #424]	; (8006be4 <MEMS_demo+0x294>)
    Yval = ABS((Buffer[1])); 
 8006a3c:	4f6a      	ldr	r7, [pc, #424]	; (8006be8 <MEMS_demo+0x298>)
    BSP_GYRO_GetXYZ(Buffer);
 8006a3e:	4868      	ldr	r0, [pc, #416]	; (8006be0 <MEMS_demo+0x290>)
 8006a40:	f7fa fe82 	bl	8001748 <BSP_GYRO_GetXYZ>
    Xval = ABS((Buffer[0]));
 8006a44:	ed95 5a00 	vldr	s10, [r5]
    Yval = ABS((Buffer[1])); 
 8006a48:	edd5 5a01 	vldr	s11, [r5, #4]
    Zval = ABS((Buffer[2])); 
 8006a4c:	ed95 6a02 	vldr	s12, [r5, #8]
 8006a50:	7823      	ldrb	r3, [r4, #0]
    Xval = ABS((Buffer[0]));
 8006a52:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8006a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Yval = ABS((Buffer[1])); 
 8006a5a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
    Xval = ABS((Buffer[0]));
 8006a5e:	bf4c      	ite	mi
 8006a60:	eef1 6a45 	vnegmi.f32	s13, s10
 8006a64:	eef0 6a45 	vmovpl.f32	s13, s10
    Yval = ABS((Buffer[1])); 
 8006a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6c:	bf4c      	ite	mi
 8006a6e:	eeb1 7a65 	vnegmi.f32	s14, s11
 8006a72:	eeb0 7a65 	vmovpl.f32	s14, s11
    Zval = ABS((Buffer[2])); 
 8006a76:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8006a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if((Xval>Yval) && (Xval>Zval))
 8006a7e:	eef4 6ac7 	vcmpe.f32	s13, s14
    Zval = ABS((Buffer[2])); 
 8006a82:	bf4c      	ite	mi
 8006a84:	eef1 7a46 	vnegmi.f32	s15, s12
 8006a88:	eef0 7a46 	vmovpl.f32	s15, s12
    if((Xval>Yval) && (Xval>Zval))
 8006a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Xval = ABS((Buffer[0]));
 8006a90:	edc6 6a00 	vstr	s13, [r6]
    Yval = ABS((Buffer[1])); 
 8006a94:	ed87 7a00 	vstr	s14, [r7]
    Zval = ABS((Buffer[2])); 
 8006a98:	edc4 7a01 	vstr	s15, [r4, #4]
    if((Xval>Yval) && (Xval>Zval))
 8006a9c:	dd36      	ble.n	8006b0c <MEMS_demo+0x1bc>
 8006a9e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8006aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa6:	dd31      	ble.n	8006b0c <MEMS_demo+0x1bc>
      if(Buffer[0] > 10000.0f)
 8006aa8:	eddf 7a50 	vldr	s15, [pc, #320]	; 8006bec <MEMS_demo+0x29c>
 8006aac:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8006ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab4:	dd1a      	ble.n	8006aec <MEMS_demo+0x19c>
        if((state & 1) == 0)
 8006ab6:	07da      	lsls	r2, r3, #31
 8006ab8:	d40a      	bmi.n	8006ad0 <MEMS_demo+0x180>
          Gyroscope_DrawBackground(1);			
 8006aba:	2001      	movs	r0, #1
 8006abc:	f7ff fdde 	bl	800667c <Gyroscope_DrawBackground>
          state |= 1;
 8006ac0:	7823      	ldrb	r3, [r4, #0]
 8006ac2:	f043 0301 	orr.w	r3, r3, #1
          HAL_Delay(1000);			
 8006ac6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
          state |= 32;
 8006aca:	7023      	strb	r3, [r4, #0]
          HAL_Delay(1000);			
 8006acc:	f7fb ffa0 	bl	8002a10 <HAL_Delay>
    if (state != 0x3F)	
 8006ad0:	7823      	ldrb	r3, [r4, #0]
 8006ad2:	2b3f      	cmp	r3, #63	; 0x3f
 8006ad4:	d1b3      	bne.n	8006a3e <MEMS_demo+0xee>
    else if (CheckForUserInput() > 0)
 8006ad6:	f7ff fdbb 	bl	8006650 <CheckForUserInput>
 8006ada:	2800      	cmp	r0, #0
 8006adc:	d0af      	beq.n	8006a3e <MEMS_demo+0xee>
      state = 0;    
 8006ade:	2300      	movs	r3, #0
 8006ae0:	7023      	strb	r3, [r4, #0]
}
 8006ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Gyroscope_DrawBackground(state);
 8006ae4:	7820      	ldrb	r0, [r4, #0]
 8006ae6:	f7ff fdc9 	bl	800667c <Gyroscope_DrawBackground>
 8006aea:	e7a3      	b.n	8006a34 <MEMS_demo+0xe4>
      else if(Buffer[0] < -10000.0f)
 8006aec:	eddf 7a40 	vldr	s15, [pc, #256]	; 8006bf0 <MEMS_demo+0x2a0>
 8006af0:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8006af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af8:	d5ea      	bpl.n	8006ad0 <MEMS_demo+0x180>
        if((state & 2) == 0)
 8006afa:	079b      	lsls	r3, r3, #30
 8006afc:	d4e8      	bmi.n	8006ad0 <MEMS_demo+0x180>
          Gyroscope_DrawBackground(2);            
 8006afe:	2002      	movs	r0, #2
 8006b00:	f7ff fdbc 	bl	800667c <Gyroscope_DrawBackground>
          state |= 2;
 8006b04:	7823      	ldrb	r3, [r4, #0]
 8006b06:	f043 0302 	orr.w	r3, r3, #2
 8006b0a:	e7dc      	b.n	8006ac6 <MEMS_demo+0x176>
    else if ((Yval>Xval) && (Yval>Zval))
 8006b0c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b14:	d524      	bpl.n	8006b60 <MEMS_demo+0x210>
 8006b16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b1e:	dd1f      	ble.n	8006b60 <MEMS_demo+0x210>
      if(Buffer[1] < -10000.0f)
 8006b20:	eddf 7a33 	vldr	s15, [pc, #204]	; 8006bf0 <MEMS_demo+0x2a0>
 8006b24:	eef4 5ae7 	vcmpe.f32	s11, s15
 8006b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b2c:	d508      	bpl.n	8006b40 <MEMS_demo+0x1f0>
        if((state & 4) == 0)
 8006b2e:	0758      	lsls	r0, r3, #29
 8006b30:	d4ce      	bmi.n	8006ad0 <MEMS_demo+0x180>
          Gyroscope_DrawBackground(4);            
 8006b32:	2004      	movs	r0, #4
 8006b34:	f7ff fda2 	bl	800667c <Gyroscope_DrawBackground>
          state |= 4;
 8006b38:	7823      	ldrb	r3, [r4, #0]
 8006b3a:	f043 0304 	orr.w	r3, r3, #4
 8006b3e:	e7c2      	b.n	8006ac6 <MEMS_demo+0x176>
      else if(Buffer[1] > 10000.0f)
 8006b40:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8006bec <MEMS_demo+0x29c>
 8006b44:	eef4 5ae7 	vcmpe.f32	s11, s15
 8006b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4c:	ddc0      	ble.n	8006ad0 <MEMS_demo+0x180>
        if((state & 8) == 0)
 8006b4e:	0719      	lsls	r1, r3, #28
 8006b50:	d4be      	bmi.n	8006ad0 <MEMS_demo+0x180>
          Gyroscope_DrawBackground(8);            
 8006b52:	2008      	movs	r0, #8
 8006b54:	f7ff fd92 	bl	800667c <Gyroscope_DrawBackground>
          state |= 8;
 8006b58:	7823      	ldrb	r3, [r4, #0]
 8006b5a:	f043 0308 	orr.w	r3, r3, #8
 8006b5e:	e7b2      	b.n	8006ac6 <MEMS_demo+0x176>
    else if ((Zval>Xval) && (Zval>Yval))
 8006b60:	eef4 6ae7 	vcmpe.f32	s13, s15
 8006b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b68:	d5b2      	bpl.n	8006ad0 <MEMS_demo+0x180>
 8006b6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b72:	d5ad      	bpl.n	8006ad0 <MEMS_demo+0x180>
      if(Buffer[2] < -10000.0f)
 8006b74:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8006bf0 <MEMS_demo+0x2a0>
 8006b78:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8006b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b80:	d508      	bpl.n	8006b94 <MEMS_demo+0x244>
        if((state & 16) == 0)
 8006b82:	06da      	lsls	r2, r3, #27
 8006b84:	d4a4      	bmi.n	8006ad0 <MEMS_demo+0x180>
          Gyroscope_DrawBackground(16);            
 8006b86:	2010      	movs	r0, #16
 8006b88:	f7ff fd78 	bl	800667c <Gyroscope_DrawBackground>
          state |= 16;
 8006b8c:	7823      	ldrb	r3, [r4, #0]
 8006b8e:	f043 0310 	orr.w	r3, r3, #16
 8006b92:	e798      	b.n	8006ac6 <MEMS_demo+0x176>
      else if(Buffer[2] > 10000.0f)
 8006b94:	eddf 7a15 	vldr	s15, [pc, #84]	; 8006bec <MEMS_demo+0x29c>
 8006b98:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8006b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba0:	dd96      	ble.n	8006ad0 <MEMS_demo+0x180>
        if((state & 32) == 0)
 8006ba2:	069b      	lsls	r3, r3, #26
 8006ba4:	d494      	bmi.n	8006ad0 <MEMS_demo+0x180>
          Gyroscope_DrawBackground(32);            
 8006ba6:	2020      	movs	r0, #32
 8006ba8:	f7ff fd68 	bl	800667c <Gyroscope_DrawBackground>
          state |= 32;
 8006bac:	7823      	ldrb	r3, [r4, #0]
 8006bae:	f043 0320 	orr.w	r3, r3, #32
 8006bb2:	e788      	b.n	8006ac6 <MEMS_demo+0x176>
 8006bb4:	ff0000ff 	.word	0xff0000ff
 8006bb8:	200000d4 	.word	0x200000d4
 8006bbc:	0801f30c 	.word	0x0801f30c
 8006bc0:	200000e4 	.word	0x200000e4
 8006bc4:	0801f311 	.word	0x0801f311
 8006bc8:	0801f332 	.word	0x0801f332
 8006bcc:	0801f349 	.word	0x0801f349
 8006bd0:	200004c8 	.word	0x200004c8
 8006bd4:	ffff0000 	.word	0xffff0000
 8006bd8:	0801f357 	.word	0x0801f357
 8006bdc:	0801f35d 	.word	0x0801f35d
 8006be0:	20000b0c 	.word	0x20000b0c
 8006be4:	20000b08 	.word	0x20000b08
 8006be8:	20000b04 	.word	0x20000b04
 8006bec:	461c4000 	.word	0x461c4000
 8006bf0:	c61c4000 	.word	0xc61c4000

08006bf4 <RetargetInit>:
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
  gHuart = huart;
 8006bf4:	4b04      	ldr	r3, [pc, #16]	; (8006c08 <RetargetInit+0x14>)
 8006bf6:	6018      	str	r0, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8006bf8:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <RetargetInit+0x18>)
 8006bfa:	6818      	ldr	r0, [r3, #0]
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	6880      	ldr	r0, [r0, #8]
 8006c00:	2202      	movs	r2, #2
 8006c02:	4619      	mov	r1, r3
 8006c04:	f000 be98 	b.w	8007938 <setvbuf>
 8006c08:	20000b18 	.word	0x20000b18
 8006c0c:	20000220 	.word	0x20000220

08006c10 <_isatty>:
}

int _isatty(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8006c10:	2802      	cmp	r0, #2
int _isatty(int fd) {
 8006c12:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8006c14:	d905      	bls.n	8006c22 <_isatty+0x12>
    return 1;

  errno = EBADF;
 8006c16:	f000 fdcf 	bl	80077b8 <__errno>
 8006c1a:	2309      	movs	r3, #9
 8006c1c:	6003      	str	r3, [r0, #0]
  return 0;
 8006c1e:	2000      	movs	r0, #0
}
 8006c20:	bd08      	pop	{r3, pc}
    return 1;
 8006c22:	2001      	movs	r0, #1
 8006c24:	e7fc      	b.n	8006c20 <_isatty+0x10>
	...

08006c28 <_write>:

int _write(int fd, char* ptr, int len) {
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8006c28:	3801      	subs	r0, #1
 8006c2a:	2801      	cmp	r0, #1
int _write(int fd, char* ptr, int len) {
 8006c2c:	b510      	push	{r4, lr}
 8006c2e:	4614      	mov	r4, r2
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8006c30:	d80b      	bhi.n	8006c4a <_write+0x22>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8006c32:	4809      	ldr	r0, [pc, #36]	; (8006c58 <_write+0x30>)
 8006c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c38:	6800      	ldr	r0, [r0, #0]
 8006c3a:	b292      	uxth	r2, r2
 8006c3c:	f7fe f9d9 	bl	8004ff2 <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
 8006c40:	2800      	cmp	r0, #0
      return len;
    else
      return EIO;
 8006c42:	bf18      	it	ne
 8006c44:	2405      	movne	r4, #5
  }
  errno = EBADF;
  return -1;
}
 8006c46:	4620      	mov	r0, r4
 8006c48:	bd10      	pop	{r4, pc}
  errno = EBADF;
 8006c4a:	f000 fdb5 	bl	80077b8 <__errno>
 8006c4e:	2309      	movs	r3, #9
 8006c50:	6003      	str	r3, [r0, #0]
  return -1;
 8006c52:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006c56:	e7f6      	b.n	8006c46 <_write+0x1e>
 8006c58:	20000b18 	.word	0x20000b18

08006c5c <_close>:

int _close(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8006c5c:	2802      	cmp	r0, #2
int _close(int fd) {
 8006c5e:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8006c60:	d906      	bls.n	8006c70 <_close+0x14>
    return 0;

  errno = EBADF;
 8006c62:	f000 fda9 	bl	80077b8 <__errno>
 8006c66:	2309      	movs	r3, #9
 8006c68:	6003      	str	r3, [r0, #0]
  return -1;
 8006c6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006c6e:	bd08      	pop	{r3, pc}
    return 0;
 8006c70:	2000      	movs	r0, #0
 8006c72:	e7fc      	b.n	8006c6e <_close+0x12>

08006c74 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8006c74:	b508      	push	{r3, lr}
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8006c76:	f000 fd9f 	bl	80077b8 <__errno>
 8006c7a:	2309      	movs	r3, #9
 8006c7c:	6003      	str	r3, [r0, #0]
  return -1;
}
 8006c7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c82:	bd08      	pop	{r3, pc}

08006c84 <_read>:

int _read(int fd, char* ptr, int len) {
 8006c84:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8006c86:	b958      	cbnz	r0, 8006ca0 <_read+0x1c>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8006c88:	4809      	ldr	r0, [pc, #36]	; (8006cb0 <_read+0x2c>)
 8006c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c8e:	6800      	ldr	r0, [r0, #0]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f7fe fa03 	bl	800509c <HAL_UART_Receive>
    if (hstatus == HAL_OK)
 8006c96:	2800      	cmp	r0, #0
      return 1;
    else
      return EIO;
 8006c98:	bf0c      	ite	eq
 8006c9a:	2001      	moveq	r0, #1
 8006c9c:	2005      	movne	r0, #5
  }
  errno = EBADF;
  return -1;
}
 8006c9e:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8006ca0:	f000 fd8a 	bl	80077b8 <__errno>
 8006ca4:	2309      	movs	r3, #9
 8006ca6:	6003      	str	r3, [r0, #0]
  return -1;
 8006ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cac:	e7f7      	b.n	8006c9e <_read+0x1a>
 8006cae:	bf00      	nop
 8006cb0:	20000b18 	.word	0x20000b18

08006cb4 <_fstat>:

int _fstat(int fd, struct stat* st) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8006cb4:	2802      	cmp	r0, #2
int _fstat(int fd, struct stat* st) {
 8006cb6:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8006cb8:	d804      	bhi.n	8006cc4 <_fstat+0x10>
    st->st_mode = S_IFCHR;
 8006cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cbe:	604b      	str	r3, [r1, #4]
    return 0;
  }

  errno = EBADF;
  return 0;
}
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8006cc4:	f000 fd78 	bl	80077b8 <__errno>
 8006cc8:	2309      	movs	r3, #9
 8006cca:	6003      	str	r3, [r0, #0]
  return 0;
 8006ccc:	e7f8      	b.n	8006cc0 <_fstat+0xc>
	...

08006cd0 <HAL_SPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for SPI interrupt request enable
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8006cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cd2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  SPIx_SCK_GPIO_CLK_ENABLE();
 8006cd4:	4b2e      	ldr	r3, [pc, #184]	; (8006d90 <HAL_SPI_MspInit+0xc0>)

  GPIO_InitStruct.Pin       = SPIx_NSS_PIN;
  GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull 		= GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  HAL_GPIO_Init(SPIx_GPIO_PORT, &GPIO_InitStruct);
 8006cd6:	482f      	ldr	r0, [pc, #188]	; (8006d94 <HAL_SPI_MspInit+0xc4>)
  SPIx_SCK_GPIO_CLK_ENABLE();
 8006cd8:	2400      	movs	r4, #0
 8006cda:	9401      	str	r4, [sp, #4]
 8006cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cde:	f042 0210 	orr.w	r2, r2, #16
 8006ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ce6:	f002 0210 	and.w	r2, r2, #16
 8006cea:	9201      	str	r2, [sp, #4]
 8006cec:	9a01      	ldr	r2, [sp, #4]
  SPIx_MISO_GPIO_CLK_ENABLE();
 8006cee:	9402      	str	r4, [sp, #8]
 8006cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cf2:	f042 0210 	orr.w	r2, r2, #16
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8006cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cfa:	f002 0210 	and.w	r2, r2, #16
 8006cfe:	9202      	str	r2, [sp, #8]
 8006d00:	9a02      	ldr	r2, [sp, #8]
  SPIx_MOSI_GPIO_CLK_ENABLE();
 8006d02:	9403      	str	r4, [sp, #12]
 8006d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d06:	f042 0210 	orr.w	r2, r2, #16
 8006d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8006d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d0e:	f002 0210 	and.w	r2, r2, #16
 8006d12:	9203      	str	r2, [sp, #12]
 8006d14:	9a03      	ldr	r2, [sp, #12]
  SPIx_CLK_ENABLE();
 8006d16:	9404      	str	r4, [sp, #16]
 8006d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d1e:	645a      	str	r2, [r3, #68]	; 0x44
 8006d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8006d26:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8006d28:	2702      	movs	r7, #2
  SPIx_CLK_ENABLE();
 8006d2a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8006d2c:	2608      	movs	r6, #8
  HAL_GPIO_Init(SPIx_GPIO_PORT, &GPIO_InitStruct);
 8006d2e:	a905      	add	r1, sp, #20
  SPIx_CLK_ENABLE();
 8006d30:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Pull 		= GPIO_PULLUP;
 8006d32:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8006d34:	e9cd 6505 	strd	r6, r5, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8006d38:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(SPIx_GPIO_PORT, &GPIO_InitStruct);
 8006d3a:	f7fc f907 	bl	8002f4c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(SPIx_GPIO_PORT, SPIx_NSS_PIN, GPIO_PIN_SET); // disable SPI slave
 8006d3e:	462a      	mov	r2, r5
 8006d40:	4631      	mov	r1, r6
 8006d42:	4814      	ldr	r0, [pc, #80]	; (8006d94 <HAL_SPI_MspInit+0xc4>)
 8006d44:	f7fc fa90 	bl	8003268 <HAL_GPIO_WritePin>


  /* SPI SCK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
  GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8006d48:	2605      	movs	r6, #5
  GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 8006d4a:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;

  HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006d4c:	a905      	add	r1, sp, #20
 8006d4e:	4811      	ldr	r0, [pc, #68]	; (8006d94 <HAL_SPI_MspInit+0xc4>)
  GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 8006d50:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006d52:	e9cd 7506 	strd	r7, r5, [sp, #24]
  GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8006d56:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8006d58:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006d5a:	f7fc f8f7 	bl	8002f4c <HAL_GPIO_Init>

  /* SPI MISO GPIO pin configuration  */
  GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8006d5e:	2320      	movs	r3, #32
  GPIO_InitStruct.Alternate = SPIx_MISO_AF;

  HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8006d60:	a905      	add	r1, sp, #20
 8006d62:	480c      	ldr	r0, [pc, #48]	; (8006d94 <HAL_SPI_MspInit+0xc4>)
  GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8006d64:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8006d66:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8006d68:	f7fc f8f0 	bl	8002f4c <HAL_GPIO_Init>

  /* SPI MOSI GPIO pin configuration  */
  GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8006d6c:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Alternate = SPIx_MOSI_AF;

  HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006d6e:	a905      	add	r1, sp, #20
 8006d70:	4808      	ldr	r0, [pc, #32]	; (8006d94 <HAL_SPI_MspInit+0xc4>)
  GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8006d72:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8006d74:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006d76:	f7fc f8e9 	bl	8002f4c <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for SPI #########################################*/
  /* NVIC for SPI */
  HAL_NVIC_SetPriority(SPIx_IRQn, 0, 1);
 8006d7a:	462a      	mov	r2, r5
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	2054      	movs	r0, #84	; 0x54
 8006d80:	f7fb fe6c 	bl	8002a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPIx_IRQn);
 8006d84:	2054      	movs	r0, #84	; 0x54
 8006d86:	f7fb fe9b 	bl	8002ac0 <HAL_NVIC_EnableIRQ>
}
 8006d8a:	b00b      	add	sp, #44	; 0x2c
 8006d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	40023800 	.word	0x40023800
 8006d94:	40021000 	.word	0x40021000

08006d98 <HAL_SPI_MspDeInit>:
  *          - Revert GPIO and NVIC configuration to their default state
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8006d98:	b508      	push	{r3, lr}
  /*##-1- Reset peripherals ##################################################*/
  SPIx_FORCE_RESET();
 8006d9a:	4b0d      	ldr	r3, [pc, #52]	; (8006dd0 <HAL_SPI_MspDeInit+0x38>)
  SPIx_RELEASE_RESET();

  /*##-2- Disable peripherals and GPIO Clocks ################################*/
  /* Configure SPI SCK as alternate function  */
  HAL_GPIO_DeInit(SPIx_SCK_GPIO_PORT, SPIx_SCK_PIN);
 8006d9c:	480d      	ldr	r0, [pc, #52]	; (8006dd4 <HAL_SPI_MspDeInit+0x3c>)
  SPIx_FORCE_RESET();
 8006d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006da4:	625a      	str	r2, [r3, #36]	; 0x24
  SPIx_RELEASE_RESET();
 8006da6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006da8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dac:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_GPIO_DeInit(SPIx_SCK_GPIO_PORT, SPIx_SCK_PIN);
 8006dae:	2104      	movs	r1, #4
 8006db0:	f7fc f9b2 	bl	8003118 <HAL_GPIO_DeInit>
  /* Configure SPI MISO as alternate function  */
  HAL_GPIO_DeInit(SPIx_MISO_GPIO_PORT, SPIx_MISO_PIN);
 8006db4:	4807      	ldr	r0, [pc, #28]	; (8006dd4 <HAL_SPI_MspDeInit+0x3c>)
 8006db6:	2120      	movs	r1, #32
 8006db8:	f7fc f9ae 	bl	8003118 <HAL_GPIO_DeInit>
  /* Configure SPI MOSI as alternate function  */
  HAL_GPIO_DeInit(SPIx_MOSI_GPIO_PORT, SPIx_MOSI_PIN);
 8006dbc:	4805      	ldr	r0, [pc, #20]	; (8006dd4 <HAL_SPI_MspDeInit+0x3c>)
 8006dbe:	2140      	movs	r1, #64	; 0x40
 8006dc0:	f7fc f9aa 	bl	8003118 <HAL_GPIO_DeInit>

  /*##-3- Disable the NVIC for SPI ###########################################*/
  HAL_NVIC_DisableIRQ(SPIx_IRQn);
}
 8006dc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_DisableIRQ(SPIx_IRQn);
 8006dc8:	2054      	movs	r0, #84	; 0x54
 8006dca:	f7fb be87 	b.w	8002adc <HAL_NVIC_DisableIRQ>
 8006dce:	bf00      	nop
 8006dd0:	40023800 	.word	0x40023800
 8006dd4:	40021000 	.word	0x40021000

08006dd8 <HAL_UART_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8006ddc:	4b25      	ldr	r3, [pc, #148]	; (8006e74 <HAL_UART_MspInit+0x9c>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006dde:	4826      	ldr	r0, [pc, #152]	; (8006e78 <HAL_UART_MspInit+0xa0>)
  USARTx_TX_GPIO_CLK_ENABLE();
 8006de0:	2400      	movs	r4, #0
 8006de2:	9401      	str	r4, [sp, #4]
 8006de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006de6:	f042 0201 	orr.w	r2, r2, #1
 8006dea:	631a      	str	r2, [r3, #48]	; 0x30
 8006dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dee:	f002 0201 	and.w	r2, r2, #1
 8006df2:	9201      	str	r2, [sp, #4]
 8006df4:	9a01      	ldr	r2, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 8006df6:	9402      	str	r4, [sp, #8]
 8006df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dfa:	f042 0201 	orr.w	r2, r2, #1
 8006dfe:	631a      	str	r2, [r3, #48]	; 0x30
 8006e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e02:	f002 0201 	and.w	r2, r2, #1
 8006e06:	9202      	str	r2, [sp, #8]
 8006e08:	9a02      	ldr	r2, [sp, #8]
  USARTx_CLK_ENABLE();
 8006e0a:	9403      	str	r4, [sp, #12]
 8006e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e0e:	f042 0210 	orr.w	r2, r2, #16
 8006e12:	645a      	str	r2, [r3, #68]	; 0x44
 8006e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e16:	f002 0210 	and.w	r2, r2, #16
 8006e1a:	9203      	str	r2, [sp, #12]
 8006e1c:	9a03      	ldr	r2, [sp, #12]
  DMAx_CLK_ENABLE();
 8006e1e:	9404      	str	r4, [sp, #16]
 8006e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e22:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006e26:	631a      	str	r2, [r3, #48]	; 0x30
 8006e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e2e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006e30:	f44f 7200 	mov.w	r2, #512	; 0x200
  DMAx_CLK_ENABLE();
 8006e34:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006e36:	2302      	movs	r3, #2
 8006e38:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8006e3c:	2501      	movs	r5, #1
 8006e3e:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8006e40:	2607      	movs	r6, #7
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006e42:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8006e44:	e9cd 5307 	strd	r5, r3, [sp, #28]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8006e48:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006e4a:	f7fc f87f 	bl	8002f4c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8006e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8006e52:	a905      	add	r1, sp, #20
 8006e54:	4808      	ldr	r0, [pc, #32]	; (8006e78 <HAL_UART_MspInit+0xa0>)
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8006e56:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8006e58:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8006e5a:	f7fc f877 	bl	8002f4c <HAL_GPIO_Init>
  HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);

#endif

  /* NVIC for USART, to catch the TX complete */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 8006e5e:	462a      	mov	r2, r5
 8006e60:	4621      	mov	r1, r4
 8006e62:	2025      	movs	r0, #37	; 0x25
 8006e64:	f7fb fdfa 	bl	8002a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8006e68:	2025      	movs	r0, #37	; 0x25
 8006e6a:	f7fb fe29 	bl	8002ac0 <HAL_NVIC_EnableIRQ>

}
 8006e6e:	b00a      	add	sp, #40	; 0x28
 8006e70:	bd70      	pop	{r4, r5, r6, pc}
 8006e72:	bf00      	nop
 8006e74:	40023800 	.word	0x40023800
 8006e78:	40020000 	.word	0x40020000

08006e7c <HAL_UART_MspDeInit>:
  *          - Revert GPIO, DMA and NVIC configuration to their default state
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8006e7c:	b508      	push	{r3, lr}

  /*##-1- Reset peripherals ##################################################*/
  USARTx_FORCE_RESET();
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <HAL_UART_MspDeInit+0x34>)
  USARTx_RELEASE_RESET();

  /*##-2- Disable peripherals and GPIO Clocks #################################*/
  /* Configure USARTx Tx as alternate function  */
  HAL_GPIO_DeInit(USARTx_TX_GPIO_PORT, USARTx_TX_PIN);
 8006e80:	480c      	ldr	r0, [pc, #48]	; (8006eb4 <HAL_UART_MspDeInit+0x38>)
  USARTx_FORCE_RESET();
 8006e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e84:	f042 0210 	orr.w	r2, r2, #16
 8006e88:	625a      	str	r2, [r3, #36]	; 0x24
  USARTx_RELEASE_RESET();
 8006e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e8c:	f022 0210 	bic.w	r2, r2, #16
 8006e90:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_GPIO_DeInit(USARTx_TX_GPIO_PORT, USARTx_TX_PIN);
 8006e92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e96:	f7fc f93f 	bl	8003118 <HAL_GPIO_DeInit>
  /* Configure USARTx Rx as alternate function  */
  HAL_GPIO_DeInit(USARTx_RX_GPIO_PORT, USARTx_RX_PIN);
 8006e9a:	4806      	ldr	r0, [pc, #24]	; (8006eb4 <HAL_UART_MspDeInit+0x38>)
 8006e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ea0:	f7fc f93a 	bl	8003118 <HAL_GPIO_DeInit>
  HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
  HAL_NVIC_DisableIRQ(USARTx_DMA_RX_IRQn);
#endif
  HAL_NVIC_DisableIRQ(USARTx_IRQn);

}
 8006ea4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_DisableIRQ(USARTx_IRQn);
 8006ea8:	2025      	movs	r0, #37	; 0x25
 8006eaa:	f7fb be17 	b.w	8002adc <HAL_NVIC_DisableIRQ>
 8006eae:	bf00      	nop
 8006eb0:	40023800 	.word	0x40023800
 8006eb4:	40020000 	.word	0x40020000

08006eb8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8006eb8:	4770      	bx	lr

08006eba <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006eba:	e7fe      	b.n	8006eba <HardFault_Handler>

08006ebc <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8006ebc:	e7fe      	b.n	8006ebc <MemManage_Handler>

08006ebe <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8006ebe:	e7fe      	b.n	8006ebe <BusFault_Handler>

08006ec0 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8006ec0:	e7fe      	b.n	8006ec0 <UsageFault_Handler>

08006ec2 <SVC_Handler>:
 8006ec2:	4770      	bx	lr

08006ec4 <DebugMon_Handler>:
 8006ec4:	4770      	bx	lr

08006ec6 <PendSV_Handler>:
 8006ec6:	4770      	bx	lr

08006ec8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8006ec8:	f7fb bd90 	b.w	80029ec <HAL_IncTick>

08006ecc <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8006ecc:	2001      	movs	r0, #1
 8006ece:	f7fc b9d1 	b.w	8003274 <HAL_GPIO_EXTI_IRQHandler>
	...

08006ed4 <Touchscreen_demo>:
  * @brief  Touchscreen Demo
  * @param  None
  * @retval None
  */
void Touchscreen_demo(void)
{ 
 8006ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t status = 0;
  uint16_t x,y;
  uint8_t state = 0;
  
  if(IsCalibrationDone() == 0)
 8006ed8:	f000 fba8 	bl	800762c <IsCalibrationDone>
 8006edc:	b908      	cbnz	r0, 8006ee2 <Touchscreen_demo+0xe>
  {
    Touchscreen_Calibration();
 8006ede:	f000 fa9d 	bl	800741c <Touchscreen_Calibration>
  * @retval None
  */
static void Touchscreen_SetHint(void)
{
  /* Clear the LCD */ 
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8006ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ee6:	f7fa fd0f 	bl	8001908 <BSP_LCD_Clear>
  
  /* Set Touchscreen Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8006eea:	48bf      	ldr	r0, [pc, #764]	; (80071e8 <Touchscreen_demo+0x314>)
 8006eec:	f7fa fcee 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8006ef0:	f7fa fc98 	bl	8001824 <BSP_LCD_GetXSize>
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	b282      	uxth	r2, r0
 8006ef8:	2350      	movs	r3, #80	; 0x50
 8006efa:	4608      	mov	r0, r1
 8006efc:	f7fa fe1e 	bl	8001b3c <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8006f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f04:	f7fa fce2 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 8006f08:	48b7      	ldr	r0, [pc, #732]	; (80071e8 <Touchscreen_demo+0x314>)
 8006f0a:	f7fa fce9 	bl	80018e0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8006f0e:	48b7      	ldr	r0, [pc, #732]	; (80071ec <Touchscreen_demo+0x318>)
 8006f10:	f7fa fcf0 	bl	80018f4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"Touchscreen", CENTER_MODE);
 8006f14:	2100      	movs	r1, #0
 8006f16:	4608      	mov	r0, r1
 8006f18:	4ab5      	ldr	r2, [pc, #724]	; (80071f0 <Touchscreen_demo+0x31c>)
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	f7fb f820 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8006f20:	48b4      	ldr	r0, [pc, #720]	; (80071f4 <Touchscreen_demo+0x320>)
 8006f22:	f7fa fce7 	bl	80018f4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"Please use the Touchscreen to", CENTER_MODE);
 8006f26:	4ab4      	ldr	r2, [pc, #720]	; (80071f8 <Touchscreen_demo+0x324>)
 8006f28:	2301      	movs	r3, #1
 8006f2a:	211e      	movs	r1, #30
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	f7fb f817 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t*)"activate the colored circle", CENTER_MODE);
 8006f32:	4ab2      	ldr	r2, [pc, #712]	; (80071fc <Touchscreen_demo+0x328>)
 8006f34:	2301      	movs	r3, #1
 8006f36:	212d      	movs	r1, #45	; 0x2d
 8006f38:	2000      	movs	r0, #0
 8006f3a:	f7fb f811 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"inside the rectangle", CENTER_MODE);
 8006f3e:	4ab0      	ldr	r2, [pc, #704]	; (8007200 <Touchscreen_demo+0x32c>)
 8006f40:	2301      	movs	r3, #1
 8006f42:	213c      	movs	r1, #60	; 0x3c
 8006f44:	2000      	movs	r0, #0
 8006f46:	f7fb f80b 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);  
 8006f4a:	48a7      	ldr	r0, [pc, #668]	; (80071e8 <Touchscreen_demo+0x314>)
 8006f4c:	f7fa fcbe 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize()- 100);
 8006f50:	f7fa fc68 	bl	8001824 <BSP_LCD_GetXSize>
 8006f54:	4604      	mov	r4, r0
 8006f56:	f7fa fc6d 	bl	8001834 <BSP_LCD_GetYSize>
 8006f5a:	f1a4 0214 	sub.w	r2, r4, #20
 8006f5e:	3864      	subs	r0, #100	; 0x64
 8006f60:	b283      	uxth	r3, r0
 8006f62:	b292      	uxth	r2, r2
 8006f64:	215a      	movs	r1, #90	; 0x5a
 8006f66:	200a      	movs	r0, #10
 8006f68:	f7fa fd42 	bl	80019f0 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102); 
 8006f6c:	f7fa fc5a 	bl	8001824 <BSP_LCD_GetXSize>
 8006f70:	4604      	mov	r4, r0
 8006f72:	f7fa fc5f 	bl	8001834 <BSP_LCD_GetYSize>
 8006f76:	f1a4 0216 	sub.w	r2, r4, #22
 8006f7a:	3866      	subs	r0, #102	; 0x66
 8006f7c:	b283      	uxth	r3, r0
 8006f7e:	b292      	uxth	r2, r2
 8006f80:	215b      	movs	r1, #91	; 0x5b
 8006f82:	200b      	movs	r0, #11
 8006f84:	f7fa fd34 	bl	80019f0 <BSP_LCD_DrawRect>
  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8006f88:	f7fa fc4c 	bl	8001824 <BSP_LCD_GetXSize>
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	f7fa fc51 	bl	8001834 <BSP_LCD_GetYSize>
 8006f92:	b281      	uxth	r1, r0
 8006f94:	b2a0      	uxth	r0, r4
 8006f96:	f7fb fc51 	bl	800283c <BSP_TS_Init>
  if (status != TS_OK)
 8006f9a:	4680      	mov	r8, r0
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	f000 818d 	beq.w	80072bc <Touchscreen_demo+0x3e8>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 8006fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fa6:	f7fa fc9b 	bl	80018e0 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8006faa:	4896      	ldr	r0, [pc, #600]	; (8007204 <Touchscreen_demo+0x330>)
 8006fac:	f7fa fc8e 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 8006fb0:	f7fa fc40 	bl	8001834 <BSP_LCD_GetYSize>
 8006fb4:	385f      	subs	r0, #95	; 0x5f
 8006fb6:	b281      	uxth	r1, r0
 8006fb8:	4a93      	ldr	r2, [pc, #588]	; (8007208 <Touchscreen_demo+0x334>)
 8006fba:	2301      	movs	r3, #1
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	f7fa ffcf 	bl	8001f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"Touchscreen cannot be initialized", CENTER_MODE);
 8006fc2:	f7fa fc37 	bl	8001834 <BSP_LCD_GetYSize>
 8006fc6:	3850      	subs	r0, #80	; 0x50
 8006fc8:	b281      	uxth	r1, r0
 8006fca:	4a90      	ldr	r2, [pc, #576]	; (800720c <Touchscreen_demo+0x338>)
 8006fcc:	2301      	movs	r3, #1
 8006fce:	2000      	movs	r0, #0
 8006fd0:	f7fa ffc6 	bl	8001f60 <BSP_LCD_DisplayStringAt>
      BSP_TS_GetState(&TS_State);
 8006fd4:	4f8e      	ldr	r7, [pc, #568]	; (8007210 <Touchscreen_demo+0x33c>)
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);        
    break;
    
  case 2:
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8006fd6:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8007204 <Touchscreen_demo+0x330>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8006fda:	f8df a20c 	ldr.w	sl, [pc, #524]	; 80071e8 <Touchscreen_demo+0x314>
{ 
 8006fde:	2400      	movs	r4, #0
    if (status == TS_OK)
 8006fe0:	f1b8 0f00 	cmp.w	r8, #0
 8006fe4:	f040 8166 	bne.w	80072b4 <Touchscreen_demo+0x3e0>
      BSP_TS_GetState(&TS_State);
 8006fe8:	4889      	ldr	r0, [pc, #548]	; (8007210 <Touchscreen_demo+0x33c>)
 8006fea:	f7fb fc43 	bl	8002874 <BSP_TS_GetState>
      if (TS_State.TouchDetected) {
 8006fee:	883b      	ldrh	r3, [r7, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 815f 	beq.w	80072b4 <Touchscreen_demo+0x3e0>
        x = Calibration_GetX(TS_State.X);
 8006ff6:	8878      	ldrh	r0, [r7, #2]
 8006ff8:	f000 faf8 	bl	80075ec <Calibration_GetX>
 8006ffc:	4605      	mov	r5, r0
        y = Calibration_GetY(TS_State.Y);
 8006ffe:	88b8      	ldrh	r0, [r7, #4]
 8007000:	f000 fb04 	bl	800760c <Calibration_GetY>
        if((TS_State.TouchDetected) && 
 8007004:	883b      	ldrh	r3, [r7, #0]
        y = Calibration_GetY(TS_State.Y);
 8007006:	4606      	mov	r6, r0
        if((TS_State.TouchDetected) && 
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 8153 	beq.w	80072b4 <Touchscreen_demo+0x3e0>
           (y > (CIRCLE_YPOS(1) - CIRCLE_RADIUS))&&
 800700e:	f7fa fc11 	bl	8001834 <BSP_LCD_GetYSize>
 8007012:	3878      	subs	r0, #120	; 0x78
        if((TS_State.TouchDetected) && 
 8007014:	4286      	cmp	r6, r0
 8007016:	f240 814d 	bls.w	80072b4 <Touchscreen_demo+0x3e0>
             (y < (CIRCLE_YPOS(1) + CIRCLE_RADIUS)))
 800701a:	f7fa fc0b 	bl	8001834 <BSP_LCD_GetYSize>
 800701e:	383c      	subs	r0, #60	; 0x3c
           (y > (CIRCLE_YPOS(1) - CIRCLE_RADIUS))&&
 8007020:	4286      	cmp	r6, r0
 8007022:	f080 8147 	bcs.w	80072b4 <Touchscreen_demo+0x3e0>
          if((x > (CIRCLE_XPOS(1) - CIRCLE_RADIUS))&&
 8007026:	f7fa fbfd 	bl	8001824 <BSP_LCD_GetXSize>
 800702a:	f04f 0b05 	mov.w	fp, #5
 800702e:	fbb0 f0fb 	udiv	r0, r0, fp
 8007032:	381e      	subs	r0, #30
 8007034:	4285      	cmp	r5, r0
 8007036:	d93b      	bls.n	80070b0 <Touchscreen_demo+0x1dc>
             (x < (CIRCLE_XPOS(1) + CIRCLE_RADIUS)))
 8007038:	f7fa fbf4 	bl	8001824 <BSP_LCD_GetXSize>
 800703c:	fbb0 f0fb 	udiv	r0, r0, fp
 8007040:	301e      	adds	r0, #30
          if((x > (CIRCLE_XPOS(1) - CIRCLE_RADIUS))&&
 8007042:	4285      	cmp	r5, r0
 8007044:	d234      	bcs.n	80070b0 <Touchscreen_demo+0x1dc>
            if((state & 1) == 0)
 8007046:	07e0      	lsls	r0, r4, #31
 8007048:	d432      	bmi.n	80070b0 <Touchscreen_demo+0x1dc>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 800704a:	4650      	mov	r0, sl
 800704c:	f7fa fc3e 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 8007050:	f7fa fbe8 	bl	8001824 <BSP_LCD_GetXSize>
 8007054:	4606      	mov	r6, r0
 8007056:	f7fa fbed 	bl	8001834 <BSP_LCD_GetYSize>
 800705a:	fbb6 f6fb 	udiv	r6, r6, fp
 800705e:	385a      	subs	r0, #90	; 0x5a
 8007060:	b281      	uxth	r1, r0
 8007062:	221e      	movs	r2, #30
 8007064:	b2b0      	uxth	r0, r6
 8007066:	f7fb f9d3 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 800706a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800706e:	f7fa fc2d 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);        
 8007072:	f7fa fbd7 	bl	8001824 <BSP_LCD_GetXSize>
 8007076:	4606      	mov	r6, r0
 8007078:	f7fa fbdc 	bl	8001834 <BSP_LCD_GetYSize>
 800707c:	fbb6 f6fb 	udiv	r6, r6, fp
 8007080:	385a      	subs	r0, #90	; 0x5a
 8007082:	b281      	uxth	r1, r0
 8007084:	221c      	movs	r2, #28
 8007086:	b2b0      	uxth	r0, r6
 8007088:	f7fb f9c2 	bl	8002410 <BSP_LCD_FillCircle>
              BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 800708c:	4650      	mov	r0, sl
 800708e:	f7fa fc1d 	bl	80018cc <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 8007092:	f7fa fbc7 	bl	8001824 <BSP_LCD_GetXSize>
 8007096:	4606      	mov	r6, r0
 8007098:	f7fa fbcc 	bl	8001834 <BSP_LCD_GetYSize>
 800709c:	fbb6 f6fb 	udiv	r6, r6, fp
 80070a0:	385a      	subs	r0, #90	; 0x5a
 80070a2:	b281      	uxth	r1, r0
 80070a4:	221e      	movs	r2, #30
 80070a6:	b2b0      	uxth	r0, r6
 80070a8:	f7fb f9b2 	bl	8002410 <BSP_LCD_FillCircle>
              state |= 1;
 80070ac:	f044 0401 	orr.w	r4, r4, #1
          if((x > (CIRCLE_XPOS(2) - CIRCLE_RADIUS))&&
 80070b0:	f7fa fbb8 	bl	8001824 <BSP_LCD_GetXSize>
 80070b4:	f04f 0b05 	mov.w	fp, #5
 80070b8:	0040      	lsls	r0, r0, #1
 80070ba:	fbb0 f0fb 	udiv	r0, r0, fp
 80070be:	381e      	subs	r0, #30
 80070c0:	4285      	cmp	r5, r0
 80070c2:	d93f      	bls.n	8007144 <Touchscreen_demo+0x270>
             (x < (CIRCLE_XPOS(2) + CIRCLE_RADIUS)))
 80070c4:	f7fa fbae 	bl	8001824 <BSP_LCD_GetXSize>
 80070c8:	0040      	lsls	r0, r0, #1
 80070ca:	fbb0 f0fb 	udiv	r0, r0, fp
 80070ce:	301e      	adds	r0, #30
          if((x > (CIRCLE_XPOS(2) - CIRCLE_RADIUS))&&
 80070d0:	4285      	cmp	r5, r0
 80070d2:	d237      	bcs.n	8007144 <Touchscreen_demo+0x270>
            if((state & 2) == 0)
 80070d4:	07a1      	lsls	r1, r4, #30
 80070d6:	d435      	bmi.n	8007144 <Touchscreen_demo+0x270>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 80070d8:	4648      	mov	r0, r9
 80070da:	f7fa fbf7 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 80070de:	f7fa fba1 	bl	8001824 <BSP_LCD_GetXSize>
 80070e2:	4606      	mov	r6, r0
 80070e4:	f7fa fba6 	bl	8001834 <BSP_LCD_GetYSize>
 80070e8:	385a      	subs	r0, #90	; 0x5a
 80070ea:	b281      	uxth	r1, r0
 80070ec:	221e      	movs	r2, #30
 80070ee:	0076      	lsls	r6, r6, #1
 80070f0:	fbb6 f6fb 	udiv	r6, r6, fp
 80070f4:	b2b0      	uxth	r0, r6
 80070f6:	f7fb f98b 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 80070fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070fe:	f7fa fbe5 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2); 
 8007102:	f7fa fb8f 	bl	8001824 <BSP_LCD_GetXSize>
 8007106:	4606      	mov	r6, r0
 8007108:	f7fa fb94 	bl	8001834 <BSP_LCD_GetYSize>
 800710c:	385a      	subs	r0, #90	; 0x5a
 800710e:	b281      	uxth	r1, r0
 8007110:	221c      	movs	r2, #28
 8007112:	0076      	lsls	r6, r6, #1
 8007114:	fbb6 f6fb 	udiv	r6, r6, fp
 8007118:	b2b0      	uxth	r0, r6
 800711a:	f7fb f979 	bl	8002410 <BSP_LCD_FillCircle>
              BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 800711e:	4648      	mov	r0, r9
 8007120:	f7fa fbd4 	bl	80018cc <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 8007124:	f7fa fb7e 	bl	8001824 <BSP_LCD_GetXSize>
 8007128:	4606      	mov	r6, r0
 800712a:	f7fa fb83 	bl	8001834 <BSP_LCD_GetYSize>
 800712e:	385a      	subs	r0, #90	; 0x5a
 8007130:	b281      	uxth	r1, r0
 8007132:	0076      	lsls	r6, r6, #1
 8007134:	221e      	movs	r2, #30
 8007136:	fbb6 f6fb 	udiv	r6, r6, fp
 800713a:	b2b0      	uxth	r0, r6
 800713c:	f7fb f968 	bl	8002410 <BSP_LCD_FillCircle>
              state |= 2;
 8007140:	f044 0402 	orr.w	r4, r4, #2
          if((x > (CIRCLE_XPOS(3) - CIRCLE_RADIUS))&&
 8007144:	f7fa fb6e 	bl	8001824 <BSP_LCD_GetXSize>
 8007148:	f04f 0b05 	mov.w	fp, #5
 800714c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007150:	fbb0 f0fb 	udiv	r0, r0, fp
 8007154:	381e      	subs	r0, #30
 8007156:	4285      	cmp	r5, r0
 8007158:	d95c      	bls.n	8007214 <Touchscreen_demo+0x340>
             (x < (CIRCLE_XPOS(3) + CIRCLE_RADIUS)))
 800715a:	f7fa fb63 	bl	8001824 <BSP_LCD_GetXSize>
 800715e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007162:	fbb0 f0fb 	udiv	r0, r0, fp
 8007166:	301e      	adds	r0, #30
          if((x > (CIRCLE_XPOS(3) - CIRCLE_RADIUS))&&
 8007168:	4285      	cmp	r5, r0
 800716a:	d253      	bcs.n	8007214 <Touchscreen_demo+0x340>
            if((state & 4) == 0)
 800716c:	0762      	lsls	r2, r4, #29
 800716e:	d451      	bmi.n	8007214 <Touchscreen_demo+0x340>
    break;
    
  case 4:
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 8007170:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8007174:	f7fa fbaa 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8007178:	f7fa fb54 	bl	8001824 <BSP_LCD_GetXSize>
 800717c:	4606      	mov	r6, r0
 800717e:	f7fa fb59 	bl	8001834 <BSP_LCD_GetYSize>
 8007182:	385a      	subs	r0, #90	; 0x5a
 8007184:	b281      	uxth	r1, r0
 8007186:	221e      	movs	r2, #30
 8007188:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800718c:	fbb6 f6fb 	udiv	r6, r6, fp
 8007190:	b2b0      	uxth	r0, r6
 8007192:	f7fb f93d 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8007196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800719a:	f7fa fb97 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2); 
 800719e:	f7fa fb41 	bl	8001824 <BSP_LCD_GetXSize>
 80071a2:	4606      	mov	r6, r0
 80071a4:	f7fa fb46 	bl	8001834 <BSP_LCD_GetYSize>
 80071a8:	385a      	subs	r0, #90	; 0x5a
 80071aa:	b281      	uxth	r1, r0
 80071ac:	221c      	movs	r2, #28
 80071ae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80071b2:	fbb6 f6fb 	udiv	r6, r6, fp
 80071b6:	b2b0      	uxth	r0, r6
 80071b8:	f7fb f92a 	bl	8002410 <BSP_LCD_FillCircle>
              BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 80071bc:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80071c0:	f7fa fb84 	bl	80018cc <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 80071c4:	f7fa fb2e 	bl	8001824 <BSP_LCD_GetXSize>
 80071c8:	4606      	mov	r6, r0
 80071ca:	f7fa fb33 	bl	8001834 <BSP_LCD_GetYSize>
 80071ce:	385a      	subs	r0, #90	; 0x5a
 80071d0:	b281      	uxth	r1, r0
 80071d2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80071d6:	221e      	movs	r2, #30
 80071d8:	fbb6 f6fb 	udiv	r6, r6, fp
 80071dc:	b2b0      	uxth	r0, r6
 80071de:	f7fb f917 	bl	8002410 <BSP_LCD_FillCircle>
              state |= 4;
 80071e2:	f044 0404 	orr.w	r4, r4, #4
 80071e6:	e015      	b.n	8007214 <Touchscreen_demo+0x340>
 80071e8:	ff0000ff 	.word	0xff0000ff
 80071ec:	200000d4 	.word	0x200000d4
 80071f0:	0801f3fa 	.word	0x0801f3fa
 80071f4:	200000e4 	.word	0x200000e4
 80071f8:	0801f378 	.word	0x0801f378
 80071fc:	0801f396 	.word	0x0801f396
 8007200:	0801f3b2 	.word	0x0801f3b2
 8007204:	ffff0000 	.word	0xffff0000
 8007208:	0801f357 	.word	0x0801f357
 800720c:	0801f3c7 	.word	0x0801f3c7
 8007210:	200004d0 	.word	0x200004d0
          if((x > (CIRCLE_XPOS(4) - CIRCLE_RADIUS))&&
 8007214:	f7fa fb06 	bl	8001824 <BSP_LCD_GetXSize>
 8007218:	2605      	movs	r6, #5
 800721a:	0080      	lsls	r0, r0, #2
 800721c:	fbb0 f0f6 	udiv	r0, r0, r6
 8007220:	381e      	subs	r0, #30
 8007222:	4285      	cmp	r5, r0
 8007224:	d941      	bls.n	80072aa <Touchscreen_demo+0x3d6>
             (x < (CIRCLE_XPOS(4) + CIRCLE_RADIUS)))
 8007226:	f7fa fafd 	bl	8001824 <BSP_LCD_GetXSize>
 800722a:	0080      	lsls	r0, r0, #2
 800722c:	fbb0 f0f6 	udiv	r0, r0, r6
 8007230:	301e      	adds	r0, #30
          if((x > (CIRCLE_XPOS(4) - CIRCLE_RADIUS))&&
 8007232:	4285      	cmp	r5, r0
 8007234:	d239      	bcs.n	80072aa <Touchscreen_demo+0x3d6>
            if((state & 8) == 0)
 8007236:	0723      	lsls	r3, r4, #28
 8007238:	d437      	bmi.n	80072aa <Touchscreen_demo+0x3d6>
    break;
    
  case 8:
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 800723a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800723e:	f7fa fb45 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS);
 8007242:	f7fa faef 	bl	8001824 <BSP_LCD_GetXSize>
 8007246:	4605      	mov	r5, r0
 8007248:	f7fa faf4 	bl	8001834 <BSP_LCD_GetYSize>
 800724c:	385a      	subs	r0, #90	; 0x5a
 800724e:	b281      	uxth	r1, r0
 8007250:	221e      	movs	r2, #30
 8007252:	00ad      	lsls	r5, r5, #2
 8007254:	fbb5 f5f6 	udiv	r5, r5, r6
 8007258:	b2a8      	uxth	r0, r5
 800725a:	f7fb f8d9 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 800725e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007262:	f7fa fb33 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2); 
 8007266:	f7fa fadd 	bl	8001824 <BSP_LCD_GetXSize>
 800726a:	4605      	mov	r5, r0
 800726c:	f7fa fae2 	bl	8001834 <BSP_LCD_GetYSize>
 8007270:	385a      	subs	r0, #90	; 0x5a
 8007272:	b281      	uxth	r1, r0
 8007274:	221c      	movs	r2, #28
 8007276:	00ad      	lsls	r5, r5, #2
 8007278:	fbb5 f5f6 	udiv	r5, r5, r6
 800727c:	b2a8      	uxth	r0, r5
 800727e:	f7fb f8c7 	bl	8002410 <BSP_LCD_FillCircle>
              BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 8007282:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8007286:	f7fa fb21 	bl	80018cc <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 800728a:	f7fa facb 	bl	8001824 <BSP_LCD_GetXSize>
 800728e:	4605      	mov	r5, r0
 8007290:	f7fa fad0 	bl	8001834 <BSP_LCD_GetYSize>
 8007294:	385a      	subs	r0, #90	; 0x5a
 8007296:	b281      	uxth	r1, r0
 8007298:	00ad      	lsls	r5, r5, #2
 800729a:	221e      	movs	r2, #30
 800729c:	fbb5 f5f6 	udiv	r5, r5, r6
 80072a0:	b2a8      	uxth	r0, r5
 80072a2:	f7fb f8b5 	bl	8002410 <BSP_LCD_FillCircle>
              state |= 8;
 80072a6:	f044 0408 	orr.w	r4, r4, #8
          if (state != 0x0F)
 80072aa:	2c0f      	cmp	r4, #15
 80072ac:	f000 808a 	beq.w	80073c4 <Touchscreen_demo+0x4f0>
            TS_State.TouchDetected = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	803b      	strh	r3, [r7, #0]
    HAL_Delay(100);
 80072b4:	2064      	movs	r0, #100	; 0x64
 80072b6:	f7fb fbab 	bl	8002a10 <HAL_Delay>
    if (status == TS_OK)
 80072ba:	e691      	b.n	8006fe0 <Touchscreen_demo+0x10c>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 80072bc:	4845      	ldr	r0, [pc, #276]	; (80073d4 <Touchscreen_demo+0x500>)
 80072be:	f7fa fb05 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 80072c2:	f7fa faaf 	bl	8001824 <BSP_LCD_GetXSize>
 80072c6:	4605      	mov	r5, r0
 80072c8:	f7fa fab4 	bl	8001834 <BSP_LCD_GetYSize>
 80072cc:	385a      	subs	r0, #90	; 0x5a
 80072ce:	2405      	movs	r4, #5
 80072d0:	b281      	uxth	r1, r0
 80072d2:	221e      	movs	r2, #30
 80072d4:	fbb5 f5f4 	udiv	r5, r5, r4
 80072d8:	b2a8      	uxth	r0, r5
 80072da:	f7fb f899 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 80072de:	483e      	ldr	r0, [pc, #248]	; (80073d8 <Touchscreen_demo+0x504>)
 80072e0:	f7fa faf4 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 80072e4:	f7fa fa9e 	bl	8001824 <BSP_LCD_GetXSize>
 80072e8:	4605      	mov	r5, r0
 80072ea:	f7fa faa3 	bl	8001834 <BSP_LCD_GetYSize>
 80072ee:	385a      	subs	r0, #90	; 0x5a
 80072f0:	b281      	uxth	r1, r0
 80072f2:	221e      	movs	r2, #30
 80072f4:	006d      	lsls	r5, r5, #1
 80072f6:	fbb5 f5f4 	udiv	r5, r5, r4
 80072fa:	b2a8      	uxth	r0, r5
 80072fc:	f7fb f888 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 8007300:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8007304:	f7fa fae2 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8007308:	f7fa fa8c 	bl	8001824 <BSP_LCD_GetXSize>
 800730c:	4605      	mov	r5, r0
 800730e:	f7fa fa91 	bl	8001834 <BSP_LCD_GetYSize>
 8007312:	385a      	subs	r0, #90	; 0x5a
 8007314:	b281      	uxth	r1, r0
 8007316:	221e      	movs	r2, #30
 8007318:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800731c:	fbb5 f5f4 	udiv	r5, r5, r4
 8007320:	b2a8      	uxth	r0, r5
 8007322:	f7fb f875 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 8007326:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800732a:	f7fa facf 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 800732e:	f7fa fa79 	bl	8001824 <BSP_LCD_GetXSize>
 8007332:	4605      	mov	r5, r0
 8007334:	f7fa fa7e 	bl	8001834 <BSP_LCD_GetYSize>
 8007338:	385a      	subs	r0, #90	; 0x5a
 800733a:	b281      	uxth	r1, r0
 800733c:	221e      	movs	r2, #30
 800733e:	00ad      	lsls	r5, r5, #2
 8007340:	fbb5 f5f4 	udiv	r5, r5, r4
 8007344:	b2a8      	uxth	r0, r5
 8007346:	f7fb f863 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 800734a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800734e:	f7fa fabd 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);        
 8007352:	f7fa fa67 	bl	8001824 <BSP_LCD_GetXSize>
 8007356:	4605      	mov	r5, r0
 8007358:	f7fa fa6c 	bl	8001834 <BSP_LCD_GetYSize>
 800735c:	fbb5 f5f4 	udiv	r5, r5, r4
 8007360:	385a      	subs	r0, #90	; 0x5a
 8007362:	b281      	uxth	r1, r0
 8007364:	221c      	movs	r2, #28
 8007366:	b2a8      	uxth	r0, r5
 8007368:	f7fb f852 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2);
 800736c:	f7fa fa5a 	bl	8001824 <BSP_LCD_GetXSize>
 8007370:	4605      	mov	r5, r0
 8007372:	f7fa fa5f 	bl	8001834 <BSP_LCD_GetYSize>
 8007376:	385a      	subs	r0, #90	; 0x5a
 8007378:	b281      	uxth	r1, r0
 800737a:	221c      	movs	r2, #28
 800737c:	006d      	lsls	r5, r5, #1
 800737e:	fbb5 f5f4 	udiv	r5, r5, r4
 8007382:	b2a8      	uxth	r0, r5
 8007384:	f7fb f844 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2);
 8007388:	f7fa fa4c 	bl	8001824 <BSP_LCD_GetXSize>
 800738c:	4605      	mov	r5, r0
 800738e:	f7fa fa51 	bl	8001834 <BSP_LCD_GetYSize>
 8007392:	385a      	subs	r0, #90	; 0x5a
 8007394:	b281      	uxth	r1, r0
 8007396:	221c      	movs	r2, #28
 8007398:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800739c:	fbb5 f5f4 	udiv	r5, r5, r4
 80073a0:	b2a8      	uxth	r0, r5
 80073a2:	f7fb f835 	bl	8002410 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2); 
 80073a6:	f7fa fa3d 	bl	8001824 <BSP_LCD_GetXSize>
 80073aa:	4605      	mov	r5, r0
 80073ac:	f7fa fa42 	bl	8001834 <BSP_LCD_GetYSize>
 80073b0:	385a      	subs	r0, #90	; 0x5a
 80073b2:	00ad      	lsls	r5, r5, #2
 80073b4:	b281      	uxth	r1, r0
 80073b6:	fbb5 f4f4 	udiv	r4, r5, r4
 80073ba:	221c      	movs	r2, #28
 80073bc:	b2a0      	uxth	r0, r4
 80073be:	f7fb f827 	bl	8002410 <BSP_LCD_FillCircle>
    break; 
  }
}
 80073c2:	e607      	b.n	8006fd4 <Touchscreen_demo+0x100>
            if(CheckForUserInput() > 0)
 80073c4:	f7ff f944 	bl	8006650 <CheckForUserInput>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	f43f af73 	beq.w	80072b4 <Touchscreen_demo+0x3e0>
}
 80073ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d2:	bf00      	nop
 80073d4:	ff0000ff 	.word	0xff0000ff
 80073d8:	ffff0000 	.word	0xffff0000

080073dc <WaitForPressedState>:
  * @brief  Wait For Pressed State.
  * @param  None
  * @retval None
  */
static void WaitForPressedState(uint8_t Pressed) 
{
 80073dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  do 
  {
    BSP_TS_GetState(&State);
    HAL_Delay(10);
    if (State.TouchDetected == Pressed) 
 80073de:	4604      	mov	r4, r0
    BSP_TS_GetState(&State);
 80073e0:	4668      	mov	r0, sp
 80073e2:	f7fb fa47 	bl	8002874 <BSP_TS_GetState>
    HAL_Delay(10);
 80073e6:	200a      	movs	r0, #10
 80073e8:	f7fb fb12 	bl	8002a10 <HAL_Delay>
    if (State.TouchDetected == Pressed) 
 80073ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	d1f5      	bne.n	80073e0 <WaitForPressedState+0x4>
    {
      uint16_t TimeStart = HAL_GetTick();
 80073f4:	f7fb fb06 	bl	8002a04 <HAL_GetTick>
        BSP_TS_GetState(&State);
        HAL_Delay(10);
        if (State.TouchDetected != Pressed) 
        {
          break;
        } else if ((HAL_GetTick() - 100) > TimeStart) 
 80073f8:	b285      	uxth	r5, r0
        BSP_TS_GetState(&State);
 80073fa:	4668      	mov	r0, sp
 80073fc:	f7fb fa3a 	bl	8002874 <BSP_TS_GetState>
        HAL_Delay(10);
 8007400:	200a      	movs	r0, #10
 8007402:	f7fb fb05 	bl	8002a10 <HAL_Delay>
        if (State.TouchDetected != Pressed) 
 8007406:	f8bd 3000 	ldrh.w	r3, [sp]
 800740a:	42a3      	cmp	r3, r4
 800740c:	d1e8      	bne.n	80073e0 <WaitForPressedState+0x4>
        } else if ((HAL_GetTick() - 100) > TimeStart) 
 800740e:	f7fb faf9 	bl	8002a04 <HAL_GetTick>
 8007412:	3864      	subs	r0, #100	; 0x64
 8007414:	42a8      	cmp	r0, r5
 8007416:	d9f0      	bls.n	80073fa <WaitForPressedState+0x1e>
          return;
        }
      } while (1);
    }
  } while (1);
}
 8007418:	b003      	add	sp, #12
 800741a:	bd30      	pop	{r4, r5, pc}

0800741c <Touchscreen_Calibration>:
{ 
 800741c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007424:	f7fa fa70 	bl	8001908 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007428:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800742c:	f7fa fa4e 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007434:	f7fa fa54 	bl	80018e0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font12);
 8007438:	4864      	ldr	r0, [pc, #400]	; (80075cc <Touchscreen_Calibration+0x1b0>)
 800743a:	f7fa fa5b 	bl	80018f4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"Before using the Touchscreen", CENTER_MODE);
 800743e:	f7fa f9f9 	bl	8001834 <BSP_LCD_GetYSize>
 8007442:	0840      	lsrs	r0, r0, #1
 8007444:	f1a0 011b 	sub.w	r1, r0, #27
 8007448:	4a61      	ldr	r2, [pc, #388]	; (80075d0 <Touchscreen_Calibration+0x1b4>)
 800744a:	2301      	movs	r3, #1
 800744c:	b289      	uxth	r1, r1
 800744e:	2000      	movs	r0, #0
 8007450:	f7fa fd86 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"you need to calibrate it.", CENTER_MODE);
 8007454:	f7fa f9ee 	bl	8001834 <BSP_LCD_GetYSize>
 8007458:	0840      	lsrs	r0, r0, #1
 800745a:	f1a0 010c 	sub.w	r1, r0, #12
 800745e:	4a5d      	ldr	r2, [pc, #372]	; (80075d4 <Touchscreen_Calibration+0x1b8>)
 8007460:	2301      	movs	r3, #1
 8007462:	b289      	uxth	r1, r1
 8007464:	2000      	movs	r0, #0
 8007466:	f7fa fd7b 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"Press on the black circles", CENTER_MODE);
 800746a:	f7fa f9e3 	bl	8001834 <BSP_LCD_GetYSize>
 800746e:	0840      	lsrs	r0, r0, #1
 8007470:	1cc1      	adds	r1, r0, #3
 8007472:	b289      	uxth	r1, r1
 8007474:	4a58      	ldr	r2, [pc, #352]	; (80075d8 <Touchscreen_Calibration+0x1bc>)
 8007476:	2301      	movs	r3, #1
 8007478:	2000      	movs	r0, #0
 800747a:	f7fa fd71 	bl	8001f60 <BSP_LCD_DisplayStringAt>
  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800747e:	f7fa f9d1 	bl	8001824 <BSP_LCD_GetXSize>
 8007482:	4604      	mov	r4, r0
 8007484:	f7fa f9d6 	bl	8001834 <BSP_LCD_GetYSize>
 8007488:	b281      	uxth	r1, r0
 800748a:	b2a0      	uxth	r0, r4
 800748c:	f7fb f9d6 	bl	800283c <BSP_TS_Init>
  if (status != TS_OK)
 8007490:	b1e0      	cbz	r0, 80074cc <Touchscreen_Calibration+0xb0>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 8007492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007496:	f7fa fa23 	bl	80018e0 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800749a:	4850      	ldr	r0, [pc, #320]	; (80075dc <Touchscreen_Calibration+0x1c0>)
 800749c:	f7fa fa16 	bl	80018cc <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 80074a0:	f7fa f9c8 	bl	8001834 <BSP_LCD_GetYSize>
 80074a4:	385f      	subs	r0, #95	; 0x5f
 80074a6:	b281      	uxth	r1, r0
 80074a8:	4a4d      	ldr	r2, [pc, #308]	; (80075e0 <Touchscreen_Calibration+0x1c4>)
 80074aa:	2301      	movs	r3, #1
 80074ac:	2000      	movs	r0, #0
 80074ae:	f7fa fd57 	bl	8001f60 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"Touchscreen cannot be initialized", CENTER_MODE);
 80074b2:	f7fa f9bf 	bl	8001834 <BSP_LCD_GetYSize>
 80074b6:	3850      	subs	r0, #80	; 0x50
 80074b8:	b281      	uxth	r1, r0
 80074ba:	4a4a      	ldr	r2, [pc, #296]	; (80075e4 <Touchscreen_Calibration+0x1c8>)
 80074bc:	2301      	movs	r3, #1
 80074be:	2000      	movs	r0, #0
 80074c0:	f7fa fd4e 	bl	8001f60 <BSP_LCD_DisplayStringAt>
    HAL_Delay(5);
 80074c4:	2005      	movs	r0, #5
 80074c6:	f7fb faa3 	bl	8002a10 <HAL_Delay>
  while (1)
 80074ca:	e7fb      	b.n	80074c4 <Touchscreen_Calibration+0xa8>
      aLogX[0] = 15;
 80074cc:	4d46      	ldr	r5, [pc, #280]	; (80075e8 <Touchscreen_Calibration+0x1cc>)
 80074ce:	230f      	movs	r3, #15
 80074d0:	802b      	strh	r3, [r5, #0]
      aLogY[0] = 15;
 80074d2:	80ab      	strh	r3, [r5, #4]
      aLogX[1] = BSP_LCD_GetXSize() - 15;
 80074d4:	f7fa f9a6 	bl	8001824 <BSP_LCD_GetXSize>
 80074d8:	380f      	subs	r0, #15
 80074da:	8068      	strh	r0, [r5, #2]
      aLogY[1] = BSP_LCD_GetYSize() - 15;
 80074dc:	f7fa f9aa 	bl	8001834 <BSP_LCD_GetYSize>
 80074e0:	1d2f      	adds	r7, r5, #4
 80074e2:	380f      	subs	r0, #15
 80074e4:	80e8      	strh	r0, [r5, #6]
      for (i = 0; i < 2; i++) 
 80074e6:	f105 0908 	add.w	r9, r5, #8
 80074ea:	f105 080c 	add.w	r8, r5, #12
 80074ee:	46bb      	mov	fp, r7
 80074f0:	462c      	mov	r4, r5
  BSP_TS_GetState(&TS_State);
 80074f2:	f105 0a10 	add.w	sl, r5, #16
        GetPhysValues(aLogX[i], aLogY[i], &aPhysX[i], &aPhysY[i]);
 80074f6:	f935 6b02 	ldrsh.w	r6, [r5], #2
 80074fa:	f937 1b02 	ldrsh.w	r1, [r7], #2
 80074fe:	9101      	str	r1, [sp, #4]
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007500:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007504:	f7fa f9e2 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8007508:	9901      	ldr	r1, [sp, #4]
 800750a:	b2b6      	uxth	r6, r6
 800750c:	b289      	uxth	r1, r1
 800750e:	2205      	movs	r2, #5
 8007510:	4630      	mov	r0, r6
 8007512:	9101      	str	r1, [sp, #4]
 8007514:	f7fa ff7c 	bl	8002410 <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800751c:	f7fa f9d6 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 2);
 8007520:	9901      	ldr	r1, [sp, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	4630      	mov	r0, r6
 8007526:	f7fa ff73 	bl	8002410 <BSP_LCD_FillCircle>
  WaitForPressedState(1);
 800752a:	2001      	movs	r0, #1
 800752c:	f7ff ff56 	bl	80073dc <WaitForPressedState>
  BSP_TS_GetState(&TS_State);
 8007530:	4650      	mov	r0, sl
 8007532:	f7fb f99f 	bl	8002874 <BSP_TS_GetState>
  *pPhysX = TS_State.X;
 8007536:	8a63      	ldrh	r3, [r4, #18]
 8007538:	f829 3b02 	strh.w	r3, [r9], #2
  *pPhysY = TS_State.Y; 
 800753c:	8aa3      	ldrh	r3, [r4, #20]
 800753e:	f828 3b02 	strh.w	r3, [r8], #2
  WaitForPressedState(0);
 8007542:	2000      	movs	r0, #0
 8007544:	f7ff ff4a 	bl	80073dc <WaitForPressedState>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800754c:	f7fa f9be 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8007550:	9901      	ldr	r1, [sp, #4]
 8007552:	2205      	movs	r2, #5
 8007554:	4630      	mov	r0, r6
 8007556:	f7fa ff5b 	bl	8002410 <BSP_LCD_FillCircle>
      for (i = 0; i < 2; i++) 
 800755a:	455d      	cmp	r5, fp
 800755c:	d1cb      	bne.n	80074f6 <Touchscreen_Calibration+0xda>
      A1 = (1000 * ( aLogX[1] - aLogX[0]))/ ( aPhysX[1] - aPhysX[0]); 
 800755e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8007562:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8007566:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800756a:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 800756e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007572:	1a5b      	subs	r3, r3, r1
 8007574:	1aad      	subs	r5, r5, r2
 8007576:	4343      	muls	r3, r0
 8007578:	fb93 f3f5 	sdiv	r3, r3, r5
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0]; 
 800757c:	ebc1 1541 	rsb	r5, r1, r1, lsl #5
 8007580:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8007584:	fb12 f203 	smulbb	r2, r2, r3
 8007588:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
      A1 = (1000 * ( aLogX[1] - aLogX[0]))/ ( aPhysX[1] - aPhysX[0]); 
 800758c:	8323      	strh	r3, [r4, #24]
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 800758e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8007592:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0]; 
 8007596:	8362      	strh	r2, [r4, #26]
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 8007598:	1a5b      	subs	r3, r3, r1
 800759a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800759e:	4343      	muls	r3, r0
 80075a0:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 80075a4:	1a80      	subs	r0, r0, r2
 80075a6:	fb93 f3f0 	sdiv	r3, r3, r0
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0]; 
 80075aa:	ebc1 1041 	rsb	r0, r1, r1, lsl #5
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 80075ae:	83a3      	strh	r3, [r4, #28]
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0]; 
 80075b0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80075b4:	fb12 f303 	smulbb	r3, r2, r3
 80075b8:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
 80075bc:	83e3      	strh	r3, [r4, #30]
      Calibration_Done = 1;
 80075be:	2301      	movs	r3, #1
 80075c0:	f884 3020 	strb.w	r3, [r4, #32]
}
 80075c4:	b003      	add	sp, #12
 80075c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ca:	bf00      	nop
 80075cc:	200000e4 	.word	0x200000e4
 80075d0:	0801f3e9 	.word	0x0801f3e9
 80075d4:	0801f406 	.word	0x0801f406
 80075d8:	0801f420 	.word	0x0801f420
 80075dc:	ffff0000 	.word	0xffff0000
 80075e0:	0801f357 	.word	0x0801f357
 80075e4:	0801f3c7 	.word	0x0801f3c7
 80075e8:	200004d8 	.word	0x200004d8

080075ec <Calibration_GetX>:
  * @param  x : X position
  * @retval Calibrated x
  */
uint16_t Calibration_GetX(uint16_t x)
{
  return (((A1 * x) + B1)/1000);
 80075ec:	4a06      	ldr	r2, [pc, #24]	; (8007608 <Calibration_GetX+0x1c>)
 80075ee:	f9b2 3018 	ldrsh.w	r3, [r2, #24]
 80075f2:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 80075f6:	fb00 2003 	mla	r0, r0, r3, r2
 80075fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075fe:	fb90 f0f3 	sdiv	r0, r0, r3
}
 8007602:	b280      	uxth	r0, r0
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	200004d8 	.word	0x200004d8

0800760c <Calibration_GetY>:
  * @param  y : Y position
  * @retval Calibrated y
  */
uint16_t Calibration_GetY(uint16_t y)
{
  return (((A2 * y) + B2)/1000);
 800760c:	4a06      	ldr	r2, [pc, #24]	; (8007628 <Calibration_GetY+0x1c>)
 800760e:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
 8007612:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 8007616:	fb00 2003 	mla	r0, r0, r3, r2
 800761a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800761e:	fb90 f0f3 	sdiv	r0, r0, r3
}
 8007622:	b280      	uxth	r0, r0
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	200004d8 	.word	0x200004d8

0800762c <IsCalibrationDone>:
  * @retval Calibration state (1 : calibrated / 0: no)
  */ 
uint8_t IsCalibrationDone(void)
{
  return (Calibration_Done);
}
 800762c:	4b01      	ldr	r3, [pc, #4]	; (8007634 <IsCalibrationDone+0x8>)
 800762e:	f893 0020 	ldrb.w	r0, [r3, #32]
 8007632:	4770      	bx	lr
 8007634:	200004d8 	.word	0x200004d8

08007638 <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8007638:	4b0c      	ldr	r3, [pc, #48]	; (800766c <LCD_LOG_DeInit+0x34>)
 800763a:	4a0d      	ldr	r2, [pc, #52]	; (8007670 <LCD_LOG_DeInit+0x38>)
 800763c:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 800763e:	4a0d      	ldr	r2, [pc, #52]	; (8007674 <LCD_LOG_DeInit+0x3c>)
 8007640:	2300      	movs	r3, #0
 8007642:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top = 0;
 8007644:	4a0c      	ldr	r2, [pc, #48]	; (8007678 <LCD_LOG_DeInit+0x40>)
 8007646:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 8007648:	4a0c      	ldr	r2, [pc, #48]	; (800767c <LCD_LOG_DeInit+0x44>)
 800764a:	8013      	strh	r3, [r2, #0]
  
  LCD_CacheBuffer_yptr_top_bak = 0;
 800764c:	4a0c      	ldr	r2, [pc, #48]	; (8007680 <LCD_LOG_DeInit+0x48>)
 800764e:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 8007650:	4a0c      	ldr	r2, [pc, #48]	; (8007684 <LCD_LOG_DeInit+0x4c>)
 8007652:	8013      	strh	r3, [r2, #0]
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 8007654:	4a0c      	ldr	r2, [pc, #48]	; (8007688 <LCD_LOG_DeInit+0x50>)
 8007656:	2101      	movs	r1, #1
 8007658:	7011      	strb	r1, [r2, #0]
  LCD_ScrollActive = DISABLE;
 800765a:	4a0c      	ldr	r2, [pc, #48]	; (800768c <LCD_LOG_DeInit+0x54>)
 800765c:	7013      	strb	r3, [r2, #0]
  LCD_Lock = DISABLE;
 800765e:	4a0c      	ldr	r2, [pc, #48]	; (8007690 <LCD_LOG_DeInit+0x58>)
 8007660:	7013      	strb	r3, [r2, #0]
  LCD_Scrolled = DISABLE;
 8007662:	4a0c      	ldr	r2, [pc, #48]	; (8007694 <LCD_LOG_DeInit+0x5c>)
 8007664:	7013      	strb	r3, [r2, #0]
  LCD_ScrollBackStep = 0;
 8007666:	4a0c      	ldr	r2, [pc, #48]	; (8007698 <LCD_LOG_DeInit+0x60>)
 8007668:	8013      	strh	r3, [r2, #0]
}
 800766a:	4770      	bx	lr
 800766c:	20004780 	.word	0x20004780
 8007670:	ff000080 	.word	0xff000080
 8007674:	20000b22 	.word	0x20000b22
 8007678:	20000b28 	.word	0x20000b28
 800767c:	20000b20 	.word	0x20000b20
 8007680:	20000b1e 	.word	0x20000b1e
 8007684:	20000b1c 	.word	0x20000b1c
 8007688:	20000b24 	.word	0x20000b24
 800768c:	20000b2a 	.word	0x20000b2a
 8007690:	20000b25 	.word	0x20000b25
 8007694:	20000b26 	.word	0x20000b26
 8007698:	20004784 	.word	0x20004784

0800769c <LCD_LOG_Init>:
{
 800769c:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
 800769e:	f7ff ffcb 	bl	8007638 <LCD_LOG_DeInit>
}
 80076a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 80076a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076aa:	f7fa b92d 	b.w	8001908 <BSP_LCD_Clear>
	...

080076b0 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 80076b0:	b570      	push	{r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 80076b2:	4c16      	ldr	r4, [pc, #88]	; (800770c <LCD_LOG_SetHeader+0x5c>)

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80076b4:	4e16      	ldr	r6, [pc, #88]	; (8007710 <LCD_LOG_SetHeader+0x60>)
{
 80076b6:	4605      	mov	r5, r0
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 80076b8:	4620      	mov	r0, r4
 80076ba:	f7fa f91b 	bl	80018f4 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80076be:	4630      	mov	r0, r6
 80076c0:	f7fa f904 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 80076c4:	f7fa f8ae 	bl	8001824 <BSP_LCD_GetXSize>
 80076c8:	88e3      	ldrh	r3, [r4, #6]
 80076ca:	2100      	movs	r1, #0
 80076cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80076d0:	b282      	uxth	r2, r0
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	4608      	mov	r0, r1
 80076d6:	f7fa fa31 	bl	8001b3c <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 80076da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076de:	f7fa f8f5 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80076e2:	4630      	mov	r0, r6
 80076e4:	f7fa f8fc 	bl	80018e0 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 80076e8:	88e1      	ldrh	r1, [r4, #6]
 80076ea:	462a      	mov	r2, r5
 80076ec:	2301      	movs	r3, #1
 80076ee:	2000      	movs	r0, #0
 80076f0:	f7fa fc36 	bl	8001f60 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 80076f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076f8:	f7fa f8f2 	bl	80018e0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 80076fc:	4805      	ldr	r0, [pc, #20]	; (8007714 <LCD_LOG_SetHeader+0x64>)
 80076fe:	f7fa f8e5 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
}
 8007702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8007706:	4804      	ldr	r0, [pc, #16]	; (8007718 <LCD_LOG_SetHeader+0x68>)
 8007708:	f7fa b8f4 	b.w	80018f4 <BSP_LCD_SetFont>
 800770c:	200000ec 	.word	0x200000ec
 8007710:	ff0000ff 	.word	0xff0000ff
 8007714:	ff000080 	.word	0xff000080
 8007718:	200000e4 	.word	0x200000e4

0800771c <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 800771c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 800771e:	4c1d      	ldr	r4, [pc, #116]	; (8007794 <LCD_LOG_SetFooter+0x78>)

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8007720:	4e1d      	ldr	r6, [pc, #116]	; (8007798 <LCD_LOG_SetFooter+0x7c>)
{
 8007722:	4605      	mov	r5, r0
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8007724:	4620      	mov	r0, r4
 8007726:	f7fa f8e5 	bl	80018f4 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800772a:	4630      	mov	r0, r6
 800772c:	f7fa f8ce 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 8007730:	f7fa f880 	bl	8001834 <BSP_LCD_GetYSize>
 8007734:	88e3      	ldrh	r3, [r4, #6]
 8007736:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800773a:	33fc      	adds	r3, #252	; 0xfc
 800773c:	1819      	adds	r1, r3, r0
 800773e:	b289      	uxth	r1, r1
 8007740:	9101      	str	r1, [sp, #4]
 8007742:	f7fa f86f 	bl	8001824 <BSP_LCD_GetXSize>
 8007746:	88e3      	ldrh	r3, [r4, #6]
 8007748:	9901      	ldr	r1, [sp, #4]
 800774a:	3304      	adds	r3, #4
 800774c:	b282      	uxth	r2, r0
 800774e:	b29b      	uxth	r3, r3
 8007750:	2000      	movs	r0, #0
 8007752:	f7fa f9f3 	bl	8001b3c <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 8007756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800775a:	f7fa f8b7 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800775e:	4630      	mov	r0, r6
 8007760:	f7fa f8be 	bl	80018e0 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 8007764:	f7fa f866 	bl	8001834 <BSP_LCD_GetYSize>
 8007768:	88e1      	ldrh	r1, [r4, #6]
 800776a:	1a41      	subs	r1, r0, r1
 800776c:	2301      	movs	r3, #1
 800776e:	462a      	mov	r2, r5
 8007770:	b289      	uxth	r1, r1
 8007772:	2000      	movs	r0, #0
 8007774:	f7fa fbf4 	bl	8001f60 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8007778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800777c:	f7fa f8b0 	bl	80018e0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8007780:	4806      	ldr	r0, [pc, #24]	; (800779c <LCD_LOG_SetFooter+0x80>)
 8007782:	f7fa f8a3 	bl	80018cc <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8007786:	4620      	mov	r0, r4
}
 8007788:	b002      	add	sp, #8
 800778a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800778e:	f7fa b8b1 	b.w	80018f4 <BSP_LCD_SetFont>
 8007792:	bf00      	nop
 8007794:	200000e4 	.word	0x200000e4
 8007798:	ff0000ff 	.word	0xff0000ff
 800779c:	ff000080 	.word	0xff000080

080077a0 <LCD_LOG_ClearTextZone>:
  * @brief  Clear the Text Zone 
  * @param  None 
  * @retval None
  */
void LCD_LOG_ClearTextZone(void)
{
 80077a0:	b510      	push	{r4, lr}
 80077a2:	2404      	movs	r4, #4
  uint8_t i=0;
  
  for (i= 0 ; i < YWINDOW_SIZE; i++)
  {
    BSP_LCD_ClearStringLine(i + YWINDOW_MIN);
 80077a4:	4620      	mov	r0, r4
 80077a6:	3401      	adds	r4, #1
 80077a8:	f7fa f9f4 	bl	8001b94 <BSP_LCD_ClearStringLine>
  for (i= 0 ; i < YWINDOW_SIZE; i++)
 80077ac:	2c15      	cmp	r4, #21
 80077ae:	d1f9      	bne.n	80077a4 <LCD_LOG_ClearTextZone+0x4>
  }
  
  LCD_LOG_DeInit();
}
 80077b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LCD_LOG_DeInit();
 80077b4:	f7ff bf40 	b.w	8007638 <LCD_LOG_DeInit>

080077b8 <__errno>:
 80077b8:	4b01      	ldr	r3, [pc, #4]	; (80077c0 <__errno+0x8>)
 80077ba:	6818      	ldr	r0, [r3, #0]
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	20000220 	.word	0x20000220

080077c4 <__libc_init_array>:
 80077c4:	b570      	push	{r4, r5, r6, lr}
 80077c6:	4d0d      	ldr	r5, [pc, #52]	; (80077fc <__libc_init_array+0x38>)
 80077c8:	4c0d      	ldr	r4, [pc, #52]	; (8007800 <__libc_init_array+0x3c>)
 80077ca:	1b64      	subs	r4, r4, r5
 80077cc:	10a4      	asrs	r4, r4, #2
 80077ce:	2600      	movs	r6, #0
 80077d0:	42a6      	cmp	r6, r4
 80077d2:	d109      	bne.n	80077e8 <__libc_init_array+0x24>
 80077d4:	4d0b      	ldr	r5, [pc, #44]	; (8007804 <__libc_init_array+0x40>)
 80077d6:	4c0c      	ldr	r4, [pc, #48]	; (8007808 <__libc_init_array+0x44>)
 80077d8:	f001 f8c8 	bl	800896c <_init>
 80077dc:	1b64      	subs	r4, r4, r5
 80077de:	10a4      	asrs	r4, r4, #2
 80077e0:	2600      	movs	r6, #0
 80077e2:	42a6      	cmp	r6, r4
 80077e4:	d105      	bne.n	80077f2 <__libc_init_array+0x2e>
 80077e6:	bd70      	pop	{r4, r5, r6, pc}
 80077e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ec:	4798      	blx	r3
 80077ee:	3601      	adds	r6, #1
 80077f0:	e7ee      	b.n	80077d0 <__libc_init_array+0xc>
 80077f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f6:	4798      	blx	r3
 80077f8:	3601      	adds	r6, #1
 80077fa:	e7f2      	b.n	80077e2 <__libc_init_array+0x1e>
 80077fc:	0801f4dc 	.word	0x0801f4dc
 8007800:	0801f4dc 	.word	0x0801f4dc
 8007804:	0801f4dc 	.word	0x0801f4dc
 8007808:	0801f4e0 	.word	0x0801f4e0

0800780c <memset>:
 800780c:	4402      	add	r2, r0
 800780e:	4603      	mov	r3, r0
 8007810:	4293      	cmp	r3, r2
 8007812:	d100      	bne.n	8007816 <memset+0xa>
 8007814:	4770      	bx	lr
 8007816:	f803 1b01 	strb.w	r1, [r3], #1
 800781a:	e7f9      	b.n	8007810 <memset+0x4>

0800781c <iprintf>:
 800781c:	b40f      	push	{r0, r1, r2, r3}
 800781e:	4b0a      	ldr	r3, [pc, #40]	; (8007848 <iprintf+0x2c>)
 8007820:	b513      	push	{r0, r1, r4, lr}
 8007822:	681c      	ldr	r4, [r3, #0]
 8007824:	b124      	cbz	r4, 8007830 <iprintf+0x14>
 8007826:	69a3      	ldr	r3, [r4, #24]
 8007828:	b913      	cbnz	r3, 8007830 <iprintf+0x14>
 800782a:	4620      	mov	r0, r4
 800782c:	f000 fb24 	bl	8007e78 <__sinit>
 8007830:	ab05      	add	r3, sp, #20
 8007832:	9a04      	ldr	r2, [sp, #16]
 8007834:	68a1      	ldr	r1, [r4, #8]
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	4620      	mov	r0, r4
 800783a:	f000 fcfd 	bl	8008238 <_vfiprintf_r>
 800783e:	b002      	add	sp, #8
 8007840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007844:	b004      	add	sp, #16
 8007846:	4770      	bx	lr
 8007848:	20000220 	.word	0x20000220

0800784c <_puts_r>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	460e      	mov	r6, r1
 8007850:	4605      	mov	r5, r0
 8007852:	b118      	cbz	r0, 800785c <_puts_r+0x10>
 8007854:	6983      	ldr	r3, [r0, #24]
 8007856:	b90b      	cbnz	r3, 800785c <_puts_r+0x10>
 8007858:	f000 fb0e 	bl	8007e78 <__sinit>
 800785c:	69ab      	ldr	r3, [r5, #24]
 800785e:	68ac      	ldr	r4, [r5, #8]
 8007860:	b913      	cbnz	r3, 8007868 <_puts_r+0x1c>
 8007862:	4628      	mov	r0, r5
 8007864:	f000 fb08 	bl	8007e78 <__sinit>
 8007868:	4b2c      	ldr	r3, [pc, #176]	; (800791c <_puts_r+0xd0>)
 800786a:	429c      	cmp	r4, r3
 800786c:	d120      	bne.n	80078b0 <_puts_r+0x64>
 800786e:	686c      	ldr	r4, [r5, #4]
 8007870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007872:	07db      	lsls	r3, r3, #31
 8007874:	d405      	bmi.n	8007882 <_puts_r+0x36>
 8007876:	89a3      	ldrh	r3, [r4, #12]
 8007878:	0598      	lsls	r0, r3, #22
 800787a:	d402      	bmi.n	8007882 <_puts_r+0x36>
 800787c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800787e:	f000 fb99 	bl	8007fb4 <__retarget_lock_acquire_recursive>
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	0719      	lsls	r1, r3, #28
 8007886:	d51d      	bpl.n	80078c4 <_puts_r+0x78>
 8007888:	6923      	ldr	r3, [r4, #16]
 800788a:	b1db      	cbz	r3, 80078c4 <_puts_r+0x78>
 800788c:	3e01      	subs	r6, #1
 800788e:	68a3      	ldr	r3, [r4, #8]
 8007890:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007894:	3b01      	subs	r3, #1
 8007896:	60a3      	str	r3, [r4, #8]
 8007898:	bb39      	cbnz	r1, 80078ea <_puts_r+0x9e>
 800789a:	2b00      	cmp	r3, #0
 800789c:	da38      	bge.n	8007910 <_puts_r+0xc4>
 800789e:	4622      	mov	r2, r4
 80078a0:	210a      	movs	r1, #10
 80078a2:	4628      	mov	r0, r5
 80078a4:	f000 f90e 	bl	8007ac4 <__swbuf_r>
 80078a8:	3001      	adds	r0, #1
 80078aa:	d011      	beq.n	80078d0 <_puts_r+0x84>
 80078ac:	250a      	movs	r5, #10
 80078ae:	e011      	b.n	80078d4 <_puts_r+0x88>
 80078b0:	4b1b      	ldr	r3, [pc, #108]	; (8007920 <_puts_r+0xd4>)
 80078b2:	429c      	cmp	r4, r3
 80078b4:	d101      	bne.n	80078ba <_puts_r+0x6e>
 80078b6:	68ac      	ldr	r4, [r5, #8]
 80078b8:	e7da      	b.n	8007870 <_puts_r+0x24>
 80078ba:	4b1a      	ldr	r3, [pc, #104]	; (8007924 <_puts_r+0xd8>)
 80078bc:	429c      	cmp	r4, r3
 80078be:	bf08      	it	eq
 80078c0:	68ec      	ldreq	r4, [r5, #12]
 80078c2:	e7d5      	b.n	8007870 <_puts_r+0x24>
 80078c4:	4621      	mov	r1, r4
 80078c6:	4628      	mov	r0, r5
 80078c8:	f000 f94e 	bl	8007b68 <__swsetup_r>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	d0dd      	beq.n	800788c <_puts_r+0x40>
 80078d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80078d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078d6:	07da      	lsls	r2, r3, #31
 80078d8:	d405      	bmi.n	80078e6 <_puts_r+0x9a>
 80078da:	89a3      	ldrh	r3, [r4, #12]
 80078dc:	059b      	lsls	r3, r3, #22
 80078de:	d402      	bmi.n	80078e6 <_puts_r+0x9a>
 80078e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078e2:	f000 fb68 	bl	8007fb6 <__retarget_lock_release_recursive>
 80078e6:	4628      	mov	r0, r5
 80078e8:	bd70      	pop	{r4, r5, r6, pc}
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	da04      	bge.n	80078f8 <_puts_r+0xac>
 80078ee:	69a2      	ldr	r2, [r4, #24]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	dc06      	bgt.n	8007902 <_puts_r+0xb6>
 80078f4:	290a      	cmp	r1, #10
 80078f6:	d004      	beq.n	8007902 <_puts_r+0xb6>
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	6022      	str	r2, [r4, #0]
 80078fe:	7019      	strb	r1, [r3, #0]
 8007900:	e7c5      	b.n	800788e <_puts_r+0x42>
 8007902:	4622      	mov	r2, r4
 8007904:	4628      	mov	r0, r5
 8007906:	f000 f8dd 	bl	8007ac4 <__swbuf_r>
 800790a:	3001      	adds	r0, #1
 800790c:	d1bf      	bne.n	800788e <_puts_r+0x42>
 800790e:	e7df      	b.n	80078d0 <_puts_r+0x84>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	250a      	movs	r5, #10
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	6022      	str	r2, [r4, #0]
 8007918:	701d      	strb	r5, [r3, #0]
 800791a:	e7db      	b.n	80078d4 <_puts_r+0x88>
 800791c:	0801f460 	.word	0x0801f460
 8007920:	0801f480 	.word	0x0801f480
 8007924:	0801f440 	.word	0x0801f440

08007928 <puts>:
 8007928:	4b02      	ldr	r3, [pc, #8]	; (8007934 <puts+0xc>)
 800792a:	4601      	mov	r1, r0
 800792c:	6818      	ldr	r0, [r3, #0]
 800792e:	f7ff bf8d 	b.w	800784c <_puts_r>
 8007932:	bf00      	nop
 8007934:	20000220 	.word	0x20000220

08007938 <setvbuf>:
 8007938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800793c:	461d      	mov	r5, r3
 800793e:	4b5d      	ldr	r3, [pc, #372]	; (8007ab4 <setvbuf+0x17c>)
 8007940:	681f      	ldr	r7, [r3, #0]
 8007942:	4604      	mov	r4, r0
 8007944:	460e      	mov	r6, r1
 8007946:	4690      	mov	r8, r2
 8007948:	b127      	cbz	r7, 8007954 <setvbuf+0x1c>
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	b913      	cbnz	r3, 8007954 <setvbuf+0x1c>
 800794e:	4638      	mov	r0, r7
 8007950:	f000 fa92 	bl	8007e78 <__sinit>
 8007954:	4b58      	ldr	r3, [pc, #352]	; (8007ab8 <setvbuf+0x180>)
 8007956:	429c      	cmp	r4, r3
 8007958:	d167      	bne.n	8007a2a <setvbuf+0xf2>
 800795a:	687c      	ldr	r4, [r7, #4]
 800795c:	f1b8 0f02 	cmp.w	r8, #2
 8007960:	d006      	beq.n	8007970 <setvbuf+0x38>
 8007962:	f1b8 0f01 	cmp.w	r8, #1
 8007966:	f200 809f 	bhi.w	8007aa8 <setvbuf+0x170>
 800796a:	2d00      	cmp	r5, #0
 800796c:	f2c0 809c 	blt.w	8007aa8 <setvbuf+0x170>
 8007970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007972:	07db      	lsls	r3, r3, #31
 8007974:	d405      	bmi.n	8007982 <setvbuf+0x4a>
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	0598      	lsls	r0, r3, #22
 800797a:	d402      	bmi.n	8007982 <setvbuf+0x4a>
 800797c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800797e:	f000 fb19 	bl	8007fb4 <__retarget_lock_acquire_recursive>
 8007982:	4621      	mov	r1, r4
 8007984:	4638      	mov	r0, r7
 8007986:	f000 f9e3 	bl	8007d50 <_fflush_r>
 800798a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800798c:	b141      	cbz	r1, 80079a0 <setvbuf+0x68>
 800798e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007992:	4299      	cmp	r1, r3
 8007994:	d002      	beq.n	800799c <setvbuf+0x64>
 8007996:	4638      	mov	r0, r7
 8007998:	f000 fb7a 	bl	8008090 <_free_r>
 800799c:	2300      	movs	r3, #0
 800799e:	6363      	str	r3, [r4, #52]	; 0x34
 80079a0:	2300      	movs	r3, #0
 80079a2:	61a3      	str	r3, [r4, #24]
 80079a4:	6063      	str	r3, [r4, #4]
 80079a6:	89a3      	ldrh	r3, [r4, #12]
 80079a8:	0619      	lsls	r1, r3, #24
 80079aa:	d503      	bpl.n	80079b4 <setvbuf+0x7c>
 80079ac:	6921      	ldr	r1, [r4, #16]
 80079ae:	4638      	mov	r0, r7
 80079b0:	f000 fb6e 	bl	8008090 <_free_r>
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80079ba:	f023 0303 	bic.w	r3, r3, #3
 80079be:	f1b8 0f02 	cmp.w	r8, #2
 80079c2:	81a3      	strh	r3, [r4, #12]
 80079c4:	d06c      	beq.n	8007aa0 <setvbuf+0x168>
 80079c6:	ab01      	add	r3, sp, #4
 80079c8:	466a      	mov	r2, sp
 80079ca:	4621      	mov	r1, r4
 80079cc:	4638      	mov	r0, r7
 80079ce:	f000 faf3 	bl	8007fb8 <__swhatbuf_r>
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	4318      	orrs	r0, r3
 80079d6:	81a0      	strh	r0, [r4, #12]
 80079d8:	2d00      	cmp	r5, #0
 80079da:	d130      	bne.n	8007a3e <setvbuf+0x106>
 80079dc:	9d00      	ldr	r5, [sp, #0]
 80079de:	4628      	mov	r0, r5
 80079e0:	f000 fb4e 	bl	8008080 <malloc>
 80079e4:	4606      	mov	r6, r0
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d155      	bne.n	8007a96 <setvbuf+0x15e>
 80079ea:	f8dd 9000 	ldr.w	r9, [sp]
 80079ee:	45a9      	cmp	r9, r5
 80079f0:	d14a      	bne.n	8007a88 <setvbuf+0x150>
 80079f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80079f6:	2200      	movs	r2, #0
 80079f8:	60a2      	str	r2, [r4, #8]
 80079fa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80079fe:	6022      	str	r2, [r4, #0]
 8007a00:	6122      	str	r2, [r4, #16]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a08:	6162      	str	r2, [r4, #20]
 8007a0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a0c:	f043 0302 	orr.w	r3, r3, #2
 8007a10:	07d2      	lsls	r2, r2, #31
 8007a12:	81a3      	strh	r3, [r4, #12]
 8007a14:	d405      	bmi.n	8007a22 <setvbuf+0xea>
 8007a16:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007a1a:	d102      	bne.n	8007a22 <setvbuf+0xea>
 8007a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a1e:	f000 faca 	bl	8007fb6 <__retarget_lock_release_recursive>
 8007a22:	4628      	mov	r0, r5
 8007a24:	b003      	add	sp, #12
 8007a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a2a:	4b24      	ldr	r3, [pc, #144]	; (8007abc <setvbuf+0x184>)
 8007a2c:	429c      	cmp	r4, r3
 8007a2e:	d101      	bne.n	8007a34 <setvbuf+0xfc>
 8007a30:	68bc      	ldr	r4, [r7, #8]
 8007a32:	e793      	b.n	800795c <setvbuf+0x24>
 8007a34:	4b22      	ldr	r3, [pc, #136]	; (8007ac0 <setvbuf+0x188>)
 8007a36:	429c      	cmp	r4, r3
 8007a38:	bf08      	it	eq
 8007a3a:	68fc      	ldreq	r4, [r7, #12]
 8007a3c:	e78e      	b.n	800795c <setvbuf+0x24>
 8007a3e:	2e00      	cmp	r6, #0
 8007a40:	d0cd      	beq.n	80079de <setvbuf+0xa6>
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	b913      	cbnz	r3, 8007a4c <setvbuf+0x114>
 8007a46:	4638      	mov	r0, r7
 8007a48:	f000 fa16 	bl	8007e78 <__sinit>
 8007a4c:	f1b8 0f01 	cmp.w	r8, #1
 8007a50:	bf08      	it	eq
 8007a52:	89a3      	ldrheq	r3, [r4, #12]
 8007a54:	6026      	str	r6, [r4, #0]
 8007a56:	bf04      	itt	eq
 8007a58:	f043 0301 	orreq.w	r3, r3, #1
 8007a5c:	81a3      	strheq	r3, [r4, #12]
 8007a5e:	89a2      	ldrh	r2, [r4, #12]
 8007a60:	f012 0308 	ands.w	r3, r2, #8
 8007a64:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007a68:	d01c      	beq.n	8007aa4 <setvbuf+0x16c>
 8007a6a:	07d3      	lsls	r3, r2, #31
 8007a6c:	bf41      	itttt	mi
 8007a6e:	2300      	movmi	r3, #0
 8007a70:	426d      	negmi	r5, r5
 8007a72:	60a3      	strmi	r3, [r4, #8]
 8007a74:	61a5      	strmi	r5, [r4, #24]
 8007a76:	bf58      	it	pl
 8007a78:	60a5      	strpl	r5, [r4, #8]
 8007a7a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007a7c:	f015 0501 	ands.w	r5, r5, #1
 8007a80:	d115      	bne.n	8007aae <setvbuf+0x176>
 8007a82:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007a86:	e7c8      	b.n	8007a1a <setvbuf+0xe2>
 8007a88:	4648      	mov	r0, r9
 8007a8a:	f000 faf9 	bl	8008080 <malloc>
 8007a8e:	4606      	mov	r6, r0
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d0ae      	beq.n	80079f2 <setvbuf+0xba>
 8007a94:	464d      	mov	r5, r9
 8007a96:	89a3      	ldrh	r3, [r4, #12]
 8007a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a9c:	81a3      	strh	r3, [r4, #12]
 8007a9e:	e7d0      	b.n	8007a42 <setvbuf+0x10a>
 8007aa0:	2500      	movs	r5, #0
 8007aa2:	e7a8      	b.n	80079f6 <setvbuf+0xbe>
 8007aa4:	60a3      	str	r3, [r4, #8]
 8007aa6:	e7e8      	b.n	8007a7a <setvbuf+0x142>
 8007aa8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007aac:	e7b9      	b.n	8007a22 <setvbuf+0xea>
 8007aae:	2500      	movs	r5, #0
 8007ab0:	e7b7      	b.n	8007a22 <setvbuf+0xea>
 8007ab2:	bf00      	nop
 8007ab4:	20000220 	.word	0x20000220
 8007ab8:	0801f460 	.word	0x0801f460
 8007abc:	0801f480 	.word	0x0801f480
 8007ac0:	0801f440 	.word	0x0801f440

08007ac4 <__swbuf_r>:
 8007ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac6:	460e      	mov	r6, r1
 8007ac8:	4614      	mov	r4, r2
 8007aca:	4605      	mov	r5, r0
 8007acc:	b118      	cbz	r0, 8007ad6 <__swbuf_r+0x12>
 8007ace:	6983      	ldr	r3, [r0, #24]
 8007ad0:	b90b      	cbnz	r3, 8007ad6 <__swbuf_r+0x12>
 8007ad2:	f000 f9d1 	bl	8007e78 <__sinit>
 8007ad6:	4b21      	ldr	r3, [pc, #132]	; (8007b5c <__swbuf_r+0x98>)
 8007ad8:	429c      	cmp	r4, r3
 8007ada:	d12b      	bne.n	8007b34 <__swbuf_r+0x70>
 8007adc:	686c      	ldr	r4, [r5, #4]
 8007ade:	69a3      	ldr	r3, [r4, #24]
 8007ae0:	60a3      	str	r3, [r4, #8]
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	071a      	lsls	r2, r3, #28
 8007ae6:	d52f      	bpl.n	8007b48 <__swbuf_r+0x84>
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	b36b      	cbz	r3, 8007b48 <__swbuf_r+0x84>
 8007aec:	6923      	ldr	r3, [r4, #16]
 8007aee:	6820      	ldr	r0, [r4, #0]
 8007af0:	1ac0      	subs	r0, r0, r3
 8007af2:	6963      	ldr	r3, [r4, #20]
 8007af4:	b2f6      	uxtb	r6, r6
 8007af6:	4283      	cmp	r3, r0
 8007af8:	4637      	mov	r7, r6
 8007afa:	dc04      	bgt.n	8007b06 <__swbuf_r+0x42>
 8007afc:	4621      	mov	r1, r4
 8007afe:	4628      	mov	r0, r5
 8007b00:	f000 f926 	bl	8007d50 <_fflush_r>
 8007b04:	bb30      	cbnz	r0, 8007b54 <__swbuf_r+0x90>
 8007b06:	68a3      	ldr	r3, [r4, #8]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	60a3      	str	r3, [r4, #8]
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	1c5a      	adds	r2, r3, #1
 8007b10:	6022      	str	r2, [r4, #0]
 8007b12:	701e      	strb	r6, [r3, #0]
 8007b14:	6963      	ldr	r3, [r4, #20]
 8007b16:	3001      	adds	r0, #1
 8007b18:	4283      	cmp	r3, r0
 8007b1a:	d004      	beq.n	8007b26 <__swbuf_r+0x62>
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	07db      	lsls	r3, r3, #31
 8007b20:	d506      	bpl.n	8007b30 <__swbuf_r+0x6c>
 8007b22:	2e0a      	cmp	r6, #10
 8007b24:	d104      	bne.n	8007b30 <__swbuf_r+0x6c>
 8007b26:	4621      	mov	r1, r4
 8007b28:	4628      	mov	r0, r5
 8007b2a:	f000 f911 	bl	8007d50 <_fflush_r>
 8007b2e:	b988      	cbnz	r0, 8007b54 <__swbuf_r+0x90>
 8007b30:	4638      	mov	r0, r7
 8007b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b34:	4b0a      	ldr	r3, [pc, #40]	; (8007b60 <__swbuf_r+0x9c>)
 8007b36:	429c      	cmp	r4, r3
 8007b38:	d101      	bne.n	8007b3e <__swbuf_r+0x7a>
 8007b3a:	68ac      	ldr	r4, [r5, #8]
 8007b3c:	e7cf      	b.n	8007ade <__swbuf_r+0x1a>
 8007b3e:	4b09      	ldr	r3, [pc, #36]	; (8007b64 <__swbuf_r+0xa0>)
 8007b40:	429c      	cmp	r4, r3
 8007b42:	bf08      	it	eq
 8007b44:	68ec      	ldreq	r4, [r5, #12]
 8007b46:	e7ca      	b.n	8007ade <__swbuf_r+0x1a>
 8007b48:	4621      	mov	r1, r4
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f000 f80c 	bl	8007b68 <__swsetup_r>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d0cb      	beq.n	8007aec <__swbuf_r+0x28>
 8007b54:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007b58:	e7ea      	b.n	8007b30 <__swbuf_r+0x6c>
 8007b5a:	bf00      	nop
 8007b5c:	0801f460 	.word	0x0801f460
 8007b60:	0801f480 	.word	0x0801f480
 8007b64:	0801f440 	.word	0x0801f440

08007b68 <__swsetup_r>:
 8007b68:	4b32      	ldr	r3, [pc, #200]	; (8007c34 <__swsetup_r+0xcc>)
 8007b6a:	b570      	push	{r4, r5, r6, lr}
 8007b6c:	681d      	ldr	r5, [r3, #0]
 8007b6e:	4606      	mov	r6, r0
 8007b70:	460c      	mov	r4, r1
 8007b72:	b125      	cbz	r5, 8007b7e <__swsetup_r+0x16>
 8007b74:	69ab      	ldr	r3, [r5, #24]
 8007b76:	b913      	cbnz	r3, 8007b7e <__swsetup_r+0x16>
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f000 f97d 	bl	8007e78 <__sinit>
 8007b7e:	4b2e      	ldr	r3, [pc, #184]	; (8007c38 <__swsetup_r+0xd0>)
 8007b80:	429c      	cmp	r4, r3
 8007b82:	d10f      	bne.n	8007ba4 <__swsetup_r+0x3c>
 8007b84:	686c      	ldr	r4, [r5, #4]
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b8c:	0719      	lsls	r1, r3, #28
 8007b8e:	d42c      	bmi.n	8007bea <__swsetup_r+0x82>
 8007b90:	06dd      	lsls	r5, r3, #27
 8007b92:	d411      	bmi.n	8007bb8 <__swsetup_r+0x50>
 8007b94:	2309      	movs	r3, #9
 8007b96:	6033      	str	r3, [r6, #0]
 8007b98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b9c:	81a3      	strh	r3, [r4, #12]
 8007b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ba2:	e03e      	b.n	8007c22 <__swsetup_r+0xba>
 8007ba4:	4b25      	ldr	r3, [pc, #148]	; (8007c3c <__swsetup_r+0xd4>)
 8007ba6:	429c      	cmp	r4, r3
 8007ba8:	d101      	bne.n	8007bae <__swsetup_r+0x46>
 8007baa:	68ac      	ldr	r4, [r5, #8]
 8007bac:	e7eb      	b.n	8007b86 <__swsetup_r+0x1e>
 8007bae:	4b24      	ldr	r3, [pc, #144]	; (8007c40 <__swsetup_r+0xd8>)
 8007bb0:	429c      	cmp	r4, r3
 8007bb2:	bf08      	it	eq
 8007bb4:	68ec      	ldreq	r4, [r5, #12]
 8007bb6:	e7e6      	b.n	8007b86 <__swsetup_r+0x1e>
 8007bb8:	0758      	lsls	r0, r3, #29
 8007bba:	d512      	bpl.n	8007be2 <__swsetup_r+0x7a>
 8007bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bbe:	b141      	cbz	r1, 8007bd2 <__swsetup_r+0x6a>
 8007bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bc4:	4299      	cmp	r1, r3
 8007bc6:	d002      	beq.n	8007bce <__swsetup_r+0x66>
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f000 fa61 	bl	8008090 <_free_r>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	6363      	str	r3, [r4, #52]	; 0x34
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bd8:	81a3      	strh	r3, [r4, #12]
 8007bda:	2300      	movs	r3, #0
 8007bdc:	6063      	str	r3, [r4, #4]
 8007bde:	6923      	ldr	r3, [r4, #16]
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	f043 0308 	orr.w	r3, r3, #8
 8007be8:	81a3      	strh	r3, [r4, #12]
 8007bea:	6923      	ldr	r3, [r4, #16]
 8007bec:	b94b      	cbnz	r3, 8007c02 <__swsetup_r+0x9a>
 8007bee:	89a3      	ldrh	r3, [r4, #12]
 8007bf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bf8:	d003      	beq.n	8007c02 <__swsetup_r+0x9a>
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f000 f9ff 	bl	8008000 <__smakebuf_r>
 8007c02:	89a0      	ldrh	r0, [r4, #12]
 8007c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c08:	f010 0301 	ands.w	r3, r0, #1
 8007c0c:	d00a      	beq.n	8007c24 <__swsetup_r+0xbc>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60a3      	str	r3, [r4, #8]
 8007c12:	6963      	ldr	r3, [r4, #20]
 8007c14:	425b      	negs	r3, r3
 8007c16:	61a3      	str	r3, [r4, #24]
 8007c18:	6923      	ldr	r3, [r4, #16]
 8007c1a:	b943      	cbnz	r3, 8007c2e <__swsetup_r+0xc6>
 8007c1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c20:	d1ba      	bne.n	8007b98 <__swsetup_r+0x30>
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	0781      	lsls	r1, r0, #30
 8007c26:	bf58      	it	pl
 8007c28:	6963      	ldrpl	r3, [r4, #20]
 8007c2a:	60a3      	str	r3, [r4, #8]
 8007c2c:	e7f4      	b.n	8007c18 <__swsetup_r+0xb0>
 8007c2e:	2000      	movs	r0, #0
 8007c30:	e7f7      	b.n	8007c22 <__swsetup_r+0xba>
 8007c32:	bf00      	nop
 8007c34:	20000220 	.word	0x20000220
 8007c38:	0801f460 	.word	0x0801f460
 8007c3c:	0801f480 	.word	0x0801f480
 8007c40:	0801f440 	.word	0x0801f440

08007c44 <__sflush_r>:
 8007c44:	898a      	ldrh	r2, [r1, #12]
 8007c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c4a:	4605      	mov	r5, r0
 8007c4c:	0710      	lsls	r0, r2, #28
 8007c4e:	460c      	mov	r4, r1
 8007c50:	d458      	bmi.n	8007d04 <__sflush_r+0xc0>
 8007c52:	684b      	ldr	r3, [r1, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	dc05      	bgt.n	8007c64 <__sflush_r+0x20>
 8007c58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	dc02      	bgt.n	8007c64 <__sflush_r+0x20>
 8007c5e:	2000      	movs	r0, #0
 8007c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c66:	2e00      	cmp	r6, #0
 8007c68:	d0f9      	beq.n	8007c5e <__sflush_r+0x1a>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c70:	682f      	ldr	r7, [r5, #0]
 8007c72:	602b      	str	r3, [r5, #0]
 8007c74:	d032      	beq.n	8007cdc <__sflush_r+0x98>
 8007c76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	075a      	lsls	r2, r3, #29
 8007c7c:	d505      	bpl.n	8007c8a <__sflush_r+0x46>
 8007c7e:	6863      	ldr	r3, [r4, #4]
 8007c80:	1ac0      	subs	r0, r0, r3
 8007c82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c84:	b10b      	cbz	r3, 8007c8a <__sflush_r+0x46>
 8007c86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c88:	1ac0      	subs	r0, r0, r3
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c90:	6a21      	ldr	r1, [r4, #32]
 8007c92:	4628      	mov	r0, r5
 8007c94:	47b0      	blx	r6
 8007c96:	1c43      	adds	r3, r0, #1
 8007c98:	89a3      	ldrh	r3, [r4, #12]
 8007c9a:	d106      	bne.n	8007caa <__sflush_r+0x66>
 8007c9c:	6829      	ldr	r1, [r5, #0]
 8007c9e:	291d      	cmp	r1, #29
 8007ca0:	d82c      	bhi.n	8007cfc <__sflush_r+0xb8>
 8007ca2:	4a2a      	ldr	r2, [pc, #168]	; (8007d4c <__sflush_r+0x108>)
 8007ca4:	40ca      	lsrs	r2, r1
 8007ca6:	07d6      	lsls	r6, r2, #31
 8007ca8:	d528      	bpl.n	8007cfc <__sflush_r+0xb8>
 8007caa:	2200      	movs	r2, #0
 8007cac:	6062      	str	r2, [r4, #4]
 8007cae:	04d9      	lsls	r1, r3, #19
 8007cb0:	6922      	ldr	r2, [r4, #16]
 8007cb2:	6022      	str	r2, [r4, #0]
 8007cb4:	d504      	bpl.n	8007cc0 <__sflush_r+0x7c>
 8007cb6:	1c42      	adds	r2, r0, #1
 8007cb8:	d101      	bne.n	8007cbe <__sflush_r+0x7a>
 8007cba:	682b      	ldr	r3, [r5, #0]
 8007cbc:	b903      	cbnz	r3, 8007cc0 <__sflush_r+0x7c>
 8007cbe:	6560      	str	r0, [r4, #84]	; 0x54
 8007cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cc2:	602f      	str	r7, [r5, #0]
 8007cc4:	2900      	cmp	r1, #0
 8007cc6:	d0ca      	beq.n	8007c5e <__sflush_r+0x1a>
 8007cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ccc:	4299      	cmp	r1, r3
 8007cce:	d002      	beq.n	8007cd6 <__sflush_r+0x92>
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	f000 f9dd 	bl	8008090 <_free_r>
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	6360      	str	r0, [r4, #52]	; 0x34
 8007cda:	e7c1      	b.n	8007c60 <__sflush_r+0x1c>
 8007cdc:	6a21      	ldr	r1, [r4, #32]
 8007cde:	2301      	movs	r3, #1
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	47b0      	blx	r6
 8007ce4:	1c41      	adds	r1, r0, #1
 8007ce6:	d1c7      	bne.n	8007c78 <__sflush_r+0x34>
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d0c4      	beq.n	8007c78 <__sflush_r+0x34>
 8007cee:	2b1d      	cmp	r3, #29
 8007cf0:	d001      	beq.n	8007cf6 <__sflush_r+0xb2>
 8007cf2:	2b16      	cmp	r3, #22
 8007cf4:	d101      	bne.n	8007cfa <__sflush_r+0xb6>
 8007cf6:	602f      	str	r7, [r5, #0]
 8007cf8:	e7b1      	b.n	8007c5e <__sflush_r+0x1a>
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d00:	81a3      	strh	r3, [r4, #12]
 8007d02:	e7ad      	b.n	8007c60 <__sflush_r+0x1c>
 8007d04:	690f      	ldr	r7, [r1, #16]
 8007d06:	2f00      	cmp	r7, #0
 8007d08:	d0a9      	beq.n	8007c5e <__sflush_r+0x1a>
 8007d0a:	0793      	lsls	r3, r2, #30
 8007d0c:	680e      	ldr	r6, [r1, #0]
 8007d0e:	bf08      	it	eq
 8007d10:	694b      	ldreq	r3, [r1, #20]
 8007d12:	600f      	str	r7, [r1, #0]
 8007d14:	bf18      	it	ne
 8007d16:	2300      	movne	r3, #0
 8007d18:	eba6 0807 	sub.w	r8, r6, r7
 8007d1c:	608b      	str	r3, [r1, #8]
 8007d1e:	f1b8 0f00 	cmp.w	r8, #0
 8007d22:	dd9c      	ble.n	8007c5e <__sflush_r+0x1a>
 8007d24:	6a21      	ldr	r1, [r4, #32]
 8007d26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d28:	4643      	mov	r3, r8
 8007d2a:	463a      	mov	r2, r7
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	47b0      	blx	r6
 8007d30:	2800      	cmp	r0, #0
 8007d32:	dc06      	bgt.n	8007d42 <__sflush_r+0xfe>
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d3a:	81a3      	strh	r3, [r4, #12]
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d40:	e78e      	b.n	8007c60 <__sflush_r+0x1c>
 8007d42:	4407      	add	r7, r0
 8007d44:	eba8 0800 	sub.w	r8, r8, r0
 8007d48:	e7e9      	b.n	8007d1e <__sflush_r+0xda>
 8007d4a:	bf00      	nop
 8007d4c:	20400001 	.word	0x20400001

08007d50 <_fflush_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	690b      	ldr	r3, [r1, #16]
 8007d54:	4605      	mov	r5, r0
 8007d56:	460c      	mov	r4, r1
 8007d58:	b913      	cbnz	r3, 8007d60 <_fflush_r+0x10>
 8007d5a:	2500      	movs	r5, #0
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	bd38      	pop	{r3, r4, r5, pc}
 8007d60:	b118      	cbz	r0, 8007d6a <_fflush_r+0x1a>
 8007d62:	6983      	ldr	r3, [r0, #24]
 8007d64:	b90b      	cbnz	r3, 8007d6a <_fflush_r+0x1a>
 8007d66:	f000 f887 	bl	8007e78 <__sinit>
 8007d6a:	4b14      	ldr	r3, [pc, #80]	; (8007dbc <_fflush_r+0x6c>)
 8007d6c:	429c      	cmp	r4, r3
 8007d6e:	d11b      	bne.n	8007da8 <_fflush_r+0x58>
 8007d70:	686c      	ldr	r4, [r5, #4]
 8007d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d0ef      	beq.n	8007d5a <_fflush_r+0xa>
 8007d7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d7c:	07d0      	lsls	r0, r2, #31
 8007d7e:	d404      	bmi.n	8007d8a <_fflush_r+0x3a>
 8007d80:	0599      	lsls	r1, r3, #22
 8007d82:	d402      	bmi.n	8007d8a <_fflush_r+0x3a>
 8007d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d86:	f000 f915 	bl	8007fb4 <__retarget_lock_acquire_recursive>
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	f7ff ff59 	bl	8007c44 <__sflush_r>
 8007d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d94:	07da      	lsls	r2, r3, #31
 8007d96:	4605      	mov	r5, r0
 8007d98:	d4e0      	bmi.n	8007d5c <_fflush_r+0xc>
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	059b      	lsls	r3, r3, #22
 8007d9e:	d4dd      	bmi.n	8007d5c <_fflush_r+0xc>
 8007da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007da2:	f000 f908 	bl	8007fb6 <__retarget_lock_release_recursive>
 8007da6:	e7d9      	b.n	8007d5c <_fflush_r+0xc>
 8007da8:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <_fflush_r+0x70>)
 8007daa:	429c      	cmp	r4, r3
 8007dac:	d101      	bne.n	8007db2 <_fflush_r+0x62>
 8007dae:	68ac      	ldr	r4, [r5, #8]
 8007db0:	e7df      	b.n	8007d72 <_fflush_r+0x22>
 8007db2:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <_fflush_r+0x74>)
 8007db4:	429c      	cmp	r4, r3
 8007db6:	bf08      	it	eq
 8007db8:	68ec      	ldreq	r4, [r5, #12]
 8007dba:	e7da      	b.n	8007d72 <_fflush_r+0x22>
 8007dbc:	0801f460 	.word	0x0801f460
 8007dc0:	0801f480 	.word	0x0801f480
 8007dc4:	0801f440 	.word	0x0801f440

08007dc8 <std>:
 8007dc8:	2300      	movs	r3, #0
 8007dca:	b510      	push	{r4, lr}
 8007dcc:	4604      	mov	r4, r0
 8007dce:	e9c0 3300 	strd	r3, r3, [r0]
 8007dd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dd6:	6083      	str	r3, [r0, #8]
 8007dd8:	8181      	strh	r1, [r0, #12]
 8007dda:	6643      	str	r3, [r0, #100]	; 0x64
 8007ddc:	81c2      	strh	r2, [r0, #14]
 8007dde:	6183      	str	r3, [r0, #24]
 8007de0:	4619      	mov	r1, r3
 8007de2:	2208      	movs	r2, #8
 8007de4:	305c      	adds	r0, #92	; 0x5c
 8007de6:	f7ff fd11 	bl	800780c <memset>
 8007dea:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <std+0x38>)
 8007dec:	6263      	str	r3, [r4, #36]	; 0x24
 8007dee:	4b05      	ldr	r3, [pc, #20]	; (8007e04 <std+0x3c>)
 8007df0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007df2:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <std+0x40>)
 8007df4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007df6:	4b05      	ldr	r3, [pc, #20]	; (8007e0c <std+0x44>)
 8007df8:	6224      	str	r4, [r4, #32]
 8007dfa:	6323      	str	r3, [r4, #48]	; 0x30
 8007dfc:	bd10      	pop	{r4, pc}
 8007dfe:	bf00      	nop
 8007e00:	080087e1 	.word	0x080087e1
 8007e04:	08008803 	.word	0x08008803
 8007e08:	0800883b 	.word	0x0800883b
 8007e0c:	0800885f 	.word	0x0800885f

08007e10 <_cleanup_r>:
 8007e10:	4901      	ldr	r1, [pc, #4]	; (8007e18 <_cleanup_r+0x8>)
 8007e12:	f000 b8af 	b.w	8007f74 <_fwalk_reent>
 8007e16:	bf00      	nop
 8007e18:	08007d51 	.word	0x08007d51

08007e1c <__sfmoreglue>:
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	1e4a      	subs	r2, r1, #1
 8007e20:	2568      	movs	r5, #104	; 0x68
 8007e22:	4355      	muls	r5, r2
 8007e24:	460e      	mov	r6, r1
 8007e26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e2a:	f000 f981 	bl	8008130 <_malloc_r>
 8007e2e:	4604      	mov	r4, r0
 8007e30:	b140      	cbz	r0, 8007e44 <__sfmoreglue+0x28>
 8007e32:	2100      	movs	r1, #0
 8007e34:	e9c0 1600 	strd	r1, r6, [r0]
 8007e38:	300c      	adds	r0, #12
 8007e3a:	60a0      	str	r0, [r4, #8]
 8007e3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e40:	f7ff fce4 	bl	800780c <memset>
 8007e44:	4620      	mov	r0, r4
 8007e46:	bd70      	pop	{r4, r5, r6, pc}

08007e48 <__sfp_lock_acquire>:
 8007e48:	4801      	ldr	r0, [pc, #4]	; (8007e50 <__sfp_lock_acquire+0x8>)
 8007e4a:	f000 b8b3 	b.w	8007fb4 <__retarget_lock_acquire_recursive>
 8007e4e:	bf00      	nop
 8007e50:	2000478e 	.word	0x2000478e

08007e54 <__sfp_lock_release>:
 8007e54:	4801      	ldr	r0, [pc, #4]	; (8007e5c <__sfp_lock_release+0x8>)
 8007e56:	f000 b8ae 	b.w	8007fb6 <__retarget_lock_release_recursive>
 8007e5a:	bf00      	nop
 8007e5c:	2000478e 	.word	0x2000478e

08007e60 <__sinit_lock_acquire>:
 8007e60:	4801      	ldr	r0, [pc, #4]	; (8007e68 <__sinit_lock_acquire+0x8>)
 8007e62:	f000 b8a7 	b.w	8007fb4 <__retarget_lock_acquire_recursive>
 8007e66:	bf00      	nop
 8007e68:	20004789 	.word	0x20004789

08007e6c <__sinit_lock_release>:
 8007e6c:	4801      	ldr	r0, [pc, #4]	; (8007e74 <__sinit_lock_release+0x8>)
 8007e6e:	f000 b8a2 	b.w	8007fb6 <__retarget_lock_release_recursive>
 8007e72:	bf00      	nop
 8007e74:	20004789 	.word	0x20004789

08007e78 <__sinit>:
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	f7ff fff0 	bl	8007e60 <__sinit_lock_acquire>
 8007e80:	69a3      	ldr	r3, [r4, #24]
 8007e82:	b11b      	cbz	r3, 8007e8c <__sinit+0x14>
 8007e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e88:	f7ff bff0 	b.w	8007e6c <__sinit_lock_release>
 8007e8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e90:	6523      	str	r3, [r4, #80]	; 0x50
 8007e92:	4b13      	ldr	r3, [pc, #76]	; (8007ee0 <__sinit+0x68>)
 8007e94:	4a13      	ldr	r2, [pc, #76]	; (8007ee4 <__sinit+0x6c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e9a:	42a3      	cmp	r3, r4
 8007e9c:	bf04      	itt	eq
 8007e9e:	2301      	moveq	r3, #1
 8007ea0:	61a3      	streq	r3, [r4, #24]
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f000 f820 	bl	8007ee8 <__sfp>
 8007ea8:	6060      	str	r0, [r4, #4]
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 f81c 	bl	8007ee8 <__sfp>
 8007eb0:	60a0      	str	r0, [r4, #8]
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f000 f818 	bl	8007ee8 <__sfp>
 8007eb8:	2200      	movs	r2, #0
 8007eba:	60e0      	str	r0, [r4, #12]
 8007ebc:	2104      	movs	r1, #4
 8007ebe:	6860      	ldr	r0, [r4, #4]
 8007ec0:	f7ff ff82 	bl	8007dc8 <std>
 8007ec4:	68a0      	ldr	r0, [r4, #8]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	2109      	movs	r1, #9
 8007eca:	f7ff ff7d 	bl	8007dc8 <std>
 8007ece:	68e0      	ldr	r0, [r4, #12]
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	2112      	movs	r1, #18
 8007ed4:	f7ff ff78 	bl	8007dc8 <std>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	61a3      	str	r3, [r4, #24]
 8007edc:	e7d2      	b.n	8007e84 <__sinit+0xc>
 8007ede:	bf00      	nop
 8007ee0:	0801f43c 	.word	0x0801f43c
 8007ee4:	08007e11 	.word	0x08007e11

08007ee8 <__sfp>:
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	4607      	mov	r7, r0
 8007eec:	f7ff ffac 	bl	8007e48 <__sfp_lock_acquire>
 8007ef0:	4b1e      	ldr	r3, [pc, #120]	; (8007f6c <__sfp+0x84>)
 8007ef2:	681e      	ldr	r6, [r3, #0]
 8007ef4:	69b3      	ldr	r3, [r6, #24]
 8007ef6:	b913      	cbnz	r3, 8007efe <__sfp+0x16>
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f7ff ffbd 	bl	8007e78 <__sinit>
 8007efe:	3648      	adds	r6, #72	; 0x48
 8007f00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f04:	3b01      	subs	r3, #1
 8007f06:	d503      	bpl.n	8007f10 <__sfp+0x28>
 8007f08:	6833      	ldr	r3, [r6, #0]
 8007f0a:	b30b      	cbz	r3, 8007f50 <__sfp+0x68>
 8007f0c:	6836      	ldr	r6, [r6, #0]
 8007f0e:	e7f7      	b.n	8007f00 <__sfp+0x18>
 8007f10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f14:	b9d5      	cbnz	r5, 8007f4c <__sfp+0x64>
 8007f16:	4b16      	ldr	r3, [pc, #88]	; (8007f70 <__sfp+0x88>)
 8007f18:	60e3      	str	r3, [r4, #12]
 8007f1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f1e:	6665      	str	r5, [r4, #100]	; 0x64
 8007f20:	f000 f847 	bl	8007fb2 <__retarget_lock_init_recursive>
 8007f24:	f7ff ff96 	bl	8007e54 <__sfp_lock_release>
 8007f28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f30:	6025      	str	r5, [r4, #0]
 8007f32:	61a5      	str	r5, [r4, #24]
 8007f34:	2208      	movs	r2, #8
 8007f36:	4629      	mov	r1, r5
 8007f38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f3c:	f7ff fc66 	bl	800780c <memset>
 8007f40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f48:	4620      	mov	r0, r4
 8007f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f4c:	3468      	adds	r4, #104	; 0x68
 8007f4e:	e7d9      	b.n	8007f04 <__sfp+0x1c>
 8007f50:	2104      	movs	r1, #4
 8007f52:	4638      	mov	r0, r7
 8007f54:	f7ff ff62 	bl	8007e1c <__sfmoreglue>
 8007f58:	4604      	mov	r4, r0
 8007f5a:	6030      	str	r0, [r6, #0]
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d1d5      	bne.n	8007f0c <__sfp+0x24>
 8007f60:	f7ff ff78 	bl	8007e54 <__sfp_lock_release>
 8007f64:	230c      	movs	r3, #12
 8007f66:	603b      	str	r3, [r7, #0]
 8007f68:	e7ee      	b.n	8007f48 <__sfp+0x60>
 8007f6a:	bf00      	nop
 8007f6c:	0801f43c 	.word	0x0801f43c
 8007f70:	ffff0001 	.word	0xffff0001

08007f74 <_fwalk_reent>:
 8007f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f78:	4606      	mov	r6, r0
 8007f7a:	4688      	mov	r8, r1
 8007f7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f80:	2700      	movs	r7, #0
 8007f82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f86:	f1b9 0901 	subs.w	r9, r9, #1
 8007f8a:	d505      	bpl.n	8007f98 <_fwalk_reent+0x24>
 8007f8c:	6824      	ldr	r4, [r4, #0]
 8007f8e:	2c00      	cmp	r4, #0
 8007f90:	d1f7      	bne.n	8007f82 <_fwalk_reent+0xe>
 8007f92:	4638      	mov	r0, r7
 8007f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f98:	89ab      	ldrh	r3, [r5, #12]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d907      	bls.n	8007fae <_fwalk_reent+0x3a>
 8007f9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	d003      	beq.n	8007fae <_fwalk_reent+0x3a>
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	4630      	mov	r0, r6
 8007faa:	47c0      	blx	r8
 8007fac:	4307      	orrs	r7, r0
 8007fae:	3568      	adds	r5, #104	; 0x68
 8007fb0:	e7e9      	b.n	8007f86 <_fwalk_reent+0x12>

08007fb2 <__retarget_lock_init_recursive>:
 8007fb2:	4770      	bx	lr

08007fb4 <__retarget_lock_acquire_recursive>:
 8007fb4:	4770      	bx	lr

08007fb6 <__retarget_lock_release_recursive>:
 8007fb6:	4770      	bx	lr

08007fb8 <__swhatbuf_r>:
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	460e      	mov	r6, r1
 8007fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc0:	2900      	cmp	r1, #0
 8007fc2:	b096      	sub	sp, #88	; 0x58
 8007fc4:	4614      	mov	r4, r2
 8007fc6:	461d      	mov	r5, r3
 8007fc8:	da07      	bge.n	8007fda <__swhatbuf_r+0x22>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	602b      	str	r3, [r5, #0]
 8007fce:	89b3      	ldrh	r3, [r6, #12]
 8007fd0:	061a      	lsls	r2, r3, #24
 8007fd2:	d410      	bmi.n	8007ff6 <__swhatbuf_r+0x3e>
 8007fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fd8:	e00e      	b.n	8007ff8 <__swhatbuf_r+0x40>
 8007fda:	466a      	mov	r2, sp
 8007fdc:	f000 fc66 	bl	80088ac <_fstat_r>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	dbf2      	blt.n	8007fca <__swhatbuf_r+0x12>
 8007fe4:	9a01      	ldr	r2, [sp, #4]
 8007fe6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fee:	425a      	negs	r2, r3
 8007ff0:	415a      	adcs	r2, r3
 8007ff2:	602a      	str	r2, [r5, #0]
 8007ff4:	e7ee      	b.n	8007fd4 <__swhatbuf_r+0x1c>
 8007ff6:	2340      	movs	r3, #64	; 0x40
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	6023      	str	r3, [r4, #0]
 8007ffc:	b016      	add	sp, #88	; 0x58
 8007ffe:	bd70      	pop	{r4, r5, r6, pc}

08008000 <__smakebuf_r>:
 8008000:	898b      	ldrh	r3, [r1, #12]
 8008002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008004:	079d      	lsls	r5, r3, #30
 8008006:	4606      	mov	r6, r0
 8008008:	460c      	mov	r4, r1
 800800a:	d507      	bpl.n	800801c <__smakebuf_r+0x1c>
 800800c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	6123      	str	r3, [r4, #16]
 8008014:	2301      	movs	r3, #1
 8008016:	6163      	str	r3, [r4, #20]
 8008018:	b002      	add	sp, #8
 800801a:	bd70      	pop	{r4, r5, r6, pc}
 800801c:	ab01      	add	r3, sp, #4
 800801e:	466a      	mov	r2, sp
 8008020:	f7ff ffca 	bl	8007fb8 <__swhatbuf_r>
 8008024:	9900      	ldr	r1, [sp, #0]
 8008026:	4605      	mov	r5, r0
 8008028:	4630      	mov	r0, r6
 800802a:	f000 f881 	bl	8008130 <_malloc_r>
 800802e:	b948      	cbnz	r0, 8008044 <__smakebuf_r+0x44>
 8008030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008034:	059a      	lsls	r2, r3, #22
 8008036:	d4ef      	bmi.n	8008018 <__smakebuf_r+0x18>
 8008038:	f023 0303 	bic.w	r3, r3, #3
 800803c:	f043 0302 	orr.w	r3, r3, #2
 8008040:	81a3      	strh	r3, [r4, #12]
 8008042:	e7e3      	b.n	800800c <__smakebuf_r+0xc>
 8008044:	4b0d      	ldr	r3, [pc, #52]	; (800807c <__smakebuf_r+0x7c>)
 8008046:	62b3      	str	r3, [r6, #40]	; 0x28
 8008048:	89a3      	ldrh	r3, [r4, #12]
 800804a:	6020      	str	r0, [r4, #0]
 800804c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008050:	81a3      	strh	r3, [r4, #12]
 8008052:	9b00      	ldr	r3, [sp, #0]
 8008054:	6163      	str	r3, [r4, #20]
 8008056:	9b01      	ldr	r3, [sp, #4]
 8008058:	6120      	str	r0, [r4, #16]
 800805a:	b15b      	cbz	r3, 8008074 <__smakebuf_r+0x74>
 800805c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008060:	4630      	mov	r0, r6
 8008062:	f000 fc35 	bl	80088d0 <_isatty_r>
 8008066:	b128      	cbz	r0, 8008074 <__smakebuf_r+0x74>
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	f023 0303 	bic.w	r3, r3, #3
 800806e:	f043 0301 	orr.w	r3, r3, #1
 8008072:	81a3      	strh	r3, [r4, #12]
 8008074:	89a0      	ldrh	r0, [r4, #12]
 8008076:	4305      	orrs	r5, r0
 8008078:	81a5      	strh	r5, [r4, #12]
 800807a:	e7cd      	b.n	8008018 <__smakebuf_r+0x18>
 800807c:	08007e11 	.word	0x08007e11

08008080 <malloc>:
 8008080:	4b02      	ldr	r3, [pc, #8]	; (800808c <malloc+0xc>)
 8008082:	4601      	mov	r1, r0
 8008084:	6818      	ldr	r0, [r3, #0]
 8008086:	f000 b853 	b.w	8008130 <_malloc_r>
 800808a:	bf00      	nop
 800808c:	20000220 	.word	0x20000220

08008090 <_free_r>:
 8008090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008092:	2900      	cmp	r1, #0
 8008094:	d048      	beq.n	8008128 <_free_r+0x98>
 8008096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800809a:	9001      	str	r0, [sp, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	f1a1 0404 	sub.w	r4, r1, #4
 80080a2:	bfb8      	it	lt
 80080a4:	18e4      	addlt	r4, r4, r3
 80080a6:	f000 fc35 	bl	8008914 <__malloc_lock>
 80080aa:	4a20      	ldr	r2, [pc, #128]	; (800812c <_free_r+0x9c>)
 80080ac:	9801      	ldr	r0, [sp, #4]
 80080ae:	6813      	ldr	r3, [r2, #0]
 80080b0:	4615      	mov	r5, r2
 80080b2:	b933      	cbnz	r3, 80080c2 <_free_r+0x32>
 80080b4:	6063      	str	r3, [r4, #4]
 80080b6:	6014      	str	r4, [r2, #0]
 80080b8:	b003      	add	sp, #12
 80080ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080be:	f000 bc2f 	b.w	8008920 <__malloc_unlock>
 80080c2:	42a3      	cmp	r3, r4
 80080c4:	d90b      	bls.n	80080de <_free_r+0x4e>
 80080c6:	6821      	ldr	r1, [r4, #0]
 80080c8:	1862      	adds	r2, r4, r1
 80080ca:	4293      	cmp	r3, r2
 80080cc:	bf04      	itt	eq
 80080ce:	681a      	ldreq	r2, [r3, #0]
 80080d0:	685b      	ldreq	r3, [r3, #4]
 80080d2:	6063      	str	r3, [r4, #4]
 80080d4:	bf04      	itt	eq
 80080d6:	1852      	addeq	r2, r2, r1
 80080d8:	6022      	streq	r2, [r4, #0]
 80080da:	602c      	str	r4, [r5, #0]
 80080dc:	e7ec      	b.n	80080b8 <_free_r+0x28>
 80080de:	461a      	mov	r2, r3
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	b10b      	cbz	r3, 80080e8 <_free_r+0x58>
 80080e4:	42a3      	cmp	r3, r4
 80080e6:	d9fa      	bls.n	80080de <_free_r+0x4e>
 80080e8:	6811      	ldr	r1, [r2, #0]
 80080ea:	1855      	adds	r5, r2, r1
 80080ec:	42a5      	cmp	r5, r4
 80080ee:	d10b      	bne.n	8008108 <_free_r+0x78>
 80080f0:	6824      	ldr	r4, [r4, #0]
 80080f2:	4421      	add	r1, r4
 80080f4:	1854      	adds	r4, r2, r1
 80080f6:	42a3      	cmp	r3, r4
 80080f8:	6011      	str	r1, [r2, #0]
 80080fa:	d1dd      	bne.n	80080b8 <_free_r+0x28>
 80080fc:	681c      	ldr	r4, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	6053      	str	r3, [r2, #4]
 8008102:	4421      	add	r1, r4
 8008104:	6011      	str	r1, [r2, #0]
 8008106:	e7d7      	b.n	80080b8 <_free_r+0x28>
 8008108:	d902      	bls.n	8008110 <_free_r+0x80>
 800810a:	230c      	movs	r3, #12
 800810c:	6003      	str	r3, [r0, #0]
 800810e:	e7d3      	b.n	80080b8 <_free_r+0x28>
 8008110:	6825      	ldr	r5, [r4, #0]
 8008112:	1961      	adds	r1, r4, r5
 8008114:	428b      	cmp	r3, r1
 8008116:	bf04      	itt	eq
 8008118:	6819      	ldreq	r1, [r3, #0]
 800811a:	685b      	ldreq	r3, [r3, #4]
 800811c:	6063      	str	r3, [r4, #4]
 800811e:	bf04      	itt	eq
 8008120:	1949      	addeq	r1, r1, r5
 8008122:	6021      	streq	r1, [r4, #0]
 8008124:	6054      	str	r4, [r2, #4]
 8008126:	e7c7      	b.n	80080b8 <_free_r+0x28>
 8008128:	b003      	add	sp, #12
 800812a:	bd30      	pop	{r4, r5, pc}
 800812c:	200004fc 	.word	0x200004fc

08008130 <_malloc_r>:
 8008130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008132:	1ccd      	adds	r5, r1, #3
 8008134:	f025 0503 	bic.w	r5, r5, #3
 8008138:	3508      	adds	r5, #8
 800813a:	2d0c      	cmp	r5, #12
 800813c:	bf38      	it	cc
 800813e:	250c      	movcc	r5, #12
 8008140:	2d00      	cmp	r5, #0
 8008142:	4606      	mov	r6, r0
 8008144:	db01      	blt.n	800814a <_malloc_r+0x1a>
 8008146:	42a9      	cmp	r1, r5
 8008148:	d903      	bls.n	8008152 <_malloc_r+0x22>
 800814a:	230c      	movs	r3, #12
 800814c:	6033      	str	r3, [r6, #0]
 800814e:	2000      	movs	r0, #0
 8008150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008152:	f000 fbdf 	bl	8008914 <__malloc_lock>
 8008156:	4921      	ldr	r1, [pc, #132]	; (80081dc <_malloc_r+0xac>)
 8008158:	680a      	ldr	r2, [r1, #0]
 800815a:	4614      	mov	r4, r2
 800815c:	b99c      	cbnz	r4, 8008186 <_malloc_r+0x56>
 800815e:	4f20      	ldr	r7, [pc, #128]	; (80081e0 <_malloc_r+0xb0>)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	b923      	cbnz	r3, 800816e <_malloc_r+0x3e>
 8008164:	4621      	mov	r1, r4
 8008166:	4630      	mov	r0, r6
 8008168:	f000 fb2a 	bl	80087c0 <_sbrk_r>
 800816c:	6038      	str	r0, [r7, #0]
 800816e:	4629      	mov	r1, r5
 8008170:	4630      	mov	r0, r6
 8008172:	f000 fb25 	bl	80087c0 <_sbrk_r>
 8008176:	1c43      	adds	r3, r0, #1
 8008178:	d123      	bne.n	80081c2 <_malloc_r+0x92>
 800817a:	230c      	movs	r3, #12
 800817c:	6033      	str	r3, [r6, #0]
 800817e:	4630      	mov	r0, r6
 8008180:	f000 fbce 	bl	8008920 <__malloc_unlock>
 8008184:	e7e3      	b.n	800814e <_malloc_r+0x1e>
 8008186:	6823      	ldr	r3, [r4, #0]
 8008188:	1b5b      	subs	r3, r3, r5
 800818a:	d417      	bmi.n	80081bc <_malloc_r+0x8c>
 800818c:	2b0b      	cmp	r3, #11
 800818e:	d903      	bls.n	8008198 <_malloc_r+0x68>
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	441c      	add	r4, r3
 8008194:	6025      	str	r5, [r4, #0]
 8008196:	e004      	b.n	80081a2 <_malloc_r+0x72>
 8008198:	6863      	ldr	r3, [r4, #4]
 800819a:	42a2      	cmp	r2, r4
 800819c:	bf0c      	ite	eq
 800819e:	600b      	streq	r3, [r1, #0]
 80081a0:	6053      	strne	r3, [r2, #4]
 80081a2:	4630      	mov	r0, r6
 80081a4:	f000 fbbc 	bl	8008920 <__malloc_unlock>
 80081a8:	f104 000b 	add.w	r0, r4, #11
 80081ac:	1d23      	adds	r3, r4, #4
 80081ae:	f020 0007 	bic.w	r0, r0, #7
 80081b2:	1ac2      	subs	r2, r0, r3
 80081b4:	d0cc      	beq.n	8008150 <_malloc_r+0x20>
 80081b6:	1a1b      	subs	r3, r3, r0
 80081b8:	50a3      	str	r3, [r4, r2]
 80081ba:	e7c9      	b.n	8008150 <_malloc_r+0x20>
 80081bc:	4622      	mov	r2, r4
 80081be:	6864      	ldr	r4, [r4, #4]
 80081c0:	e7cc      	b.n	800815c <_malloc_r+0x2c>
 80081c2:	1cc4      	adds	r4, r0, #3
 80081c4:	f024 0403 	bic.w	r4, r4, #3
 80081c8:	42a0      	cmp	r0, r4
 80081ca:	d0e3      	beq.n	8008194 <_malloc_r+0x64>
 80081cc:	1a21      	subs	r1, r4, r0
 80081ce:	4630      	mov	r0, r6
 80081d0:	f000 faf6 	bl	80087c0 <_sbrk_r>
 80081d4:	3001      	adds	r0, #1
 80081d6:	d1dd      	bne.n	8008194 <_malloc_r+0x64>
 80081d8:	e7cf      	b.n	800817a <_malloc_r+0x4a>
 80081da:	bf00      	nop
 80081dc:	200004fc 	.word	0x200004fc
 80081e0:	20000500 	.word	0x20000500

080081e4 <__sfputc_r>:
 80081e4:	6893      	ldr	r3, [r2, #8]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	b410      	push	{r4}
 80081ec:	6093      	str	r3, [r2, #8]
 80081ee:	da08      	bge.n	8008202 <__sfputc_r+0x1e>
 80081f0:	6994      	ldr	r4, [r2, #24]
 80081f2:	42a3      	cmp	r3, r4
 80081f4:	db01      	blt.n	80081fa <__sfputc_r+0x16>
 80081f6:	290a      	cmp	r1, #10
 80081f8:	d103      	bne.n	8008202 <__sfputc_r+0x1e>
 80081fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081fe:	f7ff bc61 	b.w	8007ac4 <__swbuf_r>
 8008202:	6813      	ldr	r3, [r2, #0]
 8008204:	1c58      	adds	r0, r3, #1
 8008206:	6010      	str	r0, [r2, #0]
 8008208:	7019      	strb	r1, [r3, #0]
 800820a:	4608      	mov	r0, r1
 800820c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008210:	4770      	bx	lr

08008212 <__sfputs_r>:
 8008212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008214:	4606      	mov	r6, r0
 8008216:	460f      	mov	r7, r1
 8008218:	4614      	mov	r4, r2
 800821a:	18d5      	adds	r5, r2, r3
 800821c:	42ac      	cmp	r4, r5
 800821e:	d101      	bne.n	8008224 <__sfputs_r+0x12>
 8008220:	2000      	movs	r0, #0
 8008222:	e007      	b.n	8008234 <__sfputs_r+0x22>
 8008224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008228:	463a      	mov	r2, r7
 800822a:	4630      	mov	r0, r6
 800822c:	f7ff ffda 	bl	80081e4 <__sfputc_r>
 8008230:	1c43      	adds	r3, r0, #1
 8008232:	d1f3      	bne.n	800821c <__sfputs_r+0xa>
 8008234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008238 <_vfiprintf_r>:
 8008238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823c:	460d      	mov	r5, r1
 800823e:	b09d      	sub	sp, #116	; 0x74
 8008240:	4614      	mov	r4, r2
 8008242:	4698      	mov	r8, r3
 8008244:	4606      	mov	r6, r0
 8008246:	b118      	cbz	r0, 8008250 <_vfiprintf_r+0x18>
 8008248:	6983      	ldr	r3, [r0, #24]
 800824a:	b90b      	cbnz	r3, 8008250 <_vfiprintf_r+0x18>
 800824c:	f7ff fe14 	bl	8007e78 <__sinit>
 8008250:	4b89      	ldr	r3, [pc, #548]	; (8008478 <_vfiprintf_r+0x240>)
 8008252:	429d      	cmp	r5, r3
 8008254:	d11b      	bne.n	800828e <_vfiprintf_r+0x56>
 8008256:	6875      	ldr	r5, [r6, #4]
 8008258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800825a:	07d9      	lsls	r1, r3, #31
 800825c:	d405      	bmi.n	800826a <_vfiprintf_r+0x32>
 800825e:	89ab      	ldrh	r3, [r5, #12]
 8008260:	059a      	lsls	r2, r3, #22
 8008262:	d402      	bmi.n	800826a <_vfiprintf_r+0x32>
 8008264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008266:	f7ff fea5 	bl	8007fb4 <__retarget_lock_acquire_recursive>
 800826a:	89ab      	ldrh	r3, [r5, #12]
 800826c:	071b      	lsls	r3, r3, #28
 800826e:	d501      	bpl.n	8008274 <_vfiprintf_r+0x3c>
 8008270:	692b      	ldr	r3, [r5, #16]
 8008272:	b9eb      	cbnz	r3, 80082b0 <_vfiprintf_r+0x78>
 8008274:	4629      	mov	r1, r5
 8008276:	4630      	mov	r0, r6
 8008278:	f7ff fc76 	bl	8007b68 <__swsetup_r>
 800827c:	b1c0      	cbz	r0, 80082b0 <_vfiprintf_r+0x78>
 800827e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008280:	07dc      	lsls	r4, r3, #31
 8008282:	d50e      	bpl.n	80082a2 <_vfiprintf_r+0x6a>
 8008284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008288:	b01d      	add	sp, #116	; 0x74
 800828a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800828e:	4b7b      	ldr	r3, [pc, #492]	; (800847c <_vfiprintf_r+0x244>)
 8008290:	429d      	cmp	r5, r3
 8008292:	d101      	bne.n	8008298 <_vfiprintf_r+0x60>
 8008294:	68b5      	ldr	r5, [r6, #8]
 8008296:	e7df      	b.n	8008258 <_vfiprintf_r+0x20>
 8008298:	4b79      	ldr	r3, [pc, #484]	; (8008480 <_vfiprintf_r+0x248>)
 800829a:	429d      	cmp	r5, r3
 800829c:	bf08      	it	eq
 800829e:	68f5      	ldreq	r5, [r6, #12]
 80082a0:	e7da      	b.n	8008258 <_vfiprintf_r+0x20>
 80082a2:	89ab      	ldrh	r3, [r5, #12]
 80082a4:	0598      	lsls	r0, r3, #22
 80082a6:	d4ed      	bmi.n	8008284 <_vfiprintf_r+0x4c>
 80082a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082aa:	f7ff fe84 	bl	8007fb6 <__retarget_lock_release_recursive>
 80082ae:	e7e9      	b.n	8008284 <_vfiprintf_r+0x4c>
 80082b0:	2300      	movs	r3, #0
 80082b2:	9309      	str	r3, [sp, #36]	; 0x24
 80082b4:	2320      	movs	r3, #32
 80082b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80082be:	2330      	movs	r3, #48	; 0x30
 80082c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008484 <_vfiprintf_r+0x24c>
 80082c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082c8:	f04f 0901 	mov.w	r9, #1
 80082cc:	4623      	mov	r3, r4
 80082ce:	469a      	mov	sl, r3
 80082d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082d4:	b10a      	cbz	r2, 80082da <_vfiprintf_r+0xa2>
 80082d6:	2a25      	cmp	r2, #37	; 0x25
 80082d8:	d1f9      	bne.n	80082ce <_vfiprintf_r+0x96>
 80082da:	ebba 0b04 	subs.w	fp, sl, r4
 80082de:	d00b      	beq.n	80082f8 <_vfiprintf_r+0xc0>
 80082e0:	465b      	mov	r3, fp
 80082e2:	4622      	mov	r2, r4
 80082e4:	4629      	mov	r1, r5
 80082e6:	4630      	mov	r0, r6
 80082e8:	f7ff ff93 	bl	8008212 <__sfputs_r>
 80082ec:	3001      	adds	r0, #1
 80082ee:	f000 80aa 	beq.w	8008446 <_vfiprintf_r+0x20e>
 80082f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082f4:	445a      	add	r2, fp
 80082f6:	9209      	str	r2, [sp, #36]	; 0x24
 80082f8:	f89a 3000 	ldrb.w	r3, [sl]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 80a2 	beq.w	8008446 <_vfiprintf_r+0x20e>
 8008302:	2300      	movs	r3, #0
 8008304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800830c:	f10a 0a01 	add.w	sl, sl, #1
 8008310:	9304      	str	r3, [sp, #16]
 8008312:	9307      	str	r3, [sp, #28]
 8008314:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008318:	931a      	str	r3, [sp, #104]	; 0x68
 800831a:	4654      	mov	r4, sl
 800831c:	2205      	movs	r2, #5
 800831e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008322:	4858      	ldr	r0, [pc, #352]	; (8008484 <_vfiprintf_r+0x24c>)
 8008324:	f7f7 ff64 	bl	80001f0 <memchr>
 8008328:	9a04      	ldr	r2, [sp, #16]
 800832a:	b9d8      	cbnz	r0, 8008364 <_vfiprintf_r+0x12c>
 800832c:	06d1      	lsls	r1, r2, #27
 800832e:	bf44      	itt	mi
 8008330:	2320      	movmi	r3, #32
 8008332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008336:	0713      	lsls	r3, r2, #28
 8008338:	bf44      	itt	mi
 800833a:	232b      	movmi	r3, #43	; 0x2b
 800833c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008340:	f89a 3000 	ldrb.w	r3, [sl]
 8008344:	2b2a      	cmp	r3, #42	; 0x2a
 8008346:	d015      	beq.n	8008374 <_vfiprintf_r+0x13c>
 8008348:	9a07      	ldr	r2, [sp, #28]
 800834a:	4654      	mov	r4, sl
 800834c:	2000      	movs	r0, #0
 800834e:	f04f 0c0a 	mov.w	ip, #10
 8008352:	4621      	mov	r1, r4
 8008354:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008358:	3b30      	subs	r3, #48	; 0x30
 800835a:	2b09      	cmp	r3, #9
 800835c:	d94e      	bls.n	80083fc <_vfiprintf_r+0x1c4>
 800835e:	b1b0      	cbz	r0, 800838e <_vfiprintf_r+0x156>
 8008360:	9207      	str	r2, [sp, #28]
 8008362:	e014      	b.n	800838e <_vfiprintf_r+0x156>
 8008364:	eba0 0308 	sub.w	r3, r0, r8
 8008368:	fa09 f303 	lsl.w	r3, r9, r3
 800836c:	4313      	orrs	r3, r2
 800836e:	9304      	str	r3, [sp, #16]
 8008370:	46a2      	mov	sl, r4
 8008372:	e7d2      	b.n	800831a <_vfiprintf_r+0xe2>
 8008374:	9b03      	ldr	r3, [sp, #12]
 8008376:	1d19      	adds	r1, r3, #4
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	9103      	str	r1, [sp, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	bfbb      	ittet	lt
 8008380:	425b      	neglt	r3, r3
 8008382:	f042 0202 	orrlt.w	r2, r2, #2
 8008386:	9307      	strge	r3, [sp, #28]
 8008388:	9307      	strlt	r3, [sp, #28]
 800838a:	bfb8      	it	lt
 800838c:	9204      	strlt	r2, [sp, #16]
 800838e:	7823      	ldrb	r3, [r4, #0]
 8008390:	2b2e      	cmp	r3, #46	; 0x2e
 8008392:	d10c      	bne.n	80083ae <_vfiprintf_r+0x176>
 8008394:	7863      	ldrb	r3, [r4, #1]
 8008396:	2b2a      	cmp	r3, #42	; 0x2a
 8008398:	d135      	bne.n	8008406 <_vfiprintf_r+0x1ce>
 800839a:	9b03      	ldr	r3, [sp, #12]
 800839c:	1d1a      	adds	r2, r3, #4
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	9203      	str	r2, [sp, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	bfb8      	it	lt
 80083a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80083aa:	3402      	adds	r4, #2
 80083ac:	9305      	str	r3, [sp, #20]
 80083ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008494 <_vfiprintf_r+0x25c>
 80083b2:	7821      	ldrb	r1, [r4, #0]
 80083b4:	2203      	movs	r2, #3
 80083b6:	4650      	mov	r0, sl
 80083b8:	f7f7 ff1a 	bl	80001f0 <memchr>
 80083bc:	b140      	cbz	r0, 80083d0 <_vfiprintf_r+0x198>
 80083be:	2340      	movs	r3, #64	; 0x40
 80083c0:	eba0 000a 	sub.w	r0, r0, sl
 80083c4:	fa03 f000 	lsl.w	r0, r3, r0
 80083c8:	9b04      	ldr	r3, [sp, #16]
 80083ca:	4303      	orrs	r3, r0
 80083cc:	3401      	adds	r4, #1
 80083ce:	9304      	str	r3, [sp, #16]
 80083d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083d4:	482c      	ldr	r0, [pc, #176]	; (8008488 <_vfiprintf_r+0x250>)
 80083d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083da:	2206      	movs	r2, #6
 80083dc:	f7f7 ff08 	bl	80001f0 <memchr>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d03f      	beq.n	8008464 <_vfiprintf_r+0x22c>
 80083e4:	4b29      	ldr	r3, [pc, #164]	; (800848c <_vfiprintf_r+0x254>)
 80083e6:	bb1b      	cbnz	r3, 8008430 <_vfiprintf_r+0x1f8>
 80083e8:	9b03      	ldr	r3, [sp, #12]
 80083ea:	3307      	adds	r3, #7
 80083ec:	f023 0307 	bic.w	r3, r3, #7
 80083f0:	3308      	adds	r3, #8
 80083f2:	9303      	str	r3, [sp, #12]
 80083f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f6:	443b      	add	r3, r7
 80083f8:	9309      	str	r3, [sp, #36]	; 0x24
 80083fa:	e767      	b.n	80082cc <_vfiprintf_r+0x94>
 80083fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008400:	460c      	mov	r4, r1
 8008402:	2001      	movs	r0, #1
 8008404:	e7a5      	b.n	8008352 <_vfiprintf_r+0x11a>
 8008406:	2300      	movs	r3, #0
 8008408:	3401      	adds	r4, #1
 800840a:	9305      	str	r3, [sp, #20]
 800840c:	4619      	mov	r1, r3
 800840e:	f04f 0c0a 	mov.w	ip, #10
 8008412:	4620      	mov	r0, r4
 8008414:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008418:	3a30      	subs	r2, #48	; 0x30
 800841a:	2a09      	cmp	r2, #9
 800841c:	d903      	bls.n	8008426 <_vfiprintf_r+0x1ee>
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0c5      	beq.n	80083ae <_vfiprintf_r+0x176>
 8008422:	9105      	str	r1, [sp, #20]
 8008424:	e7c3      	b.n	80083ae <_vfiprintf_r+0x176>
 8008426:	fb0c 2101 	mla	r1, ip, r1, r2
 800842a:	4604      	mov	r4, r0
 800842c:	2301      	movs	r3, #1
 800842e:	e7f0      	b.n	8008412 <_vfiprintf_r+0x1da>
 8008430:	ab03      	add	r3, sp, #12
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	462a      	mov	r2, r5
 8008436:	4b16      	ldr	r3, [pc, #88]	; (8008490 <_vfiprintf_r+0x258>)
 8008438:	a904      	add	r1, sp, #16
 800843a:	4630      	mov	r0, r6
 800843c:	f3af 8000 	nop.w
 8008440:	4607      	mov	r7, r0
 8008442:	1c78      	adds	r0, r7, #1
 8008444:	d1d6      	bne.n	80083f4 <_vfiprintf_r+0x1bc>
 8008446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008448:	07d9      	lsls	r1, r3, #31
 800844a:	d405      	bmi.n	8008458 <_vfiprintf_r+0x220>
 800844c:	89ab      	ldrh	r3, [r5, #12]
 800844e:	059a      	lsls	r2, r3, #22
 8008450:	d402      	bmi.n	8008458 <_vfiprintf_r+0x220>
 8008452:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008454:	f7ff fdaf 	bl	8007fb6 <__retarget_lock_release_recursive>
 8008458:	89ab      	ldrh	r3, [r5, #12]
 800845a:	065b      	lsls	r3, r3, #25
 800845c:	f53f af12 	bmi.w	8008284 <_vfiprintf_r+0x4c>
 8008460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008462:	e711      	b.n	8008288 <_vfiprintf_r+0x50>
 8008464:	ab03      	add	r3, sp, #12
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	462a      	mov	r2, r5
 800846a:	4b09      	ldr	r3, [pc, #36]	; (8008490 <_vfiprintf_r+0x258>)
 800846c:	a904      	add	r1, sp, #16
 800846e:	4630      	mov	r0, r6
 8008470:	f000 f880 	bl	8008574 <_printf_i>
 8008474:	e7e4      	b.n	8008440 <_vfiprintf_r+0x208>
 8008476:	bf00      	nop
 8008478:	0801f460 	.word	0x0801f460
 800847c:	0801f480 	.word	0x0801f480
 8008480:	0801f440 	.word	0x0801f440
 8008484:	0801f4a0 	.word	0x0801f4a0
 8008488:	0801f4aa 	.word	0x0801f4aa
 800848c:	00000000 	.word	0x00000000
 8008490:	08008213 	.word	0x08008213
 8008494:	0801f4a6 	.word	0x0801f4a6

08008498 <_printf_common>:
 8008498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800849c:	4616      	mov	r6, r2
 800849e:	4699      	mov	r9, r3
 80084a0:	688a      	ldr	r2, [r1, #8]
 80084a2:	690b      	ldr	r3, [r1, #16]
 80084a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084a8:	4293      	cmp	r3, r2
 80084aa:	bfb8      	it	lt
 80084ac:	4613      	movlt	r3, r2
 80084ae:	6033      	str	r3, [r6, #0]
 80084b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084b4:	4607      	mov	r7, r0
 80084b6:	460c      	mov	r4, r1
 80084b8:	b10a      	cbz	r2, 80084be <_printf_common+0x26>
 80084ba:	3301      	adds	r3, #1
 80084bc:	6033      	str	r3, [r6, #0]
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	0699      	lsls	r1, r3, #26
 80084c2:	bf42      	ittt	mi
 80084c4:	6833      	ldrmi	r3, [r6, #0]
 80084c6:	3302      	addmi	r3, #2
 80084c8:	6033      	strmi	r3, [r6, #0]
 80084ca:	6825      	ldr	r5, [r4, #0]
 80084cc:	f015 0506 	ands.w	r5, r5, #6
 80084d0:	d106      	bne.n	80084e0 <_printf_common+0x48>
 80084d2:	f104 0a19 	add.w	sl, r4, #25
 80084d6:	68e3      	ldr	r3, [r4, #12]
 80084d8:	6832      	ldr	r2, [r6, #0]
 80084da:	1a9b      	subs	r3, r3, r2
 80084dc:	42ab      	cmp	r3, r5
 80084de:	dc26      	bgt.n	800852e <_printf_common+0x96>
 80084e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084e4:	1e13      	subs	r3, r2, #0
 80084e6:	6822      	ldr	r2, [r4, #0]
 80084e8:	bf18      	it	ne
 80084ea:	2301      	movne	r3, #1
 80084ec:	0692      	lsls	r2, r2, #26
 80084ee:	d42b      	bmi.n	8008548 <_printf_common+0xb0>
 80084f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084f4:	4649      	mov	r1, r9
 80084f6:	4638      	mov	r0, r7
 80084f8:	47c0      	blx	r8
 80084fa:	3001      	adds	r0, #1
 80084fc:	d01e      	beq.n	800853c <_printf_common+0xa4>
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	68e5      	ldr	r5, [r4, #12]
 8008502:	6832      	ldr	r2, [r6, #0]
 8008504:	f003 0306 	and.w	r3, r3, #6
 8008508:	2b04      	cmp	r3, #4
 800850a:	bf08      	it	eq
 800850c:	1aad      	subeq	r5, r5, r2
 800850e:	68a3      	ldr	r3, [r4, #8]
 8008510:	6922      	ldr	r2, [r4, #16]
 8008512:	bf0c      	ite	eq
 8008514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008518:	2500      	movne	r5, #0
 800851a:	4293      	cmp	r3, r2
 800851c:	bfc4      	itt	gt
 800851e:	1a9b      	subgt	r3, r3, r2
 8008520:	18ed      	addgt	r5, r5, r3
 8008522:	2600      	movs	r6, #0
 8008524:	341a      	adds	r4, #26
 8008526:	42b5      	cmp	r5, r6
 8008528:	d11a      	bne.n	8008560 <_printf_common+0xc8>
 800852a:	2000      	movs	r0, #0
 800852c:	e008      	b.n	8008540 <_printf_common+0xa8>
 800852e:	2301      	movs	r3, #1
 8008530:	4652      	mov	r2, sl
 8008532:	4649      	mov	r1, r9
 8008534:	4638      	mov	r0, r7
 8008536:	47c0      	blx	r8
 8008538:	3001      	adds	r0, #1
 800853a:	d103      	bne.n	8008544 <_printf_common+0xac>
 800853c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008544:	3501      	adds	r5, #1
 8008546:	e7c6      	b.n	80084d6 <_printf_common+0x3e>
 8008548:	18e1      	adds	r1, r4, r3
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	2030      	movs	r0, #48	; 0x30
 800854e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008552:	4422      	add	r2, r4
 8008554:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008558:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800855c:	3302      	adds	r3, #2
 800855e:	e7c7      	b.n	80084f0 <_printf_common+0x58>
 8008560:	2301      	movs	r3, #1
 8008562:	4622      	mov	r2, r4
 8008564:	4649      	mov	r1, r9
 8008566:	4638      	mov	r0, r7
 8008568:	47c0      	blx	r8
 800856a:	3001      	adds	r0, #1
 800856c:	d0e6      	beq.n	800853c <_printf_common+0xa4>
 800856e:	3601      	adds	r6, #1
 8008570:	e7d9      	b.n	8008526 <_printf_common+0x8e>
	...

08008574 <_printf_i>:
 8008574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008578:	460c      	mov	r4, r1
 800857a:	4691      	mov	r9, r2
 800857c:	7e27      	ldrb	r7, [r4, #24]
 800857e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008580:	2f78      	cmp	r7, #120	; 0x78
 8008582:	4680      	mov	r8, r0
 8008584:	469a      	mov	sl, r3
 8008586:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800858a:	d807      	bhi.n	800859c <_printf_i+0x28>
 800858c:	2f62      	cmp	r7, #98	; 0x62
 800858e:	d80a      	bhi.n	80085a6 <_printf_i+0x32>
 8008590:	2f00      	cmp	r7, #0
 8008592:	f000 80d8 	beq.w	8008746 <_printf_i+0x1d2>
 8008596:	2f58      	cmp	r7, #88	; 0x58
 8008598:	f000 80a3 	beq.w	80086e2 <_printf_i+0x16e>
 800859c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80085a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085a4:	e03a      	b.n	800861c <_printf_i+0xa8>
 80085a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085aa:	2b15      	cmp	r3, #21
 80085ac:	d8f6      	bhi.n	800859c <_printf_i+0x28>
 80085ae:	a001      	add	r0, pc, #4	; (adr r0, 80085b4 <_printf_i+0x40>)
 80085b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80085b4:	0800860d 	.word	0x0800860d
 80085b8:	08008621 	.word	0x08008621
 80085bc:	0800859d 	.word	0x0800859d
 80085c0:	0800859d 	.word	0x0800859d
 80085c4:	0800859d 	.word	0x0800859d
 80085c8:	0800859d 	.word	0x0800859d
 80085cc:	08008621 	.word	0x08008621
 80085d0:	0800859d 	.word	0x0800859d
 80085d4:	0800859d 	.word	0x0800859d
 80085d8:	0800859d 	.word	0x0800859d
 80085dc:	0800859d 	.word	0x0800859d
 80085e0:	0800872d 	.word	0x0800872d
 80085e4:	08008651 	.word	0x08008651
 80085e8:	0800870f 	.word	0x0800870f
 80085ec:	0800859d 	.word	0x0800859d
 80085f0:	0800859d 	.word	0x0800859d
 80085f4:	0800874f 	.word	0x0800874f
 80085f8:	0800859d 	.word	0x0800859d
 80085fc:	08008651 	.word	0x08008651
 8008600:	0800859d 	.word	0x0800859d
 8008604:	0800859d 	.word	0x0800859d
 8008608:	08008717 	.word	0x08008717
 800860c:	680b      	ldr	r3, [r1, #0]
 800860e:	1d1a      	adds	r2, r3, #4
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	600a      	str	r2, [r1, #0]
 8008614:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800861c:	2301      	movs	r3, #1
 800861e:	e0a3      	b.n	8008768 <_printf_i+0x1f4>
 8008620:	6825      	ldr	r5, [r4, #0]
 8008622:	6808      	ldr	r0, [r1, #0]
 8008624:	062e      	lsls	r6, r5, #24
 8008626:	f100 0304 	add.w	r3, r0, #4
 800862a:	d50a      	bpl.n	8008642 <_printf_i+0xce>
 800862c:	6805      	ldr	r5, [r0, #0]
 800862e:	600b      	str	r3, [r1, #0]
 8008630:	2d00      	cmp	r5, #0
 8008632:	da03      	bge.n	800863c <_printf_i+0xc8>
 8008634:	232d      	movs	r3, #45	; 0x2d
 8008636:	426d      	negs	r5, r5
 8008638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800863c:	485e      	ldr	r0, [pc, #376]	; (80087b8 <_printf_i+0x244>)
 800863e:	230a      	movs	r3, #10
 8008640:	e019      	b.n	8008676 <_printf_i+0x102>
 8008642:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008646:	6805      	ldr	r5, [r0, #0]
 8008648:	600b      	str	r3, [r1, #0]
 800864a:	bf18      	it	ne
 800864c:	b22d      	sxthne	r5, r5
 800864e:	e7ef      	b.n	8008630 <_printf_i+0xbc>
 8008650:	680b      	ldr	r3, [r1, #0]
 8008652:	6825      	ldr	r5, [r4, #0]
 8008654:	1d18      	adds	r0, r3, #4
 8008656:	6008      	str	r0, [r1, #0]
 8008658:	0628      	lsls	r0, r5, #24
 800865a:	d501      	bpl.n	8008660 <_printf_i+0xec>
 800865c:	681d      	ldr	r5, [r3, #0]
 800865e:	e002      	b.n	8008666 <_printf_i+0xf2>
 8008660:	0669      	lsls	r1, r5, #25
 8008662:	d5fb      	bpl.n	800865c <_printf_i+0xe8>
 8008664:	881d      	ldrh	r5, [r3, #0]
 8008666:	4854      	ldr	r0, [pc, #336]	; (80087b8 <_printf_i+0x244>)
 8008668:	2f6f      	cmp	r7, #111	; 0x6f
 800866a:	bf0c      	ite	eq
 800866c:	2308      	moveq	r3, #8
 800866e:	230a      	movne	r3, #10
 8008670:	2100      	movs	r1, #0
 8008672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008676:	6866      	ldr	r6, [r4, #4]
 8008678:	60a6      	str	r6, [r4, #8]
 800867a:	2e00      	cmp	r6, #0
 800867c:	bfa2      	ittt	ge
 800867e:	6821      	ldrge	r1, [r4, #0]
 8008680:	f021 0104 	bicge.w	r1, r1, #4
 8008684:	6021      	strge	r1, [r4, #0]
 8008686:	b90d      	cbnz	r5, 800868c <_printf_i+0x118>
 8008688:	2e00      	cmp	r6, #0
 800868a:	d04d      	beq.n	8008728 <_printf_i+0x1b4>
 800868c:	4616      	mov	r6, r2
 800868e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008692:	fb03 5711 	mls	r7, r3, r1, r5
 8008696:	5dc7      	ldrb	r7, [r0, r7]
 8008698:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800869c:	462f      	mov	r7, r5
 800869e:	42bb      	cmp	r3, r7
 80086a0:	460d      	mov	r5, r1
 80086a2:	d9f4      	bls.n	800868e <_printf_i+0x11a>
 80086a4:	2b08      	cmp	r3, #8
 80086a6:	d10b      	bne.n	80086c0 <_printf_i+0x14c>
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	07df      	lsls	r7, r3, #31
 80086ac:	d508      	bpl.n	80086c0 <_printf_i+0x14c>
 80086ae:	6923      	ldr	r3, [r4, #16]
 80086b0:	6861      	ldr	r1, [r4, #4]
 80086b2:	4299      	cmp	r1, r3
 80086b4:	bfde      	ittt	le
 80086b6:	2330      	movle	r3, #48	; 0x30
 80086b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086bc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80086c0:	1b92      	subs	r2, r2, r6
 80086c2:	6122      	str	r2, [r4, #16]
 80086c4:	f8cd a000 	str.w	sl, [sp]
 80086c8:	464b      	mov	r3, r9
 80086ca:	aa03      	add	r2, sp, #12
 80086cc:	4621      	mov	r1, r4
 80086ce:	4640      	mov	r0, r8
 80086d0:	f7ff fee2 	bl	8008498 <_printf_common>
 80086d4:	3001      	adds	r0, #1
 80086d6:	d14c      	bne.n	8008772 <_printf_i+0x1fe>
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086dc:	b004      	add	sp, #16
 80086de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e2:	4835      	ldr	r0, [pc, #212]	; (80087b8 <_printf_i+0x244>)
 80086e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	680e      	ldr	r6, [r1, #0]
 80086ec:	061f      	lsls	r7, r3, #24
 80086ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80086f2:	600e      	str	r6, [r1, #0]
 80086f4:	d514      	bpl.n	8008720 <_printf_i+0x1ac>
 80086f6:	07d9      	lsls	r1, r3, #31
 80086f8:	bf44      	itt	mi
 80086fa:	f043 0320 	orrmi.w	r3, r3, #32
 80086fe:	6023      	strmi	r3, [r4, #0]
 8008700:	b91d      	cbnz	r5, 800870a <_printf_i+0x196>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	f023 0320 	bic.w	r3, r3, #32
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	2310      	movs	r3, #16
 800870c:	e7b0      	b.n	8008670 <_printf_i+0xfc>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	f043 0320 	orr.w	r3, r3, #32
 8008714:	6023      	str	r3, [r4, #0]
 8008716:	2378      	movs	r3, #120	; 0x78
 8008718:	4828      	ldr	r0, [pc, #160]	; (80087bc <_printf_i+0x248>)
 800871a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800871e:	e7e3      	b.n	80086e8 <_printf_i+0x174>
 8008720:	065e      	lsls	r6, r3, #25
 8008722:	bf48      	it	mi
 8008724:	b2ad      	uxthmi	r5, r5
 8008726:	e7e6      	b.n	80086f6 <_printf_i+0x182>
 8008728:	4616      	mov	r6, r2
 800872a:	e7bb      	b.n	80086a4 <_printf_i+0x130>
 800872c:	680b      	ldr	r3, [r1, #0]
 800872e:	6826      	ldr	r6, [r4, #0]
 8008730:	6960      	ldr	r0, [r4, #20]
 8008732:	1d1d      	adds	r5, r3, #4
 8008734:	600d      	str	r5, [r1, #0]
 8008736:	0635      	lsls	r5, r6, #24
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	d501      	bpl.n	8008740 <_printf_i+0x1cc>
 800873c:	6018      	str	r0, [r3, #0]
 800873e:	e002      	b.n	8008746 <_printf_i+0x1d2>
 8008740:	0671      	lsls	r1, r6, #25
 8008742:	d5fb      	bpl.n	800873c <_printf_i+0x1c8>
 8008744:	8018      	strh	r0, [r3, #0]
 8008746:	2300      	movs	r3, #0
 8008748:	6123      	str	r3, [r4, #16]
 800874a:	4616      	mov	r6, r2
 800874c:	e7ba      	b.n	80086c4 <_printf_i+0x150>
 800874e:	680b      	ldr	r3, [r1, #0]
 8008750:	1d1a      	adds	r2, r3, #4
 8008752:	600a      	str	r2, [r1, #0]
 8008754:	681e      	ldr	r6, [r3, #0]
 8008756:	6862      	ldr	r2, [r4, #4]
 8008758:	2100      	movs	r1, #0
 800875a:	4630      	mov	r0, r6
 800875c:	f7f7 fd48 	bl	80001f0 <memchr>
 8008760:	b108      	cbz	r0, 8008766 <_printf_i+0x1f2>
 8008762:	1b80      	subs	r0, r0, r6
 8008764:	6060      	str	r0, [r4, #4]
 8008766:	6863      	ldr	r3, [r4, #4]
 8008768:	6123      	str	r3, [r4, #16]
 800876a:	2300      	movs	r3, #0
 800876c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008770:	e7a8      	b.n	80086c4 <_printf_i+0x150>
 8008772:	6923      	ldr	r3, [r4, #16]
 8008774:	4632      	mov	r2, r6
 8008776:	4649      	mov	r1, r9
 8008778:	4640      	mov	r0, r8
 800877a:	47d0      	blx	sl
 800877c:	3001      	adds	r0, #1
 800877e:	d0ab      	beq.n	80086d8 <_printf_i+0x164>
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	079b      	lsls	r3, r3, #30
 8008784:	d413      	bmi.n	80087ae <_printf_i+0x23a>
 8008786:	68e0      	ldr	r0, [r4, #12]
 8008788:	9b03      	ldr	r3, [sp, #12]
 800878a:	4298      	cmp	r0, r3
 800878c:	bfb8      	it	lt
 800878e:	4618      	movlt	r0, r3
 8008790:	e7a4      	b.n	80086dc <_printf_i+0x168>
 8008792:	2301      	movs	r3, #1
 8008794:	4632      	mov	r2, r6
 8008796:	4649      	mov	r1, r9
 8008798:	4640      	mov	r0, r8
 800879a:	47d0      	blx	sl
 800879c:	3001      	adds	r0, #1
 800879e:	d09b      	beq.n	80086d8 <_printf_i+0x164>
 80087a0:	3501      	adds	r5, #1
 80087a2:	68e3      	ldr	r3, [r4, #12]
 80087a4:	9903      	ldr	r1, [sp, #12]
 80087a6:	1a5b      	subs	r3, r3, r1
 80087a8:	42ab      	cmp	r3, r5
 80087aa:	dcf2      	bgt.n	8008792 <_printf_i+0x21e>
 80087ac:	e7eb      	b.n	8008786 <_printf_i+0x212>
 80087ae:	2500      	movs	r5, #0
 80087b0:	f104 0619 	add.w	r6, r4, #25
 80087b4:	e7f5      	b.n	80087a2 <_printf_i+0x22e>
 80087b6:	bf00      	nop
 80087b8:	0801f4b1 	.word	0x0801f4b1
 80087bc:	0801f4c2 	.word	0x0801f4c2

080087c0 <_sbrk_r>:
 80087c0:	b538      	push	{r3, r4, r5, lr}
 80087c2:	4d06      	ldr	r5, [pc, #24]	; (80087dc <_sbrk_r+0x1c>)
 80087c4:	2300      	movs	r3, #0
 80087c6:	4604      	mov	r4, r0
 80087c8:	4608      	mov	r0, r1
 80087ca:	602b      	str	r3, [r5, #0]
 80087cc:	f000 f8c0 	bl	8008950 <_sbrk>
 80087d0:	1c43      	adds	r3, r0, #1
 80087d2:	d102      	bne.n	80087da <_sbrk_r+0x1a>
 80087d4:	682b      	ldr	r3, [r5, #0]
 80087d6:	b103      	cbz	r3, 80087da <_sbrk_r+0x1a>
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	bd38      	pop	{r3, r4, r5, pc}
 80087dc:	20004790 	.word	0x20004790

080087e0 <__sread>:
 80087e0:	b510      	push	{r4, lr}
 80087e2:	460c      	mov	r4, r1
 80087e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e8:	f000 f8a0 	bl	800892c <_read_r>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	bfab      	itete	ge
 80087f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087f2:	89a3      	ldrhlt	r3, [r4, #12]
 80087f4:	181b      	addge	r3, r3, r0
 80087f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087fa:	bfac      	ite	ge
 80087fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80087fe:	81a3      	strhlt	r3, [r4, #12]
 8008800:	bd10      	pop	{r4, pc}

08008802 <__swrite>:
 8008802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008806:	461f      	mov	r7, r3
 8008808:	898b      	ldrh	r3, [r1, #12]
 800880a:	05db      	lsls	r3, r3, #23
 800880c:	4605      	mov	r5, r0
 800880e:	460c      	mov	r4, r1
 8008810:	4616      	mov	r6, r2
 8008812:	d505      	bpl.n	8008820 <__swrite+0x1e>
 8008814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008818:	2302      	movs	r3, #2
 800881a:	2200      	movs	r2, #0
 800881c:	f000 f868 	bl	80088f0 <_lseek_r>
 8008820:	89a3      	ldrh	r3, [r4, #12]
 8008822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800882a:	81a3      	strh	r3, [r4, #12]
 800882c:	4632      	mov	r2, r6
 800882e:	463b      	mov	r3, r7
 8008830:	4628      	mov	r0, r5
 8008832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008836:	f000 b817 	b.w	8008868 <_write_r>

0800883a <__sseek>:
 800883a:	b510      	push	{r4, lr}
 800883c:	460c      	mov	r4, r1
 800883e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008842:	f000 f855 	bl	80088f0 <_lseek_r>
 8008846:	1c43      	adds	r3, r0, #1
 8008848:	89a3      	ldrh	r3, [r4, #12]
 800884a:	bf15      	itete	ne
 800884c:	6560      	strne	r0, [r4, #84]	; 0x54
 800884e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008852:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008856:	81a3      	strheq	r3, [r4, #12]
 8008858:	bf18      	it	ne
 800885a:	81a3      	strhne	r3, [r4, #12]
 800885c:	bd10      	pop	{r4, pc}

0800885e <__sclose>:
 800885e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008862:	f000 b813 	b.w	800888c <_close_r>
	...

08008868 <_write_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4d07      	ldr	r5, [pc, #28]	; (8008888 <_write_r+0x20>)
 800886c:	4604      	mov	r4, r0
 800886e:	4608      	mov	r0, r1
 8008870:	4611      	mov	r1, r2
 8008872:	2200      	movs	r2, #0
 8008874:	602a      	str	r2, [r5, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	f7fe f9d6 	bl	8006c28 <_write>
 800887c:	1c43      	adds	r3, r0, #1
 800887e:	d102      	bne.n	8008886 <_write_r+0x1e>
 8008880:	682b      	ldr	r3, [r5, #0]
 8008882:	b103      	cbz	r3, 8008886 <_write_r+0x1e>
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	bd38      	pop	{r3, r4, r5, pc}
 8008888:	20004790 	.word	0x20004790

0800888c <_close_r>:
 800888c:	b538      	push	{r3, r4, r5, lr}
 800888e:	4d06      	ldr	r5, [pc, #24]	; (80088a8 <_close_r+0x1c>)
 8008890:	2300      	movs	r3, #0
 8008892:	4604      	mov	r4, r0
 8008894:	4608      	mov	r0, r1
 8008896:	602b      	str	r3, [r5, #0]
 8008898:	f7fe f9e0 	bl	8006c5c <_close>
 800889c:	1c43      	adds	r3, r0, #1
 800889e:	d102      	bne.n	80088a6 <_close_r+0x1a>
 80088a0:	682b      	ldr	r3, [r5, #0]
 80088a2:	b103      	cbz	r3, 80088a6 <_close_r+0x1a>
 80088a4:	6023      	str	r3, [r4, #0]
 80088a6:	bd38      	pop	{r3, r4, r5, pc}
 80088a8:	20004790 	.word	0x20004790

080088ac <_fstat_r>:
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	4d07      	ldr	r5, [pc, #28]	; (80088cc <_fstat_r+0x20>)
 80088b0:	2300      	movs	r3, #0
 80088b2:	4604      	mov	r4, r0
 80088b4:	4608      	mov	r0, r1
 80088b6:	4611      	mov	r1, r2
 80088b8:	602b      	str	r3, [r5, #0]
 80088ba:	f7fe f9fb 	bl	8006cb4 <_fstat>
 80088be:	1c43      	adds	r3, r0, #1
 80088c0:	d102      	bne.n	80088c8 <_fstat_r+0x1c>
 80088c2:	682b      	ldr	r3, [r5, #0]
 80088c4:	b103      	cbz	r3, 80088c8 <_fstat_r+0x1c>
 80088c6:	6023      	str	r3, [r4, #0]
 80088c8:	bd38      	pop	{r3, r4, r5, pc}
 80088ca:	bf00      	nop
 80088cc:	20004790 	.word	0x20004790

080088d0 <_isatty_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4d06      	ldr	r5, [pc, #24]	; (80088ec <_isatty_r+0x1c>)
 80088d4:	2300      	movs	r3, #0
 80088d6:	4604      	mov	r4, r0
 80088d8:	4608      	mov	r0, r1
 80088da:	602b      	str	r3, [r5, #0]
 80088dc:	f7fe f998 	bl	8006c10 <_isatty>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d102      	bne.n	80088ea <_isatty_r+0x1a>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	b103      	cbz	r3, 80088ea <_isatty_r+0x1a>
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	20004790 	.word	0x20004790

080088f0 <_lseek_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	4d07      	ldr	r5, [pc, #28]	; (8008910 <_lseek_r+0x20>)
 80088f4:	4604      	mov	r4, r0
 80088f6:	4608      	mov	r0, r1
 80088f8:	4611      	mov	r1, r2
 80088fa:	2200      	movs	r2, #0
 80088fc:	602a      	str	r2, [r5, #0]
 80088fe:	461a      	mov	r2, r3
 8008900:	f7fe f9b8 	bl	8006c74 <_lseek>
 8008904:	1c43      	adds	r3, r0, #1
 8008906:	d102      	bne.n	800890e <_lseek_r+0x1e>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	b103      	cbz	r3, 800890e <_lseek_r+0x1e>
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	bd38      	pop	{r3, r4, r5, pc}
 8008910:	20004790 	.word	0x20004790

08008914 <__malloc_lock>:
 8008914:	4801      	ldr	r0, [pc, #4]	; (800891c <__malloc_lock+0x8>)
 8008916:	f7ff bb4d 	b.w	8007fb4 <__retarget_lock_acquire_recursive>
 800891a:	bf00      	nop
 800891c:	2000478a 	.word	0x2000478a

08008920 <__malloc_unlock>:
 8008920:	4801      	ldr	r0, [pc, #4]	; (8008928 <__malloc_unlock+0x8>)
 8008922:	f7ff bb48 	b.w	8007fb6 <__retarget_lock_release_recursive>
 8008926:	bf00      	nop
 8008928:	2000478a 	.word	0x2000478a

0800892c <_read_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4d07      	ldr	r5, [pc, #28]	; (800894c <_read_r+0x20>)
 8008930:	4604      	mov	r4, r0
 8008932:	4608      	mov	r0, r1
 8008934:	4611      	mov	r1, r2
 8008936:	2200      	movs	r2, #0
 8008938:	602a      	str	r2, [r5, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	f7fe f9a2 	bl	8006c84 <_read>
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	d102      	bne.n	800894a <_read_r+0x1e>
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	b103      	cbz	r3, 800894a <_read_r+0x1e>
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	20004790 	.word	0x20004790

08008950 <_sbrk>:
 8008950:	4b04      	ldr	r3, [pc, #16]	; (8008964 <_sbrk+0x14>)
 8008952:	6819      	ldr	r1, [r3, #0]
 8008954:	4602      	mov	r2, r0
 8008956:	b909      	cbnz	r1, 800895c <_sbrk+0xc>
 8008958:	4903      	ldr	r1, [pc, #12]	; (8008968 <_sbrk+0x18>)
 800895a:	6019      	str	r1, [r3, #0]
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	4402      	add	r2, r0
 8008960:	601a      	str	r2, [r3, #0]
 8008962:	4770      	bx	lr
 8008964:	20000504 	.word	0x20000504
 8008968:	20004794 	.word	0x20004794

0800896c <_init>:
 800896c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896e:	bf00      	nop
 8008970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008972:	bc08      	pop	{r3}
 8008974:	469e      	mov	lr, r3
 8008976:	4770      	bx	lr

08008978 <_fini>:
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897a:	bf00      	nop
 800897c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800897e:	bc08      	pop	{r3}
 8008980:	469e      	mov	lr, r3
 8008982:	4770      	bx	lr
