
STM32F429I-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000882c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002f524  080089dc  080089dc  000189dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08037f00  08037f00  00047f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08037f08  08037f08  00047f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08037f0c  08037f0c  00047f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000284  20000000  08037f10  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00050284  2**0
                  CONTENTS
  8 .bss          00004508  20000284  20000284  00050284  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000478c  2000478c  00050284  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00050284  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002c0e1  00000000  00000000  000502b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000063a8  00000000  00000000  0007c395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00018f93  00000000  00000000  0008273d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  0009b6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021a0  00000000  00000000  0009cdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b3f7  00000000  00000000  0009ef98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030519  00000000  00000000  000ca38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5908  00000000  00000000  000fa8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e01b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ec0  00000000  00000000  001e0200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000284 	.word	0x20000284
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080089c4 	.word	0x080089c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000288 	.word	0x20000288
 80001ec:	080089c4 	.word	0x080089c4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 8000594:	20f0      	movs	r0, #240	; 0xf0
 8000596:	4770      	bx	lr

08000598 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 8000598:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800059c:	4770      	bx	lr

0800059e <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 800059e:	2029      	movs	r0, #41	; 0x29
 80005a0:	f000 bf62 	b.w	8001468 <LCD_IO_WriteReg>

080005a4 <ili9341_DisplayOff>:
 80005a4:	2028      	movs	r0, #40	; 0x28
 80005a6:	f000 bf5f 	b.w	8001468 <LCD_IO_WriteReg>

080005aa <ili9341_Init>:
{
 80005aa:	b508      	push	{r3, lr}
  LCD_IO_Init();
 80005ac:	f000 fee2 	bl	8001374 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 80005b0:	20ca      	movs	r0, #202	; 0xca
 80005b2:	f000 ff59 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005b6:	20c3      	movs	r0, #195	; 0xc3
 80005b8:	f000 ff3a 	bl	8001430 <LCD_IO_WriteData>
 80005bc:	2008      	movs	r0, #8
 80005be:	f000 ff37 	bl	8001430 <LCD_IO_WriteData>
 80005c2:	2050      	movs	r0, #80	; 0x50
 80005c4:	f000 ff34 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005c8:	20cf      	movs	r0, #207	; 0xcf
 80005ca:	f000 ff4d 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 ff2e 	bl	8001430 <LCD_IO_WriteData>
 80005d4:	20c1      	movs	r0, #193	; 0xc1
 80005d6:	f000 ff2b 	bl	8001430 <LCD_IO_WriteData>
 80005da:	2030      	movs	r0, #48	; 0x30
 80005dc:	f000 ff28 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005e0:	20ed      	movs	r0, #237	; 0xed
 80005e2:	f000 ff41 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005e6:	2064      	movs	r0, #100	; 0x64
 80005e8:	f000 ff22 	bl	8001430 <LCD_IO_WriteData>
 80005ec:	2003      	movs	r0, #3
 80005ee:	f000 ff1f 	bl	8001430 <LCD_IO_WriteData>
 80005f2:	2012      	movs	r0, #18
 80005f4:	f000 ff1c 	bl	8001430 <LCD_IO_WriteData>
 80005f8:	2081      	movs	r0, #129	; 0x81
 80005fa:	f000 ff19 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005fe:	20e8      	movs	r0, #232	; 0xe8
 8000600:	f000 ff32 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000604:	2085      	movs	r0, #133	; 0x85
 8000606:	f000 ff13 	bl	8001430 <LCD_IO_WriteData>
 800060a:	2000      	movs	r0, #0
 800060c:	f000 ff10 	bl	8001430 <LCD_IO_WriteData>
 8000610:	2078      	movs	r0, #120	; 0x78
 8000612:	f000 ff0d 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000616:	20cb      	movs	r0, #203	; 0xcb
 8000618:	f000 ff26 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800061c:	2039      	movs	r0, #57	; 0x39
 800061e:	f000 ff07 	bl	8001430 <LCD_IO_WriteData>
 8000622:	202c      	movs	r0, #44	; 0x2c
 8000624:	f000 ff04 	bl	8001430 <LCD_IO_WriteData>
 8000628:	2000      	movs	r0, #0
 800062a:	f000 ff01 	bl	8001430 <LCD_IO_WriteData>
 800062e:	2034      	movs	r0, #52	; 0x34
 8000630:	f000 fefe 	bl	8001430 <LCD_IO_WriteData>
 8000634:	2002      	movs	r0, #2
 8000636:	f000 fefb 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800063a:	20f7      	movs	r0, #247	; 0xf7
 800063c:	f000 ff14 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000640:	2020      	movs	r0, #32
 8000642:	f000 fef5 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000646:	20ea      	movs	r0, #234	; 0xea
 8000648:	f000 ff0e 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800064c:	2000      	movs	r0, #0
 800064e:	f000 feef 	bl	8001430 <LCD_IO_WriteData>
 8000652:	2000      	movs	r0, #0
 8000654:	f000 feec 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000658:	20b1      	movs	r0, #177	; 0xb1
 800065a:	f000 ff05 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800065e:	2000      	movs	r0, #0
 8000660:	f000 fee6 	bl	8001430 <LCD_IO_WriteData>
 8000664:	201b      	movs	r0, #27
 8000666:	f000 fee3 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800066a:	20b6      	movs	r0, #182	; 0xb6
 800066c:	f000 fefc 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000670:	200a      	movs	r0, #10
 8000672:	f000 fedd 	bl	8001430 <LCD_IO_WriteData>
 8000676:	20a2      	movs	r0, #162	; 0xa2
 8000678:	f000 feda 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800067c:	20c0      	movs	r0, #192	; 0xc0
 800067e:	f000 fef3 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000682:	2010      	movs	r0, #16
 8000684:	f000 fed4 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000688:	20c1      	movs	r0, #193	; 0xc1
 800068a:	f000 feed 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800068e:	2010      	movs	r0, #16
 8000690:	f000 fece 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000694:	20c5      	movs	r0, #197	; 0xc5
 8000696:	f000 fee7 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800069a:	2045      	movs	r0, #69	; 0x45
 800069c:	f000 fec8 	bl	8001430 <LCD_IO_WriteData>
 80006a0:	2015      	movs	r0, #21
 80006a2:	f000 fec5 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006a6:	20c7      	movs	r0, #199	; 0xc7
 80006a8:	f000 fede 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006ac:	2090      	movs	r0, #144	; 0x90
 80006ae:	f000 febf 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006b2:	2036      	movs	r0, #54	; 0x36
 80006b4:	f000 fed8 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006b8:	20c8      	movs	r0, #200	; 0xc8
 80006ba:	f000 feb9 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006be:	20f2      	movs	r0, #242	; 0xf2
 80006c0:	f000 fed2 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 feb3 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006ca:	20b0      	movs	r0, #176	; 0xb0
 80006cc:	f000 fecc 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006d0:	20c2      	movs	r0, #194	; 0xc2
 80006d2:	f000 fead 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006d6:	20b6      	movs	r0, #182	; 0xb6
 80006d8:	f000 fec6 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006dc:	200a      	movs	r0, #10
 80006de:	f000 fea7 	bl	8001430 <LCD_IO_WriteData>
 80006e2:	20a7      	movs	r0, #167	; 0xa7
 80006e4:	f000 fea4 	bl	8001430 <LCD_IO_WriteData>
 80006e8:	2027      	movs	r0, #39	; 0x27
 80006ea:	f000 fea1 	bl	8001430 <LCD_IO_WriteData>
 80006ee:	2004      	movs	r0, #4
 80006f0:	f000 fe9e 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006f4:	202a      	movs	r0, #42	; 0x2a
 80006f6:	f000 feb7 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 fe98 	bl	8001430 <LCD_IO_WriteData>
 8000700:	2000      	movs	r0, #0
 8000702:	f000 fe95 	bl	8001430 <LCD_IO_WriteData>
 8000706:	2000      	movs	r0, #0
 8000708:	f000 fe92 	bl	8001430 <LCD_IO_WriteData>
 800070c:	20ef      	movs	r0, #239	; 0xef
 800070e:	f000 fe8f 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000712:	202b      	movs	r0, #43	; 0x2b
 8000714:	f000 fea8 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000718:	2000      	movs	r0, #0
 800071a:	f000 fe89 	bl	8001430 <LCD_IO_WriteData>
 800071e:	2000      	movs	r0, #0
 8000720:	f000 fe86 	bl	8001430 <LCD_IO_WriteData>
 8000724:	2001      	movs	r0, #1
 8000726:	f000 fe83 	bl	8001430 <LCD_IO_WriteData>
 800072a:	203f      	movs	r0, #63	; 0x3f
 800072c:	f000 fe80 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000730:	20f6      	movs	r0, #246	; 0xf6
 8000732:	f000 fe99 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000736:	2001      	movs	r0, #1
 8000738:	f000 fe7a 	bl	8001430 <LCD_IO_WriteData>
 800073c:	2000      	movs	r0, #0
 800073e:	f000 fe77 	bl	8001430 <LCD_IO_WriteData>
 8000742:	2006      	movs	r0, #6
 8000744:	f000 fe74 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000748:	202c      	movs	r0, #44	; 0x2c
 800074a:	f000 fe8d 	bl	8001468 <LCD_IO_WriteReg>
  LCD_Delay(200);
 800074e:	20c8      	movs	r0, #200	; 0xc8
 8000750:	f000 fedc 	bl	800150c <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8000754:	2026      	movs	r0, #38	; 0x26
 8000756:	f000 fe87 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800075a:	2001      	movs	r0, #1
 800075c:	f000 fe68 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000760:	20e0      	movs	r0, #224	; 0xe0
 8000762:	f000 fe81 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000766:	200f      	movs	r0, #15
 8000768:	f000 fe62 	bl	8001430 <LCD_IO_WriteData>
 800076c:	2029      	movs	r0, #41	; 0x29
 800076e:	f000 fe5f 	bl	8001430 <LCD_IO_WriteData>
 8000772:	2024      	movs	r0, #36	; 0x24
 8000774:	f000 fe5c 	bl	8001430 <LCD_IO_WriteData>
 8000778:	200c      	movs	r0, #12
 800077a:	f000 fe59 	bl	8001430 <LCD_IO_WriteData>
 800077e:	200e      	movs	r0, #14
 8000780:	f000 fe56 	bl	8001430 <LCD_IO_WriteData>
 8000784:	2009      	movs	r0, #9
 8000786:	f000 fe53 	bl	8001430 <LCD_IO_WriteData>
 800078a:	204e      	movs	r0, #78	; 0x4e
 800078c:	f000 fe50 	bl	8001430 <LCD_IO_WriteData>
 8000790:	2078      	movs	r0, #120	; 0x78
 8000792:	f000 fe4d 	bl	8001430 <LCD_IO_WriteData>
 8000796:	203c      	movs	r0, #60	; 0x3c
 8000798:	f000 fe4a 	bl	8001430 <LCD_IO_WriteData>
 800079c:	2009      	movs	r0, #9
 800079e:	f000 fe47 	bl	8001430 <LCD_IO_WriteData>
 80007a2:	2013      	movs	r0, #19
 80007a4:	f000 fe44 	bl	8001430 <LCD_IO_WriteData>
 80007a8:	2005      	movs	r0, #5
 80007aa:	f000 fe41 	bl	8001430 <LCD_IO_WriteData>
 80007ae:	2017      	movs	r0, #23
 80007b0:	f000 fe3e 	bl	8001430 <LCD_IO_WriteData>
 80007b4:	2011      	movs	r0, #17
 80007b6:	f000 fe3b 	bl	8001430 <LCD_IO_WriteData>
 80007ba:	2000      	movs	r0, #0
 80007bc:	f000 fe38 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80007c0:	20e1      	movs	r0, #225	; 0xe1
 80007c2:	f000 fe51 	bl	8001468 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80007c6:	2000      	movs	r0, #0
 80007c8:	f000 fe32 	bl	8001430 <LCD_IO_WriteData>
 80007cc:	2016      	movs	r0, #22
 80007ce:	f000 fe2f 	bl	8001430 <LCD_IO_WriteData>
 80007d2:	201b      	movs	r0, #27
 80007d4:	f000 fe2c 	bl	8001430 <LCD_IO_WriteData>
 80007d8:	2004      	movs	r0, #4
 80007da:	f000 fe29 	bl	8001430 <LCD_IO_WriteData>
 80007de:	2011      	movs	r0, #17
 80007e0:	f000 fe26 	bl	8001430 <LCD_IO_WriteData>
 80007e4:	2007      	movs	r0, #7
 80007e6:	f000 fe23 	bl	8001430 <LCD_IO_WriteData>
 80007ea:	2031      	movs	r0, #49	; 0x31
 80007ec:	f000 fe20 	bl	8001430 <LCD_IO_WriteData>
 80007f0:	2033      	movs	r0, #51	; 0x33
 80007f2:	f000 fe1d 	bl	8001430 <LCD_IO_WriteData>
 80007f6:	2042      	movs	r0, #66	; 0x42
 80007f8:	f000 fe1a 	bl	8001430 <LCD_IO_WriteData>
 80007fc:	2005      	movs	r0, #5
 80007fe:	f000 fe17 	bl	8001430 <LCD_IO_WriteData>
 8000802:	200c      	movs	r0, #12
 8000804:	f000 fe14 	bl	8001430 <LCD_IO_WriteData>
 8000808:	200a      	movs	r0, #10
 800080a:	f000 fe11 	bl	8001430 <LCD_IO_WriteData>
 800080e:	2028      	movs	r0, #40	; 0x28
 8000810:	f000 fe0e 	bl	8001430 <LCD_IO_WriteData>
 8000814:	202f      	movs	r0, #47	; 0x2f
 8000816:	f000 fe0b 	bl	8001430 <LCD_IO_WriteData>
 800081a:	200f      	movs	r0, #15
 800081c:	f000 fe08 	bl	8001430 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000820:	2011      	movs	r0, #17
 8000822:	f000 fe21 	bl	8001468 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8000826:	20c8      	movs	r0, #200	; 0xc8
 8000828:	f000 fe70 	bl	800150c <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 800082c:	2029      	movs	r0, #41	; 0x29
 800082e:	f000 fe1b 	bl	8001468 <LCD_IO_WriteReg>
}
 8000832:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 8000836:	202c      	movs	r0, #44	; 0x2c
 8000838:	f000 be16 	b.w	8001468 <LCD_IO_WriteReg>

0800083c <ili9341_ReadID>:
{
 800083c:	b508      	push	{r3, lr}
  LCD_IO_Init();
 800083e:	f000 fd99 	bl	8001374 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000842:	2103      	movs	r1, #3
 8000844:	20d3      	movs	r0, #211	; 0xd3
 8000846:	f000 fe2b 	bl	80014a0 <LCD_IO_ReadData>
}
 800084a:	b280      	uxth	r0, r0
 800084c:	bd08      	pop	{r3, pc}

0800084e <L3GD20_DeInit>:
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
}
 800084e:	4770      	bx	lr

08000850 <L3GD20_Init>:
{  
 8000850:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 8000852:	2300      	movs	r3, #0
{  
 8000854:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 8000856:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 800085a:	f000 fed7 	bl	800160c <GYRO_IO_Init>
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800085e:	f10d 0007 	add.w	r0, sp, #7
 8000862:	2201      	movs	r2, #1
 8000864:	2120      	movs	r1, #32
  ctrl = (uint8_t) InitStruct;
 8000866:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800086a:	f000 ff07 	bl	800167c <GYRO_IO_Write>
  ctrl = (uint8_t) (InitStruct >> 8);
 800086e:	0a24      	lsrs	r4, r4, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000870:	2201      	movs	r2, #1
 8000872:	2123      	movs	r1, #35	; 0x23
 8000874:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t) (InitStruct >> 8);
 8000878:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800087c:	f000 fefe 	bl	800167c <GYRO_IO_Write>
}
 8000880:	b002      	add	sp, #8
 8000882:	bd10      	pop	{r4, pc}

08000884 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8000884:	b507      	push	{r0, r1, r2, lr}
  uint8_t ctrl = 0x00;

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000886:	2201      	movs	r2, #1
  ctrl = (uint8_t) InitStruct;
 8000888:	f88d 0007 	strb.w	r0, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800088c:	2120      	movs	r1, #32
 800088e:	f10d 0007 	add.w	r0, sp, #7
 8000892:	f000 fef3 	bl	800167c <GYRO_IO_Write>
}
 8000896:	b003      	add	sp, #12
 8000898:	f85d fb04 	ldr.w	pc, [sp], #4

0800089c <L3GD20_ReadID>:
{
 800089c:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Init();
 800089e:	f000 feb5 	bl	800160c <GYRO_IO_Init>
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80008a2:	f10d 0007 	add.w	r0, sp, #7
 80008a6:	2201      	movs	r2, #1
 80008a8:	210f      	movs	r1, #15
 80008aa:	f000 ff09 	bl	80016c0 <GYRO_IO_Read>
}
 80008ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80008b2:	b003      	add	sp, #12
 80008b4:	f85d fb04 	ldr.w	pc, [sp], #4

080008b8 <L3GD20_RebootCmd>:
{
 80008b8:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f10d 0007 	add.w	r0, sp, #7
 80008c0:	2124      	movs	r1, #36	; 0x24
 80008c2:	f000 fefd 	bl	80016c0 <GYRO_IO_Read>
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80008c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80008ca:	2201      	movs	r2, #1
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80008cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80008d0:	2124      	movs	r1, #36	; 0x24
 80008d2:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80008d6:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80008da:	f000 fecf 	bl	800167c <GYRO_IO_Write>
}
 80008de:	b003      	add	sp, #12
 80008e0:	f85d fb04 	ldr.w	pc, [sp], #4

080008e4 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80008e4:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80008e6:	2300      	movs	r3, #0
{
 80008e8:	4604      	mov	r4, r0
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80008ea:	2201      	movs	r2, #1
 80008ec:	f10d 0006 	add.w	r0, sp, #6
 80008f0:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80008f2:	f88d 3006 	strb.w	r3, [sp, #6]
 80008f6:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80008fa:	f000 fee1 	bl	80016c0 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80008fe:	f10d 0007 	add.w	r0, sp, #7
 8000902:	2201      	movs	r2, #1
 8000904:	2122      	movs	r1, #34	; 0x22
 8000906:	f000 fedb 	bl	80016c0 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800090a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800090e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000912:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 8000916:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800091a:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);   
 800091e:	ea43 0004 	orr.w	r0, r3, r4
 8000922:	f88d 0007 	strb.w	r0, [sp, #7]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000926:	2201      	movs	r2, #1
 8000928:	f10d 0006 	add.w	r0, sp, #6
 800092c:	2130      	movs	r1, #48	; 0x30
 800092e:	f000 fea5 	bl	800167c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000932:	2201      	movs	r2, #1
 8000934:	2122      	movs	r1, #34	; 0x22
 8000936:	f10d 0007 	add.w	r0, sp, #7
 800093a:	f000 fe9f 	bl	800167c <GYRO_IO_Write>
}
 800093e:	b002      	add	sp, #8
 8000940:	bd10      	pop	{r4, pc}

08000942 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8000942:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000944:	2201      	movs	r2, #1
{  
 8000946:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000948:	2122      	movs	r1, #34	; 0x22
 800094a:	f10d 0007 	add.w	r0, sp, #7
 800094e:	f000 feb7 	bl	80016c0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000952:	b96c      	cbnz	r4, 8000970 <L3GD20_EnableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8000954:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8000958:	f063 037f 	orn	r3, r3, #127	; 0x7f
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800095c:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000960:	2201      	movs	r2, #1
 8000962:	2122      	movs	r1, #34	; 0x22
 8000964:	f10d 0007 	add.w	r0, sp, #7
 8000968:	f000 fe88 	bl	800167c <GYRO_IO_Write>
}
 800096c:	b002      	add	sp, #8
 800096e:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 8000970:	2c01      	cmp	r4, #1
 8000972:	d1f5      	bne.n	8000960 <L3GD20_EnableIT+0x1e>
    tmpreg &= 0xF7;
 8000974:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000978:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	e7ec      	b.n	800095c <L3GD20_EnableIT+0x1a>

08000982 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8000982:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000984:	2201      	movs	r2, #1
{  
 8000986:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000988:	2122      	movs	r1, #34	; 0x22
 800098a:	f10d 0007 	add.w	r0, sp, #7
 800098e:	f000 fe97 	bl	80016c0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000992:	b96c      	cbnz	r4, 80009b0 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8000994:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
 800099c:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2122      	movs	r1, #34	; 0x22
 80009a4:	f10d 0007 	add.w	r0, sp, #7
 80009a8:	f000 fe68 	bl	800167c <GYRO_IO_Write>
}
 80009ac:	b002      	add	sp, #8
 80009ae:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 80009b0:	2c01      	cmp	r4, #1
 80009b2:	d1f5      	bne.n	80009a0 <L3GD20_DisableIT+0x1e>
    tmpreg &= 0xF7;
 80009b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80009b8:	f023 0308 	bic.w	r3, r3, #8
 80009bc:	e7ee      	b.n	800099c <L3GD20_DisableIT+0x1a>

080009be <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80009be:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80009c0:	2201      	movs	r2, #1
{
 80009c2:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80009c4:	2121      	movs	r1, #33	; 0x21
 80009c6:	f10d 0007 	add.w	r0, sp, #7
 80009ca:	f000 fe79 	bl	80016c0 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80009ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80009d2:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80009d6:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80009d8:	2201      	movs	r2, #1
 80009da:	2121      	movs	r1, #33	; 0x21
 80009dc:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= FilterStruct;
 80009e0:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80009e4:	f000 fe4a 	bl	800167c <GYRO_IO_Write>
}
 80009e8:	b002      	add	sp, #8
 80009ea:	bd10      	pop	{r4, pc}

080009ec <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80009ec:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80009ee:	2201      	movs	r2, #1
{
 80009f0:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80009f2:	2124      	movs	r1, #36	; 0x24
 80009f4:	f10d 0007 	add.w	r0, sp, #7
 80009f8:	f000 fe62 	bl	80016c0 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80009fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000a00:	f020 0010 	bic.w	r0, r0, #16
  
  tmpreg |= HighPassFilterState;
 8000a04:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2124      	movs	r1, #36	; 0x24
 8000a0a:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= HighPassFilterState;
 8000a0e:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000a12:	f000 fe33 	bl	800167c <GYRO_IO_Write>
}
 8000a16:	b002      	add	sp, #8
 8000a18:	bd10      	pop	{r4, pc}
	...

08000a1c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8000a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1e:	b087      	sub	sp, #28
  uint8_t tmpbuffer[6] ={0};
 8000a20:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2123      	movs	r1, #35	; 0x23
{
 8000a26:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000a28:	f10d 0007 	add.w	r0, sp, #7
  uint8_t tmpbuffer[6] ={0};
 8000a2c:	9302      	str	r3, [sp, #8]
 8000a2e:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t tmpreg = 0;
 8000a32:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000a36:	f000 fe43 	bl	80016c0 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8000a3a:	2206      	movs	r2, #6
 8000a3c:	2128      	movs	r1, #40	; 0x28
 8000a3e:	a802      	add	r0, sp, #8
 8000a40:	f000 fe3e 	bl	80016c0 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8000a44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000a48:	f89d 6008 	ldrb.w	r6, [sp, #8]
 8000a4c:	f89d 7009 	ldrb.w	r7, [sp, #9]
 8000a50:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000a54:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8000a58:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000a5c:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8000a60:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000a64:	d039      	beq.n	8000ada <L3GD20_ReadXYZAngRate+0xbe>
  }
  else
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8000a66:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8000a6a:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 8000a6e:	f8ad 6010 	strh.w	r6, [sp, #16]
 8000a72:	f8ad 0012 	strh.w	r0, [sp, #18]
 8000a76:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 8000a7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8000a7e:	2b10      	cmp	r3, #16
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8000a80:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8000a84:	d034      	beq.n	8000af0 <L3GD20_ReadXYZAngRate+0xd4>
 8000a86:	2b20      	cmp	r3, #32
 8000a88:	d035      	beq.n	8000af6 <L3GD20_ReadXYZAngRate+0xda>
 8000a8a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8000afc <L3GD20_ReadXYZAngRate+0xe0>
 8000a8e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000b00 <L3GD20_ReadXYZAngRate+0xe4>
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	bf08      	it	eq
 8000a96:	eef0 7a47 	vmoveq.f32	s15, s14
    break;
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8000a9a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8000a9e:	ee07 3a10 	vmov	s14, r3
 8000aa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000aa6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8000aaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000aae:	ed84 7a00 	vstr	s14, [r4]
 8000ab2:	ee07 3a10 	vmov	s14, r3
 8000ab6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000aba:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8000abe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ac2:	ed84 7a01 	vstr	s14, [r4, #4]
 8000ac6:	ee07 3a10 	vmov	s14, r3
 8000aca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad2:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 8000ad6:	b007      	add	sp, #28
 8000ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8000ada:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 8000ade:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8000ae2:	f8ad 6010 	strh.w	r6, [sp, #16]
 8000ae6:	f8ad 0012 	strh.w	r0, [sp, #18]
 8000aea:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000aee:	e7c4      	b.n	8000a7a <L3GD20_ReadXYZAngRate+0x5e>
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8000af0:	eddf 7a04 	vldr	s15, [pc, #16]	; 8000b04 <L3GD20_ReadXYZAngRate+0xe8>
 8000af4:	e7d1      	b.n	8000a9a <L3GD20_ReadXYZAngRate+0x7e>
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8000af6:	eddf 7a04 	vldr	s15, [pc, #16]	; 8000b08 <L3GD20_ReadXYZAngRate+0xec>
 8000afa:	e7ce      	b.n	8000a9a <L3GD20_ReadXYZAngRate+0x7e>
 8000afc:	00000000 	.word	0x00000000
 8000b00:	410c0000 	.word	0x410c0000
 8000b04:	418c0000 	.word	0x418c0000
 8000b08:	428c0000 	.word	0x428c0000

08000b0c <stmpe811_IO_WritePin>:
  *   @arg  STMPE811_PIN_x: where x can be from 0 to 7. 
  * @param PinState: The new IO pin state.
  * @retval None
  */
void stmpe811_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8000b0c:	4613      	mov	r3, r2
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
  {
    /* Set the register */
    IOE_Write(DeviceAddr, STMPE811_REG_IO_SET_PIN, (uint8_t)IO_Pin);
 8000b0e:	b2c0      	uxtb	r0, r0
 8000b10:	b2ca      	uxtb	r2, r1
  if (PinState != 0)
 8000b12:	b113      	cbz	r3, 8000b1a <stmpe811_IO_WritePin+0xe>
    IOE_Write(DeviceAddr, STMPE811_REG_IO_SET_PIN, (uint8_t)IO_Pin);
 8000b14:	2110      	movs	r1, #16
  }
  else
  {
    /* Set the register */
    IOE_Write(DeviceAddr, STMPE811_REG_IO_CLR_PIN, (uint8_t)IO_Pin);
 8000b16:	f000 bd27 	b.w	8001568 <IOE_Write>
 8000b1a:	2111      	movs	r1, #17
 8000b1c:	e7fb      	b.n	8000b16 <stmpe811_IO_WritePin+0xa>

08000b1e <stmpe811_Reset>:
{
 8000b1e:	b510      	push	{r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8000b20:	b2c4      	uxtb	r4, r0
 8000b22:	2202      	movs	r2, #2
 8000b24:	2103      	movs	r1, #3
 8000b26:	4620      	mov	r0, r4
 8000b28:	f000 fd1e 	bl	8001568 <IOE_Write>
  IOE_Delay(10); 
 8000b2c:	200a      	movs	r0, #10
 8000b2e:	f000 fd6b 	bl	8001608 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8000b32:	4620      	mov	r0, r4
 8000b34:	2200      	movs	r2, #0
 8000b36:	2103      	movs	r1, #3
 8000b38:	f000 fd16 	bl	8001568 <IOE_Write>
}
 8000b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 8000b40:	2002      	movs	r0, #2
 8000b42:	f000 bd61 	b.w	8001608 <IOE_Delay>

08000b46 <stmpe811_ReadID>:
{
 8000b46:	b538      	push	{r3, r4, r5, lr}
 8000b48:	4604      	mov	r4, r0
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8000b4a:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 8000b4c:	f000 fce0 	bl	8001510 <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8000b50:	2100      	movs	r1, #0
 8000b52:	4620      	mov	r0, r4
 8000b54:	f000 fd22 	bl	800159c <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8000b58:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8000b5a:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f000 fd1d 	bl	800159c <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8000b62:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 8000b66:	b280      	uxth	r0, r0
 8000b68:	bd38      	pop	{r3, r4, r5, pc}

08000b6a <stmpe811_IO_ReadPin>:
  *        of the following values:
  *   @arg  STMPE811_PIN_x: where x can be from 0 to 7. 
  * @retval IO pin(s) state.
  */
uint32_t stmpe811_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000b6a:	b510      	push	{r4, lr}
  return((uint32_t)(IOE_Read(DeviceAddr, STMPE811_REG_IO_MP_STA) & (uint8_t)IO_Pin));
 8000b6c:	b2c0      	uxtb	r0, r0
{
 8000b6e:	460c      	mov	r4, r1
  return((uint32_t)(IOE_Read(DeviceAddr, STMPE811_REG_IO_MP_STA) & (uint8_t)IO_Pin));
 8000b70:	2112      	movs	r1, #18
 8000b72:	f000 fd13 	bl	800159c <IOE_Read>
 8000b76:	4020      	ands	r0, r4
}
 8000b78:	b2c0      	uxtb	r0, r0
 8000b7a:	bd10      	pop	{r4, pc}

08000b7c <stmpe811_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  STMPE811_PIN_x Where x can be from 0 to 7.             
  * @retval Status of the checked IO pin(s).
  */
uint32_t stmpe811_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000b7c:	b510      	push	{r4, lr}
  /* Get the Interrupt status */
  return(IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_STA) & (uint8_t)IO_Pin); 
 8000b7e:	b2c0      	uxtb	r0, r0
{
 8000b80:	460c      	mov	r4, r1
  return(IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_STA) & (uint8_t)IO_Pin); 
 8000b82:	210d      	movs	r1, #13
 8000b84:	f000 fd0a 	bl	800159c <IOE_Read>
 8000b88:	4020      	ands	r0, r4
}
 8000b8a:	b2c0      	uxtb	r0, r0
 8000b8c:	bd10      	pop	{r4, pc}

08000b8e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000b8e:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8000b90:	b2c4      	uxtb	r4, r0
 8000b92:	2140      	movs	r1, #64	; 0x40
 8000b94:	4620      	mov	r0, r4
 8000b96:	f000 fd01 	bl	800159c <IOE_Read>
  
  if(state > 0)
 8000b9a:	0603      	lsls	r3, r0, #24
 8000b9c:	d507      	bpl.n	8000bae <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8000b9e:	214c      	movs	r1, #76	; 0x4c
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	f000 fcfb 	bl	800159c <IOE_Read>
    {
      ret = 1;
 8000ba6:	3800      	subs	r0, #0
 8000ba8:	bf18      	it	ne
 8000baa:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 8000bac:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	214b      	movs	r1, #75	; 0x4b
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f000 fcd8 	bl	8001568 <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000bb8:	4620      	mov	r0, r4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	214b      	movs	r1, #75	; 0x4b
 8000bbe:	f000 fcd3 	bl	8001568 <IOE_Write>
  uint8_t ret = 0;
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	e7f2      	b.n	8000bac <stmpe811_TS_DetectTouch+0x1e>

08000bc6 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000bc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	b2c4      	uxtb	r4, r0
{
 8000bcc:	460e      	mov	r6, r1
 8000bce:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8000bd0:	21d7      	movs	r1, #215	; 0xd7
 8000bd2:	eb0d 0203 	add.w	r2, sp, r3
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	f000 fcfe 	bl	80015d8 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8000bdc:	9b01      	ldr	r3, [sp, #4]
 8000bde:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8000be0:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8000be2:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8000be6:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000be8:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8000bea:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000bec:	2201      	movs	r2, #1
 8000bee:	214b      	movs	r1, #75	; 0x4b
 8000bf0:	f000 fcba 	bl	8001568 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	214b      	movs	r1, #75	; 0x4b
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f000 fcb5 	bl	8001568 <IOE_Write>
}
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c04 <stmpe811_Init>:
{
 8000c04:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <stmpe811_Init+0x2c>)
 8000c08:	781a      	ldrb	r2, [r3, #0]
 8000c0a:	4290      	cmp	r0, r2
{
 8000c0c:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 8000c0e:	d00d      	beq.n	8000c2c <stmpe811_Init+0x28>
 8000c10:	7859      	ldrb	r1, [r3, #1]
 8000c12:	4288      	cmp	r0, r1
 8000c14:	d00a      	beq.n	8000c2c <stmpe811_Init+0x28>
 8000c16:	b10a      	cbz	r2, 8000c1c <stmpe811_Init+0x18>
 8000c18:	b941      	cbnz	r1, 8000c2c <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8000c1a:	2201      	movs	r2, #1
      stmpe811[empty] = DeviceAddr;
 8000c1c:	549c      	strb	r4, [r3, r2]
      IOE_Init(); 
 8000c1e:	f000 fc77 	bl	8001510 <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 8000c22:	4620      	mov	r0, r4
}
 8000c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 8000c28:	f7ff bf79 	b.w	8000b1e <stmpe811_Reset>
}
 8000c2c:	bd10      	pop	{r4, pc}
 8000c2e:	bf00      	nop
 8000c30:	200002a0 	.word	0x200002a0

08000c34 <stmpe811_EnableGlobalIT>:
{
 8000c34:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000c36:	b2c4      	uxtb	r4, r0
 8000c38:	2109      	movs	r1, #9
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f000 fcae 	bl	800159c <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8000c40:	f040 0001 	orr.w	r0, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8000c44:	b2c2      	uxtb	r2, r0
 8000c46:	2109      	movs	r1, #9
 8000c48:	4620      	mov	r0, r4
}
 8000c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8000c4e:	f000 bc8b 	b.w	8001568 <IOE_Write>

08000c52 <stmpe811_DisableGlobalIT>:
{
 8000c52:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000c54:	b2c4      	uxtb	r4, r0
 8000c56:	2109      	movs	r1, #9
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f000 fc9f 	bl	800159c <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000c5e:	2109      	movs	r1, #9
 8000c60:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 8000c64:	4620      	mov	r0, r4
}
 8000c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000c6a:	f000 bc7d 	b.w	8001568 <IOE_Write>

08000c6e <stmpe811_EnableITSource>:
{
 8000c6e:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000c70:	b2c4      	uxtb	r4, r0
{
 8000c72:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000c74:	4620      	mov	r0, r4
 8000c76:	210a      	movs	r1, #10
 8000c78:	f000 fc90 	bl	800159c <IOE_Read>
  tmp |= Source; 
 8000c7c:	4328      	orrs	r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000c7e:	b2c2      	uxtb	r2, r0
 8000c80:	210a      	movs	r1, #10
 8000c82:	4620      	mov	r0, r4
}
 8000c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000c88:	f000 bc6e 	b.w	8001568 <IOE_Write>

08000c8c <stmpe811_IO_EnableIT>:
{ 
 8000c8c:	b507      	push	{r0, r1, r2, lr}
 8000c8e:	9001      	str	r0, [sp, #4]
  IOE_ITConfig();
 8000c90:	f000 fc40 	bl	8001514 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_GIT_IO);
 8000c94:	9801      	ldr	r0, [sp, #4]
 8000c96:	2180      	movs	r1, #128	; 0x80
 8000c98:	f7ff ffe9 	bl	8000c6e <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr); 
 8000c9c:	9801      	ldr	r0, [sp, #4]
}
 8000c9e:	b003      	add	sp, #12
 8000ca0:	f85d eb04 	ldr.w	lr, [sp], #4
  stmpe811_EnableGlobalIT(DeviceAddr); 
 8000ca4:	f7ff bfc6 	b.w	8000c34 <stmpe811_EnableGlobalIT>

08000ca8 <stmpe811_TS_EnableIT>:
{
 8000ca8:	b507      	push	{r0, r1, r2, lr}
 8000caa:	9001      	str	r0, [sp, #4]
  IOE_ITConfig();
 8000cac:	f000 fc32 	bl	8001514 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8000cb0:	9801      	ldr	r0, [sp, #4]
 8000cb2:	211f      	movs	r1, #31
 8000cb4:	f7ff ffdb 	bl	8000c6e <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 8000cb8:	9801      	ldr	r0, [sp, #4]
}
 8000cba:	b003      	add	sp, #12
 8000cbc:	f85d eb04 	ldr.w	lr, [sp], #4
  stmpe811_EnableGlobalIT(DeviceAddr);
 8000cc0:	f7ff bfb8 	b.w	8000c34 <stmpe811_EnableGlobalIT>

08000cc4 <stmpe811_DisableITSource>:
{
 8000cc4:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000cc6:	b2c4      	uxtb	r4, r0
{
 8000cc8:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000cca:	4620      	mov	r0, r4
 8000ccc:	210a      	movs	r1, #10
 8000cce:	f000 fc65 	bl	800159c <IOE_Read>
  tmp &= ~Source; 
 8000cd2:	ea20 0005 	bic.w	r0, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000cd6:	b2c2      	uxtb	r2, r0
 8000cd8:	210a      	movs	r1, #10
 8000cda:	4620      	mov	r0, r4
}
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000ce0:	f000 bc42 	b.w	8001568 <IOE_Write>

08000ce4 <stmpe811_IO_DisableIT>:
{
 8000ce4:	b510      	push	{r4, lr}
 8000ce6:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8000ce8:	f7ff ffb3 	bl	8000c52 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_GIT_IO);    
 8000cec:	4620      	mov	r0, r4
 8000cee:	2180      	movs	r1, #128	; 0x80
}
 8000cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_GIT_IO);    
 8000cf4:	f7ff bfe6 	b.w	8000cc4 <stmpe811_DisableITSource>

08000cf8 <stmpe811_TS_DisableIT>:
{
 8000cf8:	b510      	push	{r4, lr}
 8000cfa:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8000cfc:	f7ff ffa9 	bl	8000c52 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8000d00:	4620      	mov	r0, r4
 8000d02:	211f      	movs	r1, #31
}
 8000d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8000d08:	f7ff bfdc 	b.w	8000cc4 <stmpe811_DisableITSource>

08000d0c <stmpe811_SetITPolarity>:
{
 8000d0c:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000d0e:	b2c4      	uxtb	r4, r0
{
 8000d10:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000d12:	4620      	mov	r0, r4
 8000d14:	2109      	movs	r1, #9
 8000d16:	f000 fc41 	bl	800159c <IOE_Read>
  tmp &= ~(uint8_t)0x04;
 8000d1a:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000d1e:	ea40 0205 	orr.w	r2, r0, r5
 8000d22:	2109      	movs	r1, #9
 8000d24:	4620      	mov	r0, r4
}
 8000d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000d2a:	f000 bc1d 	b.w	8001568 <IOE_Write>

08000d2e <stmpe811_SetITType>:
{
 8000d2e:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000d30:	b2c4      	uxtb	r4, r0
{
 8000d32:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000d34:	4620      	mov	r0, r4
 8000d36:	2109      	movs	r1, #9
 8000d38:	f000 fc30 	bl	800159c <IOE_Read>
  tmp &= ~(uint8_t)0x02;
 8000d3c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000d40:	ea40 0205 	orr.w	r2, r0, r5
 8000d44:	2109      	movs	r1, #9
 8000d46:	4620      	mov	r0, r4
}
 8000d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000d4c:	f000 bc0c 	b.w	8001568 <IOE_Write>

08000d50 <stmpe811_ReadGITStatus>:
{
 8000d50:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8000d52:	b2c0      	uxtb	r0, r0
{
 8000d54:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8000d56:	210b      	movs	r1, #11
 8000d58:	f000 fc20 	bl	800159c <IOE_Read>
}
 8000d5c:	4020      	ands	r0, r4
 8000d5e:	bd10      	pop	{r4, pc}

08000d60 <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8000d60:	211f      	movs	r1, #31
 8000d62:	f7ff bff5 	b.w	8000d50 <stmpe811_ReadGITStatus>

08000d66 <stmpe811_ClearGlobalIT>:
{
 8000d66:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8000d68:	b2c0      	uxtb	r0, r0
 8000d6a:	210b      	movs	r1, #11
 8000d6c:	f000 bbfc 	b.w	8001568 <IOE_Write>

08000d70 <stmpe811_IO_ClearIT>:
{
 8000d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d72:	4604      	mov	r4, r0
 8000d74:	460d      	mov	r5, r1
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_GIT_IO);
 8000d76:	2180      	movs	r1, #128	; 0x80
 8000d78:	f7ff fff5 	bl	8000d66 <stmpe811_ClearGlobalIT>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_STA, (uint8_t)IO_Pin);  
 8000d7c:	b2e0      	uxtb	r0, r4
 8000d7e:	b2ea      	uxtb	r2, r5
 8000d80:	210d      	movs	r1, #13
 8000d82:	9201      	str	r2, [sp, #4]
 8000d84:	9000      	str	r0, [sp, #0]
 8000d86:	f000 fbef 	bl	8001568 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_ED, (uint8_t)IO_Pin);
 8000d8a:	9a01      	ldr	r2, [sp, #4]
 8000d8c:	9800      	ldr	r0, [sp, #0]
 8000d8e:	2114      	movs	r1, #20
 8000d90:	f000 fbea 	bl	8001568 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, (uint8_t)IO_Pin);
 8000d94:	9a01      	ldr	r2, [sp, #4]
 8000d96:	9800      	ldr	r0, [sp, #0]
 8000d98:	2115      	movs	r1, #21
 8000d9a:	f000 fbe5 	bl	8001568 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, (uint8_t)IO_Pin); 
 8000d9e:	9a01      	ldr	r2, [sp, #4]
 8000da0:	9800      	ldr	r0, [sp, #0]
 8000da2:	2116      	movs	r1, #22
}
 8000da4:	b003      	add	sp, #12
 8000da6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, (uint8_t)IO_Pin); 
 8000daa:	f000 bbdd 	b.w	8001568 <IOE_Write>

08000dae <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8000dae:	211f      	movs	r1, #31
 8000db0:	f7ff bfd9 	b.w	8000d66 <stmpe811_ClearGlobalIT>

08000db4 <stmpe811_IO_InitPin>:
{
 8000db4:	b570      	push	{r4, r5, r6, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_DIR);
 8000db6:	b2c4      	uxtb	r4, r0
{
 8000db8:	460d      	mov	r5, r1
 8000dba:	4616      	mov	r6, r2
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_DIR);
 8000dbc:	2113      	movs	r1, #19
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	f000 fbec 	bl	800159c <IOE_Read>
  if (Direction != STMPE811_DIRECTION_IN)
 8000dc4:	b146      	cbz	r6, 8000dd8 <stmpe811_IO_InitPin+0x24>
    tmp |= (uint8_t)IO_Pin;
 8000dc6:	ea40 0105 	orr.w	r1, r0, r5
 8000dca:	b2ca      	uxtb	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_IO_DIR, tmp);   
 8000dcc:	4620      	mov	r0, r4
 8000dce:	2113      	movs	r1, #19
}
 8000dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_DIR, tmp);   
 8000dd4:	f000 bbc8 	b.w	8001568 <IOE_Write>
    tmp &= ~(uint8_t)IO_Pin;
 8000dd8:	ea20 0205 	bic.w	r2, r0, r5
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	e7f5      	b.n	8000dcc <stmpe811_IO_InitPin+0x18>

08000de0 <stmpe811_IO_DisableAF>:
{
 8000de0:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000de2:	b2c4      	uxtb	r4, r0
{
 8000de4:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000de6:	4620      	mov	r0, r4
 8000de8:	2117      	movs	r1, #23
 8000dea:	f000 fbd7 	bl	800159c <IOE_Read>
  tmp |= (uint8_t)IO_Pin;
 8000dee:	4328      	orrs	r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp);
 8000df0:	b2c2      	uxtb	r2, r0
 8000df2:	2117      	movs	r1, #23
 8000df4:	4620      	mov	r0, r4
}
 8000df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp);
 8000dfa:	f000 bbb5 	b.w	8001568 <IOE_Write>

08000dfe <stmpe811_IO_Start>:
{
 8000dfe:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000e00:	b2c6      	uxtb	r6, r0
{
 8000e02:	4604      	mov	r4, r0
 8000e04:	460d      	mov	r5, r1
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000e06:	4630      	mov	r0, r6
 8000e08:	2104      	movs	r1, #4
 8000e0a:	f000 fbc7 	bl	800159c <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000e0e:	2104      	movs	r1, #4
 8000e10:	f000 02fa 	and.w	r2, r0, #250	; 0xfa
 8000e14:	4630      	mov	r0, r6
 8000e16:	f000 fba7 	bl	8001568 <IOE_Write>
  stmpe811_IO_DisableAF(DeviceAddr, (uint8_t)IO_Pin);
 8000e1a:	b2e9      	uxtb	r1, r5
 8000e1c:	4620      	mov	r0, r4
}
 8000e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  stmpe811_IO_DisableAF(DeviceAddr, (uint8_t)IO_Pin);
 8000e22:	f7ff bfdd 	b.w	8000de0 <stmpe811_IO_DisableAF>

08000e26 <stmpe811_IO_EnableAF>:
{
 8000e26:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000e28:	b2c4      	uxtb	r4, r0
{
 8000e2a:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	2117      	movs	r1, #23
 8000e30:	f000 fbb4 	bl	800159c <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 8000e34:	ea20 0005 	bic.w	r0, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8000e38:	b2c2      	uxtb	r2, r0
 8000e3a:	2117      	movs	r1, #23
 8000e3c:	4620      	mov	r0, r4
}
 8000e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8000e42:	f000 bb91 	b.w	8001568 <IOE_Write>

08000e46 <stmpe811_TS_Start>:
{
 8000e46:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000e48:	b2c4      	uxtb	r4, r0
{
 8000e4a:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	4620      	mov	r0, r4
 8000e50:	f000 fba4 	bl	800159c <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000e54:	2104      	movs	r1, #4
 8000e56:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000e5a:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	f000 fb83 	bl	8001568 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8000e62:	4630      	mov	r0, r6
 8000e64:	21f0      	movs	r1, #240	; 0xf0
 8000e66:	f7ff ffde 	bl	8000e26 <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000e6a:	f005 02f8 	and.w	r2, r5, #248	; 0xf8
 8000e6e:	4620      	mov	r0, r4
 8000e70:	2104      	movs	r1, #4
 8000e72:	f000 fb79 	bl	8001568 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8000e76:	2249      	movs	r2, #73	; 0x49
 8000e78:	2120      	movs	r1, #32
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	f000 fb74 	bl	8001568 <IOE_Write>
  IOE_Delay(2); 
 8000e80:	2002      	movs	r0, #2
 8000e82:	f000 fbc1 	bl	8001608 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8000e86:	4620      	mov	r0, r4
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2121      	movs	r1, #33	; 0x21
 8000e8c:	f000 fb6c 	bl	8001568 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8000e90:	4620      	mov	r0, r4
 8000e92:	229a      	movs	r2, #154	; 0x9a
 8000e94:	2141      	movs	r1, #65	; 0x41
 8000e96:	f000 fb67 	bl	8001568 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	214a      	movs	r1, #74	; 0x4a
 8000ea0:	f000 fb62 	bl	8001568 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	214b      	movs	r1, #75	; 0x4b
 8000eaa:	f000 fb5d 	bl	8001568 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000eae:	4620      	mov	r0, r4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	214b      	movs	r1, #75	; 0x4b
 8000eb4:	f000 fb58 	bl	8001568 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8000eb8:	4620      	mov	r0, r4
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2156      	movs	r1, #86	; 0x56
 8000ebe:	f000 fb53 	bl	8001568 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2158      	movs	r1, #88	; 0x58
 8000ec8:	f000 fb4e 	bl	8001568 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8000ecc:	4620      	mov	r0, r4
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2140      	movs	r1, #64	; 0x40
 8000ed2:	f000 fb49 	bl	8001568 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	22ff      	movs	r2, #255	; 0xff
 8000eda:	210b      	movs	r1, #11
 8000edc:	f000 fb44 	bl	8001568 <IOE_Write>
}
 8000ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f000 bb8f 	b.w	8001608 <IOE_Delay>

08000eea <stmpe811_IO_SetEdgeMode>:
{
 8000eea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8000eee:	b2c7      	uxtb	r7, r0
{
 8000ef0:	4688      	mov	r8, r1
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8000ef2:	4638      	mov	r0, r7
 8000ef4:	2116      	movs	r1, #22
{
 8000ef6:	4691      	mov	r9, r2
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8000ef8:	f000 fb50 	bl	800159c <IOE_Read>
  tmp1 &= ~(uint8_t)IO_Pin;
 8000efc:	ea6f 0508 	mvn.w	r5, r8
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8000f00:	4606      	mov	r6, r0
  tmp2 = IOE_Read(DeviceAddr, STMPE811_REG_IO_RE);
 8000f02:	2115      	movs	r1, #21
 8000f04:	4638      	mov	r0, r7
 8000f06:	f000 fb49 	bl	800159c <IOE_Read>
  tmp1 &= ~(uint8_t)IO_Pin;
 8000f0a:	b26b      	sxtb	r3, r5
 8000f0c:	401e      	ands	r6, r3
 8000f0e:	b2f2      	uxtb	r2, r6
  if (Edge & STMPE811_EDGE_FALLING)
 8000f10:	f019 0f01 	tst.w	r9, #1
    tmp1 |= (uint8_t)IO_Pin;
 8000f14:	bf18      	it	ne
 8000f16:	ea42 0208 	orrne.w	r2, r2, r8
  tmp2 &= ~(uint8_t)IO_Pin;
 8000f1a:	ea00 0003 	and.w	r0, r0, r3
 8000f1e:	b2c4      	uxtb	r4, r0
    tmp1 |= (uint8_t)IO_Pin;
 8000f20:	bf18      	it	ne
 8000f22:	b2d2      	uxtbne	r2, r2
  if (Edge & STMPE811_EDGE_RISING)
 8000f24:	f019 0f02 	tst.w	r9, #2
    tmp2 |= (uint8_t)IO_Pin;
 8000f28:	bf1c      	itt	ne
 8000f2a:	ea44 0408 	orrne.w	r4, r4, r8
 8000f2e:	b2e4      	uxtbne	r4, r4
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, tmp1);
 8000f30:	4638      	mov	r0, r7
 8000f32:	2116      	movs	r1, #22
 8000f34:	f000 fb18 	bl	8001568 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, tmp2);
 8000f38:	4622      	mov	r2, r4
 8000f3a:	4638      	mov	r0, r7
 8000f3c:	2115      	movs	r1, #21
}
 8000f3e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, tmp2);
 8000f42:	f000 bb11 	b.w	8001568 <IOE_Write>

08000f46 <stmpe811_IO_EnablePinIT>:
{
 8000f46:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_EN);
 8000f48:	b2c4      	uxtb	r4, r0
{
 8000f4a:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_EN);
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	210c      	movs	r1, #12
 8000f50:	f000 fb24 	bl	800159c <IOE_Read>
  tmp |= (uint8_t)IO_Pin;
 8000f54:	4328      	orrs	r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_EN, tmp);  
 8000f56:	b2c2      	uxtb	r2, r0
 8000f58:	210c      	movs	r1, #12
 8000f5a:	4620      	mov	r0, r4
}
 8000f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_EN, tmp);  
 8000f60:	f000 bb02 	b.w	8001568 <IOE_Write>

08000f64 <stmpe811_IO_Config>:
{
 8000f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f66:	460c      	mov	r4, r1
 8000f68:	4615      	mov	r5, r2
  switch(IO_Mode)
 8000f6a:	2a05      	cmp	r2, #5
 8000f6c:	d807      	bhi.n	8000f7e <stmpe811_IO_Config+0x1a>
 8000f6e:	e8df f002 	tbb	[pc, r2]
 8000f72:	0903      	.short	0x0903
 8000f74:	4b36240e 	.word	0x4b36240e
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f7ff ff1b 	bl	8000db4 <stmpe811_IO_InitPin>
}
 8000f7e:	4628      	mov	r0, r5
 8000f80:	b003      	add	sp, #12
 8000f82:	bd30      	pop	{r4, r5, pc}
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_OUT);
 8000f84:	2201      	movs	r2, #1
 8000f86:	f7ff ff15 	bl	8000db4 <stmpe811_IO_InitPin>
  uint8_t error_code = 0;
 8000f8a:	2500      	movs	r5, #0
    break;    
 8000f8c:	e7f7      	b.n	8000f7e <stmpe811_IO_Config+0x1a>
    stmpe811_IO_EnableIT(DeviceAddr);
 8000f8e:	9001      	str	r0, [sp, #4]
 8000f90:	f7ff fe7c 	bl	8000c8c <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8000f94:	9801      	ldr	r0, [sp, #4]
 8000f96:	4621      	mov	r1, r4
 8000f98:	f7ff ffd5 	bl	8000f46 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	9801      	ldr	r0, [sp, #4]
 8000fa0:	4621      	mov	r1, r4
 8000fa2:	f7ff ff07 	bl	8000db4 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_EDGE);      
 8000fa6:	9801      	ldr	r0, [sp, #4]
 8000fa8:	2102      	movs	r1, #2
 8000faa:	f7ff fec0 	bl	8000d2e <stmpe811_SetITType>
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_RISING); 
 8000fae:	2202      	movs	r2, #2
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_FALLING); 
 8000fb0:	9801      	ldr	r0, [sp, #4]
 8000fb2:	4621      	mov	r1, r4
 8000fb4:	f7ff ff99 	bl	8000eea <stmpe811_IO_SetEdgeMode>
    break;
 8000fb8:	e7e7      	b.n	8000f8a <stmpe811_IO_Config+0x26>
    stmpe811_IO_EnableIT(DeviceAddr);
 8000fba:	9001      	str	r0, [sp, #4]
 8000fbc:	f7ff fe66 	bl	8000c8c <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8000fc0:	9801      	ldr	r0, [sp, #4]
 8000fc2:	4621      	mov	r1, r4
 8000fc4:	f7ff ffbf 	bl	8000f46 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8000fc8:	2200      	movs	r2, #0
 8000fca:	9801      	ldr	r0, [sp, #4]
 8000fcc:	4621      	mov	r1, r4
 8000fce:	f7ff fef1 	bl	8000db4 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_EDGE);    
 8000fd2:	9801      	ldr	r0, [sp, #4]
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	f7ff feaa 	bl	8000d2e <stmpe811_SetITType>
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_FALLING); 
 8000fda:	2201      	movs	r2, #1
 8000fdc:	e7e8      	b.n	8000fb0 <stmpe811_IO_Config+0x4c>
    stmpe811_IO_EnableIT(DeviceAddr);
 8000fde:	9001      	str	r0, [sp, #4]
 8000fe0:	f7ff fe54 	bl	8000c8c <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8000fe4:	9801      	ldr	r0, [sp, #4]
 8000fe6:	4621      	mov	r1, r4
 8000fe8:	f7ff ffad 	bl	8000f46 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8000fec:	9801      	ldr	r0, [sp, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	f7ff fedf 	bl	8000db4 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_LEVEL);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	9801      	ldr	r0, [sp, #4]
 8000ffa:	f7ff fe98 	bl	8000d2e <stmpe811_SetITType>
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_LOW);      
 8000ffe:	2100      	movs	r1, #0
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_HIGH);  
 8001000:	9801      	ldr	r0, [sp, #4]
 8001002:	f7ff fe83 	bl	8000d0c <stmpe811_SetITPolarity>
 8001006:	e7c0      	b.n	8000f8a <stmpe811_IO_Config+0x26>
    stmpe811_IO_EnableIT(DeviceAddr);
 8001008:	9001      	str	r0, [sp, #4]
 800100a:	f7ff fe3f 	bl	8000c8c <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 800100e:	9801      	ldr	r0, [sp, #4]
 8001010:	4621      	mov	r1, r4
 8001012:	f7ff ff98 	bl	8000f46 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8001016:	9801      	ldr	r0, [sp, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	4621      	mov	r1, r4
 800101c:	f7ff feca 	bl	8000db4 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_LEVEL);
 8001020:	2100      	movs	r1, #0
 8001022:	9801      	ldr	r0, [sp, #4]
 8001024:	f7ff fe83 	bl	8000d2e <stmpe811_SetITType>
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_HIGH);  
 8001028:	2104      	movs	r1, #4
 800102a:	e7e9      	b.n	8001000 <stmpe811_IO_Config+0x9c>

0800102c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800102c:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800102e:	4c22      	ldr	r4, [pc, #136]	; (80010b8 <SPIx_Init+0x8c>)
{
 8001030:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001032:	4620      	mov	r0, r4
 8001034:	f003 ff83 	bl	8004f3e <HAL_SPI_GetState>
 8001038:	2800      	cmp	r0, #0
 800103a:	d13b      	bne.n	80010b4 <SPIx_Init+0x88>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <SPIx_Init+0x90>)
 800103e:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001040:	2318      	movs	r3, #24
 8001042:	61e3      	str	r3, [r4, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 8001044:	2307      	movs	r3, #7
 8001046:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001048:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800104c:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001050:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001052:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001056:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <SPIx_Init+0x94>)
 800105a:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800105c:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800105e:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001060:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001062:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001064:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 8001066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001068:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800106c:	645a      	str	r2, [r3, #68]	; 0x44
 800106e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001070:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001074:	9201      	str	r2, [sp, #4]
 8001076:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001078:	9002      	str	r0, [sp, #8]
 800107a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800107c:	f042 0220 	orr.w	r2, r2, #32
 8001080:	631a      	str	r2, [r3, #48]	; 0x30
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	f003 0320 	and.w	r3, r3, #32
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	9b02      	ldr	r3, [sp, #8]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800108c:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001090:	2302      	movs	r3, #2
 8001092:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001096:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001098:	2001      	movs	r0, #1
 800109a:	2305      	movs	r3, #5
 800109c:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80010a0:	a903      	add	r1, sp, #12
 80010a2:	4808      	ldr	r0, [pc, #32]	; (80010c4 <SPIx_Init+0x98>)
 80010a4:	f001 ffc2 	bl	800302c <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 80010a8:	4620      	mov	r0, r4
}
 80010aa:	b008      	add	sp, #32
 80010ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_SPI_Init(&SpiHandle);
 80010b0:	f003 bbd0 	b.w	8004854 <HAL_SPI_Init>
}
 80010b4:	b008      	add	sp, #32
 80010b6:	bd10      	pop	{r4, pc}
 80010b8:	200002a4 	.word	0x200002a4
 80010bc:	40015000 	.word	0x40015000
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40021400 	.word	0x40021400

080010c8 <SPIx_Write>:
{
 80010c8:	b507      	push	{r0, r1, r2, lr}
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <SPIx_Write+0x28>)
{
 80010cc:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4808      	ldr	r0, [pc, #32]	; (80010f4 <SPIx_Write+0x2c>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	f10d 0106 	add.w	r1, sp, #6
 80010da:	f003 fc32 	bl	8004942 <HAL_SPI_Transmit>
  if(status != HAL_OK)
 80010de:	b120      	cbz	r0, 80010ea <SPIx_Write+0x22>
  HAL_SPI_DeInit(&SpiHandle);
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <SPIx_Write+0x2c>)
 80010e2:	f003 fc18 	bl	8004916 <HAL_SPI_DeInit>
  SPIx_Init();
 80010e6:	f7ff ffa1 	bl	800102c <SPIx_Init>
}
 80010ea:	b003      	add	sp, #12
 80010ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80010f0:	200000c0 	.word	0x200000c0
 80010f4:	200002a4 	.word	0x200002a4

080010f8 <I2Cx_Init>:
{
 80010f8:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80010fa:	4e35      	ldr	r6, [pc, #212]	; (80011d0 <I2Cx_Init+0xd8>)
{
 80010fc:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80010fe:	f106 0058 	add.w	r0, r6, #88	; 0x58
 8001102:	f002 fd6b 	bl	8003bdc <HAL_I2C_GetState>
 8001106:	4604      	mov	r4, r0
 8001108:	2800      	cmp	r0, #0
 800110a:	d15f      	bne.n	80011cc <I2Cx_Init+0xd4>
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800110c:	4a31      	ldr	r2, [pc, #196]	; (80011d4 <I2Cx_Init+0xdc>)
 800110e:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <I2Cx_Init+0xe0>)
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8001110:	4d32      	ldr	r5, [pc, #200]	; (80011dc <I2Cx_Init+0xe4>)
 8001112:	9000      	str	r0, [sp, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8001114:	e9c6 2316 	strd	r2, r3, [r6, #88]	; 0x58
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001118:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    I2cHandle.Init.OwnAddress1      = 0;
 800111c:	e9c6 0018 	strd	r0, r0, [r6, #96]	; 0x60
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8001120:	e9c6 301a 	strd	r3, r0, [r6, #104]	; 0x68
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8001124:	e9c6 001c 	strd	r0, r0, [r6, #112]	; 0x70
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8001128:	67b0      	str	r0, [r6, #120]	; 0x78
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800112a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	632b      	str	r3, [r5, #48]	; 0x30
 8001132:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	9b00      	ldr	r3, [sp, #0]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800113c:	9001      	str	r0, [sp, #4]
 800113e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	632b      	str	r3, [r5, #48]	; 0x30
 8001146:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001148:	9005      	str	r0, [sp, #20]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8001152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001156:	2312      	movs	r3, #18
 8001158:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800115c:	2002      	movs	r0, #2
 800115e:	2304      	movs	r3, #4
 8001160:	e9cd 0306 	strd	r0, r3, [sp, #24]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001164:	a903      	add	r1, sp, #12
 8001166:	481e      	ldr	r0, [pc, #120]	; (80011e0 <I2Cx_Init+0xe8>)
 8001168:	f001 ff60 	bl	800302c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 800116c:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001170:	a903      	add	r1, sp, #12
 8001172:	481c      	ldr	r0, [pc, #112]	; (80011e4 <I2Cx_Init+0xec>)
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8001174:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001176:	f001 ff59 	bl	800302c <HAL_GPIO_Init>
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800117a:	9402      	str	r4, [sp, #8]
 800117c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800117e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001182:	642b      	str	r3, [r5, #64]	; 0x40
 8001184:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_I2Cx_FORCE_RESET();
 800118e:	6a2b      	ldr	r3, [r5, #32]
 8001190:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001194:	622b      	str	r3, [r5, #32]
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8001196:	6a2b      	ldr	r3, [r5, #32]
 8001198:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800119c:	622b      	str	r3, [r5, #32]
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800119e:	4622      	mov	r2, r4
 80011a0:	210f      	movs	r1, #15
 80011a2:	2048      	movs	r0, #72	; 0x48
 80011a4:	f001 fccc 	bl	8002b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80011a8:	2048      	movs	r0, #72	; 0x48
 80011aa:	f001 fcfb 	bl	8002ba4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80011ae:	4622      	mov	r2, r4
 80011b0:	210f      	movs	r1, #15
 80011b2:	2049      	movs	r0, #73	; 0x49
 80011b4:	f001 fcc4 	bl	8002b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80011b8:	2049      	movs	r0, #73	; 0x49
 80011ba:	f001 fcf3 	bl	8002ba4 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 80011be:	f106 0058 	add.w	r0, r6, #88	; 0x58
}
 80011c2:	b008      	add	sp, #32
 80011c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(&I2cHandle);
 80011c8:	f002 baae 	b.w	8003728 <HAL_I2C_Init>
}
 80011cc:	b008      	add	sp, #32
 80011ce:	bd70      	pop	{r4, r5, r6, pc}
 80011d0:	200002a4 	.word	0x200002a4
 80011d4:	40005c00 	.word	0x40005c00
 80011d8:	000186a0 	.word	0x000186a0
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020800 	.word	0x40020800

080011e8 <I2Cx_Error>:
{
 80011e8:	b508      	push	{r3, lr}
  HAL_I2C_DeInit(&I2cHandle);
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <I2Cx_Error+0x10>)
 80011ec:	f002 fb45 	bl	800387a <HAL_I2C_DeInit>
}
 80011f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  I2Cx_Init();
 80011f4:	f7ff bf80 	b.w	80010f8 <I2Cx_Init>
 80011f8:	200002fc 	.word	0x200002fc

080011fc <SPIx_WriteRead>:
{
 80011fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t receivedbyte = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	f88d 3017 	strb.w	r3, [sp, #23]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <SPIx_WriteRead+0x38>)
{
 8001206:	f88d 000f 	strb.w	r0, [sp, #15]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	480a      	ldr	r0, [pc, #40]	; (8001238 <SPIx_WriteRead+0x3c>)
 8001210:	2301      	movs	r3, #1
 8001212:	f10d 0217 	add.w	r2, sp, #23
 8001216:	f10d 010f 	add.w	r1, sp, #15
 800121a:	f003 fc58 	bl	8004ace <HAL_SPI_TransmitReceive>
 800121e:	b120      	cbz	r0, 800122a <SPIx_WriteRead+0x2e>
  HAL_SPI_DeInit(&SpiHandle);
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <SPIx_WriteRead+0x3c>)
 8001222:	f003 fb78 	bl	8004916 <HAL_SPI_DeInit>
  SPIx_Init();
 8001226:	f7ff ff01 	bl	800102c <SPIx_Init>
}
 800122a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800122e:	b007      	add	sp, #28
 8001230:	f85d fb04 	ldr.w	pc, [sp], #4
 8001234:	200000c0 	.word	0x200000c0
 8001238:	200002a4 	.word	0x200002a4

0800123c <BSP_LED_Init>:
{
 800123c:	b530      	push	{r4, r5, lr}
 800123e:	b089      	sub	sp, #36	; 0x24
  LEDx_GPIO_CLK_ENABLE(Led);
 8001240:	bb08      	cbnz	r0, 8001286 <BSP_LED_Init+0x4a>
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <BSP_LED_Init+0x68>)
 8001244:	9001      	str	r0, [sp, #4]
 8001246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800124c:	631a      	str	r2, [r3, #48]	; 0x30
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001258:	4c13      	ldr	r4, [pc, #76]	; (80012a8 <BSP_LED_Init+0x6c>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <BSP_LED_Init+0x70>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800125c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001260:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001264:	6860      	ldr	r0, [r4, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001266:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126a:	e9cd 3304 	strd	r3, r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800126e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001270:	2302      	movs	r3, #2
 8001272:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001274:	f001 feda 	bl	800302c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001278:	6860      	ldr	r0, [r4, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	4629      	mov	r1, r5
 800127e:	f002 f863 	bl	8003348 <HAL_GPIO_WritePin>
}
 8001282:	b009      	add	sp, #36	; 0x24
 8001284:	bd30      	pop	{r4, r5, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8001286:	2801      	cmp	r0, #1
 8001288:	d1e6      	bne.n	8001258 <BSP_LED_Init+0x1c>
 800128a:	2300      	movs	r3, #0
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <BSP_LED_Init+0x68>)
 8001290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	9b02      	ldr	r3, [sp, #8]
 80012a2:	e7d9      	b.n	8001258 <BSP_LED_Init+0x1c>
 80012a4:	40023800 	.word	0x40023800
 80012a8:	200000c0 	.word	0x200000c0
 80012ac:	080089dc 	.word	0x080089dc

080012b0 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <BSP_LED_On+0x14>)
 80012b2:	4905      	ldr	r1, [pc, #20]	; (80012c8 <BSP_LED_On+0x18>)
 80012b4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80012b8:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 80012bc:	6858      	ldr	r0, [r3, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f002 b842 	b.w	8003348 <HAL_GPIO_WritePin>
 80012c4:	200000c0 	.word	0x200000c0
 80012c8:	080089dc 	.word	0x080089dc

080012cc <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <BSP_LED_Off+0x14>)
 80012ce:	4905      	ldr	r1, [pc, #20]	; (80012e4 <BSP_LED_Off+0x18>)
 80012d0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80012d4:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 80012d8:	6858      	ldr	r0, [r3, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f002 b834 	b.w	8003348 <HAL_GPIO_WritePin>
 80012e0:	200000c0 	.word	0x200000c0
 80012e4:	080089dc 	.word	0x080089dc

080012e8 <BSP_PB_Init>:
{
 80012e8:	b510      	push	{r4, lr}
 80012ea:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80012ec:	b950      	cbnz	r0, 8001304 <BSP_PB_Init+0x1c>
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <BSP_PB_Init+0x6c>)
 80012f0:	9000      	str	r0, [sp, #0]
 80012f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012f4:	f042 0201 	orr.w	r2, r2, #1
 80012f8:	631a      	str	r2, [r3, #48]	; 0x30
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	9b00      	ldr	r3, [sp, #0]
  if (ButtonMode == BUTTON_MODE_GPIO)
 8001304:	b971      	cbnz	r1, 8001324 <BSP_PB_Init+0x3c>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001306:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001308:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800130c:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800130e:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <BSP_PB_Init+0x70>)
 8001314:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001318:	a901      	add	r1, sp, #4
 800131a:	68c0      	ldr	r0, [r0, #12]
 800131c:	f001 fe86 	bl	800302c <HAL_GPIO_Init>
}
 8001320:	b006      	add	sp, #24
 8001322:	bd10      	pop	{r4, pc}
  if (ButtonMode == BUTTON_MODE_EXTI)
 8001324:	2901      	cmp	r1, #1
 8001326:	d1fb      	bne.n	8001320 <BSP_PB_Init+0x38>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8001328:	2400      	movs	r4, #0
 800132a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800132e:	e9cd 3402 	strd	r3, r4, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <BSP_PB_Init+0x70>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001334:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001336:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800133a:	a901      	add	r1, sp, #4
 800133c:	68c0      	ldr	r0, [r0, #12]
 800133e:	f001 fe75 	bl	800302c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001342:	4622      	mov	r2, r4
 8001344:	210f      	movs	r1, #15
 8001346:	2006      	movs	r0, #6
 8001348:	f001 fbfa 	bl	8002b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800134c:	2006      	movs	r0, #6
 800134e:	f001 fc29 	bl	8002ba4 <HAL_NVIC_EnableIRQ>
}
 8001352:	e7e5      	b.n	8001320 <BSP_PB_Init+0x38>
 8001354:	40023800 	.word	0x40023800
 8001358:	200000c0 	.word	0x200000c0

0800135c <BSP_PB_GetState>:
{
 800135c:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <BSP_PB_GetState+0x14>)
 8001360:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001364:	2101      	movs	r1, #1
 8001366:	68c0      	ldr	r0, [r0, #12]
 8001368:	f001 ffe8 	bl	800333c <HAL_GPIO_ReadPin>
}
 800136c:	bd08      	pop	{r3, pc}
 800136e:	bf00      	nop
 8001370:	200000c0 	.word	0x200000c0

08001374 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001376:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <LCD_IO_Init+0xac>)
 8001378:	f893 50ac 	ldrb.w	r5, [r3, #172]	; 0xac
{
 800137c:	b089      	sub	sp, #36	; 0x24
  if(Is_LCD_IO_Initialized == 0)
 800137e:	2d00      	cmp	r5, #0
 8001380:	d14b      	bne.n	800141a <LCD_IO_Init+0xa6>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001382:	4c28      	ldr	r4, [pc, #160]	; (8001424 <LCD_IO_Init+0xb0>)
 8001384:	9500      	str	r5, [sp, #0]
    Is_LCD_IO_Initialized = 1; 
 8001386:	2601      	movs	r6, #1
 8001388:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
    LCD_WRX_GPIO_CLK_ENABLE();
 800138c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800138e:	4826      	ldr	r0, [pc, #152]	; (8001428 <LCD_IO_Init+0xb4>)
    LCD_WRX_GPIO_CLK_ENABLE();
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	6323      	str	r3, [r4, #48]	; 0x30
 8001396:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001398:	9505      	str	r5, [sp, #20]
    LCD_WRX_GPIO_CLK_ENABLE();
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013a0:	2702      	movs	r7, #2
    LCD_WRX_GPIO_CLK_ENABLE();
 80013a2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013a4:	9706      	str	r7, [sp, #24]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80013a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80013aa:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013ac:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80013b0:	f001 fe3c 	bl	800302c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80013b4:	9501      	str	r5, [sp, #4]
 80013b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80013b8:	481b      	ldr	r0, [pc, #108]	; (8001428 <LCD_IO_Init+0xb4>)
    LCD_RDX_GPIO_CLK_ENABLE();
 80013ba:	f043 0308 	orr.w	r3, r3, #8
 80013be:	6323      	str	r3, [r4, #48]	; 0x30
 80013c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80013ca:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80013cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013d0:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013d4:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80013d8:	f001 fe28 	bl	800302c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80013dc:	9502      	str	r5, [sp, #8]
 80013de:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80013e0:	4812      	ldr	r0, [pc, #72]	; (800142c <LCD_IO_Init+0xb8>)
    LCD_NCS_GPIO_CLK_ENABLE();
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6323      	str	r3, [r4, #48]	; 0x30
 80013e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013ea:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80013ee:	2404      	movs	r4, #4
    LCD_NCS_GPIO_CLK_ENABLE();
 80013f0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80013f2:	a903      	add	r1, sp, #12
    LCD_NCS_GPIO_CLK_ENABLE();
 80013f4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013f6:	e9cd 4603 	strd	r4, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013fa:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80013fe:	f001 fe15 	bl	800302c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001402:	480a      	ldr	r0, [pc, #40]	; (800142c <LCD_IO_Init+0xb8>)
 8001404:	462a      	mov	r2, r5
 8001406:	4621      	mov	r1, r4
 8001408:	f001 ff9e 	bl	8003348 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800140c:	4807      	ldr	r0, [pc, #28]	; (800142c <LCD_IO_Init+0xb8>)
 800140e:	4632      	mov	r2, r6
 8001410:	4621      	mov	r1, r4
 8001412:	f001 ff99 	bl	8003348 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001416:	f7ff fe09 	bl	800102c <SPIx_Init>
  }
}
 800141a:	b009      	add	sp, #36	; 0x24
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	bf00      	nop
 8001420:	200002a4 	.word	0x200002a4
 8001424:	40023800 	.word	0x40023800
 8001428:	40020c00 	.word	0x40020c00
 800142c:	40020800 	.word	0x40020800

08001430 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001430:	b538      	push	{r3, r4, r5, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001432:	4d0b      	ldr	r5, [pc, #44]	; (8001460 <LCD_IO_WriteData+0x30>)
{
 8001434:	4604      	mov	r4, r0
  LCD_WRX_HIGH();
 8001436:	2201      	movs	r2, #1
 8001438:	480a      	ldr	r0, [pc, #40]	; (8001464 <LCD_IO_WriteData+0x34>)
 800143a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143e:	f001 ff83 	bl	8003348 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 8001442:	2200      	movs	r2, #0
 8001444:	2104      	movs	r1, #4
 8001446:	4628      	mov	r0, r5
 8001448:	f001 ff7e 	bl	8003348 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff fe3b 	bl	80010c8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001452:	4628      	mov	r0, r5
 8001454:	2201      	movs	r2, #1
}
 8001456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 800145a:	2104      	movs	r1, #4
 800145c:	f001 bf74 	b.w	8003348 <HAL_GPIO_WritePin>
 8001460:	40020800 	.word	0x40020800
 8001464:	40020c00 	.word	0x40020c00

08001468 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001468:	b538      	push	{r3, r4, r5, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800146a:	4d0b      	ldr	r5, [pc, #44]	; (8001498 <LCD_IO_WriteReg+0x30>)
{
 800146c:	4604      	mov	r4, r0
  LCD_WRX_LOW();
 800146e:	2200      	movs	r2, #0
 8001470:	480a      	ldr	r0, [pc, #40]	; (800149c <LCD_IO_WriteReg+0x34>)
 8001472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001476:	f001 ff67 	bl	8003348 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 800147a:	2200      	movs	r2, #0
 800147c:	2104      	movs	r1, #4
 800147e:	4628      	mov	r0, r5
 8001480:	f001 ff62 	bl	8003348 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001484:	4620      	mov	r0, r4
 8001486:	f7ff fe1f 	bl	80010c8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800148a:	4628      	mov	r0, r5
 800148c:	2201      	movs	r2, #1
}
 800148e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 8001492:	2104      	movs	r1, #4
 8001494:	f001 bf58 	b.w	8003348 <HAL_GPIO_WritePin>
 8001498:	40020800 	.word	0x40020800
 800149c:	40020c00 	.word	0x40020c00

080014a0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80014a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80014a2:	4605      	mov	r5, r0
 80014a4:	460c      	mov	r4, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80014a6:	4815      	ldr	r0, [pc, #84]	; (80014fc <LCD_IO_ReadData+0x5c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	2104      	movs	r1, #4
 80014ac:	f001 ff4c 	bl	8003348 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014b6:	4812      	ldr	r0, [pc, #72]	; (8001500 <LCD_IO_ReadData+0x60>)
 80014b8:	f001 ff46 	bl	8003348 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80014bc:	4628      	mov	r0, r5
 80014be:	f7ff fe03 	bl	80010c8 <SPIx_Write>
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <LCD_IO_ReadData+0x64>)
 80014c4:	4810      	ldr	r0, [pc, #64]	; (8001508 <LCD_IO_ReadData+0x68>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4622      	mov	r2, r4
 80014ca:	a901      	add	r1, sp, #4
 80014cc:	f003 fc4a 	bl	8004d64 <HAL_SPI_Receive>
  if(status != HAL_OK)
 80014d0:	b120      	cbz	r0, 80014dc <LCD_IO_ReadData+0x3c>
  HAL_SPI_DeInit(&SpiHandle);
 80014d2:	480d      	ldr	r0, [pc, #52]	; (8001508 <LCD_IO_ReadData+0x68>)
 80014d4:	f003 fa1f 	bl	8004916 <HAL_SPI_DeInit>
  SPIx_Init();
 80014d8:	f7ff fda8 	bl	800102c <SPIx_Init>
  
  readvalue = SPIx_Read(ReadSize);

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80014dc:	4808      	ldr	r0, [pc, #32]	; (8001500 <LCD_IO_ReadData+0x60>)
  return readvalue;
 80014de:	9c01      	ldr	r4, [sp, #4]
  LCD_WRX_HIGH();
 80014e0:	2201      	movs	r2, #1
 80014e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e6:	f001 ff2f 	bl	8003348 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80014ea:	4804      	ldr	r0, [pc, #16]	; (80014fc <LCD_IO_ReadData+0x5c>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	2104      	movs	r1, #4
 80014f0:	f001 ff2a 	bl	8003348 <HAL_GPIO_WritePin>
  
  return readvalue;
}
 80014f4:	4620      	mov	r0, r4
 80014f6:	b003      	add	sp, #12
 80014f8:	bd30      	pop	{r4, r5, pc}
 80014fa:	bf00      	nop
 80014fc:	40020800 	.word	0x40020800
 8001500:	40020c00 	.word	0x40020c00
 8001504:	200000c0 	.word	0x200000c0
 8001508:	200002a4 	.word	0x200002a4

0800150c <LCD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800150c:	f001 baf2 	b.w	8002af4 <HAL_Delay>

08001510 <IOE_Init>:
/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
  I2Cx_Init();
 8001510:	f7ff bdf2 	b.w	80010f8 <I2Cx_Init>

08001514 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8001514:	b510      	push	{r4, lr}
 8001516:	b086      	sub	sp, #24
  STMPE811_INT_CLK_ENABLE();
 8001518:	2400      	movs	r4, #0
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <IOE_ITConfig+0x4c>)
 800151c:	9400      	str	r4, [sp, #0]
 800151e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8001520:	4810      	ldr	r0, [pc, #64]	; (8001564 <IOE_ITConfig+0x50>)
  STMPE811_INT_CLK_ENABLE();
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	631a      	str	r2, [r3, #48]	; 0x30
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8001532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001536:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8001538:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800153a:	e9cd 3403 	strd	r3, r4, [sp, #12]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800153e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8001540:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001544:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8001546:	f001 fd71 	bl	800302c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800154a:	4622      	mov	r2, r4
 800154c:	210f      	movs	r1, #15
 800154e:	2028      	movs	r0, #40	; 0x28
 8001550:	f001 faf6 	bl	8002b40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8001554:	2028      	movs	r0, #40	; 0x28
 8001556:	f001 fb25 	bl	8002ba4 <HAL_NVIC_EnableIRQ>
  I2Cx_ITConfig();
}
 800155a:	b006      	add	sp, #24
 800155c:	bd10      	pop	{r4, pc}
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800
 8001564:	40020000 	.word	0x40020000

08001568 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001568:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <IOE_Write+0x2c>)
 800156c:	f88d 2017 	strb.w	r2, [sp, #23]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	9302      	str	r3, [sp, #8]
 8001574:	f10d 0217 	add.w	r2, sp, #23
 8001578:	2301      	movs	r3, #1
 800157a:	9200      	str	r2, [sp, #0]
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	460a      	mov	r2, r1
 8001580:	4601      	mov	r1, r0
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <IOE_Write+0x30>)
 8001584:	f002 f992 	bl	80038ac <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8001588:	b108      	cbz	r0, 800158e <IOE_Write+0x26>
    I2Cx_Error();
 800158a:	f7ff fe2d 	bl	80011e8 <I2Cx_Error>
  I2Cx_WriteData(Addr, Reg, Value);
}
 800158e:	b007      	add	sp, #28
 8001590:	f85d fb04 	ldr.w	pc, [sp], #4
 8001594:	200000c0 	.word	0x200000c0
 8001598:	200002fc 	.word	0x200002fc

0800159c <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 800159c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <IOE_Read+0x34>)
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	9302      	str	r3, [sp, #8]
{
 80015aa:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80015ac:	2301      	movs	r3, #1
 80015ae:	f10d 0117 	add.w	r1, sp, #23
 80015b2:	9100      	str	r1, [sp, #0]
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	4601      	mov	r1, r0
 80015b8:	4806      	ldr	r0, [pc, #24]	; (80015d4 <IOE_Read+0x38>)
 80015ba:	f002 fa07 	bl	80039cc <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80015be:	b108      	cbz	r0, 80015c4 <IOE_Read+0x28>
    I2Cx_Error();
 80015c0:	f7ff fe12 	bl	80011e8 <I2Cx_Error>
  return I2Cx_ReadData(Addr, Reg);
}
 80015c4:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80015c8:	b007      	add	sp, #28
 80015ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80015ce:	bf00      	nop
 80015d0:	200000c0 	.word	0x200000c0
 80015d4:	200002fc 	.word	0x200002fc

080015d8 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80015d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80015da:	4c09      	ldr	r4, [pc, #36]	; (8001600 <IOE_ReadMultiple+0x28>)
 80015dc:	6924      	ldr	r4, [r4, #16]
 80015de:	9200      	str	r2, [sp, #0]
 80015e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80015e4:	460a      	mov	r2, r1
 80015e6:	2301      	movs	r3, #1
 80015e8:	4601      	mov	r1, r0
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <IOE_ReadMultiple+0x2c>)
 80015ec:	f002 f9ee 	bl	80039cc <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 80015f0:	b110      	cbz	r0, 80015f8 <IOE_ReadMultiple+0x20>
    I2Cx_Error();
 80015f2:	f7ff fdf9 	bl	80011e8 <I2Cx_Error>
    return 1;
 80015f6:	2001      	movs	r0, #1
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
}
 80015f8:	b280      	uxth	r0, r0
 80015fa:	b004      	add	sp, #16
 80015fc:	bd10      	pop	{r4, pc}
 80015fe:	bf00      	nop
 8001600:	200000c0 	.word	0x200000c0
 8001604:	200002fc 	.word	0x200002fc

08001608 <IOE_Delay>:
 8001608:	f001 ba74 	b.w	8002af4 <HAL_Delay>

0800160c <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 800160c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8001610:	4c17      	ldr	r4, [pc, #92]	; (8001670 <GYRO_IO_Init+0x64>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001612:	4818      	ldr	r0, [pc, #96]	; (8001674 <GYRO_IO_Init+0x68>)
  GYRO_CS_GPIO_CLK_ENABLE();  
 8001614:	2500      	movs	r5, #0
 8001616:	9501      	str	r5, [sp, #4]
 8001618:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	6323      	str	r3, [r4, #48]	; 0x30
 8001620:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001622:	f003 0304 	and.w	r3, r3, #4
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2701      	movs	r7, #1
 8001628:	2602      	movs	r6, #2
  GYRO_CS_GPIO_CLK_ENABLE();  
 800162a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800162c:	a903      	add	r1, sp, #12
  GYRO_CS_GPIO_CLK_ENABLE();  
 800162e:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	e9cd 6703 	strd	r6, r7, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001634:	e9cd 5705 	strd	r5, r7, [sp, #20]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001638:	f001 fcf8 	bl	800302c <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 800163c:	463a      	mov	r2, r7
 800163e:	4631      	mov	r1, r6
 8001640:	480c      	ldr	r0, [pc, #48]	; (8001674 <GYRO_IO_Init+0x68>)
 8001642:	f001 fe81 	bl	8003348 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8001646:	9502      	str	r5, [sp, #8]
 8001648:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <GYRO_IO_Init+0x6c>)
  GYRO_INT_GPIO_CLK_ENABLE();
 800164c:	433b      	orrs	r3, r7
 800164e:	6323      	str	r3, [r4, #48]	; 0x30
 8001650:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001652:	403b      	ands	r3, r7
 8001654:	9302      	str	r3, [sp, #8]
 8001656:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001658:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800165a:	2306      	movs	r3, #6
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800165c:	e9cd 3503 	strd	r3, r5, [sp, #12]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8001660:	e9cd 5605 	strd	r5, r6, [sp, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001664:	f001 fce2 	bl	800302c <HAL_GPIO_Init>

  SPIx_Init();
 8001668:	f7ff fce0 	bl	800102c <SPIx_Init>
}
 800166c:	b009      	add	sp, #36	; 0x24
 800166e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001670:	40023800 	.word	0x40023800
 8001674:	40020800 	.word	0x40020800
 8001678:	40020000 	.word	0x40020000

0800167c <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800167c:	2a01      	cmp	r2, #1
{
 800167e:	b570      	push	{r4, r5, r6, lr}
 8001680:	460e      	mov	r6, r1
 8001682:	4605      	mov	r5, r0
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001684:	bf88      	it	hi
 8001686:	f041 0640 	orrhi.w	r6, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800168a:	480c      	ldr	r0, [pc, #48]	; (80016bc <GYRO_IO_Write+0x40>)
{
 800168c:	4614      	mov	r4, r2
  GYRO_CS_LOW();
 800168e:	2102      	movs	r1, #2
 8001690:	2200      	movs	r2, #0
 8001692:	f001 fe59 	bl	8003348 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001696:	4630      	mov	r0, r6
 8001698:	f7ff fdb0 	bl	80011fc <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800169c:	442c      	add	r4, r5
 800169e:	42a5      	cmp	r5, r4
 80016a0:	d106      	bne.n	80016b0 <GYRO_IO_Write+0x34>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}
 80016a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <GYRO_IO_Write+0x40>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	2102      	movs	r1, #2
 80016ac:	f001 be4c 	b.w	8003348 <HAL_GPIO_WritePin>
    SPIx_WriteRead(*pBuffer);
 80016b0:	f815 0b01 	ldrb.w	r0, [r5], #1
 80016b4:	f7ff fda2 	bl	80011fc <SPIx_WriteRead>
    pBuffer++;
 80016b8:	e7f1      	b.n	800169e <GYRO_IO_Write+0x22>
 80016ba:	bf00      	nop
 80016bc:	40020800 	.word	0x40020800

080016c0 <GYRO_IO_Read>:
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 80016c0:	2a01      	cmp	r2, #1
{  
 80016c2:	b570      	push	{r4, r5, r6, lr}
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80016c4:	bf8c      	ite	hi
 80016c6:	f041 04c0 	orrhi.w	r4, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80016ca:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
{  
 80016ce:	4606      	mov	r6, r0
 80016d0:	4615      	mov	r5, r2
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80016d2:	480c      	ldr	r0, [pc, #48]	; (8001704 <GYRO_IO_Read+0x44>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	2102      	movs	r1, #2
 80016d8:	f001 fe36 	bl	8003348 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff fd8d 	bl	80011fc <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80016e2:	4435      	add	r5, r6
 80016e4:	42ae      	cmp	r6, r5
 80016e6:	d106      	bne.n	80016f6 <GYRO_IO_Read+0x36>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}  
 80016e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 80016ec:	4805      	ldr	r0, [pc, #20]	; (8001704 <GYRO_IO_Read+0x44>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	2102      	movs	r1, #2
 80016f2:	f001 be29 	b.w	8003348 <HAL_GPIO_WritePin>
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f7ff fd80 	bl	80011fc <SPIx_WriteRead>
 80016fc:	f806 0b01 	strb.w	r0, [r6], #1
    pBuffer++;
 8001700:	e7f0      	b.n	80016e4 <GYRO_IO_Read+0x24>
 8001702:	bf00      	nop
 8001704:	40020800 	.word	0x40020800

08001708 <BSP_GYRO_Init>:
/**
  * @brief  Set Gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001708:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure={0,0};

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800170a:	4c0d      	ldr	r4, [pc, #52]	; (8001740 <BSP_GYRO_Init+0x38>)
 800170c:	68a3      	ldr	r3, [r4, #8]
 800170e:	4798      	blx	r3
 8001710:	28d4      	cmp	r0, #212	; 0xd4
 8001712:	d10f      	bne.n	8001734 <BSP_GYRO_Init+0x2c>
  {	
    /* Initialize the Gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8001714:	4d0b      	ldr	r5, [pc, #44]	; (8001744 <BSP_GYRO_Init+0x3c>)

    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                         L3GD20_InitStructure.Full_Scale) << 8);
    
    /* Configure the Gyroscope main parameters */	 
    GyroscopeDrv->Init(ctrl);
 8001716:	6823      	ldr	r3, [r4, #0]
    GyroscopeDrv = &L3gd20Drv;
 8001718:	602c      	str	r4, [r5, #0]
    GyroscopeDrv->Init(ctrl);
 800171a:	f241 003f 	movw	r0, #4159	; 0x103f
 800171e:	4798      	blx	r3

    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));

    /* Configure the Gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8001720:	682b      	ldr	r3, [r5, #0]
 8001722:	2000      	movs	r0, #0
 8001724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001726:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8001728:	682b      	ldr	r3, [r5, #0]
 800172a:	2010      	movs	r0, #16
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	4798      	blx	r3

    ret = GYRO_OK;
 8001730:	2000      	movs	r0, #0
  else
  {
    ret = GYRO_ERROR;
  }
  return ret;
}
 8001732:	bd38      	pop	{r3, r4, r5, pc}
  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8001734:	68a3      	ldr	r3, [r4, #8]
 8001736:	4798      	blx	r3
 8001738:	28d5      	cmp	r0, #213	; 0xd5
 800173a:	d0eb      	beq.n	8001714 <BSP_GYRO_Init+0xc>
    ret = GYRO_ERROR;
 800173c:	2001      	movs	r0, #1
 800173e:	e7f8      	b.n	8001732 <BSP_GYRO_Init+0x2a>
 8001740:	20000038 	.word	0x20000038
 8001744:	20000354 	.word	0x20000354

08001748 <BSP_GYRO_Reset>:
/**
  * @brief  Reboot memory content of Gyroscope.
  */
void BSP_GYRO_Reset(void)
{
  if(GyroscopeDrv->Reset != NULL)
 8001748:	4b02      	ldr	r3, [pc, #8]	; (8001754 <BSP_GYRO_Reset+0xc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	b103      	cbz	r3, 8001752 <BSP_GYRO_Reset+0xa>
  {
    GyroscopeDrv->Reset();
 8001750:	4718      	bx	r3
  }
}
 8001752:	4770      	bx	lr
 8001754:	20000354 	.word	0x20000354

08001758 <BSP_GYRO_GetXYZ>:
  * @brief  Gets XYZ angular acceleration/
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 8001758:	4b02      	ldr	r3, [pc, #8]	; (8001764 <BSP_GYRO_GetXYZ+0xc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	b103      	cbz	r3, 8001762 <BSP_GYRO_GetXYZ+0xa>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8001760:	4718      	bx	r3
  }
}
 8001762:	4770      	bx	lr
 8001764:	20000354 	.word	0x20000354

08001768 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800176c:	4c15      	ldr	r4, [pc, #84]	; (80017c4 <FillBuffer+0x5c>)
{
 800176e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8001772:	4616      	mov	r6, r2
 8001774:	461f      	mov	r7, r3
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001776:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800177a:	2300      	movs	r3, #0
 800177c:	e9c4 2301 	strd	r2, r3, [r4, #4]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8001780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001782:	60e3      	str	r3, [r4, #12]
{
 8001784:	4680      	mov	r8, r0
  
  Dma2dHandler.Instance = DMA2D; 
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <FillBuffer+0x60>)
 8001788:	6023      	str	r3, [r4, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800178a:	4620      	mov	r0, r4
{
 800178c:	460d      	mov	r5, r1
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800178e:	f001 fb42 	bl	8002e16 <HAL_DMA2D_Init>
 8001792:	b998      	cbnz	r0, 80017bc <FillBuffer+0x54>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8001794:	4641      	mov	r1, r8
 8001796:	4620      	mov	r0, r4
 8001798:	f001 fc04 	bl	8002fa4 <HAL_DMA2D_ConfigLayer>
 800179c:	b970      	cbnz	r0, 80017bc <FillBuffer+0x54>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800179e:	9700      	str	r7, [sp, #0]
 80017a0:	4633      	mov	r3, r6
 80017a2:	462a      	mov	r2, r5
 80017a4:	4649      	mov	r1, r9
 80017a6:	4620      	mov	r0, r4
 80017a8:	f001 fb61 	bl	8002e6e <HAL_DMA2D_Start>
 80017ac:	b930      	cbnz	r0, 80017bc <FillBuffer+0x54>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80017ae:	210a      	movs	r1, #10
 80017b0:	4620      	mov	r0, r4
      }
    }
  } 
}
 80017b2:	b003      	add	sp, #12
 80017b4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80017b8:	f001 bb73 	b.w	8002ea2 <HAL_DMA2D_PollForTransfer>
}
 80017bc:	b003      	add	sp, #12
 80017be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017c2:	bf00      	nop
 80017c4:	20000358 	.word	0x20000358
 80017c8:	4002b000 	.word	0x4002b000

080017cc <ConvertLineToARGB8888>:
  * @param  pDst: output color
  * @param  xSize: buffer width
  * @param  ColorMode: input color mode   
  */
static void ConvertLineToARGB8888(void * pSrc, void * pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80017cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  /* Configure the DMA2D Mode, Color Mode and output offset */
  Dma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80017d0:	4c16      	ldr	r4, [pc, #88]	; (800182c <ConvertLineToARGB8888+0x60>)
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80017d2:	2500      	movs	r5, #0
{    
 80017d4:	4690      	mov	r8, r2
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80017d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017da:	e9c4 2501 	strd	r2, r5, [r4, #4]
  
  /* Foreground Configuration */
  Dma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  Dma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
  Dma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
  Dma2dHandler.LayerCfg[1].InputOffset = 0;
 80017de:	e9c4 530a 	strd	r5, r3, [r4, #40]	; 0x28
{    
 80017e2:	4606      	mov	r6, r0
  
  Dma2dHandler.Instance = DMA2D; 
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <ConvertLineToARGB8888+0x64>)
  Dma2dHandler.Init.OutputOffset = 0;     
 80017e6:	60e5      	str	r5, [r4, #12]
  Dma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80017e8:	22ff      	movs	r2, #255	; 0xff
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80017ea:	4620      	mov	r0, r4
{    
 80017ec:	460f      	mov	r7, r1
  Dma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80017ee:	6325      	str	r5, [r4, #48]	; 0x30
  Dma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80017f0:	6362      	str	r2, [r4, #52]	; 0x34
  Dma2dHandler.Instance = DMA2D; 
 80017f2:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80017f4:	f001 fb0f 	bl	8002e16 <HAL_DMA2D_Init>
 80017f8:	b9a0      	cbnz	r0, 8001824 <ConvertLineToARGB8888+0x58>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, 1) == HAL_OK) 
 80017fa:	2101      	movs	r1, #1
 80017fc:	4620      	mov	r0, r4
 80017fe:	f001 fbd1 	bl	8002fa4 <HAL_DMA2D_ConfigLayer>
 8001802:	b978      	cbnz	r0, 8001824 <ConvertLineToARGB8888+0x58>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8001804:	2301      	movs	r3, #1
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	463a      	mov	r2, r7
 800180a:	4643      	mov	r3, r8
 800180c:	4631      	mov	r1, r6
 800180e:	4620      	mov	r0, r4
 8001810:	f001 fb2d 	bl	8002e6e <HAL_DMA2D_Start>
 8001814:	b930      	cbnz	r0, 8001824 <ConvertLineToARGB8888+0x58>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001816:	210a      	movs	r1, #10
 8001818:	4620      	mov	r0, r4
      }
    }
  } 
}
 800181a:	b002      	add	sp, #8
 800181c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001820:	f001 bb3f 	b.w	8002ea2 <HAL_DMA2D_PollForTransfer>
}
 8001824:	b002      	add	sp, #8
 8001826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800182a:	bf00      	nop
 800182c:	20000358 	.word	0x20000358
 8001830:	4002b000 	.word	0x4002b000

08001834 <BSP_LCD_GetXSize>:
{
 8001834:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelWidth();
 8001836:	4b02      	ldr	r3, [pc, #8]	; (8001840 <BSP_LCD_GetXSize+0xc>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	4798      	blx	r3
}
 800183e:	bd08      	pop	{r3, pc}
 8001840:	20000358 	.word	0x20000358

08001844 <BSP_LCD_GetYSize>:
{
 8001844:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelHeight();
 8001846:	4b02      	ldr	r3, [pc, #8]	; (8001850 <BSP_LCD_GetYSize+0xc>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	4798      	blx	r3
}
 800184e:	bd08      	pop	{r3, pc}
 8001850:	20000358 	.word	0x20000358

08001854 <BSP_LCD_LayerDefaultInit>:
{     
 8001854:	b570      	push	{r4, r5, r6, lr}
 8001856:	b08e      	sub	sp, #56	; 0x38
  Layercfg.WindowX0 = 0;
 8001858:	2400      	movs	r4, #0
{     
 800185a:	460e      	mov	r6, r1
 800185c:	4605      	mov	r5, r0
  Layercfg.WindowX0 = 0;
 800185e:	9401      	str	r4, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001860:	f7ff ffe8 	bl	8001834 <BSP_LCD_GetXSize>
  Layercfg.WindowY0 = 0;
 8001864:	e9cd 0402 	strd	r0, r4, [sp, #8]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001868:	f7ff ffec 	bl	8001844 <BSP_LCD_GetYSize>
  Layercfg.Alpha = 255;
 800186c:	23ff      	movs	r3, #255	; 0xff
  Layercfg.Alpha0 = 0;
 800186e:	e9cd 3406 	strd	r3, r4, [sp, #24]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001872:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001876:	2307      	movs	r3, #7
 8001878:	e9cd 2308 	strd	r2, r3, [sp, #32]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800187c:	e9cd 0404 	strd	r0, r4, [sp, #16]
  Layercfg.FBStartAdress = FB_Address;
 8001880:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.Backcolor.Blue = 0;
 8001882:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  Layercfg.Backcolor.Red = 0;
 8001886:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800188a:	f7ff ffd3 	bl	8001834 <BSP_LCD_GetXSize>
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800188e:	4c0f      	ldr	r4, [pc, #60]	; (80018cc <BSP_LCD_LayerDefaultInit+0x78>)
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001890:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001892:	f7ff ffd7 	bl	8001844 <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001896:	f104 0644 	add.w	r6, r4, #68	; 0x44
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800189a:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800189c:	462a      	mov	r2, r5
 800189e:	a901      	add	r1, sp, #4
 80018a0:	4630      	mov	r0, r6
 80018a2:	f002 fa91 	bl	8003dc8 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80018a6:	200c      	movs	r0, #12
 80018a8:	fb00 4005 	mla	r0, r0, r5, r4
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018b0:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <BSP_LCD_LayerDefaultInit+0x7c>)
 80018b6:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80018ba:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80018be:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
  HAL_LTDC_EnableDither(&LtdcHandler);
 80018c2:	4630      	mov	r0, r6
 80018c4:	f002 faae 	bl	8003e24 <HAL_LTDC_EnableDither>
}
 80018c8:	b00e      	add	sp, #56	; 0x38
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
 80018cc:	20000358 	.word	0x20000358
 80018d0:	200000d4 	.word	0x200000d4

080018d4 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80018d4:	4b01      	ldr	r3, [pc, #4]	; (80018dc <BSP_LCD_SelectLayer+0x8>)
 80018d6:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
}
 80018da:	4770      	bx	lr
 80018dc:	20000358 	.word	0x20000358

080018e0 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <BSP_LCD_SetTextColor+0x14>)
 80018e2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80018e6:	210c      	movs	r1, #12
 80018e8:	fb01 3302 	mla	r3, r1, r2, r3
 80018ec:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000358 	.word	0x20000358

080018f8 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <BSP_LCD_SetBackColor+0x14>)
 80018fa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80018fe:	210c      	movs	r1, #12
 8001900:	fb01 3302 	mla	r3, r1, r2, r3
 8001904:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000358 	.word	0x20000358

08001910 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = pFonts;
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <BSP_LCD_SetFont+0x14>)
 8001912:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001916:	210c      	movs	r1, #12
 8001918:	fb01 3302 	mla	r3, r1, r2, r3
 800191c:	f8c3 00f4 	str.w	r0, [r3, #244]	; 0xf4
}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000358 	.word	0x20000358

08001928 <BSP_LCD_Clear>:
{ 
 8001928:	b530      	push	{r4, r5, lr}
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <BSP_LCD_Clear+0x38>)
 800192c:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
 8001930:	2234      	movs	r2, #52	; 0x34
 8001932:	fb02 3305 	mla	r3, r2, r5, r3
{ 
 8001936:	b085      	sub	sp, #20
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001938:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800193c:	9103      	str	r1, [sp, #12]
{ 
 800193e:	4604      	mov	r4, r0
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001940:	f7ff ff78 	bl	8001834 <BSP_LCD_GetXSize>
 8001944:	9002      	str	r0, [sp, #8]
 8001946:	f7ff ff7d 	bl	8001844 <BSP_LCD_GetYSize>
 800194a:	4603      	mov	r3, r0
 800194c:	2000      	movs	r0, #0
 800194e:	9000      	str	r0, [sp, #0]
 8001950:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8001954:	9401      	str	r4, [sp, #4]
 8001956:	4628      	mov	r0, r5
 8001958:	f7ff ff06 	bl	8001768 <FillBuffer>
}
 800195c:	b005      	add	sp, #20
 800195e:	bd30      	pop	{r4, r5, pc}
 8001960:	20000358 	.word	0x20000358

08001964 <BSP_LCD_DrawHLine>:
{
 8001964:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001968:	4c11      	ldr	r4, [pc, #68]	; (80019b0 <BSP_LCD_DrawHLine+0x4c>)
{
 800196a:	9203      	str	r2, [sp, #12]
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800196c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
{
 8001970:	460e      	mov	r6, r1
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001972:	2134      	movs	r1, #52	; 0x34
 8001974:	fb01 4303 	mla	r3, r1, r3, r4
{
 8001978:	4605      	mov	r5, r0
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800197a:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 800197e:	f7ff ff59 	bl	8001834 <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001982:	f8d4 7104 	ldr.w	r7, [r4, #260]	; 0x104
 8001986:	9a03      	ldr	r2, [sp, #12]
 8001988:	230c      	movs	r3, #12
 800198a:	fb03 4407 	mla	r4, r3, r7, r4
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800198e:	fb00 5506 	mla	r5, r0, r6, r5
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001992:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	2300      	movs	r3, #0
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	eb08 0185 	add.w	r1, r8, r5, lsl #2
 80019a0:	2301      	movs	r3, #1
 80019a2:	4638      	mov	r0, r7
 80019a4:	f7ff fee0 	bl	8001768 <FillBuffer>
}
 80019a8:	b004      	add	sp, #16
 80019aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019ae:	bf00      	nop
 80019b0:	20000358 	.word	0x20000358

080019b4 <BSP_LCD_DrawVLine>:
{
 80019b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80019b8:	4c14      	ldr	r4, [pc, #80]	; (8001a0c <BSP_LCD_DrawVLine+0x58>)
{
 80019ba:	b085      	sub	sp, #20
 80019bc:	4688      	mov	r8, r1
 80019be:	9203      	str	r2, [sp, #12]
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80019c0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 80019c4:	2134      	movs	r1, #52	; 0x34
 80019c6:	fb01 4202 	mla	r2, r1, r2, r4
{
 80019ca:	4605      	mov	r5, r0
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80019cc:	f8d2 70a0 	ldr.w	r7, [r2, #160]	; 0xa0
 80019d0:	f7ff ff30 	bl	8001834 <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80019d4:	f8d4 6104 	ldr.w	r6, [r4, #260]	; 0x104
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80019d8:	4681      	mov	r9, r0
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80019da:	f7ff ff2b 	bl	8001834 <BSP_LCD_GetXSize>
 80019de:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 80019e2:	9b03      	ldr	r3, [sp, #12]
 80019e4:	210c      	movs	r1, #12
 80019e6:	fb01 4402 	mla	r4, r1, r2, r4
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80019ea:	fb09 5508 	mla	r5, r9, r8, r5
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80019ee:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
 80019f2:	9201      	str	r2, [sp, #4]
 80019f4:	3801      	subs	r0, #1
 80019f6:	9000      	str	r0, [sp, #0]
 80019f8:	2201      	movs	r2, #1
 80019fa:	eb07 0185 	add.w	r1, r7, r5, lsl #2
 80019fe:	4630      	mov	r0, r6
 8001a00:	f7ff feb2 	bl	8001768 <FillBuffer>
}
 8001a04:	b005      	add	sp, #20
 8001a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000358 	.word	0x20000358

08001a10 <BSP_LCD_DrawRect>:
{
 8001a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a12:	461e      	mov	r6, r3
 8001a14:	460d      	mov	r5, r1
 8001a16:	4604      	mov	r4, r0
 8001a18:	4617      	mov	r7, r2
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001a1a:	f7ff ffa3 	bl	8001964 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001a1e:	19a9      	adds	r1, r5, r6
 8001a20:	463a      	mov	r2, r7
 8001a22:	4620      	mov	r0, r4
 8001a24:	b289      	uxth	r1, r1
 8001a26:	f7ff ff9d 	bl	8001964 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001a2a:	4632      	mov	r2, r6
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f7ff ffc0 	bl	80019b4 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001a34:	19e0      	adds	r0, r4, r7
 8001a36:	4632      	mov	r2, r6
 8001a38:	4629      	mov	r1, r5
 8001a3a:	b280      	uxth	r0, r0
}
 8001a3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001a40:	f7ff bfb8 	b.w	80019b4 <BSP_LCD_DrawVLine>

08001a44 <BSP_LCD_DrawBitmap>:
{
 8001a44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 8001a48:	7ad3      	ldrb	r3, [r2, #11]
 8001a4a:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8001a4e:	eb0a 2a03 	add.w	sl, sl, r3, lsl #8
 8001a52:	7b13      	ldrb	r3, [r2, #12]
{
 8001a54:	4614      	mov	r4, r2
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 8001a56:	eb0a 4a03 	add.w	sl, sl, r3, lsl #16
 8001a5a:	7b53      	ldrb	r3, [r2, #13]
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001a5c:	7ca7      	ldrb	r7, [r4, #18]
 8001a5e:	7cd2      	ldrb	r2, [r2, #19]
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8001a60:	7da6      	ldrb	r6, [r4, #22]
  bitpixel = pBmp[28] + (pBmp[29] << 8);   
 8001a62:	7f25      	ldrb	r5, [r4, #28]
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 8001a64:	eb0a 6a03 	add.w	sl, sl, r3, lsl #24
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8001a68:	7de3      	ldrb	r3, [r4, #23]
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001a6a:	eb07 2702 	add.w	r7, r7, r2, lsl #8
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8001a6e:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001a72:	7d22      	ldrb	r2, [r4, #20]
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8001a74:	7e23      	ldrb	r3, [r4, #24]
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001a76:	eb07 4702 	add.w	r7, r7, r2, lsl #16
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8001a7a:	eb06 4603 	add.w	r6, r6, r3, lsl #16
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001a7e:	7d62      	ldrb	r2, [r4, #21]
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8001a80:	7e63      	ldrb	r3, [r4, #25]
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001a82:	eb07 6702 	add.w	r7, r7, r2, lsl #24
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8001a86:	eb06 6603 	add.w	r6, r6, r3, lsl #24
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <BSP_LCD_DrawBitmap+0xc0>)
  bitpixel = pBmp[28] + (pBmp[29] << 8);   
 8001a8c:	7f63      	ldrb	r3, [r4, #29]
 8001a8e:	eb05 2503 	add.w	r5, r5, r3, lsl #8
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001a92:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
{
 8001a96:	468b      	mov	fp, r1
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001a98:	2134      	movs	r1, #52	; 0x34
 8001a9a:	fb01 2303 	mla	r3, r1, r3, r2
{
 8001a9e:	4681      	mov	r9, r0
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001aa0:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 8001aa4:	f7ff fec6 	bl	8001834 <BSP_LCD_GetXSize>
  if ((bitpixel/8) == 4)
 8001aa8:	f1a5 0320 	sub.w	r3, r5, #32
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001aac:	fb0b 9000 	mla	r0, fp, r0, r9
  if ((bitpixel/8) == 4)
 8001ab0:	2b07      	cmp	r3, #7
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001ab2:	eb08 0880 	add.w	r8, r8, r0, lsl #2
  if ((bitpixel/8) == 4)
 8001ab6:	d914      	bls.n	8001ae2 <BSP_LCD_DrawBitmap+0x9e>
  else if ((bitpixel/8) == 2)
 8001ab8:	f1a5 0310 	sub.w	r3, r5, #16
    inputcolormode = CM_RGB888;
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	bf34      	ite	cc
 8001ac0:	f04f 0902 	movcc.w	r9, #2
 8001ac4:	f04f 0901 	movcs.w	r9, #1
  pBmp += (index + (width * (height - 1) * (bitpixel/8)));
 8001ac8:	08ed      	lsrs	r5, r5, #3
 8001aca:	437d      	muls	r5, r7
 8001acc:	1e72      	subs	r2, r6, #1
 8001ace:	fb05 aa02 	mla	sl, r5, r2, sl
 8001ad2:	4454      	add	r4, sl
	  pBmp -= width*(bitpixel/8);
 8001ad4:	426d      	negs	r5, r5
  for(int i=0; i < height; i++)
 8001ad6:	f04f 0a00 	mov.w	sl, #0
 8001ada:	4556      	cmp	r6, sl
 8001adc:	d104      	bne.n	8001ae8 <BSP_LCD_DrawBitmap+0xa4>
}
 8001ade:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inputcolormode = CM_ARGB8888;
 8001ae2:	f04f 0900 	mov.w	r9, #0
 8001ae6:	e7ef      	b.n	8001ac8 <BSP_LCD_DrawBitmap+0x84>
	  ConvertLineToARGB8888((uint32_t *)pBmp, (uint32_t *)address, width, inputcolormode);
 8001ae8:	4641      	mov	r1, r8
 8001aea:	4620      	mov	r0, r4
 8001aec:	464b      	mov	r3, r9
 8001aee:	463a      	mov	r2, r7
 8001af0:	f7ff fe6c 	bl	80017cc <ConvertLineToARGB8888>
	  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 8001af4:	f7ff fe9e 	bl	8001834 <BSP_LCD_GetXSize>
	  pBmp -= width*(bitpixel/8);
 8001af8:	442c      	add	r4, r5
	  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 8001afa:	eb08 0880 	add.w	r8, r8, r0, lsl #2
  for(int i=0; i < height; i++)
 8001afe:	f10a 0a01 	add.w	sl, sl, #1
 8001b02:	e7ea      	b.n	8001ada <BSP_LCD_DrawBitmap+0x96>
 8001b04:	20000358 	.word	0x20000358

08001b08 <PB_BSP_LCD_DrawBitmap>:
{
 8001b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <PB_BSP_LCD_DrawBitmap+0x78>)
  bitpixel = bmImage->bitsperpixel;
 8001b0e:	7a14      	ldrb	r4, [r2, #8]
  uint8_t *pBmp = bmImage->bmdata;
 8001b10:	6817      	ldr	r7, [r2, #0]
  width = bmImage->width;
 8001b12:	f8b2 9004 	ldrh.w	r9, [r2, #4]
  height = bmImage->height;
 8001b16:	f8b2 8006 	ldrh.w	r8, [r2, #6]
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001b1a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
{
 8001b1e:	468a      	mov	sl, r1
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001b20:	2134      	movs	r1, #52	; 0x34
 8001b22:	fb01 3302 	mla	r3, r1, r2, r3
{
 8001b26:	4606      	mov	r6, r0
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001b28:	f8d3 50a0 	ldr.w	r5, [r3, #160]	; 0xa0
 8001b2c:	f7ff fe82 	bl	8001834 <BSP_LCD_GetXSize>
  if ((bitpixel/8) == 4)
 8001b30:	f1a4 0320 	sub.w	r3, r4, #32
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001b34:	fb0a 6000 	mla	r0, sl, r0, r6
  if ((bitpixel/8) == 4)
 8001b38:	2b07      	cmp	r3, #7
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001b3a:	eb05 0580 	add.w	r5, r5, r0, lsl #2
  if ((bitpixel/8) == 4)
 8001b3e:	d90f      	bls.n	8001b60 <PB_BSP_LCD_DrawBitmap+0x58>
  else if ((bitpixel/8) == 2)
 8001b40:	f1a4 0310 	sub.w	r3, r4, #16
    inputcolormode = CM_RGB888;
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	bf34      	ite	cc
 8001b48:	f04f 0a02 	movcc.w	sl, #2
 8001b4c:	f04f 0a01 	movcs.w	sl, #1
	  pBmp += width*(bitpixel/8);
 8001b50:	08e4      	lsrs	r4, r4, #3
 8001b52:	fb09 f404 	mul.w	r4, r9, r4
  for(index=0; index < height; index++)
 8001b56:	2600      	movs	r6, #0
 8001b58:	4546      	cmp	r6, r8
 8001b5a:	d304      	bcc.n	8001b66 <PB_BSP_LCD_DrawBitmap+0x5e>
}
 8001b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    inputcolormode = CM_ARGB8888;
 8001b60:	f04f 0a00 	mov.w	sl, #0
 8001b64:	e7f4      	b.n	8001b50 <PB_BSP_LCD_DrawBitmap+0x48>
	  ConvertLineToARGB8888((uint32_t *)pBmp, (uint32_t *)address, width, inputcolormode);
 8001b66:	4629      	mov	r1, r5
 8001b68:	4638      	mov	r0, r7
 8001b6a:	4653      	mov	r3, sl
 8001b6c:	464a      	mov	r2, r9
 8001b6e:	f7ff fe2d 	bl	80017cc <ConvertLineToARGB8888>
	  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 8001b72:	f7ff fe5f 	bl	8001834 <BSP_LCD_GetXSize>
	  pBmp += width*(bitpixel/8);
 8001b76:	4427      	add	r7, r4
	  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 8001b78:	eb05 0580 	add.w	r5, r5, r0, lsl #2
  for(index=0; index < height; index++)
 8001b7c:	3601      	adds	r6, #1
 8001b7e:	e7eb      	b.n	8001b58 <PB_BSP_LCD_DrawBitmap+0x50>
 8001b80:	20000358 	.word	0x20000358

08001b84 <BSP_LCD_FillRect>:
{
 8001b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001b88:	4c18      	ldr	r4, [pc, #96]	; (8001bec <BSP_LCD_FillRect+0x68>)
 8001b8a:	f8d4 6104 	ldr.w	r6, [r4, #260]	; 0x104
 8001b8e:	f04f 0a0c 	mov.w	sl, #12
{
 8001b92:	4617      	mov	r7, r2
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001b94:	fb0a 4206 	mla	r2, sl, r6, r4
{
 8001b98:	b085      	sub	sp, #20
 8001b9a:	4605      	mov	r5, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001b9c:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
{
 8001ba0:	9303      	str	r3, [sp, #12]
 8001ba2:	4689      	mov	r9, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001ba4:	f7ff fe9c 	bl	80018e0 <BSP_LCD_SetTextColor>
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001ba8:	2234      	movs	r2, #52	; 0x34
 8001baa:	fb02 4606 	mla	r6, r2, r6, r4
 8001bae:	f8d6 80a0 	ldr.w	r8, [r6, #160]	; 0xa0
 8001bb2:	f7ff fe3f 	bl	8001834 <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001bb6:	f8d4 6104 	ldr.w	r6, [r4, #260]	; 0x104
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001bba:	4683      	mov	fp, r0
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001bbc:	f7ff fe3a 	bl	8001834 <BSP_LCD_GetXSize>
 8001bc0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 8001bc4:	9b03      	ldr	r3, [sp, #12]
 8001bc6:	fb0a 4402 	mla	r4, sl, r2, r4
 8001bca:	1bc0      	subs	r0, r0, r7
 8001bcc:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
 8001bd0:	9201      	str	r2, [sp, #4]
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001bd2:	fb0b 5509 	mla	r5, fp, r9, r5
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001bd6:	9000      	str	r0, [sp, #0]
 8001bd8:	463a      	mov	r2, r7
 8001bda:	eb08 0185 	add.w	r1, r8, r5, lsl #2
 8001bde:	4630      	mov	r0, r6
 8001be0:	f7ff fdc2 	bl	8001768 <FillBuffer>
}
 8001be4:	b005      	add	sp, #20
 8001be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bea:	bf00      	nop
 8001bec:	20000358 	.word	0x20000358

08001bf0 <BSP_LCD_ClearStringLine>:
{
 8001bf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t colorbackup = DrawProp[ActiveLayer].TextColor;
 8001bf2:	4c15      	ldr	r4, [pc, #84]	; (8001c48 <BSP_LCD_ClearStringLine+0x58>)
 8001bf4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8001bf8:	250c      	movs	r5, #12
 8001bfa:	fb05 4303 	mla	r3, r5, r3, r4
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001bfe:	e9d3 623b 	ldrd	r6, r2, [r3, #236]	; 0xec
 8001c02:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8001c06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c0a:	88db      	ldrh	r3, [r3, #6]
 8001c0c:	fb13 f000 	smulbb	r0, r3, r0
 8001c10:	b281      	uxth	r1, r0
 8001c12:	9101      	str	r1, [sp, #4]
 8001c14:	f7ff fe0e 	bl	8001834 <BSP_LCD_GetXSize>
 8001c18:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8001c1c:	9901      	ldr	r1, [sp, #4]
 8001c1e:	fb05 4303 	mla	r3, r5, r3, r4
 8001c22:	b282      	uxth	r2, r0
 8001c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c28:	2000      	movs	r0, #0
 8001c2a:	88db      	ldrh	r3, [r3, #6]
 8001c2c:	f7ff ffaa 	bl	8001b84 <BSP_LCD_FillRect>
  DrawProp[ActiveLayer].TextColor = colorbackup;
 8001c30:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8001c34:	fb05 4403 	mla	r4, r5, r3, r4
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 8001c38:	4630      	mov	r0, r6
  DrawProp[ActiveLayer].TextColor = colorbackup;
 8001c3a:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
}
 8001c3e:	b002      	add	sp, #8
 8001c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 8001c44:	f7ff be4c 	b.w	80018e0 <BSP_LCD_SetTextColor>
 8001c48:	20000358 	.word	0x20000358

08001c4c <BSP_LCD_FillEllipse>:
  rad2 = YRadius;
 8001c4c:	ee07 3a90 	vmov	s15, r3
{
 8001c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  rad2 = YRadius;
 8001c54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  rad1 = XRadius;
 8001c58:	ee07 2a90 	vmov	s15, r2
 8001c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8001c60:	ed2d 8b02 	vpush	{d8}
  K = (float)(rad2/rad1);
 8001c64:	ee87 8a27 	vdiv.f32	s16, s14, s15
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 8001c68:	f1c2 0401 	rsb	r4, r2, #1
{
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	4680      	mov	r8, r0
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 8001c70:	425d      	negs	r5, r3
 8001c72:	0064      	lsls	r4, r4, #1
 8001c74:	2600      	movs	r6, #0
    BSP_LCD_DrawHLine((Xpos-(uint16_t)(x/K)), (Ypos+y), (2*(uint16_t)(x/K) + 1));
 8001c76:	b28f      	uxth	r7, r1
 8001c78:	fa17 f185 	uxtah	r1, r7, r5
 8001c7c:	b289      	uxth	r1, r1
 8001c7e:	fa1f f985 	uxth.w	r9, r5
 8001c82:	ee07 6a90 	vmov	s15, r6
 8001c86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8a:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c92:	ee17 3a90 	vmov	r3, s15
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	eba8 0002 	sub.w	r0, r8, r2
 8001c9c:	0052      	lsls	r2, r2, #1
 8001c9e:	3201      	adds	r2, #1
 8001ca0:	b280      	uxth	r0, r0
 8001ca2:	b292      	uxth	r2, r2
 8001ca4:	9201      	str	r2, [sp, #4]
 8001ca6:	9000      	str	r0, [sp, #0]
 8001ca8:	f7ff fe5c 	bl	8001964 <BSP_LCD_DrawHLine>
    BSP_LCD_DrawHLine((Xpos-(uint16_t)(x/K)), (Ypos-y), (2*(uint16_t)(x/K) + 1));
 8001cac:	eba7 0109 	sub.w	r1, r7, r9
 8001cb0:	9a01      	ldr	r2, [sp, #4]
 8001cb2:	9800      	ldr	r0, [sp, #0]
 8001cb4:	b289      	uxth	r1, r1
 8001cb6:	f7ff fe55 	bl	8001964 <BSP_LCD_DrawHLine>
    if (e2 <= x) 
 8001cba:	42a6      	cmp	r6, r4
 8001cbc:	db16      	blt.n	8001cec <BSP_LCD_FillEllipse+0xa0>
      err += ++x*2+1;
 8001cbe:	3601      	adds	r6, #1
 8001cc0:	eb04 0346 	add.w	r3, r4, r6, lsl #1
      if (-y == x && e2 <= y) e2 = 0;
 8001cc4:	42ee      	cmn	r6, r5
      err += ++x*2+1;
 8001cc6:	f103 0301 	add.w	r3, r3, #1
      if (-y == x && e2 <= y) e2 = 0;
 8001cca:	d102      	bne.n	8001cd2 <BSP_LCD_FillEllipse+0x86>
 8001ccc:	42a5      	cmp	r5, r4
 8001cce:	db02      	blt.n	8001cd6 <BSP_LCD_FillEllipse+0x8a>
 8001cd0:	2400      	movs	r4, #0
    if (e2 > y) err += ++y*2+1;
 8001cd2:	42a5      	cmp	r5, r4
 8001cd4:	da0c      	bge.n	8001cf0 <BSP_LCD_FillEllipse+0xa4>
 8001cd6:	3501      	adds	r5, #1
 8001cd8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8001cdc:	1c5c      	adds	r4, r3, #1
  while (y <= 0);
 8001cde:	2d00      	cmp	r5, #0
 8001ce0:	ddca      	ble.n	8001c78 <BSP_LCD_FillEllipse+0x2c>
}
 8001ce2:	b003      	add	sp, #12
 8001ce4:	ecbd 8b02 	vpop	{d8}
 8001ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cec:	4623      	mov	r3, r4
 8001cee:	e7f0      	b.n	8001cd2 <BSP_LCD_FillEllipse+0x86>
 8001cf0:	461c      	mov	r4, r3
 8001cf2:	e7f4      	b.n	8001cde <BSP_LCD_FillEllipse+0x92>

08001cf4 <BSP_LCD_MspInit>:
{
 8001cf4:	b530      	push	{r4, r5, lr}
 8001cf6:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001cf8:	4b49      	ldr	r3, [pc, #292]	; (8001e20 <BSP_LCD_MspInit+0x12c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001cfa:	4d4a      	ldr	r5, [pc, #296]	; (8001e24 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001cfc:	484a      	ldr	r0, [pc, #296]	; (8001e28 <BSP_LCD_MspInit+0x134>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001cfe:	4c4b      	ldr	r4, [pc, #300]	; (8001e2c <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001d00:	2200      	movs	r2, #0
 8001d02:	9201      	str	r2, [sp, #4]
 8001d04:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001d06:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8001d0a:	6459      	str	r1, [r3, #68]	; 0x44
 8001d0c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001d0e:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 8001d12:	9101      	str	r1, [sp, #4]
 8001d14:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8001d16:	9202      	str	r2, [sp, #8]
 8001d18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001d1e:	6319      	str	r1, [r3, #48]	; 0x30
 8001d20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d22:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8001d26:	9102      	str	r1, [sp, #8]
 8001d28:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	9203      	str	r2, [sp, #12]
 8001d2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d2e:	f041 0101 	orr.w	r1, r1, #1
 8001d32:	6319      	str	r1, [r3, #48]	; 0x30
 8001d34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d36:	f001 0101 	and.w	r1, r1, #1
 8001d3a:	9103      	str	r1, [sp, #12]
 8001d3c:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	9204      	str	r2, [sp, #16]
 8001d40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d42:	f041 0102 	orr.w	r1, r1, #2
 8001d46:	6319      	str	r1, [r3, #48]	; 0x30
 8001d48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d4a:	f001 0102 	and.w	r1, r1, #2
 8001d4e:	9104      	str	r1, [sp, #16]
 8001d50:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d52:	9205      	str	r2, [sp, #20]
 8001d54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d56:	f041 0104 	orr.w	r1, r1, #4
 8001d5a:	6319      	str	r1, [r3, #48]	; 0x30
 8001d5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d5e:	f001 0104 	and.w	r1, r1, #4
 8001d62:	9105      	str	r1, [sp, #20]
 8001d64:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d66:	9206      	str	r2, [sp, #24]
 8001d68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d6a:	f041 0108 	orr.w	r1, r1, #8
 8001d6e:	6319      	str	r1, [r3, #48]	; 0x30
 8001d70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d72:	f001 0108 	and.w	r1, r1, #8
 8001d76:	9106      	str	r1, [sp, #24]
 8001d78:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d7a:	9207      	str	r2, [sp, #28]
 8001d7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d7e:	f041 0120 	orr.w	r1, r1, #32
 8001d82:	6319      	str	r1, [r3, #48]	; 0x30
 8001d84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d86:	f001 0120 	and.w	r1, r1, #32
 8001d8a:	9107      	str	r1, [sp, #28]
 8001d8c:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d8e:	9208      	str	r2, [sp, #32]
 8001d90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d92:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001d96:	6319      	str	r1, [r3, #48]	; 0x30
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9e:	9308      	str	r3, [sp, #32]
 8001da0:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001da2:	f641 0158 	movw	r1, #6232	; 0x1858
 8001da6:	2302      	movs	r3, #2
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001da8:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001dac:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001db0:	230e      	movs	r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001db2:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001db4:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001db6:	f001 f939 	bl	800302c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001dba:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001dbe:	a909      	add	r1, sp, #36	; 0x24
 8001dc0:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001dc2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001dc4:	f001 f932 	bl	800302c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001dc8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001dcc:	a909      	add	r1, sp, #36	; 0x24
 8001dce:	4818      	ldr	r0, [pc, #96]	; (8001e30 <BSP_LCD_MspInit+0x13c>)
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001dd0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001dd2:	f001 f92b 	bl	800302c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001dd6:	2348      	movs	r3, #72	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001dd8:	a909      	add	r1, sp, #36	; 0x24
 8001dda:	4816      	ldr	r0, [pc, #88]	; (8001e34 <BSP_LCD_MspInit+0x140>)
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001ddc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001dde:	f001 f925 	bl	800302c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001de6:	a909      	add	r1, sp, #36	; 0x24
 8001de8:	4813      	ldr	r0, [pc, #76]	; (8001e38 <BSP_LCD_MspInit+0x144>)
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001dea:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001dec:	f001 f91e 	bl	800302c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001df0:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001df4:	a909      	add	r1, sp, #36	; 0x24
 8001df6:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001df8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001dfa:	f001 f917 	bl	800302c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001e02:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001e04:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001e06:	4628      	mov	r0, r5
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001e08:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001e0a:	f001 f90f 	bl	800302c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001e0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001e12:	a909      	add	r1, sp, #36	; 0x24
 8001e14:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001e16:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001e18:	f001 f908 	bl	800302c <HAL_GPIO_Init>
}
 8001e1c:	b00f      	add	sp, #60	; 0x3c
 8001e1e:	bd30      	pop	{r4, r5, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40020400 	.word	0x40020400
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40021800 	.word	0x40021800
 8001e30:	40020800 	.word	0x40020800
 8001e34:	40020c00 	.word	0x40020c00
 8001e38:	40021400 	.word	0x40021400

08001e3c <BSP_LCD_Init>:
{ 
 8001e3c:	b538      	push	{r3, r4, r5, lr}
    LtdcHandler.Instance = LTDC;
 8001e3e:	4c21      	ldr	r4, [pc, #132]	; (8001ec4 <BSP_LCD_Init+0x88>)
 8001e40:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <BSP_LCD_Init+0x8c>)
 8001e42:	6463      	str	r3, [r4, #68]	; 0x44
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001e44:	2109      	movs	r1, #9
 8001e46:	2301      	movs	r3, #1
 8001e48:	e9c4 1316 	strd	r1, r3, [r4, #88]	; 0x58
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001e4c:	201d      	movs	r0, #29
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001e54:	f240 150d 	movw	r5, #269	; 0x10d
 8001e58:	f240 1343 	movw	r3, #323	; 0x143
    LtdcHandler.Init.TotalHeigh = 327;
 8001e5c:	f240 1c17 	movw	ip, #279	; 0x117
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001e60:	e9c4 531a 	strd	r5, r3, [r4, #104]	; 0x68
    LtdcHandler.Init.TotalHeigh = 327;
 8001e64:	f240 1347 	movw	r3, #327	; 0x147
 8001e68:	e9c4 c31c 	strd	ip, r3, [r4, #112]	; 0x70
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001e72:	23c0      	movs	r3, #192	; 0xc0
 8001e74:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001e78:	2304      	movs	r3, #4
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001e7a:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001e7c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001e80:	f504 7084 	add.w	r0, r4, #264	; 0x108
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e88:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001e8c:	f8a4 5078 	strh.w	r5, [r4, #120]	; 0x78
    LtdcHandler.Init.Backcolor.Red= 0;
 8001e90:	f884 507a 	strb.w	r5, [r4, #122]	; 0x7a
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001e94:	f002 fab2 	bl	80043fc <HAL_RCCEx_PeriphCLKConfig>
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001e98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001e9c:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
    BSP_LCD_MspInit();
 8001ea0:	f7ff ff28 	bl	8001cf4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001ea4:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8001ea8:	f001 ff22 	bl	8003cf0 <HAL_LTDC_Init>
    LcdDrv = &ili9341_drv;
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <BSP_LCD_Init+0x90>)
 8001eae:	6423      	str	r3, [r4, #64]	; 0x40
    LcdDrv->Init();
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4798      	blx	r3
    BSP_SDRAM_Init();
 8001eb4:	f000 fcf6 	bl	80028a4 <BSP_SDRAM_Init>
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001eb8:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <BSP_LCD_Init+0x94>)
 8001eba:	f7ff fd29 	bl	8001910 <BSP_LCD_SetFont>
}  
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	bd38      	pop	{r3, r4, r5, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000358 	.word	0x20000358
 8001ec8:	40016800 	.word	0x40016800
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	200000d4 	.word	0x200000d4

08001ed4 <BSP_LCD_DrawPixel>:
{
 8001ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <BSP_LCD_DrawPixel+0x28>)
{
 8001ed8:	4615      	mov	r5, r2
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001eda:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
{
 8001ede:	460e      	mov	r6, r1
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001ee0:	2134      	movs	r1, #52	; 0x34
 8001ee2:	fb01 3302 	mla	r3, r1, r2, r3
{
 8001ee6:	4604      	mov	r4, r0
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001ee8:	f8d3 70a0 	ldr.w	r7, [r3, #160]	; 0xa0
 8001eec:	f7ff fca2 	bl	8001834 <BSP_LCD_GetXSize>
 8001ef0:	fb00 4006 	mla	r0, r0, r6, r4
 8001ef4:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 8001ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000358 	.word	0x20000358

08001f00 <BSP_LCD_DisplayChar>:
{
 8001f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001f04:	4f31      	ldr	r7, [pc, #196]	; (8001fcc <BSP_LCD_DisplayChar+0xcc>)
{
 8001f06:	b087      	sub	sp, #28
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
{
 8001f0c:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001f10:	210c      	movs	r1, #12
 8001f12:	fb01 7303 	mla	r3, r1, r3, r7
 8001f16:	3a20      	subs	r2, #32
 8001f18:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001f1c:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 8001f20:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8001f24:	680d      	ldr	r5, [r1, #0]
 8001f26:	f10b 0607 	add.w	r6, fp, #7
 8001f2a:	10f6      	asrs	r6, r6, #3
  offset = 8 *((width + 7)/8) -  width ;
 8001f2c:	ebcb 00c6 	rsb	r0, fp, r6, lsl #3
 8001f30:	b2c3      	uxtb	r3, r0
 8001f32:	9300      	str	r3, [sp, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001f34:	fb0a f202 	mul.w	r2, sl, r2
      if(line & (1 << (width- j + offset- 1))) 
 8001f38:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8001f3c:	fb06 5502 	mla	r5, r6, r2, r5
  for(i = 0; i < height; i++)
 8001f40:	f04f 0900 	mov.w	r9, #0
      if(line & (1 << (width- j + offset- 1))) 
 8001f44:	9304      	str	r3, [sp, #16]
 8001f46:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 8001f48:	45d1      	cmp	r9, sl
 8001f4a:	eb03 0109 	add.w	r1, r3, r9
 8001f4e:	b289      	uxth	r1, r1
 8001f50:	d302      	bcc.n	8001f58 <BSP_LCD_DisplayChar+0x58>
}
 8001f52:	b007      	add	sp, #28
 8001f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8001f58:	2e01      	cmp	r6, #1
      line =  pchar[0];      
 8001f5a:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
 8001f5c:	d004      	beq.n	8001f68 <BSP_LCD_DisplayChar+0x68>
 8001f5e:	2e02      	cmp	r6, #2
 8001f60:	d10e      	bne.n	8001f80 <BSP_LCD_DisplayChar+0x80>
      line =  (pchar[0]<< 8) | pchar[1];
 8001f62:	882c      	ldrh	r4, [r5, #0]
 8001f64:	ba64      	rev16	r4, r4
 8001f66:	b2a4      	uxth	r4, r4
      if(line & (1 << (width- j + offset- 1))) 
 8001f68:	9b04      	ldr	r3, [sp, #16]
 8001f6a:	9a00      	ldr	r2, [sp, #0]
 8001f6c:	4413      	add	r3, r2
    for (j = 0; j < width; j++)
 8001f6e:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 8001f72:	9303      	str	r3, [sp, #12]
    for (j = 0; j < width; j++)
 8001f74:	45c3      	cmp	fp, r8
 8001f76:	d80a      	bhi.n	8001f8e <BSP_LCD_DisplayChar+0x8e>
  for(i = 0; i < height; i++)
 8001f78:	f109 0901 	add.w	r9, r9, #1
 8001f7c:	4435      	add	r5, r6
 8001f7e:	e7e2      	b.n	8001f46 <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001f80:	786a      	ldrb	r2, [r5, #1]
 8001f82:	0424      	lsls	r4, r4, #16
 8001f84:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8001f88:	78aa      	ldrb	r2, [r5, #2]
 8001f8a:	4314      	orrs	r4, r2
      break;
 8001f8c:	e7ec      	b.n	8001f68 <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
 8001f8e:	9b01      	ldr	r3, [sp, #4]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001f90:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001f94:	9105      	str	r1, [sp, #20]
 8001f96:	eb03 0008 	add.w	r0, r3, r8
      if(line & (1 << (width- j + offset- 1))) 
 8001f9a:	9b03      	ldr	r3, [sp, #12]
 8001f9c:	f04f 0c01 	mov.w	ip, #1
 8001fa0:	eba3 0e08 	sub.w	lr, r3, r8
 8001fa4:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001fa8:	ea1c 0f04 	tst.w	ip, r4
 8001fac:	f04f 0c0c 	mov.w	ip, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001fb0:	fb0c 7202 	mla	r2, ip, r2, r7
 8001fb4:	b280      	uxth	r0, r0
 8001fb6:	bf14      	ite	ne
 8001fb8:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	; 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001fbc:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	; 0xf0
 8001fc0:	f7ff ff88 	bl	8001ed4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001fc4:	f108 0801 	add.w	r8, r8, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001fc8:	9905      	ldr	r1, [sp, #20]
    for (j = 0; j < width; j++)
 8001fca:	e7d3      	b.n	8001f74 <BSP_LCD_DisplayChar+0x74>
 8001fcc:	20000358 	.word	0x20000358

08001fd0 <BSP_LCD_DisplayStringAt>:
{
 8001fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fd4:	4699      	mov	r9, r3
 8001fd6:	4680      	mov	r8, r0
 8001fd8:	460e      	mov	r6, r1
 8001fda:	4615      	mov	r5, r2
  uint8_t  *ptr = pText;
 8001fdc:	4613      	mov	r3, r2
 8001fde:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
 8001fe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001fe4:	2a00      	cmp	r2, #0
 8001fe6:	d1fa      	bne.n	8001fde <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001fe8:	4f27      	ldr	r7, [pc, #156]	; (8002088 <BSP_LCD_DisplayStringAt+0xb8>)
 8001fea:	f7ff fc23 	bl	8001834 <BSP_LCD_GetXSize>
 8001fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	fb02 7303 	mla	r3, r2, r3, r7
  switch (mode)
 8001ff8:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001ffc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002000:	889b      	ldrh	r3, [r3, #4]
 8002002:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (mode)
 8002006:	d01d      	beq.n	8002044 <BSP_LCD_DisplayStringAt+0x74>
 8002008:	f1b9 0f02 	cmp.w	r9, #2
 800200c:	d022      	beq.n	8002054 <BSP_LCD_DisplayStringAt+0x84>
 800200e:	3d01      	subs	r5, #1
  uint8_t  *ptr = pText;
 8002010:	f04f 0900 	mov.w	r9, #0
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002014:	f04f 0a0c 	mov.w	sl, #12
 8002018:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800201c:	3c00      	subs	r4, #0
 800201e:	bf18      	it	ne
 8002020:	2401      	movne	r4, #1
 8002022:	f7ff fc07 	bl	8001834 <BSP_LCD_GetXSize>
 8002026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800202a:	fb0a 7303 	mla	r3, sl, r3, r7
 800202e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002032:	889b      	ldrh	r3, [r3, #4]
 8002034:	fb03 0019 	mls	r0, r3, r9, r0
 8002038:	b280      	uxth	r0, r0
 800203a:	4298      	cmp	r0, r3
 800203c:	d300      	bcc.n	8002040 <BSP_LCD_DisplayStringAt+0x70>
 800203e:	b974      	cbnz	r4, 800205e <BSP_LCD_DisplayStringAt+0x8e>
}
 8002040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002044:	1b2c      	subs	r4, r5, r4
 8002046:	4420      	add	r0, r4
 8002048:	4343      	muls	r3, r0
 800204a:	eb08 0053 	add.w	r0, r8, r3, lsr #1
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800204e:	fa1f f880 	uxth.w	r8, r0
      break;
 8002052:	e7dc      	b.n	800200e <BSP_LCD_DisplayStringAt+0x3e>
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002054:	1b2c      	subs	r4, r5, r4
 8002056:	4404      	add	r4, r0
 8002058:	fb14 8003 	smlabb	r0, r4, r3, r8
 800205c:	e7f7      	b.n	800204e <BSP_LCD_DisplayStringAt+0x7e>
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800205e:	4640      	mov	r0, r8
 8002060:	782a      	ldrb	r2, [r5, #0]
 8002062:	4631      	mov	r1, r6
 8002064:	f7ff ff4c 	bl	8001f00 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800206c:	fb0a 7303 	mla	r3, sl, r3, r7
    i++;
 8002070:	f109 0901 	add.w	r9, r9, #1
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002078:	8898      	ldrh	r0, [r3, #4]
 800207a:	4440      	add	r0, r8
 800207c:	fa1f f880 	uxth.w	r8, r0
    i++;
 8002080:	fa1f f989 	uxth.w	r9, r9
 8002084:	e7c8      	b.n	8002018 <BSP_LCD_DisplayStringAt+0x48>
 8002086:	bf00      	nop
 8002088:	20000358 	.word	0x20000358

0800208c <BSP_LCD_DrawLine>:
{
 800208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002090:	1a14      	subs	r4, r2, r0
 8002092:	2c00      	cmp	r4, #0
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002094:	eba3 0601 	sub.w	r6, r3, r1
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002098:	bfb8      	it	lt
 800209a:	4264      	neglt	r4, r4
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 800209c:	2e00      	cmp	r6, #0
 800209e:	bfb8      	it	lt
 80020a0:	4276      	neglt	r6, r6
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 80020a2:	b224      	sxth	r4, r4
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 80020a4:	b236      	sxth	r6, r6
    xinc1 = -1;
 80020a6:	4282      	cmp	r2, r0
 80020a8:	bf2c      	ite	cs
 80020aa:	2701      	movcs	r7, #1
 80020ac:	f04f 37ff 	movcc.w	r7, #4294967295	; 0xffffffff
    yinc1 = -1;
 80020b0:	428b      	cmp	r3, r1
 80020b2:	bf2c      	ite	cs
 80020b4:	f04f 0801 	movcs.w	r8, #1
 80020b8:	f04f 38ff 	movcc.w	r8, #4294967295	; 0xffffffff
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80020bc:	42b4      	cmp	r4, r6
{
 80020be:	b085      	sub	sp, #20
  x = X1;                       /* Start x off at the first pixel */
 80020c0:	fa0f f980 	sxth.w	r9, r0
  y = Y1;                       /* Start y off at the first pixel */
 80020c4:	fa0f fa81 	sxth.w	sl, r1
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80020c8:	db0f      	blt.n	80020ea <BSP_LCD_DrawLine+0x5e>
    num = deltax / 2;
 80020ca:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
 80020ce:	9700      	str	r7, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80020d0:	2700      	movs	r7, #0
    num = deltax / 2;
 80020d2:	106d      	asrs	r5, r5, #1
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80020d4:	9701      	str	r7, [sp, #4]
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <BSP_LCD_DrawLine+0xd0>)
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80020d8:	f04f 0b00 	mov.w	fp, #0
 80020dc:	fa0f f28b 	sxth.w	r2, fp
 80020e0:	4294      	cmp	r4, r2
 80020e2:	da10      	bge.n	8002106 <BSP_LCD_DrawLine+0x7a>
}
 80020e4:	b005      	add	sp, #20
 80020e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 80020ea:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
 80020ee:	4623      	mov	r3, r4
 80020f0:	f8cd 8004 	str.w	r8, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80020f4:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
 80020f8:	4634      	mov	r4, r6
 80020fa:	f345 054f 	sbfx	r5, r5, #1, #16
 80020fe:	461e      	mov	r6, r3
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002100:	f8cd 8000 	str.w	r8, [sp]
 8002104:	e7e7      	b.n	80020d6 <BSP_LCD_DrawLine+0x4a>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002106:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800210a:	f04f 0c0c 	mov.w	ip, #12
 800210e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002112:	fa1f f089 	uxth.w	r0, r9
 8002116:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 800211a:	fa1f f18a 	uxth.w	r1, sl
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 800211e:	4435      	add	r5, r6
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002120:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002124:	f7ff fed6 	bl	8001ed4 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8002128:	b2aa      	uxth	r2, r5
 800212a:	b22d      	sxth	r5, r5
    if (num >= den)                           /* Check if numerator >= denominator */
 800212c:	42ac      	cmp	r4, r5
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <BSP_LCD_DrawLine+0xd0>)
 8002130:	dc09      	bgt.n	8002146 <BSP_LCD_DrawLine+0xba>
      x += xinc1;                             /* Change the x as appropriate */
 8002132:	9802      	ldr	r0, [sp, #8]
      y += yinc1;                             /* Change the y as appropriate */
 8002134:	9903      	ldr	r1, [sp, #12]
      num -= den;                             /* Calculate the new numerator value */
 8002136:	1b15      	subs	r5, r2, r4
      x += xinc1;                             /* Change the x as appropriate */
 8002138:	4438      	add	r0, r7
      y += yinc1;                             /* Change the y as appropriate */
 800213a:	4441      	add	r1, r8
      num -= den;                             /* Calculate the new numerator value */
 800213c:	b22d      	sxth	r5, r5
      x += xinc1;                             /* Change the x as appropriate */
 800213e:	fa0f f980 	sxth.w	r9, r0
      y += yinc1;                             /* Change the y as appropriate */
 8002142:	fa0f fa81 	sxth.w	sl, r1
    x += xinc2;                               /* Change the x as appropriate */
 8002146:	9a00      	ldr	r2, [sp, #0]
 8002148:	4491      	add	r9, r2
    y += yinc2;                               /* Change the y as appropriate */
 800214a:	9a01      	ldr	r2, [sp, #4]
 800214c:	4492      	add	sl, r2
    x += xinc2;                               /* Change the x as appropriate */
 800214e:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                               /* Change the y as appropriate */
 8002152:	fa0f fa8a 	sxth.w	sl, sl
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002156:	f10b 0b01 	add.w	fp, fp, #1
 800215a:	e7bf      	b.n	80020dc <BSP_LCD_DrawLine+0x50>
 800215c:	20000358 	.word	0x20000358

08002160 <BSP_LCD_DrawPolygon>:
  if(PointCount < 2)
 8002160:	2901      	cmp	r1, #1
{
 8002162:	b538      	push	{r3, r4, r5, lr}
 8002164:	460d      	mov	r5, r1
  if(PointCount < 2)
 8002166:	d911      	bls.n	800218c <BSP_LCD_DrawPolygon+0x2c>
  BSP_LCD_DrawLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 8002168:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 800216c:	3a01      	subs	r2, #1
 800216e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8002172:	4604      	mov	r4, r0
 8002174:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 8002178:	8841      	ldrh	r1, [r0, #2]
 800217a:	885b      	ldrh	r3, [r3, #2]
 800217c:	f834 0b04 	ldrh.w	r0, [r4], #4
  while(--PointCount)
 8002180:	3d01      	subs	r5, #1
 8002182:	b2ad      	uxth	r5, r5
    BSP_LCD_DrawLine(x, y, Points->X, Points->Y);
 8002184:	f7ff ff82 	bl	800208c <BSP_LCD_DrawLine>
  while(--PointCount)
 8002188:	3404      	adds	r4, #4
 800218a:	b905      	cbnz	r5, 800218e <BSP_LCD_DrawPolygon+0x2e>
}
 800218c:	bd38      	pop	{r3, r4, r5, pc}
    BSP_LCD_DrawLine(x, y, Points->X, Points->Y);
 800218e:	f834 3c02 	ldrh.w	r3, [r4, #-2]
 8002192:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8002196:	f834 1c06 	ldrh.w	r1, [r4, #-6]
 800219a:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 800219e:	e7ef      	b.n	8002180 <BSP_LCD_DrawPolygon+0x20>

080021a0 <BSP_LCD_FillTriangle>:
{ 
 80021a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a4:	b087      	sub	sp, #28
 80021a6:	4698      	mov	r8, r3
 80021a8:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80021ac:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 80021b0:	1a0c      	subs	r4, r1, r0
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 80021b2:	eba5 0608 	sub.w	r6, r5, r8
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 80021b6:	2c00      	cmp	r4, #0
 80021b8:	bfb8      	it	lt
 80021ba:	4264      	neglt	r4, r4
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 80021bc:	2e00      	cmp	r6, #0
 80021be:	bfb8      	it	lt
 80021c0:	4276      	neglt	r6, r6
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 80021c2:	b224      	sxth	r4, r4
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 80021c4:	b236      	sxth	r6, r6
  y = Y1;                       /* Start y off at the first pixel */
 80021c6:	fa0f fa88 	sxth.w	sl, r8
    xinc1 = -1;
 80021ca:	4281      	cmp	r1, r0
 80021cc:	bf2c      	ite	cs
 80021ce:	2701      	movcs	r7, #1
 80021d0:	f04f 37ff 	movcc.w	r7, #4294967295	; 0xffffffff
    yinc1 = -1;
 80021d4:	4545      	cmp	r5, r8
 80021d6:	bf2c      	ite	cs
 80021d8:	f04f 0801 	movcs.w	r8, #1
 80021dc:	f04f 38ff 	movcc.w	r8, #4294967295	; 0xffffffff
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80021e0:	42b4      	cmp	r4, r6
  x = X1;                       /* Start x off at the first pixel */
 80021e2:	fa0f f980 	sxth.w	r9, r0
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80021e6:	db0e      	blt.n	8002206 <BSP_LCD_FillTriangle+0x66>
    num = deltax / 2;
 80021e8:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
 80021ec:	9700      	str	r7, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80021ee:	2700      	movs	r7, #0
    num = deltax / 2;
 80021f0:	106d      	asrs	r5, r5, #1
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80021f2:	9701      	str	r7, [sp, #4]
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80021f4:	f04f 0b00 	mov.w	fp, #0
 80021f8:	fa0f f18b 	sxth.w	r1, fp
 80021fc:	428c      	cmp	r4, r1
 80021fe:	da10      	bge.n	8002222 <BSP_LCD_FillTriangle+0x82>
}
 8002200:	b007      	add	sp, #28
 8002202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 8002206:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
 800220a:	4621      	mov	r1, r4
 800220c:	f8cd 8004 	str.w	r8, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002210:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
 8002214:	4634      	mov	r4, r6
 8002216:	f345 054f 	sbfx	r5, r5, #1, #16
 800221a:	460e      	mov	r6, r1
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800221c:	f8cd 8000 	str.w	r8, [sp]
 8002220:	e7e8      	b.n	80021f4 <BSP_LCD_FillTriangle+0x54>
    BSP_LCD_DrawLine(x, y, X3, Y3);
 8002222:	fa1f f089 	uxth.w	r0, r9
 8002226:	fa1f f18a 	uxth.w	r1, sl
    num += numadd;              /* Increase the numerator by the top of the fraction */
 800222a:	4435      	add	r5, r6
    BSP_LCD_DrawLine(x, y, X3, Y3);
 800222c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002234:	f7ff ff2a 	bl	800208c <BSP_LCD_DrawLine>
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8002238:	fa1f fc85 	uxth.w	ip, r5
 800223c:	b22d      	sxth	r5, r5
    if (num >= den)             /* Check if numerator >= denominator */
 800223e:	42ac      	cmp	r4, r5
 8002240:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002244:	dc0a      	bgt.n	800225c <BSP_LCD_FillTriangle+0xbc>
      x += xinc1;               /* Change the x as appropriate */
 8002246:	9802      	ldr	r0, [sp, #8]
      y += yinc1;               /* Change the y as appropriate */
 8002248:	9903      	ldr	r1, [sp, #12]
      num -= den;               /* Calculate the new numerator value */
 800224a:	ebac 0504 	sub.w	r5, ip, r4
      x += xinc1;               /* Change the x as appropriate */
 800224e:	4438      	add	r0, r7
      y += yinc1;               /* Change the y as appropriate */
 8002250:	4441      	add	r1, r8
      num -= den;               /* Calculate the new numerator value */
 8002252:	b22d      	sxth	r5, r5
      x += xinc1;               /* Change the x as appropriate */
 8002254:	fa0f f980 	sxth.w	r9, r0
      y += yinc1;               /* Change the y as appropriate */
 8002258:	fa0f fa81 	sxth.w	sl, r1
    x += xinc2;                 /* Change the x as appropriate */
 800225c:	9900      	ldr	r1, [sp, #0]
 800225e:	4489      	add	r9, r1
    y += yinc2;                 /* Change the y as appropriate */
 8002260:	9901      	ldr	r1, [sp, #4]
 8002262:	448a      	add	sl, r1
    x += xinc2;                 /* Change the x as appropriate */
 8002264:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                 /* Change the y as appropriate */
 8002268:	fa0f fa8a 	sxth.w	sl, sl
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800226c:	f10b 0b01 	add.w	fp, fp, #1
 8002270:	e7c2      	b.n	80021f8 <BSP_LCD_FillTriangle+0x58>

08002272 <BSP_LCD_FillPolygon>:
{
 8002272:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  imageleft = imageright = Points->X;
 8002276:	f8b0 8000 	ldrh.w	r8, [r0]
  imagetop= imagebottom = Points->Y;
 800227a:	f8b0 9002 	ldrh.w	r9, [r0, #2]
{
 800227e:	460f      	mov	r7, r1
 8002280:	b087      	sub	sp, #28
  imagetop= imagebottom = Points->Y;
 8002282:	464e      	mov	r6, r9
 8002284:	4649      	mov	r1, r9
  imageleft = imageright = Points->X;
 8002286:	4644      	mov	r4, r8
 8002288:	4645      	mov	r5, r8
  for(counter = 1; counter < PointCount; counter++)
 800228a:	2301      	movs	r3, #1
 800228c:	42bb      	cmp	r3, r7
 800228e:	db2f      	blt.n	80022f0 <BSP_LCD_FillPolygon+0x7e>
  if(PointCount < 2)
 8002290:	2f01      	cmp	r7, #1
 8002292:	d92a      	bls.n	80022ea <BSP_LCD_FillPolygon+0x78>
  xcenter = (imageleft + imageright)/2;
 8002294:	4425      	add	r5, r4
  ycenter = (imagebottom + imagetop)/2;
 8002296:	440e      	add	r6, r1
  int16_t x = 0, y = 0, x2 = 0, y2 = 0, xcenter = 0, ycenter = 0, xfirst = 0, yfirst = 0, pixelx = 0, pixely = 0, counter = 0;
 8002298:	f04f 0b00 	mov.w	fp, #0
 800229c:	1d04      	adds	r4, r0, #4
 800229e:	f8cd b00c 	str.w	fp, [sp, #12]
    BSP_LCD_FillTriangle(x, x2, xcenter, y, y2, ycenter);
 80022a2:	f3c5 054f 	ubfx	r5, r5, #1, #16
 80022a6:	f3c6 064f 	ubfx	r6, r6, #1, #16
  while(--PointCount)
 80022aa:	3f01      	subs	r7, #1
 80022ac:	b2bf      	uxth	r7, r7
 80022ae:	3404      	adds	r4, #4
 80022b0:	bb9f      	cbnz	r7, 800231a <BSP_LCD_FillPolygon+0xa8>
  BSP_LCD_FillTriangle(xfirst, x2, xcenter, yfirst, y2, ycenter);
 80022b2:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 80022b6:	fa1f f48b 	uxth.w	r4, fp
 80022ba:	464b      	mov	r3, r9
 80022bc:	462a      	mov	r2, r5
 80022be:	4639      	mov	r1, r7
 80022c0:	4640      	mov	r0, r8
 80022c2:	e9cd 4600 	strd	r4, r6, [sp]
 80022c6:	f7ff ff6b 	bl	80021a0 <BSP_LCD_FillTriangle>
  BSP_LCD_FillTriangle(xfirst, xcenter, x2, yfirst, ycenter, y2);
 80022ca:	464b      	mov	r3, r9
 80022cc:	463a      	mov	r2, r7
 80022ce:	4629      	mov	r1, r5
 80022d0:	4640      	mov	r0, r8
 80022d2:	e9cd 6400 	strd	r6, r4, [sp]
 80022d6:	f7ff ff63 	bl	80021a0 <BSP_LCD_FillTriangle>
  BSP_LCD_FillTriangle(xcenter, x2, xfirst, ycenter, y2, yfirst);   
 80022da:	e9cd 4900 	strd	r4, r9, [sp]
 80022de:	4633      	mov	r3, r6
 80022e0:	4642      	mov	r2, r8
 80022e2:	4639      	mov	r1, r7
 80022e4:	4628      	mov	r0, r5
 80022e6:	f7ff ff5b 	bl	80021a0 <BSP_LCD_FillTriangle>
}
 80022ea:	b007      	add	sp, #28
 80022ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pixelx = POLY_X(counter);
 80022f0:	f930 2023 	ldrsh.w	r2, [r0, r3, lsl #2]
 80022f4:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
    if(pixelx < imageleft)
 80022f8:	42aa      	cmp	r2, r5
      imageleft = pixelx;
 80022fa:	bfb8      	it	lt
 80022fc:	b295      	uxthlt	r5, r2
    if(pixelx > imageright)
 80022fe:	42a2      	cmp	r2, r4
      imageright = pixelx;
 8002300:	bfc8      	it	gt
 8002302:	b294      	uxthgt	r4, r2
    pixely = POLY_Y(counter);
 8002304:	f9bc 2002 	ldrsh.w	r2, [ip, #2]
    if(pixely < imagetop)
 8002308:	428a      	cmp	r2, r1
      imagetop = pixely;
 800230a:	bfb8      	it	lt
 800230c:	b291      	uxthlt	r1, r2
    if(pixely > imagebottom)
 800230e:	3301      	adds	r3, #1
 8002310:	42b2      	cmp	r2, r6
      imagebottom = pixely;
 8002312:	bfc8      	it	gt
 8002314:	b296      	uxthgt	r6, r2
  for(counter = 1; counter < PointCount; counter++)
 8002316:	b21b      	sxth	r3, r3
 8002318:	e7b8      	b.n	800228c <BSP_LCD_FillPolygon+0x1a>
    BSP_LCD_FillTriangle(x, x2, xcenter, y, y2, ycenter);
 800231a:	f834 ac04 	ldrh.w	sl, [r4, #-4]
 800231e:	f834 2c02 	ldrh.w	r2, [r4, #-2]
    x2 = Points->X;
 8002322:	f934 3c04 	ldrsh.w	r3, [r4, #-4]
    BSP_LCD_FillTriangle(x, x2, xcenter, y, y2, ycenter);
 8002326:	f834 0c08 	ldrh.w	r0, [r4, #-8]
    y2 = Points->Y;    
 800232a:	f934 bc02 	ldrsh.w	fp, [r4, #-2]
    x2 = Points->X;
 800232e:	9303      	str	r3, [sp, #12]
    BSP_LCD_FillTriangle(x, x2, xcenter, y, y2, ycenter);
 8002330:	4651      	mov	r1, sl
 8002332:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 8002336:	9200      	str	r2, [sp, #0]
 8002338:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800233c:	462a      	mov	r2, r5
 800233e:	9305      	str	r3, [sp, #20]
 8002340:	9004      	str	r0, [sp, #16]
 8002342:	f7ff ff2d 	bl	80021a0 <BSP_LCD_FillTriangle>
    BSP_LCD_FillTriangle(x, xcenter, x2, y, ycenter, y2);
 8002346:	9b02      	ldr	r3, [sp, #8]
 8002348:	9804      	ldr	r0, [sp, #16]
 800234a:	e9cd 6300 	strd	r6, r3, [sp]
 800234e:	4652      	mov	r2, sl
 8002350:	9b05      	ldr	r3, [sp, #20]
 8002352:	4629      	mov	r1, r5
 8002354:	f7ff ff24 	bl	80021a0 <BSP_LCD_FillTriangle>
    BSP_LCD_FillTriangle(xcenter, x2, x, ycenter, y2, y);   
 8002358:	9b05      	ldr	r3, [sp, #20]
 800235a:	9804      	ldr	r0, [sp, #16]
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	9b02      	ldr	r3, [sp, #8]
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	4602      	mov	r2, r0
 8002364:	4633      	mov	r3, r6
 8002366:	4651      	mov	r1, sl
 8002368:	4628      	mov	r0, r5
 800236a:	f7ff ff19 	bl	80021a0 <BSP_LCD_FillTriangle>
 800236e:	e79c      	b.n	80022aa <BSP_LCD_FillPolygon+0x38>

08002370 <BSP_LCD_DrawCircle>:
{
 8002370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002374:	b087      	sub	sp, #28
 8002376:	e9cd 0101 	strd	r0, r1, [sp, #4]
  d = 3 - (Radius << 1);
 800237a:	0055      	lsls	r5, r2, #1
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800237c:	4c4c      	ldr	r4, [pc, #304]	; (80024b0 <BSP_LCD_DrawCircle+0x140>)
  d = 3 - (Radius << 1);
 800237e:	f1c5 0503 	rsb	r5, r5, #3
  cury = Radius;
 8002382:	4616      	mov	r6, r2
  curx = 0;
 8002384:	f04f 0800 	mov.w	r8, #0
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002388:	270c      	movs	r7, #12
 800238a:	b2b2      	uxth	r2, r6
 800238c:	9200      	str	r2, [sp, #0]
 800238e:	9900      	ldr	r1, [sp, #0]
 8002390:	9a02      	ldr	r2, [sp, #8]
 8002392:	9b01      	ldr	r3, [sp, #4]
 8002394:	1a51      	subs	r1, r2, r1
 8002396:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 800239a:	fa13 f388 	uxtah	r3, r3, r8
 800239e:	fb07 4202 	mla	r2, r7, r2, r4
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	b289      	uxth	r1, r1
 80023a6:	4618      	mov	r0, r3
 80023a8:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 80023ac:	9104      	str	r1, [sp, #16]
 80023ae:	9305      	str	r3, [sp, #20]
 80023b0:	f7ff fd90 	bl	8001ed4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80023b4:	9b01      	ldr	r3, [sp, #4]
 80023b6:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 80023ba:	9904      	ldr	r1, [sp, #16]
 80023bc:	fa1f f988 	uxth.w	r9, r8
 80023c0:	eba3 0b09 	sub.w	fp, r3, r9
 80023c4:	fb07 4202 	mla	r2, r7, r2, r4
 80023c8:	fa1f fb8b 	uxth.w	fp, fp
 80023cc:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 80023d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80023d4:	4658      	mov	r0, fp
 80023d6:	f7ff fd7d 	bl	8001ed4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80023da:	e9dd 3200 	ldrd	r3, r2, [sp]
 80023de:	eb03 0a02 	add.w	sl, r3, r2
 80023e2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80023e6:	1a99      	subs	r1, r3, r2
 80023e8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 80023ec:	fb07 4202 	mla	r2, r7, r2, r4
 80023f0:	fa1f fa8a 	uxth.w	sl, sl
 80023f4:	b289      	uxth	r1, r1
 80023f6:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 80023fa:	9104      	str	r1, [sp, #16]
 80023fc:	4650      	mov	r0, sl
 80023fe:	f7ff fd69 	bl	8001ed4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002402:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002406:	eba3 0902 	sub.w	r9, r3, r2
 800240a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 800240e:	9904      	ldr	r1, [sp, #16]
 8002410:	fb07 4202 	mla	r2, r7, r2, r4
 8002414:	fa1f f989 	uxth.w	r9, r9
 8002418:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 800241c:	4648      	mov	r0, r9
 800241e:	f7ff fd59 	bl	8001ed4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002422:	9b00      	ldr	r3, [sp, #0]
 8002424:	9a02      	ldr	r2, [sp, #8]
 8002426:	1899      	adds	r1, r3, r2
 8002428:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 800242c:	9b05      	ldr	r3, [sp, #20]
 800242e:	fb07 4202 	mla	r2, r7, r2, r4
 8002432:	b289      	uxth	r1, r1
 8002434:	4618      	mov	r0, r3
 8002436:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 800243a:	9100      	str	r1, [sp, #0]
 800243c:	f7ff fd4a 	bl	8001ed4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002440:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8002444:	9900      	ldr	r1, [sp, #0]
 8002446:	fb07 4303 	mla	r3, r7, r3, r4
 800244a:	4658      	mov	r0, fp
 800244c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8002450:	f7ff fd40 	bl	8001ed4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002458:	1899      	adds	r1, r3, r2
 800245a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800245e:	fb07 4303 	mla	r3, r7, r3, r4
 8002462:	b289      	uxth	r1, r1
 8002464:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8002468:	9100      	str	r1, [sp, #0]
 800246a:	4650      	mov	r0, sl
 800246c:	f7ff fd32 	bl	8001ed4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8002470:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8002474:	9900      	ldr	r1, [sp, #0]
 8002476:	fb07 4303 	mla	r3, r7, r3, r4
 800247a:	4648      	mov	r0, r9
 800247c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8002480:	f7ff fd28 	bl	8001ed4 <BSP_LCD_DrawPixel>
    if (d < 0)
 8002484:	2d00      	cmp	r5, #0
      d += (curx << 2) + 6;
 8002486:	bfb5      	itete	lt
 8002488:	3506      	addlt	r5, #6
      d += ((curx - cury) << 2) + 10;
 800248a:	eba8 0306 	subge.w	r3, r8, r6
      d += (curx << 2) + 6;
 800248e:	eb05 0588 	addlt.w	r5, r5, r8, lsl #2
      d += ((curx - cury) << 2) + 10;
 8002492:	350a      	addge	r5, #10
      cury--;
 8002494:	bfa8      	it	ge
 8002496:	f106 36ff 	addge.w	r6, r6, #4294967295	; 0xffffffff
    curx++;
 800249a:	f108 0801 	add.w	r8, r8, #1
      d += ((curx - cury) << 2) + 10;
 800249e:	bfa8      	it	ge
 80024a0:	eb05 0583 	addge.w	r5, r5, r3, lsl #2
  while (curx <= cury)
 80024a4:	4546      	cmp	r6, r8
 80024a6:	f4bf af70 	bcs.w	800238a <BSP_LCD_DrawCircle+0x1a>
}
 80024aa:	b007      	add	sp, #28
 80024ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024b0:	20000358 	.word	0x20000358

080024b4 <BSP_LCD_FillCircle>:
{
 80024b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80024b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002580 <BSP_LCD_FillCircle+0xcc>
 80024bc:	f8da 3104 	ldr.w	r3, [sl, #260]	; 0x104
  d = 3 - (Radius << 1);
 80024c0:	0054      	lsls	r4, r2, #1
{
 80024c2:	4691      	mov	r9, r2
  cury = Radius;
 80024c4:	4617      	mov	r7, r2
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80024c6:	220c      	movs	r2, #12
 80024c8:	fb02 a303 	mla	r3, r2, r3, sl
{
 80024cc:	4680      	mov	r8, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80024ce:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
{
 80024d2:	460e      	mov	r6, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80024d4:	f7ff fa04 	bl	80018e0 <BSP_LCD_SetTextColor>
  d = 3 - (Radius << 1);
 80024d8:	f1c4 0403 	rsb	r4, r4, #3
  curx = 0;
 80024dc:	2500      	movs	r5, #0
    if(cury > 0) 
 80024de:	b1af      	cbz	r7, 800250c <BSP_LCD_FillCircle+0x58>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 80024e0:	b2ba      	uxth	r2, r7
 80024e2:	eba8 0002 	sub.w	r0, r8, r2
 80024e6:	fa16 f185 	uxtah	r1, r6, r5
 80024ea:	0052      	lsls	r2, r2, #1
 80024ec:	b280      	uxth	r0, r0
 80024ee:	b292      	uxth	r2, r2
 80024f0:	b289      	uxth	r1, r1
 80024f2:	fa1f fb85 	uxth.w	fp, r5
 80024f6:	9201      	str	r2, [sp, #4]
 80024f8:	9000      	str	r0, [sp, #0]
 80024fa:	f7ff fa33 	bl	8001964 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 80024fe:	eba6 010b 	sub.w	r1, r6, fp
 8002502:	9a01      	ldr	r2, [sp, #4]
 8002504:	9800      	ldr	r0, [sp, #0]
 8002506:	b289      	uxth	r1, r1
 8002508:	f7ff fa2c 	bl	8001964 <BSP_LCD_DrawHLine>
    if(curx > 0) 
 800250c:	b1ad      	cbz	r5, 800253a <BSP_LCD_FillCircle+0x86>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800250e:	b2aa      	uxth	r2, r5
 8002510:	fa1f fb87 	uxth.w	fp, r7
 8002514:	eba8 0002 	sub.w	r0, r8, r2
 8002518:	eba6 010b 	sub.w	r1, r6, fp
 800251c:	0052      	lsls	r2, r2, #1
 800251e:	b280      	uxth	r0, r0
 8002520:	b292      	uxth	r2, r2
 8002522:	b289      	uxth	r1, r1
 8002524:	9201      	str	r2, [sp, #4]
 8002526:	9000      	str	r0, [sp, #0]
 8002528:	f7ff fa1c 	bl	8001964 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 800252c:	eb0b 0106 	add.w	r1, fp, r6
 8002530:	9a01      	ldr	r2, [sp, #4]
 8002532:	9800      	ldr	r0, [sp, #0]
 8002534:	b289      	uxth	r1, r1
 8002536:	f7ff fa15 	bl	8001964 <BSP_LCD_DrawHLine>
    if (d < 0)
 800253a:	2c00      	cmp	r4, #0
      d += (curx << 2) + 6;
 800253c:	bfb5      	itete	lt
 800253e:	3406      	addlt	r4, #6
      d += ((curx - cury) << 2) + 10;
 8002540:	1beb      	subge	r3, r5, r7
      d += (curx << 2) + 6;
 8002542:	eb04 0485 	addlt.w	r4, r4, r5, lsl #2
      d += ((curx - cury) << 2) + 10;
 8002546:	340a      	addge	r4, #10
      cury--;
 8002548:	bfa8      	it	ge
 800254a:	f107 37ff 	addge.w	r7, r7, #4294967295	; 0xffffffff
    curx++;
 800254e:	f105 0501 	add.w	r5, r5, #1
      d += ((curx - cury) << 2) + 10;
 8002552:	bfa8      	it	ge
 8002554:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (curx <= cury)
 8002558:	42af      	cmp	r7, r5
 800255a:	d2c0      	bcs.n	80024de <BSP_LCD_FillCircle+0x2a>
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800255c:	f8da 3104 	ldr.w	r3, [sl, #260]	; 0x104
 8002560:	220c      	movs	r2, #12
 8002562:	fb02 aa03 	mla	sl, r2, r3, sl
 8002566:	f8da 00ec 	ldr.w	r0, [sl, #236]	; 0xec
 800256a:	f7ff f9b9 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800256e:	464a      	mov	r2, r9
 8002570:	4631      	mov	r1, r6
 8002572:	4640      	mov	r0, r8
}
 8002574:	b003      	add	sp, #12
 8002576:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800257a:	f7ff bef9 	b.w	8002370 <BSP_LCD_DrawCircle>
 800257e:	bf00      	nop
 8002580:	20000358 	.word	0x20000358

08002584 <BSP_LCD_DrawEllipse>:
  rad2 = YRadius;
 8002584:	ee07 3a90 	vmov	s15, r3
{
 8002588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  rad2 = YRadius;
 800258c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  rad1 = XRadius;
 8002590:	ee07 2a90 	vmov	s15, r2
 8002594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8002598:	ed2d 8b02 	vpush	{d8}
  k = (float)(rad2/rad1);
 800259c:	ee87 8a27 	vdiv.f32	s16, s14, s15
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 80025a0:	f1c2 0501 	rsb	r5, r2, #1
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 80025a4:	4f36      	ldr	r7, [pc, #216]	; (8002680 <BSP_LCD_DrawEllipse+0xfc>)
{
 80025a6:	b085      	sub	sp, #20
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 80025a8:	425e      	negs	r6, r3
 80025aa:	006d      	lsls	r5, r5, #1
 80025ac:	f04f 0800 	mov.w	r8, #0
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 80025b0:	fa1f f980 	uxth.w	r9, r0
 80025b4:	fa1f fa81 	uxth.w	sl, r1
 80025b8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80025bc:	f04f 0b0c 	mov.w	fp, #12
 80025c0:	fb0b 7202 	mla	r2, fp, r2, r7
 80025c4:	ee07 8a90 	vmov	s15, r8
 80025c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025cc:	fa1a f186 	uxtah	r1, sl, r6
 80025d0:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80025d4:	b289      	uxth	r1, r1
 80025d6:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 80025da:	9101      	str	r1, [sp, #4]
 80025dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025e0:	ee17 3a90 	vmov	r3, s15
 80025e4:	b29c      	uxth	r4, r3
 80025e6:	eba9 0304 	sub.w	r3, r9, r4
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	9303      	str	r3, [sp, #12]
 80025f0:	f7ff fc70 	bl	8001ed4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 80025f4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80025f8:	9901      	ldr	r1, [sp, #4]
 80025fa:	fb0b 7202 	mla	r2, fp, r2, r7
 80025fe:	eb09 0004 	add.w	r0, r9, r4
 8002602:	b280      	uxth	r0, r0
 8002604:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8002608:	9002      	str	r0, [sp, #8]
 800260a:	f7ff fc63 	bl	8001ed4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);
 800260e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002612:	9802      	ldr	r0, [sp, #8]
 8002614:	b2b1      	uxth	r1, r6
 8002616:	fb0b 7202 	mla	r2, fp, r2, r7
 800261a:	ebaa 0101 	sub.w	r1, sl, r1
 800261e:	b289      	uxth	r1, r1
 8002620:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	f7ff fc55 	bl	8001ed4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);      
 800262a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800262e:	9b03      	ldr	r3, [sp, #12]
 8002630:	9901      	ldr	r1, [sp, #4]
 8002632:	fb0b 7202 	mla	r2, fp, r2, r7
 8002636:	4618      	mov	r0, r3
 8002638:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 800263c:	f7ff fc4a 	bl	8001ed4 <BSP_LCD_DrawPixel>
    if (e2 <= x) {
 8002640:	45a8      	cmp	r8, r5
 8002642:	db18      	blt.n	8002676 <BSP_LCD_DrawEllipse+0xf2>
      err += ++x*2+1;
 8002644:	f108 0801 	add.w	r8, r8, #1
 8002648:	eb05 0348 	add.w	r3, r5, r8, lsl #1
      if (-y == x && e2 <= y) e2 = 0;
 800264c:	eb18 0f06 	cmn.w	r8, r6
      err += ++x*2+1;
 8002650:	f103 0301 	add.w	r3, r3, #1
      if (-y == x && e2 <= y) e2 = 0;
 8002654:	d102      	bne.n	800265c <BSP_LCD_DrawEllipse+0xd8>
 8002656:	42ae      	cmp	r6, r5
 8002658:	db02      	blt.n	8002660 <BSP_LCD_DrawEllipse+0xdc>
 800265a:	2500      	movs	r5, #0
    if (e2 > y) err += ++y*2+1;
 800265c:	42ae      	cmp	r6, r5
 800265e:	da0c      	bge.n	800267a <BSP_LCD_DrawEllipse+0xf6>
 8002660:	3601      	adds	r6, #1
 8002662:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8002666:	1c5d      	adds	r5, r3, #1
  while (y <= 0);
 8002668:	2e00      	cmp	r6, #0
 800266a:	dda5      	ble.n	80025b8 <BSP_LCD_DrawEllipse+0x34>
}
 800266c:	b005      	add	sp, #20
 800266e:	ecbd 8b02 	vpop	{d8}
 8002672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002676:	462b      	mov	r3, r5
 8002678:	e7f0      	b.n	800265c <BSP_LCD_DrawEllipse+0xd8>
 800267a:	461d      	mov	r5, r3
 800267c:	e7f4      	b.n	8002668 <BSP_LCD_DrawEllipse+0xe4>
 800267e:	bf00      	nop
 8002680:	20000358 	.word	0x20000358

08002684 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002684:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t tmpmrd =0;
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002688:	4c21      	ldr	r4, [pc, #132]	; (8002710 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800268a:	f104 0510 	add.w	r5, r4, #16
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800268e:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd =0;
 8002690:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002694:	2708      	movs	r7, #8
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002696:	4621      	mov	r1, r4
{
 8002698:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800269a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800269e:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80026a0:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 80026a4:	e9c4 6802 	strd	r6, r8, [r4, #8]
  __IO uint32_t tmpmrd =0;
 80026a8:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80026ac:	f001 fff1 	bl	8004692 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80026b0:	4630      	mov	r0, r6
 80026b2:	f000 fa1f 	bl	8002af4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80026b6:	2302      	movs	r3, #2
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80026b8:	4621      	mov	r1, r4
 80026ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026be:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80026c0:	e9c4 3700 	strd	r3, r7, [r4]
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 4;
 80026c4:	f04f 0a04 	mov.w	sl, #4
  Command.ModeRegisterDefinition  = 0;
 80026c8:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80026cc:	f001 ffe1 	bl	8004692 <HAL_SDRAM_SendCommand>
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80026d0:	2303      	movs	r3, #3
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80026d2:	4621      	mov	r1, r4
 80026d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026d8:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80026da:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 80026de:	e9c4 a802 	strd	sl, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80026e2:	f001 ffd6 	bl	8004692 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80026e6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80026ea:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = tmpmrd;
 80026ec:	9b01      	ldr	r3, [sp, #4]
  Command.AutoRefreshNumber       = 1;
 80026ee:	60a6      	str	r6, [r4, #8]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80026f0:	4621      	mov	r1, r4
 80026f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f6:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80026f8:	e9c4 a700 	strd	sl, r7, [r4]
  Command.ModeRegisterDefinition  = tmpmrd;
 80026fc:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80026fe:	f001 ffc8 	bl	8004692 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002702:	4649      	mov	r1, r9
 8002704:	4628      	mov	r0, r5
}
 8002706:	b002      	add	sp, #8
 8002708:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800270c:	f001 bfd8 	b.w	80046c0 <HAL_SDRAM_ProgramRefreshRate>
 8002710:	20000490 	.word	0x20000490

08002714 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002714:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002716:	4606      	mov	r6, r0
{
 8002718:	b08e      	sub	sp, #56	; 0x38
  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800271a:	2800      	cmp	r0, #0
 800271c:	f000 80ad 	beq.w	800287a <BSP_SDRAM_MspInit+0x166>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002720:	4b57      	ldr	r3, [pc, #348]	; (8002880 <BSP_SDRAM_MspInit+0x16c>)
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002722:	4858      	ldr	r0, [pc, #352]	; (8002884 <BSP_SDRAM_MspInit+0x170>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002724:	2400      	movs	r4, #0
 8002726:	9401      	str	r4, [sp, #4]
 8002728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	639a      	str	r2, [r3, #56]	; 0x38
 8002730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002732:	f002 0201 	and.w	r2, r2, #1
 8002736:	9201      	str	r2, [sp, #4]
 8002738:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 800273a:	9402      	str	r4, [sp, #8]
 800273c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800273e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
 8002744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002746:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800274a:	9202      	str	r2, [sp, #8]
 800274c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800274e:	9403      	str	r4, [sp, #12]
 8002750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002752:	f042 0202 	orr.w	r2, r2, #2
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
 8002758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275a:	f002 0202 	and.w	r2, r2, #2
 800275e:	9203      	str	r2, [sp, #12]
 8002760:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002762:	9404      	str	r4, [sp, #16]
 8002764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002766:	f042 0204 	orr.w	r2, r2, #4
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
 800276c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800276e:	f002 0204 	and.w	r2, r2, #4
 8002772:	9204      	str	r2, [sp, #16]
 8002774:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002776:	9405      	str	r4, [sp, #20]
 8002778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800277a:	f042 0208 	orr.w	r2, r2, #8
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
 8002780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002782:	f002 0208 	and.w	r2, r2, #8
 8002786:	9205      	str	r2, [sp, #20]
 8002788:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800278a:	9406      	str	r4, [sp, #24]
 800278c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800278e:	f042 0210 	orr.w	r2, r2, #16
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
 8002794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002796:	f002 0210 	and.w	r2, r2, #16
 800279a:	9206      	str	r2, [sp, #24]
 800279c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800279e:	9407      	str	r4, [sp, #28]
 80027a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027a2:	f042 0220 	orr.w	r2, r2, #32
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
 80027a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027aa:	f002 0220 	and.w	r2, r2, #32
 80027ae:	9207      	str	r2, [sp, #28]
 80027b0:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027b2:	9408      	str	r4, [sp, #32]
 80027b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c2:	9308      	str	r3, [sp, #32]
 80027c4:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80027c8:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80027cc:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80027ce:	230c      	movs	r3, #12
 80027d0:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80027d2:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80027d4:	2360      	movs	r3, #96	; 0x60
 80027d6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80027d8:	f000 fc28 	bl	800302c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80027dc:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80027de:	482a      	ldr	r0, [pc, #168]	; (8002888 <BSP_SDRAM_MspInit+0x174>)
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80027e0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80027e2:	a909      	add	r1, sp, #36	; 0x24
 80027e4:	f000 fc22 	bl	800302c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80027e8:	f24c 7303 	movw	r3, #50947	; 0xc703
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80027ec:	4827      	ldr	r0, [pc, #156]	; (800288c <BSP_SDRAM_MspInit+0x178>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80027ee:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80027f0:	a909      	add	r1, sp, #36	; 0x24
 80027f2:	f000 fc1b 	bl	800302c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80027f6:	f64f 7383 	movw	r3, #65411	; 0xff83
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80027fa:	4825      	ldr	r0, [pc, #148]	; (8002890 <BSP_SDRAM_MspInit+0x17c>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80027fc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80027fe:	a909      	add	r1, sp, #36	; 0x24
 8002800:	f000 fc14 	bl	800302c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002804:	f64f 033f 	movw	r3, #63551	; 0xf83f
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002808:	4822      	ldr	r0, [pc, #136]	; (8002894 <BSP_SDRAM_MspInit+0x180>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800280a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800280c:	a909      	add	r1, sp, #36	; 0x24
 800280e:	f000 fc0d 	bl	800302c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002812:	f248 1333 	movw	r3, #33075	; 0x8133
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002816:	4820      	ldr	r0, [pc, #128]	; (8002898 <BSP_SDRAM_MspInit+0x184>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002818:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800281a:	a909      	add	r1, sp, #36	; 0x24
 800281c:	f000 fc06 	bl	800302c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002820:	4b1e      	ldr	r3, [pc, #120]	; (800289c <BSP_SDRAM_MspInit+0x188>)
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002828:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800282c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002830:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002834:	e9c3 0215 	strd	r0, r2, [r3, #84]	; 0x54
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002838:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800283c:	e9c3 2417 	strd	r2, r4, [r3, #92]	; 0x5c
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002840:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002844:	461d      	mov	r5, r3
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002846:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800284a:	2203      	movs	r2, #3
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800284c:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002850:	4a13      	ldr	r2, [pc, #76]	; (80028a0 <BSP_SDRAM_MspInit+0x18c>)
 8002852:	f845 2f44 	str.w	r2, [r5, #68]!
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002856:	675c      	str	r4, [r3, #116]	; 0x74
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002858:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800285a:	6335      	str	r5, [r6, #48]	; 0x30
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800285c:	649c      	str	r4, [r3, #72]	; 0x48
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800285e:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dmaHandle);
 8002860:	f000 fa6c 	bl	8002d3c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002864:	4628      	mov	r0, r5
 8002866:	f000 f9e9 	bl	8002c3c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800286a:	2038      	movs	r0, #56	; 0x38
 800286c:	4622      	mov	r2, r4
 800286e:	210f      	movs	r1, #15
 8002870:	f000 f966 	bl	8002b40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002874:	2038      	movs	r0, #56	; 0x38
 8002876:	f000 f995 	bl	8002ba4 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800287a:	b00e      	add	sp, #56	; 0x38
 800287c:	bd70      	pop	{r4, r5, r6, pc}
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	40020400 	.word	0x40020400
 8002888:	40020800 	.word	0x40020800
 800288c:	40020c00 	.word	0x40020c00
 8002890:	40021000 	.word	0x40021000
 8002894:	40021400 	.word	0x40021400
 8002898:	40021800 	.word	0x40021800
 800289c:	20000490 	.word	0x20000490
 80028a0:	40026410 	.word	0x40026410

080028a4 <BSP_SDRAM_Init>:
{
 80028a4:	b510      	push	{r4, lr}
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80028a6:	4c1b      	ldr	r4, [pc, #108]	; (8002914 <BSP_SDRAM_Init+0x70>)
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <BSP_SDRAM_Init+0x74>)
 80028aa:	6123      	str	r3, [r4, #16]
  Timing.SelfRefreshTime      = 4;
 80028ac:	2204      	movs	r2, #4
  Timing.ExitSelfRefreshDelay = 7;
 80028ae:	2302      	movs	r3, #2
 80028b0:	2107      	movs	r1, #7
  Timing.RowCycleDelay        = 7;
 80028b2:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  Timing.ExitSelfRefreshDelay = 7;
 80028b6:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
 80028ba:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80028be:	2100      	movs	r1, #0
  Timing.RCDDelay             = 2;
 80028c0:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e9c4 3105 	strd	r3, r1, [r4, #20]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80028ca:	2010      	movs	r0, #16
 80028cc:	2340      	movs	r3, #64	; 0x40
 80028ce:	e9c4 0308 	strd	r0, r3, [r4, #32]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80028d2:	f44f 73c0 	mov.w	r3, #384	; 0x180
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80028d6:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80028da:	f44f 6300 	mov.w	r3, #2048	; 0x800
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80028de:	e9c4 310c 	strd	r3, r1, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80028e2:	f104 0010 	add.w	r0, r4, #16
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80028e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80028ea:	61e2      	str	r2, [r4, #28]
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80028ec:	63a3      	str	r3, [r4, #56]	; 0x38
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80028ee:	f7ff ff11 	bl	8002714 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80028f2:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 80028f6:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
 80028fa:	f001 feaa 	bl	8004652 <HAL_SDRAM_Init>
 80028fe:	4c07      	ldr	r4, [pc, #28]	; (800291c <BSP_SDRAM_Init+0x78>)
 8002900:	3800      	subs	r0, #0
 8002902:	bf18      	it	ne
 8002904:	2001      	movne	r0, #1
 8002906:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002908:	f240 506a 	movw	r0, #1386	; 0x56a
 800290c:	f7ff feba 	bl	8002684 <BSP_SDRAM_Initialization_sequence>
}
 8002910:	7820      	ldrb	r0, [r4, #0]
 8002912:	bd10      	pop	{r4, pc}
 8002914:	20000490 	.word	0x20000490
 8002918:	a0000140 	.word	0xa0000140
 800291c:	200000fc 	.word	0x200000fc

08002920 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8002920:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = TS_ERROR;

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8002922:	4c0b      	ldr	r4, [pc, #44]	; (8002950 <BSP_TS_Init+0x30>)
  TsYBoundary = YSize;

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002924:	4d0b      	ldr	r5, [pc, #44]	; (8002954 <BSP_TS_Init+0x34>)
  TsXBoundary = XSize;
 8002926:	8020      	strh	r0, [r4, #0]
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002928:	686b      	ldr	r3, [r5, #4]
  TsYBoundary = YSize;
 800292a:	8061      	strh	r1, [r4, #2]
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800292c:	2082      	movs	r0, #130	; 0x82
 800292e:	4798      	blx	r3
 8002930:	f640 0311 	movw	r3, #2065	; 0x811
 8002934:	4298      	cmp	r0, r3
 8002936:	d109      	bne.n	800294c <BSP_TS_Init+0x2c>
  }

  if(ret == TS_OK)
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8002938:	682b      	ldr	r3, [r5, #0]
    TsDrv = &stmpe811_ts_drv;
 800293a:	6065      	str	r5, [r4, #4]
    TsDrv->Init(TS_I2C_ADDRESS);
 800293c:	2082      	movs	r0, #130	; 0x82
 800293e:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8002940:	6863      	ldr	r3, [r4, #4]
 8002942:	2082      	movs	r0, #130	; 0x82
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	4798      	blx	r3
    ret = TS_OK;
 8002948:	2000      	movs	r0, #0
  }

  return ret;
}
 800294a:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t ret = TS_ERROR;
 800294c:	2001      	movs	r0, #1
 800294e:	e7fc      	b.n	800294a <BSP_TS_Init+0x2a>
 8002950:	200005b0 	.word	0x200005b0
 8002954:	20000098 	.word	0x20000098

08002958 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8002958:	b573      	push	{r0, r1, r4, r5, r6, lr}
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800295a:	4c2a      	ldr	r4, [pc, #168]	; (8002a04 <BSP_TS_GetState+0xac>)
 800295c:	6863      	ldr	r3, [r4, #4]
{
 800295e:	4605      	mov	r5, r0
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2082      	movs	r0, #130	; 0x82
 8002964:	4798      	blx	r3
 8002966:	b280      	uxth	r0, r0
 8002968:	8028      	strh	r0, [r5, #0]
  
  if(TsState->TouchDetected)
 800296a:	2800      	cmp	r0, #0
 800296c:	d03e      	beq.n	80029ec <BSP_TS_GetState+0x94>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800296e:	6863      	ldr	r3, [r4, #4]
 8002970:	f10d 0206 	add.w	r2, sp, #6
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	a901      	add	r1, sp, #4
 8002978:	2082      	movs	r0, #130	; 0x82
 800297a:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 800297c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002980:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 8002984:	b292      	uxth	r2, r2
    
    /* Y value second correction */
    yr = y / 11;
    
    /* Return y position value */
    if(yr <= 0)
 8002986:	2a0a      	cmp	r2, #10
 8002988:	d932      	bls.n	80029f0 <BSP_TS_GetState+0x98>
    yr = y / 11;
 800298a:	230b      	movs	r3, #11
 800298c:	fbb2 f2f3 	udiv	r2, r2, r3
    {
      yr = 0;
    }
    else if (yr > TsYBoundary)
 8002990:	8863      	ldrh	r3, [r4, #2]
 8002992:	4293      	cmp	r3, r2
 8002994:	d201      	bcs.n	800299a <BSP_TS_GetState+0x42>
    {
      yr = TsYBoundary - 1;
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
    else
    {}
    y = yr;
    
    /* X value first correction */
    if(x <= 3000)
 800299a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800299e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80029a2:	428b      	cmp	r3, r1
 80029a4:	d826      	bhi.n	80029f4 <BSP_TS_GetState+0x9c>
    {
      x = 3870 - x;
 80029a6:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80029aa:	330e      	adds	r3, #14
 80029ac:	b29b      	uxth	r3, r3
    {
      x = 3800 - x;
    }
    
    /* X value second correction */  
    xr = x / 15;
 80029ae:	210f      	movs	r1, #15
 80029b0:	fbb3 f3f1 	udiv	r3, r3, r1
    /* Return X position value */
    if(xr <= 0)
    {
      xr = 0;
    }
    else if (xr > TsXBoundary)
 80029b4:	8821      	ldrh	r1, [r4, #0]
 80029b6:	4299      	cmp	r1, r3
 80029b8:	d201      	bcs.n	80029be <BSP_TS_GetState+0x66>
    {
      xr = TsXBoundary - 1;
 80029ba:	1e4b      	subs	r3, r1, #1
 80029bc:	b29b      	uxth	r3, r3
    }
    else 
    {}
    
    x = xr;
    xDiff = x > _x? (x - _x): (_x - x);
 80029be:	68a0      	ldr	r0, [r4, #8]
    yDiff = y > _y? (y - _y): (_y - y); 
 80029c0:	68e6      	ldr	r6, [r4, #12]
    xDiff = x > _x? (x - _x): (_x - x);
 80029c2:	4283      	cmp	r3, r0
 80029c4:	b281      	uxth	r1, r0
 80029c6:	bf8c      	ite	hi
 80029c8:	1a59      	subhi	r1, r3, r1
 80029ca:	1ac9      	subls	r1, r1, r3
    yDiff = y > _y? (y - _y): (_y - y); 
 80029cc:	b2b0      	uxth	r0, r6
 80029ce:	42b2      	cmp	r2, r6
 80029d0:	bf8c      	ite	hi
 80029d2:	1a10      	subhi	r0, r2, r0
 80029d4:	1a80      	subls	r0, r0, r2
    xDiff = x > _x? (x - _x): (_x - x);
 80029d6:	b289      	uxth	r1, r1
    yDiff = y > _y? (y - _y): (_y - y); 
 80029d8:	b280      	uxth	r0, r0
    
    if (xDiff + yDiff > 5)
 80029da:	4401      	add	r1, r0
 80029dc:	2905      	cmp	r1, #5
    {
      _x = x;
      _y = y; 
 80029de:	bfc8      	it	gt
 80029e0:	e9c4 3202 	strdgt	r3, r2, [r4, #8]
    }
    
    /* Update the X position */
    TsState->X = _x;
 80029e4:	68a3      	ldr	r3, [r4, #8]
 80029e6:	806b      	strh	r3, [r5, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80029e8:	68e3      	ldr	r3, [r4, #12]
 80029ea:	80ab      	strh	r3, [r5, #4]
  }
}
 80029ec:	b002      	add	sp, #8
 80029ee:	bd70      	pop	{r4, r5, r6, pc}
      yr = 0;
 80029f0:	2200      	movs	r2, #0
 80029f2:	e7d2      	b.n	800299a <BSP_TS_GetState+0x42>
      x = 3800 - x;
 80029f4:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80029f8:	3308      	adds	r3, #8
 80029fa:	b29b      	uxth	r3, r3
    if(xr <= 0)
 80029fc:	2b0e      	cmp	r3, #14
 80029fe:	d8d6      	bhi.n	80029ae <BSP_TS_GetState+0x56>
      xr = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	e7dc      	b.n	80029be <BSP_TS_GetState+0x66>
 8002a04:	200005b0 	.word	0x200005b0

08002a08 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a08:	490f      	ldr	r1, [pc, #60]	; (8002a48 <SystemInit+0x40>)
 8002a0a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a0e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <SystemInit+0x44>)
 8002a18:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a1a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002a1c:	f042 0201 	orr.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002a22:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002a2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a2e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002a30:	4a07      	ldr	r2, [pc, #28]	; (8002a50 <SystemInit+0x48>)
 8002a32:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002a3c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a42:	608b      	str	r3, [r1, #8]
#endif
}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000ed00 	.word	0xe000ed00
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	24003010 	.word	0x24003010

08002a54 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a58:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a5a:	4a0e      	ldr	r2, [pc, #56]	; (8002a94 <HAL_InitTick+0x3c>)
 8002a5c:	4e0e      	ldr	r6, [pc, #56]	; (8002a98 <HAL_InitTick+0x40>)
{
 8002a5e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a64:	7830      	ldrb	r0, [r6, #0]
 8002a66:	fbb3 f3f0 	udiv	r3, r3, r0
 8002a6a:	6810      	ldr	r0, [r2, #0]
 8002a6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a70:	f000 f8ba 	bl	8002be8 <HAL_SYSTICK_Config>
 8002a74:	4604      	mov	r4, r0
 8002a76:	b950      	cbnz	r0, 8002a8e <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a78:	2d0f      	cmp	r5, #15
 8002a7a:	d808      	bhi.n	8002a8e <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a84:	f000 f85c 	bl	8002b40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a88:	6075      	str	r5, [r6, #4]
 8002a8a:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002a8c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002a8e:	2001      	movs	r0, #1
 8002a90:	e7fc      	b.n	8002a8c <HAL_InitTick+0x34>
 8002a92:	bf00      	nop
 8002a94:	20000100 	.word	0x20000100
 8002a98:	20000104 	.word	0x20000104

08002a9c <HAL_Init>:
{
 8002a9c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_Init+0x30>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002aae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ab6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab8:	2003      	movs	r0, #3
 8002aba:	f000 f82f 	bl	8002b1c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002abe:	200f      	movs	r0, #15
 8002ac0:	f7ff ffca 	bl	8002a58 <HAL_InitTick>
  HAL_MspInit();
 8002ac4:	f7ff ffc6 	bl	8002a54 <HAL_MspInit>
}
 8002ac8:	2000      	movs	r0, #0
 8002aca:	bd08      	pop	{r3, pc}
 8002acc:	40023c00 	.word	0x40023c00

08002ad0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002ad0:	4a03      	ldr	r2, [pc, #12]	; (8002ae0 <HAL_IncTick+0x10>)
 8002ad2:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <HAL_IncTick+0x14>)
 8002ad4:	6811      	ldr	r1, [r2, #0]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	440b      	add	r3, r1
 8002ada:	6013      	str	r3, [r2, #0]
}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	200005c0 	.word	0x200005c0
 8002ae4:	20000104 	.word	0x20000104

08002ae8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ae8:	4b01      	ldr	r3, [pc, #4]	; (8002af0 <HAL_GetTick+0x8>)
 8002aea:	6818      	ldr	r0, [r3, #0]
}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	200005c0 	.word	0x200005c0

08002af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002af4:	b538      	push	{r3, r4, r5, lr}
 8002af6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002af8:	f7ff fff6 	bl	8002ae8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002afc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002afe:	bf1c      	itt	ne
 8002b00:	4b05      	ldrne	r3, [pc, #20]	; (8002b18 <HAL_Delay+0x24>)
 8002b02:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002b04:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8002b06:	bf18      	it	ne
 8002b08:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b0a:	f7ff ffed 	bl	8002ae8 <HAL_GetTick>
 8002b0e:	1b43      	subs	r3, r0, r5
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	d3fa      	bcc.n	8002b0a <HAL_Delay+0x16>
  {
  }
}
 8002b14:	bd38      	pop	{r3, r4, r5, pc}
 8002b16:	bf00      	nop
 8002b18:	20000104 	.word	0x20000104

08002b1c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b1c:	4907      	ldr	r1, [pc, #28]	; (8002b3c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002b1e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b26:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002b38:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b40:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b42:	b530      	push	{r4, r5, lr}
 8002b44:	68dc      	ldr	r4, [r3, #12]
 8002b46:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b4a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b50:	2d04      	cmp	r5, #4
 8002b52:	bf28      	it	cs
 8002b54:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b56:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5c:	bf8c      	ite	hi
 8002b5e:	3c03      	subhi	r4, #3
 8002b60:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b62:	fa03 f505 	lsl.w	r5, r3, r5
 8002b66:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6a:	40a3      	lsls	r3, r4
 8002b6c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8002b72:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b78:	bfac      	ite	ge
 8002b7a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7e:	4a08      	ldrlt	r2, [pc, #32]	; (8002ba0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b80:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b84:	bfb8      	it	lt
 8002b86:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	bfaa      	itet	ge
 8002b8e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b92:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b94:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b98:	bd30      	pop	{r4, r5, pc}
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00
 8002ba0:	e000ed14 	.word	0xe000ed14

08002ba4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	db08      	blt.n	8002bba <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba8:	0942      	lsrs	r2, r0, #5
 8002baa:	2301      	movs	r3, #1
 8002bac:	f000 001f 	and.w	r0, r0, #31
 8002bb0:	fa03 f000 	lsl.w	r0, r3, r0
 8002bb4:	4b01      	ldr	r3, [pc, #4]	; (8002bbc <HAL_NVIC_EnableIRQ+0x18>)
 8002bb6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002bba:	4770      	bx	lr
 8002bbc:	e000e100 	.word	0xe000e100

08002bc0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	db0d      	blt.n	8002be0 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bc4:	0943      	lsrs	r3, r0, #5
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f000 001f 	and.w	r0, r0, #31
 8002bcc:	fa02 f000 	lsl.w	r0, r2, r0
 8002bd0:	3320      	adds	r3, #32
 8002bd2:	4a04      	ldr	r2, [pc, #16]	; (8002be4 <HAL_NVIC_DisableIRQ+0x24>)
 8002bd4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002bd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002bdc:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000e100 	.word	0xe000e100

08002be8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be8:	3801      	subs	r0, #1
 8002bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002bee:	d20b      	bcs.n	8002c08 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf4:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf6:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf8:	21f0      	movs	r1, #240	; 0xf0
 8002bfa:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bfe:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c00:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c02:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c04:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c06:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002c08:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002c0a:	4770      	bx	lr
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c10:	6803      	ldr	r3, [r0, #0]
{
 8002c12:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c14:	4c08      	ldr	r4, [pc, #32]	; (8002c38 <DMA_CalcBaseAndBitshift+0x28>)
{
 8002c16:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c18:	b2d9      	uxtb	r1, r3
 8002c1a:	3910      	subs	r1, #16
 8002c1c:	2018      	movs	r0, #24
 8002c1e:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c22:	5c20      	ldrb	r0, [r4, r0]
 8002c24:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c26:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8002c2a:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 8002c2e:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c30:	bf88      	it	hi
 8002c32:	3004      	addhi	r0, #4
 8002c34:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002c36:	bd10      	pop	{r4, pc}
 8002c38:	0800c6d8 	.word	0x0800c6d8

08002c3c <HAL_DMA_Init>:
{
 8002c3c:	b570      	push	{r4, r5, r6, lr}
 8002c3e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002c40:	f7ff ff52 	bl	8002ae8 <HAL_GetTick>
 8002c44:	4605      	mov	r5, r0
  if(hdma == NULL)
 8002c46:	2c00      	cmp	r4, #0
 8002c48:	d073      	beq.n	8002d32 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002c50:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002c52:	2300      	movs	r3, #0
 8002c54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002c58:	6813      	ldr	r3, [r2, #0]
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c60:	6821      	ldr	r1, [r4, #0]
 8002c62:	680b      	ldr	r3, [r1, #0]
 8002c64:	07d8      	lsls	r0, r3, #31
 8002c66:	d42f      	bmi.n	8002cc8 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8002c68:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c6a:	4d33      	ldr	r5, [pc, #204]	; (8002d38 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6c:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c6e:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c70:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	68e2      	ldr	r2, [r4, #12]
 8002c78:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7a:	6922      	ldr	r2, [r4, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	6962      	ldr	r2, [r4, #20]
 8002c80:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c82:	69e2      	ldr	r2, [r4, #28]
 8002c84:	4303      	orrs	r3, r0
 8002c86:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c88:	6a22      	ldr	r2, [r4, #32]
 8002c8a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c8e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c90:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c94:	bf02      	ittt	eq
 8002c96:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8002c9a:	4335      	orreq	r5, r6
 8002c9c:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8002c9e:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8002ca0:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ca2:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ca4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002ca8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cac:	d133      	bne.n	8002d16 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8002cae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cb0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002cb2:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cb4:	b37d      	cbz	r5, 8002d16 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cb6:	b990      	cbnz	r0, 8002cde <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8002cb8:	2a01      	cmp	r2, #1
 8002cba:	d021      	beq.n	8002d00 <HAL_DMA_Init+0xc4>
 8002cbc:	f032 0202 	bics.w	r2, r2, #2
 8002cc0:	d129      	bne.n	8002d16 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc2:	01ea      	lsls	r2, r5, #7
 8002cc4:	d527      	bpl.n	8002d16 <HAL_DMA_Init+0xda>
 8002cc6:	e01e      	b.n	8002d06 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cc8:	f7ff ff0e 	bl	8002ae8 <HAL_GetTick>
 8002ccc:	1b40      	subs	r0, r0, r5
 8002cce:	2805      	cmp	r0, #5
 8002cd0:	d9c6      	bls.n	8002c60 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cd2:	2320      	movs	r3, #32
 8002cd4:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cd6:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8002cd8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002cdc:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cde:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002ce2:	d114      	bne.n	8002d0e <HAL_DMA_Init+0xd2>
    switch (tmp)
 8002ce4:	2a03      	cmp	r2, #3
 8002ce6:	d816      	bhi.n	8002d16 <HAL_DMA_Init+0xda>
 8002ce8:	a001      	add	r0, pc, #4	; (adr r0, 8002cf0 <HAL_DMA_Init+0xb4>)
 8002cea:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002cee:	bf00      	nop
 8002cf0:	08002d07 	.word	0x08002d07
 8002cf4:	08002cc3 	.word	0x08002cc3
 8002cf8:	08002d07 	.word	0x08002d07
 8002cfc:	08002d01 	.word	0x08002d01
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d00:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002d04:	d107      	bne.n	8002d16 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d06:	2340      	movs	r3, #64	; 0x40
 8002d08:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	e7e4      	b.n	8002cd8 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8002d0e:	2a02      	cmp	r2, #2
 8002d10:	d9f9      	bls.n	8002d06 <HAL_DMA_Init+0xca>
 8002d12:	2a03      	cmp	r2, #3
 8002d14:	d0d5      	beq.n	8002cc2 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8002d16:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f7ff ff79 	bl	8002c10 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d1e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d20:	233f      	movs	r3, #63	; 0x3f
 8002d22:	4093      	lsls	r3, r2
 8002d24:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d26:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002d28:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d2a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002d2c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002d30:	e7d4      	b.n	8002cdc <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8002d32:	2001      	movs	r0, #1
 8002d34:	e7d2      	b.n	8002cdc <HAL_DMA_Init+0xa0>
 8002d36:	bf00      	nop
 8002d38:	f010803f 	.word	0xf010803f

08002d3c <HAL_DMA_DeInit>:
{
 8002d3c:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8002d3e:	4605      	mov	r5, r0
 8002d40:	b320      	cbz	r0, 8002d8c <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002d42:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	b2dc      	uxtb	r4, r3
 8002d4a:	d01d      	beq.n	8002d88 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8002d4c:	6803      	ldr	r3, [r0, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8002d54:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8002d56:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8002d58:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8002d5a:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002d5c:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002d5e:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002d60:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002d62:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8002d64:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d66:	f7ff ff53 	bl	8002c10 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d6a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002d6c:	233f      	movs	r3, #63	; 0x3f
 8002d6e:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8002d70:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8002d74:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8002d78:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d7c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7e:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8002d80:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8002d84:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 8002d88:	4620      	mov	r0, r4
 8002d8a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002d8c:	2401      	movs	r4, #1
 8002d8e:	e7fb      	b.n	8002d88 <HAL_DMA_DeInit+0x4c>

08002d90 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002d90:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002d92:	6804      	ldr	r4, [r0, #0]
 8002d94:	9d04      	ldr	r5, [sp, #16]
 8002d96:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8002d98:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002d9c:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8002da0:	4333      	orrs	r3, r6
 8002da2:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002da4:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002da6:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002da8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dac:	d130      	bne.n	8002e10 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002dae:	6886      	ldr	r6, [r0, #8]
 8002db0:	b11e      	cbz	r6, 8002dba <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002db2:	2e01      	cmp	r6, #1
 8002db4:	d103      	bne.n	8002dbe <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002db6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002dba:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002dbc:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002dbe:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002dc0:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002dc4:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002dc8:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002dca:	d107      	bne.n	8002ddc <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8002dcc:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002dce:	0aa9      	lsrs	r1, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002dd0:	02db      	lsls	r3, r3, #11
 8002dd2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8002dd6:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8002dda:	e7ee      	b.n	8002dba <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002ddc:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002dde:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002de2:	d10a      	bne.n	8002dfa <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8002de4:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002de6:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002de8:	0289      	lsls	r1, r1, #10
 8002dea:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002dee:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
      tmp1 = (tmp1 >> 31U);
 8002df2:	0fd3      	lsrs	r3, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002df4:	ea41 31c3 	orr.w	r1, r1, r3, lsl #15
 8002df8:	e7df      	b.n	8002dba <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8002dfa:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002dfc:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002dfe:	0209      	lsls	r1, r1, #8
 8002e00:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8002e04:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
      tmp1 = (tmp1 >> 28U);
 8002e08:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002e0a:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8002e0e:	e7d4      	b.n	8002dba <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002e10:	60e1      	str	r1, [r4, #12]
}
 8002e12:	e7d3      	b.n	8002dbc <DMA2D_SetConfig+0x2c>

08002e14 <HAL_DMA2D_MspInit>:
}
 8002e14:	4770      	bx	lr

08002e16 <HAL_DMA2D_Init>:
{
 8002e16:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8002e18:	4604      	mov	r4, r0
 8002e1a:	b330      	cbz	r0, 8002e6a <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002e1c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002e20:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e24:	b91b      	cbnz	r3, 8002e2e <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8002e26:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002e2a:	f7ff fff3 	bl	8002e14 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002e2e:	6822      	ldr	r2, [r4, #0]
 8002e30:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e32:	2302      	movs	r3, #2
 8002e34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002e38:	6813      	ldr	r3, [r2, #0]
 8002e3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002e42:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002e44:	68a1      	ldr	r1, [r4, #8]
 8002e46:	f023 0307 	bic.w	r3, r3, #7
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002e4e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e50:	68e1      	ldr	r1, [r4, #12]
 8002e52:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e5a:	430b      	orrs	r3, r1
 8002e5c:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002e5e:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002e60:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002e62:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002e64:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002e68:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002e6a:	2001      	movs	r0, #1
 8002e6c:	e7fc      	b.n	8002e68 <HAL_DMA2D_Init+0x52>

08002e6e <HAL_DMA2D_Start>:
{
 8002e6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8002e70:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
 8002e74:	2d01      	cmp	r5, #1
{
 8002e76:	4604      	mov	r4, r0
 8002e78:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hdma2d);
 8002e7c:	d00f      	beq.n	8002e9e <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e7e:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8002e82:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002e84:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 8002e86:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002e8a:	9500      	str	r5, [sp, #0]
 8002e8c:	f7ff ff80 	bl	8002d90 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8002e90:	6822      	ldr	r2, [r4, #0]
 8002e92:	6813      	ldr	r3, [r2, #0]
 8002e94:	4333      	orrs	r3, r6
 8002e96:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002e98:	2000      	movs	r0, #0
}
 8002e9a:	b002      	add	sp, #8
 8002e9c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	e7fb      	b.n	8002e9a <HAL_DMA2D_Start+0x2c>

08002ea2 <HAL_DMA2D_PollForTransfer>:
{
 8002ea2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002ea8:	6803      	ldr	r3, [r0, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	07db      	lsls	r3, r3, #31
{
 8002eae:	4604      	mov	r4, r0
 8002eb0:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002eb2:	d417      	bmi.n	8002ee4 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002eb4:	6822      	ldr	r2, [r4, #0]
 8002eb6:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eba:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8002ebc:	069e      	lsls	r6, r3, #26
 8002ebe:	d506      	bpl.n	8002ece <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8002ec0:	f7ff fe12 	bl	8002ae8 <HAL_GetTick>
 8002ec4:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	06d2      	lsls	r2, r2, #27
 8002ecc:	d543      	bpl.n	8002f56 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	2212      	movs	r2, #18
 8002ed2:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8002ed4:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002edc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002ee0:	b002      	add	sp, #8
 8002ee2:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8002ee4:	f7ff fe00 	bl	8002ae8 <HAL_GetTick>
 8002ee8:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	0792      	lsls	r2, r2, #30
 8002ef0:	d4e0      	bmi.n	8002eb4 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002ef6:	9a01      	ldr	r2, [sp, #4]
 8002ef8:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002efc:	d017      	beq.n	8002f2e <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002efe:	9a01      	ldr	r2, [sp, #4]
 8002f00:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f02:	bf42      	ittt	mi
 8002f04:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002f06:	f042 0202 	orrmi.w	r2, r2, #2
 8002f0a:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002f0c:	9a01      	ldr	r2, [sp, #4]
 8002f0e:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f10:	bf42      	ittt	mi
 8002f12:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002f14:	f042 0201 	orrmi.w	r2, r2, #1
 8002f18:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f1a:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f1c:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f1e:	2304      	movs	r3, #4
 8002f20:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8002f24:	2300      	movs	r3, #0
 8002f26:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	e7d8      	b.n	8002ee0 <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 8002f2e:	1c69      	adds	r1, r5, #1
 8002f30:	d0dc      	beq.n	8002eec <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f32:	f7ff fdd9 	bl	8002ae8 <HAL_GetTick>
 8002f36:	1b80      	subs	r0, r0, r6
 8002f38:	42a8      	cmp	r0, r5
 8002f3a:	d801      	bhi.n	8002f40 <HAL_DMA2D_PollForTransfer+0x9e>
 8002f3c:	2d00      	cmp	r5, #0
 8002f3e:	d1d4      	bne.n	8002eea <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f42:	f043 0320 	orr.w	r3, r3, #32
 8002f46:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002f48:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8002f4a:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002f4c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8002f50:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8002f54:	e7c4      	b.n	8002ee0 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002f5a:	9a01      	ldr	r2, [sp, #4]
 8002f5c:	f012 0f29 	tst.w	r2, #41	; 0x29
 8002f60:	d016      	beq.n	8002f90 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002f62:	9a01      	ldr	r2, [sp, #4]
 8002f64:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002f66:	bf42      	ittt	mi
 8002f68:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002f6a:	f042 0204 	orrmi.w	r2, r2, #4
 8002f6e:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f70:	9a01      	ldr	r2, [sp, #4]
 8002f72:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f74:	bf42      	ittt	mi
 8002f76:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002f78:	f042 0202 	orrmi.w	r2, r2, #2
 8002f7c:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002f7e:	9a01      	ldr	r2, [sp, #4]
 8002f80:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f82:	bf42      	ittt	mi
 8002f84:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002f86:	f042 0201 	orrmi.w	r2, r2, #1
 8002f8a:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f8c:	2229      	movs	r2, #41	; 0x29
 8002f8e:	e7c5      	b.n	8002f1c <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 8002f90:	1c69      	adds	r1, r5, #1
 8002f92:	d099      	beq.n	8002ec8 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f94:	f7ff fda8 	bl	8002ae8 <HAL_GetTick>
 8002f98:	1b80      	subs	r0, r0, r6
 8002f9a:	42a8      	cmp	r0, r5
 8002f9c:	d8d0      	bhi.n	8002f40 <HAL_DMA2D_PollForTransfer+0x9e>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d191      	bne.n	8002ec6 <HAL_DMA2D_PollForTransfer+0x24>
 8002fa2:	e7cd      	b.n	8002f40 <HAL_DMA2D_PollForTransfer+0x9e>

08002fa4 <HAL_DMA2D_ConfigLayer>:
{
 8002fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8002fa6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	f04f 0302 	mov.w	r3, #2
 8002fb0:	d02b      	beq.n	800300a <HAL_DMA2D_ConfigLayer+0x66>
 8002fb2:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002fb4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8002fb8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002fbc:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002fc0:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8002fc4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8002fc6:	4f18      	ldr	r7, [pc, #96]	; (8003028 <HAL_DMA2D_ConfigLayer+0x84>)
 8002fc8:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fcc:	3c09      	subs	r4, #9
 8002fce:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002fd0:	bf9c      	itt	ls
 8002fd2:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
 8002fd6:	431a      	orrls	r2, r3
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002fd8:	ea4f 1601 	mov.w	r6, r1, lsl #4
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002fdc:	6803      	ldr	r3, [r0, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002fde:	bf88      	it	hi
 8002fe0:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002fe4:	b999      	cbnz	r1, 800300e <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002fe6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002fe8:	4039      	ands	r1, r7
 8002fea:	430a      	orrs	r2, r1
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fee:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002ff0:	6982      	ldr	r2, [r0, #24]
 8002ff2:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ff4:	d803      	bhi.n	8002ffe <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002ff6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002ff8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ffe:	2301      	movs	r3, #1
 8003000:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8003004:	2300      	movs	r3, #0
 8003006:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 800300a:	4618      	mov	r0, r3
}
 800300c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800300e:	69d9      	ldr	r1, [r3, #28]
 8003010:	4039      	ands	r1, r7
 8003012:	430a      	orrs	r2, r1
 8003014:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003016:	1982      	adds	r2, r0, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003018:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800301a:	6992      	ldr	r2, [r2, #24]
 800301c:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800301e:	bf9c      	itt	ls
 8003020:	f025 457f 	bicls.w	r5, r5, #4278190080	; 0xff000000
 8003024:	621d      	strls	r5, [r3, #32]
 8003026:	e7ea      	b.n	8002ffe <HAL_DMA2D_ConfigLayer+0x5a>
 8003028:	00fcfff0 	.word	0x00fcfff0

0800302c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800302c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003030:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 80031f4 <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003034:	4a6d      	ldr	r2, [pc, #436]	; (80031ec <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003036:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003038:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800303a:	2401      	movs	r4, #1
 800303c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800303e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8003042:	43ac      	bics	r4, r5
 8003044:	f040 80b9 	bne.w	80031ba <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003048:	684d      	ldr	r5, [r1, #4]
 800304a:	f005 0403 	and.w	r4, r5, #3
 800304e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003052:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003054:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003056:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800305a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800305c:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003060:	d834      	bhi.n	80030cc <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8003062:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003064:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003068:	68cf      	ldr	r7, [r1, #12]
 800306a:	fa07 f708 	lsl.w	r7, r7, r8
 800306e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8003072:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003074:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003076:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800307a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800307e:	409f      	lsls	r7, r3
 8003080:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003084:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003086:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003088:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800308c:	688f      	ldr	r7, [r1, #8]
 800308e:	fa07 f708 	lsl.w	r7, r7, r8
 8003092:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003096:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8003098:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800309a:	d119      	bne.n	80030d0 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 800309c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80030a0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030a4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80030a8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80030b0:	f04f 0e0f 	mov.w	lr, #15
 80030b4:	fa0e fe0b 	lsl.w	lr, lr, fp
 80030b8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030bc:	690f      	ldr	r7, [r1, #16]
 80030be:	fa07 f70b 	lsl.w	r7, r7, fp
 80030c2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80030c6:	f8ca 7020 	str.w	r7, [sl, #32]
 80030ca:	e001      	b.n	80030d0 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030cc:	2c03      	cmp	r4, #3
 80030ce:	d1da      	bne.n	8003086 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80030d0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d2:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030d6:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d8:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030da:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80030de:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030e0:	d06b      	beq.n	80031ba <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e2:	f04f 0a00 	mov.w	sl, #0
 80030e6:	f8cd a004 	str.w	sl, [sp, #4]
 80030ea:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ee:	4c40      	ldr	r4, [pc, #256]	; (80031f0 <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80030f4:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 80030f8:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 80030fc:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8003100:	9601      	str	r6, [sp, #4]
 8003102:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003104:	f023 0603 	bic.w	r6, r3, #3
 8003108:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800310c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003110:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003114:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003118:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800311c:	270f      	movs	r7, #15
 800311e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003122:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003124:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003128:	d04e      	beq.n	80031c8 <HAL_GPIO_Init+0x19c>
 800312a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800312e:	42a0      	cmp	r0, r4
 8003130:	d04c      	beq.n	80031cc <HAL_GPIO_Init+0x1a0>
 8003132:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003136:	42a0      	cmp	r0, r4
 8003138:	d04a      	beq.n	80031d0 <HAL_GPIO_Init+0x1a4>
 800313a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800313e:	42a0      	cmp	r0, r4
 8003140:	d048      	beq.n	80031d4 <HAL_GPIO_Init+0x1a8>
 8003142:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003146:	42a0      	cmp	r0, r4
 8003148:	d046      	beq.n	80031d8 <HAL_GPIO_Init+0x1ac>
 800314a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800314e:	42a0      	cmp	r0, r4
 8003150:	d044      	beq.n	80031dc <HAL_GPIO_Init+0x1b0>
 8003152:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003156:	42a0      	cmp	r0, r4
 8003158:	d042      	beq.n	80031e0 <HAL_GPIO_Init+0x1b4>
 800315a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800315e:	42a0      	cmp	r0, r4
 8003160:	d040      	beq.n	80031e4 <HAL_GPIO_Init+0x1b8>
 8003162:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003166:	42a0      	cmp	r0, r4
 8003168:	d03e      	beq.n	80031e8 <HAL_GPIO_Init+0x1bc>
 800316a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800316e:	42a0      	cmp	r0, r4
 8003170:	bf0c      	ite	eq
 8003172:	2409      	moveq	r4, #9
 8003174:	240a      	movne	r4, #10
 8003176:	fa04 f40e 	lsl.w	r4, r4, lr
 800317a:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800317c:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 800317e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003180:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003184:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8003186:	bf54      	ite	pl
 8003188:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800318a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800318e:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8003190:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003192:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8003194:	bf54      	ite	pl
 8003196:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003198:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 800319c:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800319e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031a0:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80031a2:	bf54      	ite	pl
 80031a4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80031a6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80031aa:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80031ac:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031ae:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80031b0:	bf54      	ite	pl
 80031b2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80031b4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80031b8:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ba:	3301      	adds	r3, #1
 80031bc:	2b10      	cmp	r3, #16
 80031be:	f47f af3b 	bne.w	8003038 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80031c2:	b003      	add	sp, #12
 80031c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031c8:	4654      	mov	r4, sl
 80031ca:	e7d4      	b.n	8003176 <HAL_GPIO_Init+0x14a>
 80031cc:	2401      	movs	r4, #1
 80031ce:	e7d2      	b.n	8003176 <HAL_GPIO_Init+0x14a>
 80031d0:	2402      	movs	r4, #2
 80031d2:	e7d0      	b.n	8003176 <HAL_GPIO_Init+0x14a>
 80031d4:	2403      	movs	r4, #3
 80031d6:	e7ce      	b.n	8003176 <HAL_GPIO_Init+0x14a>
 80031d8:	2404      	movs	r4, #4
 80031da:	e7cc      	b.n	8003176 <HAL_GPIO_Init+0x14a>
 80031dc:	2405      	movs	r4, #5
 80031de:	e7ca      	b.n	8003176 <HAL_GPIO_Init+0x14a>
 80031e0:	2406      	movs	r4, #6
 80031e2:	e7c8      	b.n	8003176 <HAL_GPIO_Init+0x14a>
 80031e4:	2407      	movs	r4, #7
 80031e6:	e7c6      	b.n	8003176 <HAL_GPIO_Init+0x14a>
 80031e8:	2408      	movs	r4, #8
 80031ea:	e7c4      	b.n	8003176 <HAL_GPIO_Init+0x14a>
 80031ec:	40013c00 	.word	0x40013c00
 80031f0:	40020000 	.word	0x40020000
 80031f4:	40023800 	.word	0x40023800

080031f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80031f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80031fc:	4c4a      	ldr	r4, [pc, #296]	; (8003328 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80031fe:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8003330 <HAL_GPIO_DeInit+0x138>
 8003202:	f8df a130 	ldr.w	sl, [pc, #304]	; 8003334 <HAL_GPIO_DeInit+0x13c>
 8003206:	f8df b130 	ldr.w	fp, [pc, #304]	; 8003338 <HAL_GPIO_DeInit+0x140>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320a:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 800320c:	2301      	movs	r3, #1
 800320e:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 8003212:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8003216:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 800321a:	d16e      	bne.n	80032fa <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800321c:	f022 0503 	bic.w	r5, r2, #3
 8003220:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8003224:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003228:	4b40      	ldr	r3, [pc, #256]	; (800332c <HAL_GPIO_DeInit+0x134>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 800322a:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800322e:	f002 0c03 	and.w	ip, r2, #3
 8003232:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003236:	260f      	movs	r6, #15
 8003238:	fa06 f60c 	lsl.w	r6, r6, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800323c:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800323e:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003242:	d05f      	beq.n	8003304 <HAL_GPIO_DeInit+0x10c>
 8003244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003248:	4298      	cmp	r0, r3
 800324a:	d05d      	beq.n	8003308 <HAL_GPIO_DeInit+0x110>
 800324c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003250:	4298      	cmp	r0, r3
 8003252:	d05b      	beq.n	800330c <HAL_GPIO_DeInit+0x114>
 8003254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003258:	4298      	cmp	r0, r3
 800325a:	d059      	beq.n	8003310 <HAL_GPIO_DeInit+0x118>
 800325c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003260:	4298      	cmp	r0, r3
 8003262:	d057      	beq.n	8003314 <HAL_GPIO_DeInit+0x11c>
 8003264:	4548      	cmp	r0, r9
 8003266:	d057      	beq.n	8003318 <HAL_GPIO_DeInit+0x120>
 8003268:	4550      	cmp	r0, sl
 800326a:	d057      	beq.n	800331c <HAL_GPIO_DeInit+0x124>
 800326c:	4558      	cmp	r0, fp
 800326e:	d057      	beq.n	8003320 <HAL_GPIO_DeInit+0x128>
 8003270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003274:	4298      	cmp	r0, r3
 8003276:	d055      	beq.n	8003324 <HAL_GPIO_DeInit+0x12c>
 8003278:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800327c:	4298      	cmp	r0, r3
 800327e:	bf0c      	ite	eq
 8003280:	2309      	moveq	r3, #9
 8003282:	230a      	movne	r3, #10
 8003284:	fa03 f30c 	lsl.w	r3, r3, ip
 8003288:	4543      	cmp	r3, r8
 800328a:	d113      	bne.n	80032b4 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800328c:	6823      	ldr	r3, [r4, #0]
 800328e:	ea23 0307 	bic.w	r3, r3, r7
 8003292:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003294:	6863      	ldr	r3, [r4, #4]
 8003296:	ea23 0307 	bic.w	r3, r3, r7
 800329a:	6063      	str	r3, [r4, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800329c:	68a3      	ldr	r3, [r4, #8]
 800329e:	ea23 0307 	bic.w	r3, r3, r7
 80032a2:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80032a4:	68e3      	ldr	r3, [r4, #12]
 80032a6:	ea23 0307 	bic.w	r3, r3, r7
 80032aa:	60e3      	str	r3, [r4, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80032ac:	68ab      	ldr	r3, [r5, #8]
 80032ae:	ea23 0306 	bic.w	r3, r3, r6
 80032b2:	60ab      	str	r3, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032b4:	6805      	ldr	r5, [r0, #0]
 80032b6:	2603      	movs	r6, #3
 80032b8:	0053      	lsls	r3, r2, #1
 80032ba:	fa06 f303 	lsl.w	r3, r6, r3
 80032be:	ea25 0503 	bic.w	r5, r5, r3
 80032c2:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032c4:	fa22 f506 	lsr.w	r5, r2, r6
 80032c8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80032cc:	f002 0c07 	and.w	ip, r2, #7
 80032d0:	6a2e      	ldr	r6, [r5, #32]
 80032d2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80032d6:	270f      	movs	r7, #15
 80032d8:	fa07 f70c 	lsl.w	r7, r7, ip
 80032dc:	ea26 0707 	bic.w	r7, r6, r7
 80032e0:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032e2:	68c5      	ldr	r5, [r0, #12]
 80032e4:	ea25 0503 	bic.w	r5, r5, r3
 80032e8:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ea:	6845      	ldr	r5, [r0, #4]
 80032ec:	ea25 050e 	bic.w	r5, r5, lr
 80032f0:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032f2:	6885      	ldr	r5, [r0, #8]
 80032f4:	ea25 0303 	bic.w	r3, r5, r3
 80032f8:	6083      	str	r3, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032fa:	3201      	adds	r2, #1
 80032fc:	2a10      	cmp	r2, #16
 80032fe:	d185      	bne.n	800320c <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8003300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003304:	2300      	movs	r3, #0
 8003306:	e7bd      	b.n	8003284 <HAL_GPIO_DeInit+0x8c>
 8003308:	2301      	movs	r3, #1
 800330a:	e7bb      	b.n	8003284 <HAL_GPIO_DeInit+0x8c>
 800330c:	2302      	movs	r3, #2
 800330e:	e7b9      	b.n	8003284 <HAL_GPIO_DeInit+0x8c>
 8003310:	2303      	movs	r3, #3
 8003312:	e7b7      	b.n	8003284 <HAL_GPIO_DeInit+0x8c>
 8003314:	2304      	movs	r3, #4
 8003316:	e7b5      	b.n	8003284 <HAL_GPIO_DeInit+0x8c>
 8003318:	2305      	movs	r3, #5
 800331a:	e7b3      	b.n	8003284 <HAL_GPIO_DeInit+0x8c>
 800331c:	2306      	movs	r3, #6
 800331e:	e7b1      	b.n	8003284 <HAL_GPIO_DeInit+0x8c>
 8003320:	2307      	movs	r3, #7
 8003322:	e7af      	b.n	8003284 <HAL_GPIO_DeInit+0x8c>
 8003324:	2308      	movs	r3, #8
 8003326:	e7ad      	b.n	8003284 <HAL_GPIO_DeInit+0x8c>
 8003328:	40013c00 	.word	0x40013c00
 800332c:	40020000 	.word	0x40020000
 8003330:	40021400 	.word	0x40021400
 8003334:	40021800 	.word	0x40021800
 8003338:	40021c00 	.word	0x40021c00

0800333c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800333c:	6903      	ldr	r3, [r0, #16]
 800333e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003340:	bf14      	ite	ne
 8003342:	2001      	movne	r0, #1
 8003344:	2000      	moveq	r0, #0
 8003346:	4770      	bx	lr

08003348 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003348:	b10a      	cbz	r2, 800334e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800334a:	6181      	str	r1, [r0, #24]
  }
}
 800334c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800334e:	0409      	lsls	r1, r1, #16
 8003350:	e7fb      	b.n	800334a <HAL_GPIO_WritePin+0x2>
	...

08003354 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003354:	4a04      	ldr	r2, [pc, #16]	; (8003368 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003356:	6951      	ldr	r1, [r2, #20]
 8003358:	4201      	tst	r1, r0
{
 800335a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800335c:	d002      	beq.n	8003364 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800335e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003360:	f003 f9a0 	bl	80066a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003364:	bd08      	pop	{r3, pc}
 8003366:	bf00      	nop
 8003368:	40013c00 	.word	0x40013c00

0800336c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800336c:	6801      	ldr	r1, [r0, #0]
 800336e:	694b      	ldr	r3, [r1, #20]
 8003370:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	d010      	beq.n	800339c <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800337a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800337e:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8003380:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003382:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003384:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003388:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800338c:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003392:	f043 0304 	orr.w	r3, r3, #4
 8003396:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8003398:	2001      	movs	r0, #1
 800339a:	4770      	bx	lr
  }
  return HAL_OK;
 800339c:	4618      	mov	r0, r3
}
 800339e:	4770      	bx	lr

080033a0 <I2C_WaitOnFlagUntilTimeout>:
{
 80033a0:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 80033a4:	4606      	mov	r6, r0
 80033a6:	460f      	mov	r7, r1
 80033a8:	4691      	mov	r9, r2
 80033aa:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80033b0:	6833      	ldr	r3, [r6, #0]
 80033b2:	f1ba 0f01 	cmp.w	sl, #1
 80033b6:	bf0c      	ite	eq
 80033b8:	695c      	ldreq	r4, [r3, #20]
 80033ba:	699c      	ldrne	r4, [r3, #24]
 80033bc:	ea27 0404 	bic.w	r4, r7, r4
 80033c0:	b2a4      	uxth	r4, r4
 80033c2:	fab4 f484 	clz	r4, r4
 80033c6:	0964      	lsrs	r4, r4, #5
 80033c8:	45a1      	cmp	r9, r4
 80033ca:	d001      	beq.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80033cc:	2000      	movs	r0, #0
 80033ce:	e017      	b.n	8003400 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 80033d0:	1c6a      	adds	r2, r5, #1
 80033d2:	d0ee      	beq.n	80033b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d4:	f7ff fb88 	bl	8002ae8 <HAL_GetTick>
 80033d8:	9b08      	ldr	r3, [sp, #32]
 80033da:	1ac0      	subs	r0, r0, r3
 80033dc:	42a8      	cmp	r0, r5
 80033de:	d801      	bhi.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80033e0:	2d00      	cmp	r5, #0
 80033e2:	d1e5      	bne.n	80033b0 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033e4:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80033e6:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033e8:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033ea:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033ee:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033f2:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80033f4:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033f8:	f042 0220 	orr.w	r2, r2, #32
 80033fc:	6432      	str	r2, [r6, #64]	; 0x40
        return HAL_ERROR;
 80033fe:	2001      	movs	r0, #1
}
 8003400:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08003404 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003408:	4604      	mov	r4, r0
 800340a:	460f      	mov	r7, r1
 800340c:	4616      	mov	r6, r2
 800340e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003410:	6825      	ldr	r5, [r4, #0]
 8003412:	6968      	ldr	r0, [r5, #20]
 8003414:	ea27 0000 	bic.w	r0, r7, r0
 8003418:	b280      	uxth	r0, r0
 800341a:	b1b8      	cbz	r0, 800344c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800341c:	696b      	ldr	r3, [r5, #20]
 800341e:	055a      	lsls	r2, r3, #21
 8003420:	d516      	bpl.n	8003450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003422:	682b      	ldr	r3, [r5, #0]
 8003424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003428:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800342a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800342e:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003430:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003432:	2300      	movs	r3, #0
 8003434:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003436:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800343e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003440:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003444:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003446:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800344a:	2001      	movs	r0, #1
}
 800344c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003450:	1c73      	adds	r3, r6, #1
 8003452:	d0de      	beq.n	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003454:	f7ff fb48 	bl	8002ae8 <HAL_GetTick>
 8003458:	eba0 0008 	sub.w	r0, r0, r8
 800345c:	42b0      	cmp	r0, r6
 800345e:	d801      	bhi.n	8003464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8003460:	2e00      	cmp	r6, #0
 8003462:	d1d5      	bne.n	8003410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003464:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003466:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003468:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800346a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800346e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003472:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003474:	f042 0220 	orr.w	r2, r2, #32
 8003478:	e7e4      	b.n	8003444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

0800347a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800347a:	b570      	push	{r4, r5, r6, lr}
 800347c:	4604      	mov	r4, r0
 800347e:	460d      	mov	r5, r1
 8003480:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003482:	6821      	ldr	r1, [r4, #0]
 8003484:	694b      	ldr	r3, [r1, #20]
 8003486:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800348a:	d001      	beq.n	8003490 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800348c:	2000      	movs	r0, #0
 800348e:	e010      	b.n	80034b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003490:	694a      	ldr	r2, [r1, #20]
 8003492:	06d2      	lsls	r2, r2, #27
 8003494:	d50e      	bpl.n	80034b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003496:	f06f 0210 	mvn.w	r2, #16
 800349a:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800349c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800349e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034a0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034aa:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80034ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80034b0:	2001      	movs	r0, #1
}
 80034b2:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b4:	f7ff fb18 	bl	8002ae8 <HAL_GetTick>
 80034b8:	1b80      	subs	r0, r0, r6
 80034ba:	42a8      	cmp	r0, r5
 80034bc:	d801      	bhi.n	80034c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80034be:	2d00      	cmp	r5, #0
 80034c0:	d1df      	bne.n	8003482 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034c2:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80034c4:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034c6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80034d2:	f042 0220 	orr.w	r2, r2, #32
 80034d6:	e7e8      	b.n	80034aa <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080034d8 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	4604      	mov	r4, r0
 80034dc:	460d      	mov	r5, r1
 80034de:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	075b      	lsls	r3, r3, #29
 80034e6:	d501      	bpl.n	80034ec <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80034e8:	2000      	movs	r0, #0
}
 80034ea:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ec:	4620      	mov	r0, r4
 80034ee:	f7ff ff3d 	bl	800336c <I2C_IsAcknowledgeFailed>
 80034f2:	b9a8      	cbnz	r0, 8003520 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80034f4:	1c6a      	adds	r2, r5, #1
 80034f6:	d0f3      	beq.n	80034e0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f8:	f7ff faf6 	bl	8002ae8 <HAL_GetTick>
 80034fc:	1b80      	subs	r0, r0, r6
 80034fe:	42a8      	cmp	r0, r5
 8003500:	d801      	bhi.n	8003506 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003502:	2d00      	cmp	r5, #0
 8003504:	d1ec      	bne.n	80034e0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003506:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003508:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800350a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800350c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003510:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003514:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003516:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800351a:	f042 0220 	orr.w	r2, r2, #32
 800351e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003520:	2001      	movs	r0, #1
 8003522:	e7e2      	b.n	80034ea <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08003524 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003524:	b570      	push	{r4, r5, r6, lr}
 8003526:	4604      	mov	r4, r0
 8003528:	460d      	mov	r5, r1
 800352a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	061b      	lsls	r3, r3, #24
 8003532:	d501      	bpl.n	8003538 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8003534:	2000      	movs	r0, #0
}
 8003536:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003538:	4620      	mov	r0, r4
 800353a:	f7ff ff17 	bl	800336c <I2C_IsAcknowledgeFailed>
 800353e:	b9a8      	cbnz	r0, 800356c <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003540:	1c6a      	adds	r2, r5, #1
 8003542:	d0f3      	beq.n	800352c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003544:	f7ff fad0 	bl	8002ae8 <HAL_GetTick>
 8003548:	1b80      	subs	r0, r0, r6
 800354a:	42a8      	cmp	r0, r5
 800354c:	d801      	bhi.n	8003552 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800354e:	2d00      	cmp	r5, #0
 8003550:	d1ec      	bne.n	800352c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003552:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003554:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003556:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003558:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800355c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003560:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003562:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003566:	f042 0220 	orr.w	r2, r2, #32
 800356a:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800356c:	2001      	movs	r0, #1
 800356e:	e7e2      	b.n	8003536 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08003570 <I2C_RequestMemoryWrite>:
{
 8003570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003574:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003576:	6802      	ldr	r2, [r0, #0]
{
 8003578:	b085      	sub	sp, #20
 800357a:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800357e:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003580:	6813      	ldr	r3, [r2, #0]
 8003582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003586:	6013      	str	r3, [r2, #0]
{
 8003588:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800358a:	463b      	mov	r3, r7
 800358c:	f8cd 8000 	str.w	r8, [sp]
 8003590:	2200      	movs	r2, #0
 8003592:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8003596:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003598:	f7ff ff02 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	b138      	cbz	r0, 80035b0 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	05db      	lsls	r3, r3, #23
 80035a4:	d502      	bpl.n	80035ac <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035aa:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80035ac:	2003      	movs	r0, #3
 80035ae:	e00a      	b.n	80035c6 <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035b0:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80035b4:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035b6:	4919      	ldr	r1, [pc, #100]	; (800361c <I2C_RequestMemoryWrite+0xac>)
 80035b8:	4643      	mov	r3, r8
 80035ba:	463a      	mov	r2, r7
 80035bc:	4620      	mov	r0, r4
 80035be:	f7ff ff21 	bl	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c2:	b118      	cbz	r0, 80035cc <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 80035c4:	2001      	movs	r0, #1
}
 80035c6:	b005      	add	sp, #20
 80035c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	9003      	str	r0, [sp, #12]
 80035d0:	695a      	ldr	r2, [r3, #20]
 80035d2:	9203      	str	r2, [sp, #12]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d8:	4642      	mov	r2, r8
 80035da:	4639      	mov	r1, r7
 80035dc:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035de:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e0:	f7ff ffa0 	bl	8003524 <I2C_WaitOnTXEFlagUntilTimeout>
 80035e4:	b140      	cbz	r0, 80035f8 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035e8:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ea:	bf01      	itttt	eq
 80035ec:	6822      	ldreq	r2, [r4, #0]
 80035ee:	6813      	ldreq	r3, [r2, #0]
 80035f0:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80035f4:	6013      	streq	r3, [r2, #0]
 80035f6:	e7e5      	b.n	80035c4 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035f8:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fc:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035fe:	d102      	bne.n	8003606 <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003600:	b2ed      	uxtb	r5, r5
 8003602:	611d      	str	r5, [r3, #16]
 8003604:	e7df      	b.n	80035c6 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003606:	0a2a      	lsrs	r2, r5, #8
 8003608:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800360a:	4639      	mov	r1, r7
 800360c:	4642      	mov	r2, r8
 800360e:	4620      	mov	r0, r4
 8003610:	f7ff ff88 	bl	8003524 <I2C_WaitOnTXEFlagUntilTimeout>
 8003614:	2800      	cmp	r0, #0
 8003616:	d1e6      	bne.n	80035e6 <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	e7f1      	b.n	8003600 <I2C_RequestMemoryWrite+0x90>
 800361c:	00010002 	.word	0x00010002

08003620 <I2C_RequestMemoryRead>:
{
 8003620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003624:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003626:	6803      	ldr	r3, [r0, #0]
{
 8003628:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003630:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003632:	681a      	ldr	r2, [r3, #0]
{
 8003634:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800363c:	601a      	str	r2, [r3, #0]
{
 800363e:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003640:	463b      	mov	r3, r7
 8003642:	f8cd 8000 	str.w	r8, [sp]
 8003646:	2200      	movs	r2, #0
 8003648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 800364c:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800364e:	f7ff fea7 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	b148      	cbz	r0, 800366a <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003656:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003658:	05db      	lsls	r3, r3, #23
 800365a:	d502      	bpl.n	8003662 <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800365c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003660:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003662:	2003      	movs	r0, #3
}
 8003664:	b004      	add	sp, #16
 8003666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800366a:	fa5f f986 	uxtb.w	r9, r6
 800366e:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8003672:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003674:	492a      	ldr	r1, [pc, #168]	; (8003720 <I2C_RequestMemoryRead+0x100>)
 8003676:	4643      	mov	r3, r8
 8003678:	463a      	mov	r2, r7
 800367a:	4620      	mov	r0, r4
 800367c:	f7ff fec2 	bl	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003680:	b108      	cbz	r0, 8003686 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 8003682:	2001      	movs	r0, #1
 8003684:	e7ee      	b.n	8003664 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	9003      	str	r0, [sp, #12]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	9203      	str	r2, [sp, #12]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003692:	4642      	mov	r2, r8
 8003694:	4639      	mov	r1, r7
 8003696:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003698:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800369a:	f7ff ff43 	bl	8003524 <I2C_WaitOnTXEFlagUntilTimeout>
 800369e:	b140      	cbz	r0, 80036b2 <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036a2:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a4:	bf01      	itttt	eq
 80036a6:	6822      	ldreq	r2, [r4, #0]
 80036a8:	6813      	ldreq	r3, [r2, #0]
 80036aa:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80036ae:	6013      	streq	r3, [r2, #0]
 80036b0:	e7e7      	b.n	8003682 <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036b2:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b6:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036b8:	d11a      	bne.n	80036f0 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036ba:	b2ed      	uxtb	r5, r5
 80036bc:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036be:	4642      	mov	r2, r8
 80036c0:	4639      	mov	r1, r7
 80036c2:	4620      	mov	r0, r4
 80036c4:	f7ff ff2e 	bl	8003524 <I2C_WaitOnTXEFlagUntilTimeout>
 80036c8:	2800      	cmp	r0, #0
 80036ca:	d1e9      	bne.n	80036a0 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036cc:	6822      	ldr	r2, [r4, #0]
 80036ce:	6813      	ldr	r3, [r2, #0]
 80036d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d4:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036da:	4602      	mov	r2, r0
 80036dc:	f8cd 8000 	str.w	r8, [sp]
 80036e0:	463b      	mov	r3, r7
 80036e2:	4620      	mov	r0, r4
 80036e4:	f7ff fe5c 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 80036e8:	6822      	ldr	r2, [r4, #0]
 80036ea:	b160      	cbz	r0, 8003706 <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036ec:	6813      	ldr	r3, [r2, #0]
 80036ee:	e7b3      	b.n	8003658 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036f0:	0a2a      	lsrs	r2, r5, #8
 80036f2:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f4:	4639      	mov	r1, r7
 80036f6:	4642      	mov	r2, r8
 80036f8:	4620      	mov	r0, r4
 80036fa:	f7ff ff13 	bl	8003524 <I2C_WaitOnTXEFlagUntilTimeout>
 80036fe:	2800      	cmp	r0, #0
 8003700:	d1ce      	bne.n	80036a0 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	e7d9      	b.n	80036ba <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003706:	f049 0301 	orr.w	r3, r9, #1
 800370a:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800370c:	4904      	ldr	r1, [pc, #16]	; (8003720 <I2C_RequestMemoryRead+0x100>)
 800370e:	4643      	mov	r3, r8
 8003710:	463a      	mov	r2, r7
 8003712:	4620      	mov	r0, r4
 8003714:	f7ff fe76 	bl	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8003718:	3800      	subs	r0, #0
 800371a:	bf18      	it	ne
 800371c:	2001      	movne	r0, #1
 800371e:	e7a1      	b.n	8003664 <I2C_RequestMemoryRead+0x44>
 8003720:	00010002 	.word	0x00010002

08003724 <HAL_I2C_MspInit>:
}
 8003724:	4770      	bx	lr
	...

08003728 <HAL_I2C_Init>:
{
 8003728:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800372a:	4604      	mov	r4, r0
 800372c:	b908      	cbnz	r0, 8003732 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800372e:	2001      	movs	r0, #1
}
 8003730:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003732:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003736:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800373a:	b91b      	cbnz	r3, 8003744 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800373c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003740:	f7ff fff0 	bl	8003724 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003744:	2324      	movs	r3, #36	; 0x24
 8003746:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800375a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003762:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003764:	f000 fe2a 	bl	80043bc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003768:	4b3f      	ldr	r3, [pc, #252]	; (8003868 <HAL_I2C_Init+0x140>)
 800376a:	6865      	ldr	r5, [r4, #4]
 800376c:	429d      	cmp	r5, r3
 800376e:	bf94      	ite	ls
 8003770:	4b3e      	ldrls	r3, [pc, #248]	; (800386c <HAL_I2C_Init+0x144>)
 8003772:	4b3f      	ldrhi	r3, [pc, #252]	; (8003870 <HAL_I2C_Init+0x148>)
 8003774:	4298      	cmp	r0, r3
 8003776:	bf8c      	ite	hi
 8003778:	2300      	movhi	r3, #0
 800377a:	2301      	movls	r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1d6      	bne.n	800372e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003780:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003782:	4e39      	ldr	r6, [pc, #228]	; (8003868 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003784:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8003786:	493b      	ldr	r1, [pc, #236]	; (8003874 <HAL_I2C_Init+0x14c>)
 8003788:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800378c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003790:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003792:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003794:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003796:	bf88      	it	hi
 8003798:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 800379c:	6a13      	ldr	r3, [r2, #32]
 800379e:	bf88      	it	hi
 80037a0:	4371      	mulhi	r1, r6
 80037a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037a6:	bf84      	itt	hi
 80037a8:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80037ac:	fbb1 f1f6 	udivhi	r1, r1, r6
 80037b0:	3101      	adds	r1, #1
 80037b2:	4319      	orrs	r1, r3
 80037b4:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037b6:	69d1      	ldr	r1, [r2, #28]
 80037b8:	1e43      	subs	r3, r0, #1
 80037ba:	482b      	ldr	r0, [pc, #172]	; (8003868 <HAL_I2C_Init+0x140>)
 80037bc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80037c0:	4285      	cmp	r5, r0
 80037c2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80037c6:	d832      	bhi.n	800382e <HAL_I2C_Init+0x106>
 80037c8:	006d      	lsls	r5, r5, #1
 80037ca:	f640 70fc 	movw	r0, #4092	; 0xffc
 80037ce:	fbb3 f3f5 	udiv	r3, r3, r5
 80037d2:	3301      	adds	r3, #1
 80037d4:	4203      	tst	r3, r0
 80037d6:	d042      	beq.n	800385e <HAL_I2C_Init+0x136>
 80037d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037dc:	430b      	orrs	r3, r1
 80037de:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037e0:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80037e4:	6811      	ldr	r1, [r2, #0]
 80037e6:	4303      	orrs	r3, r0
 80037e8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80037ec:	430b      	orrs	r3, r1
 80037ee:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037f0:	6891      	ldr	r1, [r2, #8]
 80037f2:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80037f6:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80037fa:	4303      	orrs	r3, r0
 80037fc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003800:	430b      	orrs	r3, r1
 8003802:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003804:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003808:	68d1      	ldr	r1, [r2, #12]
 800380a:	4303      	orrs	r3, r0
 800380c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003810:	430b      	orrs	r3, r1
 8003812:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003814:	6813      	ldr	r3, [r2, #0]
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800381c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800381e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003820:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003822:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003826:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003828:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800382c:	e780      	b.n	8003730 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800382e:	68a0      	ldr	r0, [r4, #8]
 8003830:	b950      	cbnz	r0, 8003848 <HAL_I2C_Init+0x120>
 8003832:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003836:	fbb3 f3f5 	udiv	r3, r3, r5
 800383a:	3301      	adds	r3, #1
 800383c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003840:	b17b      	cbz	r3, 8003862 <HAL_I2C_Init+0x13a>
 8003842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003846:	e7c9      	b.n	80037dc <HAL_I2C_Init+0xb4>
 8003848:	2019      	movs	r0, #25
 800384a:	4345      	muls	r5, r0
 800384c:	fbb3 f3f5 	udiv	r3, r3, r5
 8003850:	3301      	adds	r3, #1
 8003852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003856:	b123      	cbz	r3, 8003862 <HAL_I2C_Init+0x13a>
 8003858:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800385c:	e7be      	b.n	80037dc <HAL_I2C_Init+0xb4>
 800385e:	2304      	movs	r3, #4
 8003860:	e7bc      	b.n	80037dc <HAL_I2C_Init+0xb4>
 8003862:	2301      	movs	r3, #1
 8003864:	e7ba      	b.n	80037dc <HAL_I2C_Init+0xb4>
 8003866:	bf00      	nop
 8003868:	000186a0 	.word	0x000186a0
 800386c:	001e847f 	.word	0x001e847f
 8003870:	003d08ff 	.word	0x003d08ff
 8003874:	000f4240 	.word	0x000f4240

08003878 <HAL_I2C_MspDeInit>:
 8003878:	4770      	bx	lr

0800387a <HAL_I2C_DeInit>:
{
 800387a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800387c:	4604      	mov	r4, r0
 800387e:	b198      	cbz	r0, 80038a8 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8003880:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003882:	2324      	movs	r3, #36	; 0x24
 8003884:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003888:	6813      	ldr	r3, [r2, #0]
 800388a:	f023 0301 	bic.w	r3, r3, #1
 800388e:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003890:	f7ff fff2 	bl	8003878 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003894:	2000      	movs	r0, #0
 8003896:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 8003898:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 800389c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038a0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038a2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80038a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80038a8:	2001      	movs	r0, #1
 80038aa:	e7fc      	b.n	80038a6 <HAL_I2C_DeInit+0x2c>

080038ac <HAL_I2C_Mem_Write>:
{
 80038ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80038b0:	4604      	mov	r4, r0
 80038b2:	4699      	mov	r9, r3
 80038b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80038b6:	460f      	mov	r7, r1
 80038b8:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80038ba:	f7ff f915 	bl	8002ae8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80038be:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80038c2:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80038c4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c6:	d003      	beq.n	80038d0 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80038c8:	2002      	movs	r0, #2
}
 80038ca:	b003      	add	sp, #12
 80038cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038d0:	9000      	str	r0, [sp, #0]
 80038d2:	493c      	ldr	r1, [pc, #240]	; (80039c4 <HAL_I2C_Mem_Write+0x118>)
 80038d4:	2319      	movs	r3, #25
 80038d6:	2201      	movs	r2, #1
 80038d8:	4620      	mov	r0, r4
 80038da:	f7ff fd61 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 80038de:	2800      	cmp	r0, #0
 80038e0:	d1f2      	bne.n	80038c8 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80038e2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d0ee      	beq.n	80038c8 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038ea:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80038ec:	2301      	movs	r3, #1
 80038ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038f2:	6803      	ldr	r3, [r0, #0]
 80038f4:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80038f6:	bf5e      	ittt	pl
 80038f8:	6803      	ldrpl	r3, [r0, #0]
 80038fa:	f043 0301 	orrpl.w	r3, r3, #1
 80038fe:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003900:	6803      	ldr	r3, [r0, #0]
 8003902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003906:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003908:	2321      	movs	r3, #33	; 0x21
 800390a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800390e:	2340      	movs	r3, #64	; 0x40
 8003910:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003914:	2300      	movs	r3, #0
 8003916:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800391a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800391c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8003920:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003922:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003924:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003926:	4b28      	ldr	r3, [pc, #160]	; (80039c8 <HAL_I2C_Mem_Write+0x11c>)
 8003928:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800392a:	e9cd 6500 	strd	r6, r5, [sp]
 800392e:	464b      	mov	r3, r9
 8003930:	4642      	mov	r2, r8
 8003932:	4639      	mov	r1, r7
 8003934:	4620      	mov	r0, r4
 8003936:	f7ff fe1b 	bl	8003570 <I2C_RequestMemoryWrite>
 800393a:	2800      	cmp	r0, #0
 800393c:	d02a      	beq.n	8003994 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 800393e:	2001      	movs	r0, #1
 8003940:	e7c3      	b.n	80038ca <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003942:	f7ff fdef 	bl	8003524 <I2C_WaitOnTXEFlagUntilTimeout>
 8003946:	b140      	cbz	r0, 800395a <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003948:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800394a:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394c:	bf01      	itttt	eq
 800394e:	6822      	ldreq	r2, [r4, #0]
 8003950:	6813      	ldreq	r3, [r2, #0]
 8003952:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003956:	6013      	streq	r3, [r2, #0]
 8003958:	e7f1      	b.n	800393e <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800395a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800395c:	6827      	ldr	r7, [r4, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003964:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8003966:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003968:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800396a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800396c:	3a01      	subs	r2, #1
 800396e:	b292      	uxth	r2, r2
 8003970:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003972:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8003974:	1e48      	subs	r0, r1, #1
 8003976:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003978:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800397a:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800397c:	d50a      	bpl.n	8003994 <HAL_I2C_Mem_Write+0xe8>
 800397e:	b148      	cbz	r0, 8003994 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003980:	785a      	ldrb	r2, [r3, #1]
 8003982:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8003984:	3302      	adds	r3, #2
 8003986:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003988:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800398a:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 800398c:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800398e:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8003990:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003992:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003994:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003996:	462a      	mov	r2, r5
 8003998:	4631      	mov	r1, r6
 800399a:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1d0      	bne.n	8003942 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a0:	f7ff fd9a 	bl	80034d8 <I2C_WaitOnBTFFlagUntilTimeout>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	d1cf      	bne.n	8003948 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a8:	6822      	ldr	r2, [r4, #0]
 80039aa:	6813      	ldr	r3, [r2, #0]
 80039ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039b0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80039b2:	2320      	movs	r3, #32
 80039b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80039b8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039bc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80039c0:	e783      	b.n	80038ca <HAL_I2C_Mem_Write+0x1e>
 80039c2:	bf00      	nop
 80039c4:	00100002 	.word	0x00100002
 80039c8:	ffff0000 	.word	0xffff0000

080039cc <HAL_I2C_Mem_Read>:
{
 80039cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039d0:	4604      	mov	r4, r0
 80039d2:	b087      	sub	sp, #28
 80039d4:	4699      	mov	r9, r3
 80039d6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80039d8:	460d      	mov	r5, r1
 80039da:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80039dc:	f7ff f884 	bl	8002ae8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80039e4:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80039e6:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e8:	d004      	beq.n	80039f4 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80039ea:	2502      	movs	r5, #2
}
 80039ec:	4628      	mov	r0, r5
 80039ee:	b007      	add	sp, #28
 80039f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039f4:	9000      	str	r0, [sp, #0]
 80039f6:	4976      	ldr	r1, [pc, #472]	; (8003bd0 <HAL_I2C_Mem_Read+0x204>)
 80039f8:	2319      	movs	r3, #25
 80039fa:	2201      	movs	r2, #1
 80039fc:	4620      	mov	r0, r4
 80039fe:	f7ff fccf 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d1f1      	bne.n	80039ea <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8003a06:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d0ed      	beq.n	80039ea <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a0e:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8003a10:	2301      	movs	r3, #1
 8003a12:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a16:	6803      	ldr	r3, [r0, #0]
 8003a18:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003a1a:	bf5e      	ittt	pl
 8003a1c:	6803      	ldrpl	r3, [r0, #0]
 8003a1e:	f043 0301 	orrpl.w	r3, r3, #1
 8003a22:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a24:	6803      	ldr	r3, [r0, #0]
 8003a26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a2a:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a2c:	2322      	movs	r3, #34	; 0x22
 8003a2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a32:	2340      	movs	r3, #64	; 0x40
 8003a34:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a3e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a40:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8003a44:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a48:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a4a:	4b62      	ldr	r3, [pc, #392]	; (8003bd4 <HAL_I2C_Mem_Read+0x208>)
 8003a4c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a4e:	4629      	mov	r1, r5
 8003a50:	e9cd 7600 	strd	r7, r6, [sp]
 8003a54:	464b      	mov	r3, r9
 8003a56:	4642      	mov	r2, r8
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f7ff fde1 	bl	8003620 <I2C_RequestMemoryRead>
 8003a5e:	4605      	mov	r5, r0
 8003a60:	b108      	cbz	r0, 8003a66 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8003a62:	2501      	movs	r5, #1
 8003a64:	e7c2      	b.n	80039ec <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8003a66:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a68:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8003a6a:	b9b2      	cbnz	r2, 8003a9a <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6c:	9002      	str	r0, [sp, #8]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	9202      	str	r2, [sp, #8]
 8003a72:	699a      	ldr	r2, [r3, #24]
 8003a74:	9202      	str	r2, [sp, #8]
 8003a76:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7e:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a80:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8003bd8 <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 8003a84:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d12c      	bne.n	8003ae4 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003a90:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a94:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8003a98:	e7a8      	b.n	80039ec <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8003a9a:	2a01      	cmp	r2, #1
 8003a9c:	d10a      	bne.n	8003ab4 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa6:	9003      	str	r0, [sp, #12]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	9203      	str	r2, [sp, #12]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	9203      	str	r2, [sp, #12]
 8003ab0:	9a03      	ldr	r2, [sp, #12]
 8003ab2:	e7e1      	b.n	8003a78 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 8003ab4:	2a02      	cmp	r2, #2
 8003ab6:	d10e      	bne.n	8003ad6 <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003abe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ac6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac8:	9004      	str	r0, [sp, #16]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	9204      	str	r2, [sp, #16]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	9304      	str	r3, [sp, #16]
 8003ad2:	9b04      	ldr	r3, [sp, #16]
 8003ad4:	e7d4      	b.n	8003a80 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad6:	9005      	str	r0, [sp, #20]
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	9205      	str	r2, [sp, #20]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	9305      	str	r3, [sp, #20]
 8003ae0:	9b05      	ldr	r3, [sp, #20]
 8003ae2:	e7cd      	b.n	8003a80 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d856      	bhi.n	8003b96 <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d115      	bne.n	8003b18 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aec:	4632      	mov	r2, r6
 8003aee:	4639      	mov	r1, r7
 8003af0:	4620      	mov	r0, r4
 8003af2:	f7ff fcc2 	bl	800347a <I2C_WaitOnRXNEFlagUntilTimeout>
 8003af6:	2800      	cmp	r0, #0
 8003af8:	d1b3      	bne.n	8003a62 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b00:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b04:	3301      	adds	r3, #1
 8003b06:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003b08:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003b0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003b16:	e7b5      	b.n	8003a84 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 8003b18:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b1a:	9600      	str	r6, [sp, #0]
 8003b1c:	463b      	mov	r3, r7
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	4641      	mov	r1, r8
 8003b24:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8003b26:	d119      	bne.n	8003b5c <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b28:	f7ff fc3a 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	d198      	bne.n	8003a62 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b38:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b3e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003b40:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003b42:	1c53      	adds	r3, r2, #1
 8003b44:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003b46:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003b4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b54:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	7053      	strb	r3, [r2, #1]
 8003b5a:	e7d2      	b.n	8003b02 <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b5c:	f7ff fc20 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	f47f af7e 	bne.w	8003a62 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b74:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b78:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003b7e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003b80:	3b01      	subs	r3, #1
 8003b82:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003b84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	463b      	mov	r3, r7
 8003b90:	4641      	mov	r1, r8
 8003b92:	4620      	mov	r0, r4
 8003b94:	e7c8      	b.n	8003b28 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b96:	4632      	mov	r2, r6
 8003b98:	4639      	mov	r1, r7
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	f7ff fc6d 	bl	800347a <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	f47f af5e 	bne.w	8003a62 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003bb0:	1c53      	adds	r3, r2, #1
 8003bb2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003bb4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003bba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	6959      	ldr	r1, [r3, #20]
 8003bc6:	0749      	lsls	r1, r1, #29
 8003bc8:	f57f af5c 	bpl.w	8003a84 <HAL_I2C_Mem_Read+0xb8>
 8003bcc:	e7c3      	b.n	8003b56 <HAL_I2C_Mem_Read+0x18a>
 8003bce:	bf00      	nop
 8003bd0:	00100002 	.word	0x00100002
 8003bd4:	ffff0000 	.word	0xffff0000
 8003bd8:	00010004 	.word	0x00010004

08003bdc <HAL_I2C_GetState>:
  return hi2c->State;
 8003bdc:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8003be0:	4770      	bx	lr

08003be2 <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003be2:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003be4:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003be8:	01d2      	lsls	r2, r2, #7
 8003bea:	3284      	adds	r2, #132	; 0x84
 8003bec:	1883      	adds	r3, r0, r2
{
 8003bee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003bf2:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003bf4:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003bf6:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003bf8:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003bfc:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8003c00:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003c02:	68c5      	ldr	r5, [r0, #12]
 8003c04:	f10c 0701 	add.w	r7, ip, #1
 8003c08:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003c0c:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003c10:	443d      	add	r5, r7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003c12:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003c14:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8003c18:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003c1a:	68c5      	ldr	r5, [r0, #12]
 8003c1c:	68ce      	ldr	r6, [r1, #12]
 8003c1e:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8003c22:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003c24:	689d      	ldr	r5, [r3, #8]
 8003c26:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8003c2a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003c2c:	68c7      	ldr	r7, [r0, #12]
 8003c2e:	688d      	ldr	r5, [r1, #8]
 8003c30:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8003c34:	3501      	adds	r5, #1
 8003c36:	443d      	add	r5, r7
 8003c38:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8003c3c:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003c3e:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003c40:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003c42:	f025 0507 	bic.w	r5, r5, #7
 8003c46:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003c48:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003c4c:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003c4e:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003c50:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003c54:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003c58:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003c5c:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8003c60:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8003c64:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003c68:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8003c6c:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003c6e:	695d      	ldr	r5, [r3, #20]
 8003c70:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8003c74:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003c76:	694d      	ldr	r5, [r1, #20]
 8003c78:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003c7a:	69dd      	ldr	r5, [r3, #28]
 8003c7c:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8003c80:	f025 0507 	bic.w	r5, r5, #7
 8003c84:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003c86:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8003c8a:	433d      	orrs	r5, r7
 8003c8c:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003c8e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003c90:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003c92:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003c96:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003c98:	b31e      	cbz	r6, 8003ce2 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003c9a:	2e01      	cmp	r6, #1
 8003c9c:	d023      	beq.n	8003ce6 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c9e:	1eb5      	subs	r5, r6, #2
 8003ca0:	2d02      	cmp	r5, #2
 8003ca2:	d922      	bls.n	8003cea <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003ca4:	2e07      	cmp	r6, #7
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2502      	moveq	r5, #2
 8003caa:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003cac:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8003cae:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
 8003cb2:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003cb4:	eba4 040c 	sub.w	r4, r4, ip
 8003cb8:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003cba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003cbc:	436c      	muls	r4, r5
 8003cbe:	436e      	muls	r6, r5
 8003cc0:	3403      	adds	r4, #3
 8003cc2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8003cc6:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003cc8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003cca:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8003cce:	f024 0407 	bic.w	r4, r4, #7
 8003cd2:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003cd4:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003cd6:	5883      	ldr	r3, [r0, r2]
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	5083      	str	r3, [r0, r2]
}
 8003cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8003ce2:	2504      	movs	r5, #4
 8003ce4:	e7e2      	b.n	8003cac <LTDC_SetConfig+0xca>
    tmp = 3U;
 8003ce6:	2503      	movs	r5, #3
 8003ce8:	e7e0      	b.n	8003cac <LTDC_SetConfig+0xca>
    tmp = 2U;
 8003cea:	2502      	movs	r5, #2
 8003cec:	e7de      	b.n	8003cac <LTDC_SetConfig+0xca>

08003cee <HAL_LTDC_MspInit>:
}
 8003cee:	4770      	bx	lr

08003cf0 <HAL_LTDC_Init>:
{
 8003cf0:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d063      	beq.n	8003dc0 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003cf8:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003cfc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d00:	b91b      	cbnz	r3, 8003d0a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8003d02:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003d06:	f7ff fff2 	bl	8003cee <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d10:	6823      	ldr	r3, [r4, #0]
 8003d12:	699a      	ldr	r2, [r3, #24]
 8003d14:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003d18:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d1a:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8003d1e:	4302      	orrs	r2, r0
 8003d20:	68e0      	ldr	r0, [r4, #12]
 8003d22:	6999      	ldr	r1, [r3, #24]
 8003d24:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d26:	6920      	ldr	r0, [r4, #16]
 8003d28:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	4924      	ldr	r1, [pc, #144]	; (8003dc4 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003d32:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d34:	400a      	ands	r2, r1
 8003d36:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003d3e:	69a0      	ldr	r0, [r4, #24]
 8003d40:	4302      	orrs	r2, r0
 8003d42:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003d44:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003d46:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003d48:	400a      	ands	r2, r1
 8003d4a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003d52:	6a20      	ldr	r0, [r4, #32]
 8003d54:	4302      	orrs	r2, r0
 8003d56:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003d58:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003d5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003d5c:	400a      	ands	r2, r1
 8003d5e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003d66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003d68:	4302      	orrs	r2, r0
 8003d6a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	4011      	ands	r1, r2
 8003d70:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003d72:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003d74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003d76:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003d7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003d82:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003d86:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003d8a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8003d8e:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003d90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d92:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8003d96:	430a      	orrs	r2, r1
 8003d98:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003d9c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003da0:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003da4:	f042 0206 	orr.w	r2, r2, #6
 8003da8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003daa:	699a      	ldr	r2, [r3, #24]
 8003dac:	f042 0201 	orr.w	r2, r2, #1
 8003db0:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003db2:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8003db4:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003db6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003dba:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8003dbe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	e7fc      	b.n	8003dbe <HAL_LTDC_Init+0xce>
 8003dc4:	f000f800 	.word	0xf000f800

08003dc8 <HAL_LTDC_ConfigLayer>:
{
 8003dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8003dcc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003dd0:	2b01      	cmp	r3, #1
{
 8003dd2:	4606      	mov	r6, r0
 8003dd4:	460f      	mov	r7, r1
 8003dd6:	4694      	mov	ip, r2
 8003dd8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8003ddc:	d01f      	beq.n	8003e1e <HAL_LTDC_ConfigLayer+0x56>
 8003dde:	f04f 0801 	mov.w	r8, #1
 8003de2:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003de6:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003dea:	2434      	movs	r4, #52	; 0x34
 8003dec:	460d      	mov	r5, r1
 8003dee:	fb04 6402 	mla	r4, r4, r2, r6
 8003df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003df4:	3438      	adds	r4, #56	; 0x38
 8003df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e00:	682b      	ldr	r3, [r5, #0]
 8003e02:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003e04:	4630      	mov	r0, r6
 8003e06:	4662      	mov	r2, ip
 8003e08:	4639      	mov	r1, r7
 8003e0a:	f7ff feea 	bl	8003be2 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003e0e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8003e10:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003e12:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003e16:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003e1a:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8003e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003e24 <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 8003e24:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	f04f 0302 	mov.w	r3, #2
 8003e2e:	d00c      	beq.n	8003e4a <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003e30:	4a07      	ldr	r2, [pc, #28]	; (8003e50 <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003e32:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003e36:	6993      	ldr	r3, [r2, #24]
 8003e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3c:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003e44:	2300      	movs	r3, #0
 8003e46:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8003e4a:	4618      	mov	r0, r3
}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40016800 	.word	0x40016800

08003e54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e56:	2300      	movs	r3, #0
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e5c:	4d18      	ldr	r5, [pc, #96]	; (8003ec0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e70:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <HAL_PWREx_EnableOverDrive+0x70>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 8003e76:	f7fe fe37 	bl	8002ae8 <HAL_GetTick>
 8003e7a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e7c:	686b      	ldr	r3, [r5, #4]
 8003e7e:	03da      	lsls	r2, r3, #15
 8003e80:	d50b      	bpl.n	8003e9a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e82:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e84:	4d0e      	ldr	r5, [pc, #56]	; (8003ec0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e86:	2201      	movs	r2, #1
 8003e88:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8003e8a:	f7fe fe2d 	bl	8002ae8 <HAL_GetTick>
 8003e8e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e90:	686b      	ldr	r3, [r5, #4]
 8003e92:	039b      	lsls	r3, r3, #14
 8003e94:	d50a      	bpl.n	8003eac <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003e96:	2000      	movs	r0, #0
 8003e98:	e006      	b.n	8003ea8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e9a:	f7fe fe25 	bl	8002ae8 <HAL_GetTick>
 8003e9e:	1b00      	subs	r0, r0, r4
 8003ea0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003ea4:	d9ea      	bls.n	8003e7c <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8003ea6:	2003      	movs	r0, #3
}
 8003ea8:	b003      	add	sp, #12
 8003eaa:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003eac:	f7fe fe1c 	bl	8002ae8 <HAL_GetTick>
 8003eb0:	1b00      	subs	r0, r0, r4
 8003eb2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003eb6:	d9eb      	bls.n	8003e90 <HAL_PWREx_EnableOverDrive+0x3c>
 8003eb8:	e7f5      	b.n	8003ea6 <HAL_PWREx_EnableOverDrive+0x52>
 8003eba:	bf00      	nop
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	40007000 	.word	0x40007000
 8003ec4:	420e0000 	.word	0x420e0000

08003ec8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ecc:	4604      	mov	r4, r0
 8003ece:	b340      	cbz	r0, 8003f22 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ed0:	6803      	ldr	r3, [r0, #0]
 8003ed2:	07dd      	lsls	r5, r3, #31
 8003ed4:	d410      	bmi.n	8003ef8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	0798      	lsls	r0, r3, #30
 8003eda:	d45e      	bmi.n	8003f9a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	071a      	lsls	r2, r3, #28
 8003ee0:	f100 80a0 	bmi.w	8004024 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	075b      	lsls	r3, r3, #29
 8003ee8:	f100 80c0 	bmi.w	800406c <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eec:	69a0      	ldr	r0, [r4, #24]
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	f040 8128 	bne.w	8004144 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	e02b      	b.n	8003f50 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ef8:	4b8f      	ldr	r3, [pc, #572]	; (8004138 <HAL_RCC_OscConfig+0x270>)
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	f002 020c 	and.w	r2, r2, #12
 8003f00:	2a04      	cmp	r2, #4
 8003f02:	d007      	beq.n	8003f14 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f0a:	2a08      	cmp	r2, #8
 8003f0c:	d10b      	bne.n	8003f26 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	0251      	lsls	r1, r2, #9
 8003f12:	d508      	bpl.n	8003f26 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f14:	4b88      	ldr	r3, [pc, #544]	; (8004138 <HAL_RCC_OscConfig+0x270>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	039a      	lsls	r2, r3, #14
 8003f1a:	d5dc      	bpl.n	8003ed6 <HAL_RCC_OscConfig+0xe>
 8003f1c:	6863      	ldr	r3, [r4, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1d9      	bne.n	8003ed6 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8003f22:	2001      	movs	r0, #1
 8003f24:	e014      	b.n	8003f50 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f26:	6862      	ldr	r2, [r4, #4]
 8003f28:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003f2c:	d113      	bne.n	8003f56 <HAL_RCC_OscConfig+0x8e>
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003f36:	f7fe fdd7 	bl	8002ae8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3a:	4e7f      	ldr	r6, [pc, #508]	; (8004138 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8003f3c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	6833      	ldr	r3, [r6, #0]
 8003f40:	039b      	lsls	r3, r3, #14
 8003f42:	d4c8      	bmi.n	8003ed6 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fe fdd0 	bl	8002ae8 <HAL_GetTick>
 8003f48:	1b40      	subs	r0, r0, r5
 8003f4a:	2864      	cmp	r0, #100	; 0x64
 8003f4c:	d9f7      	bls.n	8003f3e <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8003f4e:	2003      	movs	r0, #3
}
 8003f50:	b002      	add	sp, #8
 8003f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f56:	4d78      	ldr	r5, [pc, #480]	; (8004138 <HAL_RCC_OscConfig+0x270>)
 8003f58:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8003f5c:	682b      	ldr	r3, [r5, #0]
 8003f5e:	d107      	bne.n	8003f70 <HAL_RCC_OscConfig+0xa8>
 8003f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f64:	602b      	str	r3, [r5, #0]
 8003f66:	682b      	ldr	r3, [r5, #0]
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f6e:	e7e2      	b.n	8003f36 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f74:	602b      	str	r3, [r5, #0]
 8003f76:	682b      	ldr	r3, [r5, #0]
 8003f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f7c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f7e:	2a00      	cmp	r2, #0
 8003f80:	d1d9      	bne.n	8003f36 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8003f82:	f7fe fdb1 	bl	8002ae8 <HAL_GetTick>
 8003f86:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f88:	682b      	ldr	r3, [r5, #0]
 8003f8a:	039f      	lsls	r7, r3, #14
 8003f8c:	d5a3      	bpl.n	8003ed6 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f8e:	f7fe fdab 	bl	8002ae8 <HAL_GetTick>
 8003f92:	1b80      	subs	r0, r0, r6
 8003f94:	2864      	cmp	r0, #100	; 0x64
 8003f96:	d9f7      	bls.n	8003f88 <HAL_RCC_OscConfig+0xc0>
 8003f98:	e7d9      	b.n	8003f4e <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f9a:	4b67      	ldr	r3, [pc, #412]	; (8004138 <HAL_RCC_OscConfig+0x270>)
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	f012 0f0c 	tst.w	r2, #12
 8003fa2:	d007      	beq.n	8003fb4 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003faa:	2a08      	cmp	r2, #8
 8003fac:	d111      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	025e      	lsls	r6, r3, #9
 8003fb2:	d40e      	bmi.n	8003fd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb4:	4a60      	ldr	r2, [pc, #384]	; (8004138 <HAL_RCC_OscConfig+0x270>)
 8003fb6:	6813      	ldr	r3, [r2, #0]
 8003fb8:	079d      	lsls	r5, r3, #30
 8003fba:	d502      	bpl.n	8003fc2 <HAL_RCC_OscConfig+0xfa>
 8003fbc:	68e3      	ldr	r3, [r4, #12]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d1af      	bne.n	8003f22 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc2:	6813      	ldr	r3, [r2, #0]
 8003fc4:	6921      	ldr	r1, [r4, #16]
 8003fc6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003fca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003fce:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd0:	e784      	b.n	8003edc <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fd2:	68e2      	ldr	r2, [r4, #12]
 8003fd4:	4b59      	ldr	r3, [pc, #356]	; (800413c <HAL_RCC_OscConfig+0x274>)
 8003fd6:	b1b2      	cbz	r2, 8004006 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003fdc:	f7fe fd84 	bl	8002ae8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	4d55      	ldr	r5, [pc, #340]	; (8004138 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8003fe2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	0798      	lsls	r0, r3, #30
 8003fe8:	d507      	bpl.n	8003ffa <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fea:	682b      	ldr	r3, [r5, #0]
 8003fec:	6922      	ldr	r2, [r4, #16]
 8003fee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003ff2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003ff6:	602b      	str	r3, [r5, #0]
 8003ff8:	e770      	b.n	8003edc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ffa:	f7fe fd75 	bl	8002ae8 <HAL_GetTick>
 8003ffe:	1b80      	subs	r0, r0, r6
 8004000:	2802      	cmp	r0, #2
 8004002:	d9ef      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x11c>
 8004004:	e7a3      	b.n	8003f4e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8004006:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004008:	f7fe fd6e 	bl	8002ae8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400c:	4e4a      	ldr	r6, [pc, #296]	; (8004138 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800400e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004010:	6833      	ldr	r3, [r6, #0]
 8004012:	0799      	lsls	r1, r3, #30
 8004014:	f57f af62 	bpl.w	8003edc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004018:	f7fe fd66 	bl	8002ae8 <HAL_GetTick>
 800401c:	1b40      	subs	r0, r0, r5
 800401e:	2802      	cmp	r0, #2
 8004020:	d9f6      	bls.n	8004010 <HAL_RCC_OscConfig+0x148>
 8004022:	e794      	b.n	8003f4e <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004024:	6962      	ldr	r2, [r4, #20]
 8004026:	4b45      	ldr	r3, [pc, #276]	; (800413c <HAL_RCC_OscConfig+0x274>)
 8004028:	b182      	cbz	r2, 800404c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800402a:	2201      	movs	r2, #1
 800402c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004030:	f7fe fd5a 	bl	8002ae8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004034:	4e40      	ldr	r6, [pc, #256]	; (8004138 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8004036:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004038:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800403a:	079f      	lsls	r7, r3, #30
 800403c:	f53f af52 	bmi.w	8003ee4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004040:	f7fe fd52 	bl	8002ae8 <HAL_GetTick>
 8004044:	1b40      	subs	r0, r0, r5
 8004046:	2802      	cmp	r0, #2
 8004048:	d9f6      	bls.n	8004038 <HAL_RCC_OscConfig+0x170>
 800404a:	e780      	b.n	8003f4e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800404c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004050:	f7fe fd4a 	bl	8002ae8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004054:	4e38      	ldr	r6, [pc, #224]	; (8004138 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8004056:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004058:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800405a:	0798      	lsls	r0, r3, #30
 800405c:	f57f af42 	bpl.w	8003ee4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004060:	f7fe fd42 	bl	8002ae8 <HAL_GetTick>
 8004064:	1b40      	subs	r0, r0, r5
 8004066:	2802      	cmp	r0, #2
 8004068:	d9f6      	bls.n	8004058 <HAL_RCC_OscConfig+0x190>
 800406a:	e770      	b.n	8003f4e <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800406c:	4b32      	ldr	r3, [pc, #200]	; (8004138 <HAL_RCC_OscConfig+0x270>)
 800406e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004070:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8004074:	d128      	bne.n	80040c8 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004076:	9201      	str	r2, [sp, #4]
 8004078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800407a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800407e:	641a      	str	r2, [r3, #64]	; 0x40
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800408a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408c:	4d2c      	ldr	r5, [pc, #176]	; (8004140 <HAL_RCC_OscConfig+0x278>)
 800408e:	682b      	ldr	r3, [r5, #0]
 8004090:	05d9      	lsls	r1, r3, #23
 8004092:	d51b      	bpl.n	80040cc <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004094:	68a3      	ldr	r3, [r4, #8]
 8004096:	4d28      	ldr	r5, [pc, #160]	; (8004138 <HAL_RCC_OscConfig+0x270>)
 8004098:	2b01      	cmp	r3, #1
 800409a:	d127      	bne.n	80040ec <HAL_RCC_OscConfig+0x224>
 800409c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80040a4:	f7fe fd20 	bl	8002ae8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a8:	4e23      	ldr	r6, [pc, #140]	; (8004138 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80040aa:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ac:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80040b2:	079b      	lsls	r3, r3, #30
 80040b4:	d539      	bpl.n	800412a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80040b6:	2f00      	cmp	r7, #0
 80040b8:	f43f af18 	beq.w	8003eec <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80040bc:	4a1e      	ldr	r2, [pc, #120]	; (8004138 <HAL_RCC_OscConfig+0x270>)
 80040be:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80040c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6413      	str	r3, [r2, #64]	; 0x40
 80040c6:	e711      	b.n	8003eec <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80040c8:	2700      	movs	r7, #0
 80040ca:	e7df      	b.n	800408c <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040cc:	682b      	ldr	r3, [r5, #0]
 80040ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80040d4:	f7fe fd08 	bl	8002ae8 <HAL_GetTick>
 80040d8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040da:	682b      	ldr	r3, [r5, #0]
 80040dc:	05da      	lsls	r2, r3, #23
 80040de:	d4d9      	bmi.n	8004094 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e0:	f7fe fd02 	bl	8002ae8 <HAL_GetTick>
 80040e4:	1b80      	subs	r0, r0, r6
 80040e6:	2802      	cmp	r0, #2
 80040e8:	d9f7      	bls.n	80040da <HAL_RCC_OscConfig+0x212>
 80040ea:	e730      	b.n	8003f4e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ec:	2b05      	cmp	r3, #5
 80040ee:	d104      	bne.n	80040fa <HAL_RCC_OscConfig+0x232>
 80040f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80040f2:	f043 0304 	orr.w	r3, r3, #4
 80040f6:	672b      	str	r3, [r5, #112]	; 0x70
 80040f8:	e7d0      	b.n	800409c <HAL_RCC_OscConfig+0x1d4>
 80040fa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	672a      	str	r2, [r5, #112]	; 0x70
 8004102:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8004104:	f022 0204 	bic.w	r2, r2, #4
 8004108:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1ca      	bne.n	80040a4 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 800410e:	f7fe fceb 	bl	8002ae8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004112:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004116:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004118:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800411a:	0798      	lsls	r0, r3, #30
 800411c:	d5cb      	bpl.n	80040b6 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fe fce3 	bl	8002ae8 <HAL_GetTick>
 8004122:	1b80      	subs	r0, r0, r6
 8004124:	4540      	cmp	r0, r8
 8004126:	d9f7      	bls.n	8004118 <HAL_RCC_OscConfig+0x250>
 8004128:	e711      	b.n	8003f4e <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800412a:	f7fe fcdd 	bl	8002ae8 <HAL_GetTick>
 800412e:	1b40      	subs	r0, r0, r5
 8004130:	4540      	cmp	r0, r8
 8004132:	d9bd      	bls.n	80040b0 <HAL_RCC_OscConfig+0x1e8>
 8004134:	e70b      	b.n	8003f4e <HAL_RCC_OscConfig+0x86>
 8004136:	bf00      	nop
 8004138:	40023800 	.word	0x40023800
 800413c:	42470000 	.word	0x42470000
 8004140:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004144:	4d36      	ldr	r5, [pc, #216]	; (8004220 <HAL_RCC_OscConfig+0x358>)
 8004146:	68ab      	ldr	r3, [r5, #8]
 8004148:	f003 030c 	and.w	r3, r3, #12
 800414c:	2b08      	cmp	r3, #8
 800414e:	d03d      	beq.n	80041cc <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004150:	4b34      	ldr	r3, [pc, #208]	; (8004224 <HAL_RCC_OscConfig+0x35c>)
 8004152:	2200      	movs	r2, #0
 8004154:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004156:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004158:	d12b      	bne.n	80041b2 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 800415a:	f7fe fcc5 	bl	8002ae8 <HAL_GetTick>
 800415e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	0199      	lsls	r1, r3, #6
 8004164:	d41f      	bmi.n	80041a6 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004166:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800416a:	4313      	orrs	r3, r2
 800416c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800416e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004172:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004174:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004178:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800417a:	0852      	lsrs	r2, r2, #1
 800417c:	3a01      	subs	r2, #1
 800417e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004182:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004184:	4b27      	ldr	r3, [pc, #156]	; (8004224 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004186:	4d26      	ldr	r5, [pc, #152]	; (8004220 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8004188:	2201      	movs	r2, #1
 800418a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800418c:	f7fe fcac 	bl	8002ae8 <HAL_GetTick>
 8004190:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004192:	682b      	ldr	r3, [r5, #0]
 8004194:	019a      	lsls	r2, r3, #6
 8004196:	f53f aead 	bmi.w	8003ef4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800419a:	f7fe fca5 	bl	8002ae8 <HAL_GetTick>
 800419e:	1b00      	subs	r0, r0, r4
 80041a0:	2802      	cmp	r0, #2
 80041a2:	d9f6      	bls.n	8004192 <HAL_RCC_OscConfig+0x2ca>
 80041a4:	e6d3      	b.n	8003f4e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a6:	f7fe fc9f 	bl	8002ae8 <HAL_GetTick>
 80041aa:	1b80      	subs	r0, r0, r6
 80041ac:	2802      	cmp	r0, #2
 80041ae:	d9d7      	bls.n	8004160 <HAL_RCC_OscConfig+0x298>
 80041b0:	e6cd      	b.n	8003f4e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80041b2:	f7fe fc99 	bl	8002ae8 <HAL_GetTick>
 80041b6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b8:	682b      	ldr	r3, [r5, #0]
 80041ba:	019b      	lsls	r3, r3, #6
 80041bc:	f57f ae9a 	bpl.w	8003ef4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fe fc92 	bl	8002ae8 <HAL_GetTick>
 80041c4:	1b00      	subs	r0, r0, r4
 80041c6:	2802      	cmp	r0, #2
 80041c8:	d9f6      	bls.n	80041b8 <HAL_RCC_OscConfig+0x2f0>
 80041ca:	e6c0      	b.n	8003f4e <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041cc:	2801      	cmp	r0, #1
 80041ce:	f43f aebf 	beq.w	8003f50 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 80041d2:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d4:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d6:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041da:	4291      	cmp	r1, r2
 80041dc:	f47f aea1 	bne.w	8003f22 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e0:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e6:	428a      	cmp	r2, r1
 80041e8:	f47f ae9b 	bne.w	8003f22 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ee:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80041f2:	401a      	ands	r2, r3
 80041f4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80041f8:	f47f ae93 	bne.w	8003f22 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80041fe:	0852      	lsrs	r2, r2, #1
 8004200:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004204:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004206:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800420a:	f47f ae8a 	bne.w	8003f22 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800420e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004210:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004214:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8004218:	f43f ae6c 	beq.w	8003ef4 <HAL_RCC_OscConfig+0x2c>
 800421c:	e681      	b.n	8003f22 <HAL_RCC_OscConfig+0x5a>
 800421e:	bf00      	nop
 8004220:	40023800 	.word	0x40023800
 8004224:	42470000 	.word	0x42470000

08004228 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004228:	4913      	ldr	r1, [pc, #76]	; (8004278 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800422a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800422c:	688b      	ldr	r3, [r1, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	2b04      	cmp	r3, #4
 8004234:	d01c      	beq.n	8004270 <HAL_RCC_GetSysClockFreq+0x48>
 8004236:	2b08      	cmp	r3, #8
 8004238:	d11c      	bne.n	8004274 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800423a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800423c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800423e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004240:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004244:	bf14      	ite	ne
 8004246:	480d      	ldrne	r0, [pc, #52]	; (800427c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004248:	480d      	ldreq	r0, [pc, #52]	; (8004280 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800424a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800424e:	bf18      	it	ne
 8004250:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004252:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004256:	fba1 0100 	umull	r0, r1, r1, r0
 800425a:	f7fc f819 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800425e:	4b06      	ldr	r3, [pc, #24]	; (8004278 <HAL_RCC_GetSysClockFreq+0x50>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004266:	3301      	adds	r3, #1
 8004268:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800426a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800426e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004270:	4802      	ldr	r0, [pc, #8]	; (800427c <HAL_RCC_GetSysClockFreq+0x54>)
 8004272:	e7fc      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8004274:	4802      	ldr	r0, [pc, #8]	; (8004280 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8004276:	e7fa      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x46>
 8004278:	40023800 	.word	0x40023800
 800427c:	007a1200 	.word	0x007a1200
 8004280:	00f42400 	.word	0x00f42400

08004284 <HAL_RCC_ClockConfig>:
{
 8004284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004288:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800428a:	4604      	mov	r4, r0
 800428c:	b910      	cbnz	r0, 8004294 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800428e:	2001      	movs	r0, #1
}
 8004290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004294:	4b44      	ldr	r3, [pc, #272]	; (80043a8 <HAL_RCC_ClockConfig+0x124>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	f002 020f 	and.w	r2, r2, #15
 800429c:	428a      	cmp	r2, r1
 800429e:	d328      	bcc.n	80042f2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a0:	6822      	ldr	r2, [r4, #0]
 80042a2:	0797      	lsls	r7, r2, #30
 80042a4:	d42d      	bmi.n	8004302 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a6:	07d0      	lsls	r0, r2, #31
 80042a8:	d441      	bmi.n	800432e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042aa:	4b3f      	ldr	r3, [pc, #252]	; (80043a8 <HAL_RCC_ClockConfig+0x124>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	f002 020f 	and.w	r2, r2, #15
 80042b2:	42aa      	cmp	r2, r5
 80042b4:	d866      	bhi.n	8004384 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b6:	6822      	ldr	r2, [r4, #0]
 80042b8:	0751      	lsls	r1, r2, #29
 80042ba:	d46c      	bmi.n	8004396 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042bc:	0713      	lsls	r3, r2, #28
 80042be:	d507      	bpl.n	80042d0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042c0:	4a3a      	ldr	r2, [pc, #232]	; (80043ac <HAL_RCC_ClockConfig+0x128>)
 80042c2:	6921      	ldr	r1, [r4, #16]
 80042c4:	6893      	ldr	r3, [r2, #8]
 80042c6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80042ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80042ce:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042d0:	f7ff ffaa 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 80042d4:	4b35      	ldr	r3, [pc, #212]	; (80043ac <HAL_RCC_ClockConfig+0x128>)
 80042d6:	4a36      	ldr	r2, [pc, #216]	; (80043b0 <HAL_RCC_ClockConfig+0x12c>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80042de:	5cd3      	ldrb	r3, [r2, r3]
 80042e0:	40d8      	lsrs	r0, r3
 80042e2:	4b34      	ldr	r3, [pc, #208]	; (80043b4 <HAL_RCC_ClockConfig+0x130>)
 80042e4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80042e6:	4b34      	ldr	r3, [pc, #208]	; (80043b8 <HAL_RCC_ClockConfig+0x134>)
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	f7fe fbb5 	bl	8002a58 <HAL_InitTick>
  return HAL_OK;
 80042ee:	2000      	movs	r0, #0
 80042f0:	e7ce      	b.n	8004290 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	b2ca      	uxtb	r2, r1
 80042f4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	428b      	cmp	r3, r1
 80042fe:	d1c6      	bne.n	800428e <HAL_RCC_ClockConfig+0xa>
 8004300:	e7ce      	b.n	80042a0 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004302:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <HAL_RCC_ClockConfig+0x128>)
 8004304:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004308:	bf1e      	ittt	ne
 800430a:	6899      	ldrne	r1, [r3, #8]
 800430c:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8004310:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004312:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004314:	bf42      	ittt	mi
 8004316:	6899      	ldrmi	r1, [r3, #8]
 8004318:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 800431c:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800431e:	4923      	ldr	r1, [pc, #140]	; (80043ac <HAL_RCC_ClockConfig+0x128>)
 8004320:	68a0      	ldr	r0, [r4, #8]
 8004322:	688b      	ldr	r3, [r1, #8]
 8004324:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004328:	4303      	orrs	r3, r0
 800432a:	608b      	str	r3, [r1, #8]
 800432c:	e7bb      	b.n	80042a6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800432e:	6862      	ldr	r2, [r4, #4]
 8004330:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <HAL_RCC_ClockConfig+0x128>)
 8004332:	2a01      	cmp	r2, #1
 8004334:	d11c      	bne.n	8004370 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433c:	d0a7      	beq.n	800428e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800433e:	4e1b      	ldr	r6, [pc, #108]	; (80043ac <HAL_RCC_ClockConfig+0x128>)
 8004340:	68b3      	ldr	r3, [r6, #8]
 8004342:	f023 0303 	bic.w	r3, r3, #3
 8004346:	4313      	orrs	r3, r2
 8004348:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800434a:	f7fe fbcd 	bl	8002ae8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800434e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004352:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004354:	68b3      	ldr	r3, [r6, #8]
 8004356:	6862      	ldr	r2, [r4, #4]
 8004358:	f003 030c 	and.w	r3, r3, #12
 800435c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004360:	d0a3      	beq.n	80042aa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004362:	f7fe fbc1 	bl	8002ae8 <HAL_GetTick>
 8004366:	1bc0      	subs	r0, r0, r7
 8004368:	4540      	cmp	r0, r8
 800436a:	d9f3      	bls.n	8004354 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 800436c:	2003      	movs	r0, #3
 800436e:	e78f      	b.n	8004290 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004370:	1e91      	subs	r1, r2, #2
 8004372:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004374:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004376:	d802      	bhi.n	800437e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004378:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800437c:	e7de      	b.n	800433c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	f013 0f02 	tst.w	r3, #2
 8004382:	e7db      	b.n	800433c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004384:	b2ea      	uxtb	r2, r5
 8004386:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	42ab      	cmp	r3, r5
 8004390:	f47f af7d 	bne.w	800428e <HAL_RCC_ClockConfig+0xa>
 8004394:	e78f      	b.n	80042b6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004396:	4905      	ldr	r1, [pc, #20]	; (80043ac <HAL_RCC_ClockConfig+0x128>)
 8004398:	68e0      	ldr	r0, [r4, #12]
 800439a:	688b      	ldr	r3, [r1, #8]
 800439c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80043a0:	4303      	orrs	r3, r0
 80043a2:	608b      	str	r3, [r1, #8]
 80043a4:	e78a      	b.n	80042bc <HAL_RCC_ClockConfig+0x38>
 80043a6:	bf00      	nop
 80043a8:	40023c00 	.word	0x40023c00
 80043ac:	40023800 	.word	0x40023800
 80043b0:	0800c6c0 	.word	0x0800c6c0
 80043b4:	20000100 	.word	0x20000100
 80043b8:	20000108 	.word	0x20000108

080043bc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043bc:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80043be:	4a05      	ldr	r2, [pc, #20]	; (80043d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80043c6:	5cd3      	ldrb	r3, [r2, r3]
 80043c8:	4a03      	ldr	r2, [pc, #12]	; (80043d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80043ca:	6810      	ldr	r0, [r2, #0]
}
 80043cc:	40d8      	lsrs	r0, r3
 80043ce:	4770      	bx	lr
 80043d0:	40023800 	.word	0x40023800
 80043d4:	0800c6d0 	.word	0x0800c6d0
 80043d8:	20000100 	.word	0x20000100

080043dc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043dc:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80043de:	4a05      	ldr	r2, [pc, #20]	; (80043f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80043e6:	5cd3      	ldrb	r3, [r2, r3]
 80043e8:	4a03      	ldr	r2, [pc, #12]	; (80043f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80043ea:	6810      	ldr	r0, [r2, #0]
}
 80043ec:	40d8      	lsrs	r0, r3
 80043ee:	4770      	bx	lr
 80043f0:	40023800 	.word	0x40023800
 80043f4:	0800c6d0 	.word	0x0800c6d0
 80043f8:	20000100 	.word	0x20000100

080043fc <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80043fc:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043fe:	f013 0f43 	tst.w	r3, #67	; 0x43
{
 8004402:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004404:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004406:	f040 808c 	bne.w	8004522 <HAL_RCCEx_PeriphCLKConfig+0x126>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	f013 0f0c 	tst.w	r3, #12
 8004410:	d045      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004412:	4b8b      	ldr	r3, [pc, #556]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004414:	4d8b      	ldr	r5, [pc, #556]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLSAI_DISABLE();
 8004416:	2200      	movs	r2, #0
 8004418:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 800441a:	f7fe fb65 	bl	8002ae8 <HAL_GetTick>
 800441e:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	009f      	lsls	r7, r3, #2
 8004424:	f100 80cf 	bmi.w	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004428:	6821      	ldr	r1, [r4, #0]
 800442a:	074e      	lsls	r6, r1, #29
 800442c:	d515      	bpl.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800442e:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004432:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004436:	061b      	lsls	r3, r3, #24
 8004438:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800443c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004446:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800444a:	6a22      	ldr	r2, [r4, #32]
 800444c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004450:	3a01      	subs	r2, #1
 8004452:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004456:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800445a:	070d      	lsls	r5, r1, #28
 800445c:	d514      	bpl.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800445e:	4a79      	ldr	r2, [pc, #484]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x248>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004460:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004462:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004466:	6920      	ldr	r0, [r4, #16]
 8004468:	071b      	lsls	r3, r3, #28
 800446a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800446e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004472:	430b      	orrs	r3, r1
 8004474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004478:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800447c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800447e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004482:	430b      	orrs	r3, r1
 8004484:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004488:	4b6d      	ldr	r3, [pc, #436]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800448a:	4e6e      	ldr	r6, [pc, #440]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLSAI_ENABLE();
 800448c:	2201      	movs	r2, #1
 800448e:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 8004490:	f7fe fb2a 	bl	8002ae8 <HAL_GetTick>
 8004494:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004496:	6833      	ldr	r3, [r6, #0]
 8004498:	0098      	lsls	r0, r3, #2
 800449a:	f140 809b 	bpl.w	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	069b      	lsls	r3, r3, #26
 80044a2:	d533      	bpl.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	2300      	movs	r3, #0
 80044a6:	9301      	str	r3, [sp, #4]
 80044a8:	4b66      	ldr	r3, [pc, #408]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x248>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044aa:	4d67      	ldr	r5, [pc, #412]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80044be:	682b      	ldr	r3, [r5, #0]
 80044c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c4:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044c6:	f7fe fb0f 	bl	8002ae8 <HAL_GetTick>
 80044ca:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044cc:	682b      	ldr	r3, [r5, #0]
 80044ce:	05d9      	lsls	r1, r3, #23
 80044d0:	f140 8087 	bpl.w	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044d4:	4d5b      	ldr	r5, [pc, #364]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044d8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80044dc:	f040 8088 	bne.w	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80044e2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80044e6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80044ea:	4a56      	ldr	r2, [pc, #344]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044ec:	f040 80a4 	bne.w	8004638 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 80044f0:	6891      	ldr	r1, [r2, #8]
 80044f2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80044f6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80044fa:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80044fe:	4301      	orrs	r1, r0
 8004500:	6091      	str	r1, [r2, #8]
 8004502:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004508:	430b      	orrs	r3, r1
 800450a:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800450c:	6820      	ldr	r0, [r4, #0]
 800450e:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004512:	bf1f      	itttt	ne
 8004514:	4b4d      	ldrne	r3, [pc, #308]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004516:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 800451a:	f8c3 21e0 	strne.w	r2, [r3, #480]	; 0x1e0
  }
  return HAL_OK;
 800451e:	2000      	movne	r0, #0
 8004520:	e04f      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    __HAL_RCC_PLLI2S_DISABLE();
 8004522:	4b47      	ldr	r3, [pc, #284]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004524:	4e47      	ldr	r6, [pc, #284]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLI2S_DISABLE();
 8004526:	2200      	movs	r2, #0
 8004528:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 800452a:	f7fe fadd 	bl	8002ae8 <HAL_GetTick>
 800452e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004530:	6833      	ldr	r3, [r6, #0]
 8004532:	011f      	lsls	r7, r3, #4
 8004534:	d43f      	bmi.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004536:	6821      	ldr	r1, [r4, #0]
 8004538:	07cd      	lsls	r5, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800453a:	bf41      	itttt	mi
 800453c:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 8004540:	071b      	lslmi	r3, r3, #28
 8004542:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 8004546:	f8c6 3084 	strmi.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800454a:	0788      	lsls	r0, r1, #30
 800454c:	d515      	bpl.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x17e>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800454e:	4a3d      	ldr	r2, [pc, #244]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x248>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004550:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004552:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004556:	6865      	ldr	r5, [r4, #4]
 8004558:	061b      	lsls	r3, r3, #24
 800455a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800455e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8004562:	4303      	orrs	r3, r0
 8004564:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004568:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800456c:	69e3      	ldr	r3, [r4, #28]
 800456e:	f020 001f 	bic.w	r0, r0, #31
 8004572:	3b01      	subs	r3, #1
 8004574:	4303      	orrs	r3, r0
 8004576:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800457a:	0649      	lsls	r1, r1, #25
 800457c:	d50a      	bpl.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800457e:	68e3      	ldr	r3, [r4, #12]
 8004580:	6862      	ldr	r2, [r4, #4]
 8004582:	061b      	lsls	r3, r3, #24
 8004584:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004588:	68a2      	ldr	r2, [r4, #8]
 800458a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800458e:	4a2d      	ldr	r2, [pc, #180]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004590:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004594:	4b2a      	ldr	r3, [pc, #168]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004596:	4e2b      	ldr	r6, [pc, #172]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLI2S_ENABLE();
 8004598:	2201      	movs	r2, #1
 800459a:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 800459c:	f7fe faa4 	bl	8002ae8 <HAL_GetTick>
 80045a0:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045a2:	6833      	ldr	r3, [r6, #0]
 80045a4:	011a      	lsls	r2, r3, #4
 80045a6:	f53f af30 	bmi.w	800440a <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045aa:	f7fe fa9d 	bl	8002ae8 <HAL_GetTick>
 80045ae:	1b40      	subs	r0, r0, r5
 80045b0:	2802      	cmp	r0, #2
 80045b2:	d9f6      	bls.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80045b4:	e004      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045b6:	f7fe fa97 	bl	8002ae8 <HAL_GetTick>
 80045ba:	1b40      	subs	r0, r0, r5
 80045bc:	2802      	cmp	r0, #2
 80045be:	d9b7      	bls.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x134>
        return HAL_TIMEOUT;
 80045c0:	2003      	movs	r0, #3
}
 80045c2:	b003      	add	sp, #12
 80045c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80045c6:	f7fe fa8f 	bl	8002ae8 <HAL_GetTick>
 80045ca:	1b80      	subs	r0, r0, r6
 80045cc:	2802      	cmp	r0, #2
 80045ce:	f67f af27 	bls.w	8004420 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80045d2:	e7f5      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80045d4:	f7fe fa88 	bl	8002ae8 <HAL_GetTick>
 80045d8:	1b40      	subs	r0, r0, r5
 80045da:	2802      	cmp	r0, #2
 80045dc:	f67f af5b 	bls.w	8004496 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80045e0:	e7ee      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045e2:	f7fe fa81 	bl	8002ae8 <HAL_GetTick>
 80045e6:	1b80      	subs	r0, r0, r6
 80045e8:	2802      	cmp	r0, #2
 80045ea:	f67f af6f 	bls.w	80044cc <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80045ee:	e7e7      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80045f2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80045f6:	4293      	cmp	r3, r2
 80045f8:	f43f af72 	beq.w	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80045fe:	4a10      	ldr	r2, [pc, #64]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004600:	2101      	movs	r1, #1
 8004602:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800460a:	2100      	movs	r1, #0
 800460c:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8004610:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004612:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004614:	07da      	lsls	r2, r3, #31
 8004616:	f57f af63 	bpl.w	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 800461a:	f7fe fa65 	bl	8002ae8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800461e:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004622:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004624:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004626:	079b      	lsls	r3, r3, #30
 8004628:	f53f af5a 	bmi.w	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800462c:	f7fe fa5c 	bl	8002ae8 <HAL_GetTick>
 8004630:	1b80      	subs	r0, r0, r6
 8004632:	42b8      	cmp	r0, r7
 8004634:	d9f6      	bls.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004636:	e7c3      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004638:	6891      	ldr	r1, [r2, #8]
 800463a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800463e:	e75f      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004640:	42470000 	.word	0x42470000
 8004644:	40023800 	.word	0x40023800
 8004648:	40007000 	.word	0x40007000
 800464c:	42471000 	.word	0x42471000

08004650 <HAL_SDRAM_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004650:	4770      	bx	lr

08004652 <HAL_SDRAM_Init>:
{   
 8004652:	b538      	push	{r3, r4, r5, lr}
 8004654:	460d      	mov	r5, r1
  if(hsdram == NULL)
 8004656:	4604      	mov	r4, r0
 8004658:	b1c8      	cbz	r0, 800468e <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800465a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800465e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004662:	b91b      	cbnz	r3, 800466c <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8004664:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004668:	f7ff fff2 	bl	8004650 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800466c:	2302      	movs	r3, #2
 800466e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004672:	1d21      	adds	r1, r4, #4
 8004674:	6820      	ldr	r0, [r4, #0]
 8004676:	f000 fdf1 	bl	800525c <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800467a:	6862      	ldr	r2, [r4, #4]
 800467c:	6820      	ldr	r0, [r4, #0]
 800467e:	4629      	mov	r1, r5
 8004680:	f000 fe22 	bl	80052c8 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004684:	2301      	movs	r3, #1
 8004686:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800468a:	2000      	movs	r0, #0
}
 800468c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800468e:	2001      	movs	r0, #1
 8004690:	e7fc      	b.n	800468c <HAL_SDRAM_Init+0x3a>

08004692 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004692:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004694:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004698:	2b02      	cmp	r3, #2
{
 800469a:	4604      	mov	r4, r0
 800469c:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800469e:	b2d8      	uxtb	r0, r3
 80046a0:	d00d      	beq.n	80046be <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80046a2:	2302      	movs	r3, #2
 80046a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80046a8:	6820      	ldr	r0, [r4, #0]
 80046aa:	f000 fe49 	bl	8005340 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80046ae:	682b      	ldr	r3, [r5, #0]
 80046b0:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80046b2:	bf0c      	ite	eq
 80046b4:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80046b6:	2301      	movne	r3, #1
 80046b8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80046bc:	2000      	movs	r0, #0
}
 80046be:	bd38      	pop	{r3, r4, r5, pc}

080046c0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80046c0:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80046c2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80046c6:	2b02      	cmp	r3, #2
{
 80046c8:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80046ca:	b2d8      	uxtb	r0, r3
 80046cc:	d009      	beq.n	80046e2 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80046ce:	2302      	movs	r3, #2
 80046d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80046d4:	6820      	ldr	r0, [r4, #0]
 80046d6:	f000 fe5a 	bl	800538e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80046da:	2301      	movs	r3, #1
 80046dc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 80046e0:	2000      	movs	r0, #0
}
 80046e2:	bd10      	pop	{r4, pc}

080046e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80046e8:	461f      	mov	r7, r3
 80046ea:	4689      	mov	r9, r1
 80046ec:	4690      	mov	r8, r2
 80046ee:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046f0:	f7fe f9fa 	bl	8002ae8 <HAL_GetTick>
 80046f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046f6:	443b      	add	r3, r7
 80046f8:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 80046fa:	f7fe f9f5 	bl	8002ae8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046fe:	4b26      	ldr	r3, [pc, #152]	; (8004798 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8004700:	681e      	ldr	r6, [r3, #0]
 8004702:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8004706:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8004708:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800470a:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800470c:	6822      	ldr	r2, [r4, #0]
 800470e:	6893      	ldr	r3, [r2, #8]
 8004710:	ea39 0303 	bics.w	r3, r9, r3
 8004714:	bf0c      	ite	eq
 8004716:	2301      	moveq	r3, #1
 8004718:	2300      	movne	r3, #0
 800471a:	4543      	cmp	r3, r8
 800471c:	d101      	bne.n	8004722 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 800471e:	2000      	movs	r0, #0
 8004720:	e02e      	b.n	8004780 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8004722:	1c7b      	adds	r3, r7, #1
 8004724:	d0f3      	beq.n	800470e <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004726:	f7fe f9df 	bl	8002ae8 <HAL_GetTick>
 800472a:	eba0 000a 	sub.w	r0, r0, sl
 800472e:	42a8      	cmp	r0, r5
 8004730:	d329      	bcc.n	8004786 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800473a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800473c:	6862      	ldr	r2, [r4, #4]
 800473e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004742:	d10a      	bne.n	800475a <SPI_WaitFlagStateUntilTimeout+0x76>
 8004744:	68a2      	ldr	r2, [r4, #8]
 8004746:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800474a:	d002      	beq.n	8004752 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800474c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004750:	d103      	bne.n	800475a <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004758:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800475a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800475c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004760:	d107      	bne.n	8004772 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004770:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004772:	2301      	movs	r3, #1
 8004774:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004778:	2300      	movs	r3, #0
 800477a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_TIMEOUT;
 800477e:	2003      	movs	r0, #3
}
 8004780:	b002      	add	sp, #8
 8004782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 8004786:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004788:	2b00      	cmp	r3, #0
      count--;
 800478a:	9b01      	ldr	r3, [sp, #4]
 800478c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 8004790:	bf08      	it	eq
 8004792:	2500      	moveq	r5, #0
      count--;
 8004794:	9301      	str	r3, [sp, #4]
 8004796:	e7b9      	b.n	800470c <SPI_WaitFlagStateUntilTimeout+0x28>
 8004798:	20000100 	.word	0x20000100

0800479c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800479c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800479e:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047a0:	6841      	ldr	r1, [r0, #4]
 80047a2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 80047a6:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047a8:	d122      	bne.n	80047f0 <SPI_EndRxTransaction+0x54>
 80047aa:	6881      	ldr	r1, [r0, #8]
 80047ac:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80047b0:	d002      	beq.n	80047b8 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047b2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80047b6:	d107      	bne.n	80047c8 <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047b8:	6825      	ldr	r5, [r4, #0]
 80047ba:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80047bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 80047c0:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80047c4:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80047c6:	d009      	beq.n	80047dc <SPI_EndRxTransaction+0x40>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047c8:	9200      	str	r2, [sp, #0]
 80047ca:	2180      	movs	r1, #128	; 0x80
 80047cc:	2200      	movs	r2, #0
 80047ce:	4620      	mov	r0, r4
 80047d0:	f7ff ff88 	bl	80046e4 <SPI_WaitFlagStateUntilTimeout>
 80047d4:	b930      	cbnz	r0, 80047e4 <SPI_EndRxTransaction+0x48>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80047d6:	2000      	movs	r0, #0
}
 80047d8:	b003      	add	sp, #12
 80047da:	bd30      	pop	{r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80047dc:	9200      	str	r2, [sp, #0]
 80047de:	2101      	movs	r1, #1
 80047e0:	2200      	movs	r2, #0
 80047e2:	e7f4      	b.n	80047ce <SPI_EndRxTransaction+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80047e6:	f043 0320 	orr.w	r3, r3, #32
 80047ea:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80047ec:	2003      	movs	r0, #3
 80047ee:	e7f3      	b.n	80047d8 <SPI_EndRxTransaction+0x3c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80047f0:	9200      	str	r2, [sp, #0]
 80047f2:	2101      	movs	r1, #1
 80047f4:	2200      	movs	r2, #0
 80047f6:	e7eb      	b.n	80047d0 <SPI_EndRxTransaction+0x34>

080047f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047f8:	b530      	push	{r4, r5, lr}
 80047fa:	460b      	mov	r3, r1
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047fc:	4913      	ldr	r1, [pc, #76]	; (800484c <SPI_EndRxTxTransaction+0x54>)
 80047fe:	680d      	ldr	r5, [r1, #0]
 8004800:	4913      	ldr	r1, [pc, #76]	; (8004850 <SPI_EndRxTxTransaction+0x58>)
 8004802:	fbb5 f5f1 	udiv	r5, r5, r1
 8004806:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800480a:	434d      	muls	r5, r1
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800480c:	6841      	ldr	r1, [r0, #4]
{
 800480e:	b085      	sub	sp, #20
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004810:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 8004814:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004816:	9503      	str	r5, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004818:	d10c      	bne.n	8004834 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800481a:	9200      	str	r2, [sp, #0]
 800481c:	2180      	movs	r1, #128	; 0x80
 800481e:	2200      	movs	r2, #0
 8004820:	f7ff ff60 	bl	80046e4 <SPI_WaitFlagStateUntilTimeout>
 8004824:	b178      	cbz	r0, 8004846 <SPI_EndRxTxTransaction+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004826:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004828:	f043 0320 	orr.w	r3, r3, #32
 800482c:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800482e:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8004830:	b005      	add	sp, #20
 8004832:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8004834:	9b03      	ldr	r3, [sp, #12]
 8004836:	b133      	cbz	r3, 8004846 <SPI_EndRxTxTransaction+0x4e>
      count--;
 8004838:	9b03      	ldr	r3, [sp, #12]
 800483a:	3b01      	subs	r3, #1
 800483c:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	061b      	lsls	r3, r3, #24
 8004844:	d4f6      	bmi.n	8004834 <SPI_EndRxTxTransaction+0x3c>
  return HAL_OK;
 8004846:	2000      	movs	r0, #0
 8004848:	e7f2      	b.n	8004830 <SPI_EndRxTxTransaction+0x38>
 800484a:	bf00      	nop
 800484c:	20000100 	.word	0x20000100
 8004850:	016e3600 	.word	0x016e3600

08004854 <HAL_SPI_Init>:
{
 8004854:	b538      	push	{r3, r4, r5, lr}
  if (hspi == NULL)
 8004856:	4604      	mov	r4, r0
 8004858:	2800      	cmp	r0, #0
 800485a:	d05a      	beq.n	8004912 <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800485c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800485e:	2b00      	cmp	r3, #0
 8004860:	d153      	bne.n	800490a <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004862:	6842      	ldr	r2, [r0, #4]
 8004864:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004868:	d000      	beq.n	800486c <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800486a:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800486c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004870:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004874:	b923      	cbnz	r3, 8004880 <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8004876:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800487a:	4620      	mov	r0, r4
 800487c:	f002 fa3a 	bl	8006cf4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8004880:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004882:	68a5      	ldr	r5, [r4, #8]
 8004884:	69a2      	ldr	r2, [r4, #24]
 8004886:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hspi->State = HAL_SPI_STATE_BUSY;
 8004888:	2302      	movs	r3, #2
 800488a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800488e:	680b      	ldr	r3, [r1, #0]
 8004890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004894:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004896:	6863      	ldr	r3, [r4, #4]
 8004898:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 800489c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80048a0:	432b      	orrs	r3, r5
 80048a2:	68e5      	ldr	r5, [r4, #12]
 80048a4:	f405 6500 	and.w	r5, r5, #2048	; 0x800
 80048a8:	432b      	orrs	r3, r5
 80048aa:	6925      	ldr	r5, [r4, #16]
 80048ac:	f005 0502 	and.w	r5, r5, #2
 80048b0:	432b      	orrs	r3, r5
 80048b2:	6965      	ldr	r5, [r4, #20]
 80048b4:	f005 0501 	and.w	r5, r5, #1
 80048b8:	432b      	orrs	r3, r5
 80048ba:	f402 7500 	and.w	r5, r2, #512	; 0x200
 80048be:	432b      	orrs	r3, r5
 80048c0:	69e5      	ldr	r5, [r4, #28]
 80048c2:	f005 0538 	and.w	r5, r5, #56	; 0x38
 80048c6:	432b      	orrs	r3, r5
 80048c8:	6a25      	ldr	r5, [r4, #32]
 80048ca:	f005 0580 	and.w	r5, r5, #128	; 0x80
 80048ce:	432b      	orrs	r3, r5
 80048d0:	f400 5500 	and.w	r5, r0, #8192	; 0x2000
 80048d4:	432b      	orrs	r3, r5
 80048d6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048da:	0c12      	lsrs	r2, r2, #16
 80048dc:	f003 0310 	and.w	r3, r3, #16
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048e0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048e4:	f002 0204 	and.w	r2, r2, #4
 80048e8:	ea42 0203 	orr.w	r2, r2, r3
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80048ec:	bf08      	it	eq
 80048ee:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048f0:	604a      	str	r2, [r1, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80048f2:	bf08      	it	eq
 80048f4:	610b      	streq	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048f6:	69cb      	ldr	r3, [r1, #28]
 80048f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048fc:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048fe:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004900:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004902:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004904:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004908:	bd38      	pop	{r3, r4, r5, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800490a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800490c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004910:	e7ac      	b.n	800486c <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8004912:	2001      	movs	r0, #1
 8004914:	e7f8      	b.n	8004908 <HAL_SPI_Init+0xb4>

08004916 <HAL_SPI_DeInit>:
{
 8004916:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8004918:	4604      	mov	r4, r0
 800491a:	b180      	cbz	r0, 800493e <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 800491c:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800491e:	2302      	movs	r3, #2
 8004920:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004924:	6813      	ldr	r3, [r2, #0]
 8004926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800492a:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800492c:	f002 fa46 	bl	8006dbc <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004930:	2000      	movs	r0, #0
 8004932:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8004934:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 8004938:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 800493c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800493e:	2001      	movs	r0, #1
 8004940:	e7fc      	b.n	800493c <HAL_SPI_DeInit+0x26>

08004942 <HAL_SPI_Transmit>:
{
 8004942:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004946:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8004948:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800494c:	2b01      	cmp	r3, #1
{
 800494e:	4604      	mov	r4, r0
 8004950:	460e      	mov	r6, r1
 8004952:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8004954:	f000 80b9 	beq.w	8004aca <HAL_SPI_Transmit+0x188>
 8004958:	2301      	movs	r3, #1
 800495a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800495e:	f7fe f8c3 	bl	8002ae8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004962:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004966:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004968:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800496a:	b2d8      	uxtb	r0, r3
 800496c:	f040 80ab 	bne.w	8004ac6 <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 8004970:	2e00      	cmp	r6, #0
 8004972:	d077      	beq.n	8004a64 <HAL_SPI_Transmit+0x122>
 8004974:	f1b8 0f00 	cmp.w	r8, #0
 8004978:	d074      	beq.n	8004a64 <HAL_SPI_Transmit+0x122>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800497a:	2303      	movs	r3, #3
 800497c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004980:	2300      	movs	r3, #0
 8004982:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8004984:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8004988:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800498c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800498e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004990:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004992:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8004994:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004996:	6326      	str	r6, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 800499c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a0:	d107      	bne.n	80049b2 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 80049a2:	682b      	ldr	r3, [r5, #0]
 80049a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a8:	602b      	str	r3, [r5, #0]
    SPI_1LINE_TX(hspi);
 80049aa:	682b      	ldr	r3, [r5, #0]
 80049ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049b0:	602b      	str	r3, [r5, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80049b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b8:	d107      	bne.n	80049ca <HAL_SPI_Transmit+0x88>
    SPI_RESET_CRC(hspi);
 80049ba:	682b      	ldr	r3, [r5, #0]
 80049bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049c0:	602b      	str	r3, [r5, #0]
 80049c2:	682b      	ldr	r3, [r5, #0]
 80049c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049c8:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049ca:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049cc:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049ce:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80049d0:	bf5e      	ittt	pl
 80049d2:	682b      	ldrpl	r3, [r5, #0]
 80049d4:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80049d8:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049da:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049de:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049e0:	d14c      	bne.n	8004a7c <HAL_SPI_Transmit+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049e2:	b113      	cbz	r3, 80049ea <HAL_SPI_Transmit+0xa8>
 80049e4:	f1b8 0f01 	cmp.w	r8, #1
 80049e8:	d107      	bne.n	80049fa <HAL_SPI_Transmit+0xb8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ea:	f836 3b02 	ldrh.w	r3, [r6], #2
 80049ee:	60eb      	str	r3, [r5, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049f0:	6326      	str	r6, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80049f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80049fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	b9f3      	cbnz	r3, 8004a3e <HAL_SPI_Transmit+0xfc>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a06:	d104      	bne.n	8004a12 <HAL_SPI_Transmit+0xd0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004a08:	6822      	ldr	r2, [r4, #0]
 8004a0a:	6813      	ldr	r3, [r2, #0]
 8004a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a10:	6013      	str	r3, [r2, #0]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a12:	464a      	mov	r2, r9
 8004a14:	4639      	mov	r1, r7
 8004a16:	4620      	mov	r0, r4
 8004a18:	f7ff feee 	bl	80047f8 <SPI_EndRxTxTransaction>
 8004a1c:	b108      	cbz	r0, 8004a22 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a1e:	2320      	movs	r3, #32
 8004a20:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a22:	68a3      	ldr	r3, [r4, #8]
 8004a24:	b933      	cbnz	r3, 8004a34 <HAL_SPI_Transmit+0xf2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a26:	9301      	str	r3, [sp, #4]
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	9201      	str	r2, [sp, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a34:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8004a36:	3800      	subs	r0, #0
 8004a38:	bf18      	it	ne
 8004a3a:	2001      	movne	r0, #1
error:
 8004a3c:	e012      	b.n	8004a64 <HAL_SPI_Transmit+0x122>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a3e:	6822      	ldr	r2, [r4, #0]
 8004a40:	6893      	ldr	r3, [r2, #8]
 8004a42:	0798      	lsls	r0, r3, #30
 8004a44:	d505      	bpl.n	8004a52 <HAL_SPI_Transmit+0x110>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a48:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004a4c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a4e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a50:	e7cf      	b.n	80049f2 <HAL_SPI_Transmit+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a52:	f7fe f849 	bl	8002ae8 <HAL_GetTick>
 8004a56:	eba0 0009 	sub.w	r0, r0, r9
 8004a5a:	42b8      	cmp	r0, r7
 8004a5c:	d30b      	bcc.n	8004a76 <HAL_SPI_Transmit+0x134>
 8004a5e:	1c79      	adds	r1, r7, #1
 8004a60:	d0cb      	beq.n	80049fa <HAL_SPI_Transmit+0xb8>
          errorcode = HAL_TIMEOUT;
 8004a62:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004a64:	2301      	movs	r3, #1
 8004a66:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004a70:	b003      	add	sp, #12
 8004a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a76:	2f00      	cmp	r7, #0
 8004a78:	d1bf      	bne.n	80049fa <HAL_SPI_Transmit+0xb8>
 8004a7a:	e7f2      	b.n	8004a62 <HAL_SPI_Transmit+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a7c:	b113      	cbz	r3, 8004a84 <HAL_SPI_Transmit+0x142>
 8004a7e:	f1b8 0f01 	cmp.w	r8, #1
 8004a82:	d108      	bne.n	8004a96 <HAL_SPI_Transmit+0x154>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a84:	7833      	ldrb	r3, [r6, #0]
 8004a86:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004a8e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004a96:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0b0      	beq.n	8004a00 <HAL_SPI_Transmit+0xbe>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	0792      	lsls	r2, r2, #30
 8004aa4:	d503      	bpl.n	8004aae <HAL_SPI_Transmit+0x16c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aa6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004aa8:	7812      	ldrb	r2, [r2, #0]
 8004aaa:	731a      	strb	r2, [r3, #12]
 8004aac:	e7ec      	b.n	8004a88 <HAL_SPI_Transmit+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aae:	f7fe f81b 	bl	8002ae8 <HAL_GetTick>
 8004ab2:	eba0 0009 	sub.w	r0, r0, r9
 8004ab6:	42b8      	cmp	r0, r7
 8004ab8:	d302      	bcc.n	8004ac0 <HAL_SPI_Transmit+0x17e>
 8004aba:	1c7b      	adds	r3, r7, #1
 8004abc:	d0eb      	beq.n	8004a96 <HAL_SPI_Transmit+0x154>
 8004abe:	e7d0      	b.n	8004a62 <HAL_SPI_Transmit+0x120>
 8004ac0:	2f00      	cmp	r7, #0
 8004ac2:	d1e8      	bne.n	8004a96 <HAL_SPI_Transmit+0x154>
 8004ac4:	e7cd      	b.n	8004a62 <HAL_SPI_Transmit+0x120>
    errorcode = HAL_BUSY;
 8004ac6:	2002      	movs	r0, #2
 8004ac8:	e7cc      	b.n	8004a64 <HAL_SPI_Transmit+0x122>
  __HAL_LOCK(hspi);
 8004aca:	2002      	movs	r0, #2
 8004acc:	e7d0      	b.n	8004a70 <HAL_SPI_Transmit+0x12e>

08004ace <HAL_SPI_TransmitReceive>:
{
 8004ace:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hspi);
 8004ada:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8004ade:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8004ae0:	2b01      	cmp	r3, #1
{
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	4688      	mov	r8, r1
 8004ae6:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 8004ae8:	f000 813a 	beq.w	8004d60 <HAL_SPI_TransmitReceive+0x292>
 8004aec:	2301      	movs	r3, #1
 8004aee:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004af2:	f7fd fff9 	bl	8002ae8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004af6:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8004afa:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004afc:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8004afe:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8004b00:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b02:	d00a      	beq.n	8004b1a <HAL_SPI_TransmitReceive+0x4c>
 8004b04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b08:	f040 8128 	bne.w	8004d5c <HAL_SPI_TransmitReceive+0x28e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b0c:	68a2      	ldr	r2, [r4, #8]
 8004b0e:	2a00      	cmp	r2, #0
 8004b10:	f040 8124 	bne.w	8004d5c <HAL_SPI_TransmitReceive+0x28e>
 8004b14:	2904      	cmp	r1, #4
 8004b16:	f040 8121 	bne.w	8004d5c <HAL_SPI_TransmitReceive+0x28e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b1a:	f1b8 0f00 	cmp.w	r8, #0
 8004b1e:	f000 810f 	beq.w	8004d40 <HAL_SPI_TransmitReceive+0x272>
 8004b22:	2d00      	cmp	r5, #0
 8004b24:	f000 810c 	beq.w	8004d40 <HAL_SPI_TransmitReceive+0x272>
 8004b28:	f1b9 0f00 	cmp.w	r9, #0
 8004b2c:	f000 8108 	beq.w	8004d40 <HAL_SPI_TransmitReceive+0x272>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b30:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b34:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b36:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b38:	bf1c      	itt	ne
 8004b3a:	2205      	movne	r2, #5
 8004b3c:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b40:	2200      	movs	r2, #0
 8004b42:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8004b44:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 8004b4a:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b4e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    SPI_RESET_CRC(hspi);
 8004b52:	6825      	ldr	r5, [r4, #0]
  hspi->RxXferSize  = Size;
 8004b54:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b58:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b5c:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b60:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b64:	d107      	bne.n	8004b76 <HAL_SPI_TransmitReceive+0xa8>
    SPI_RESET_CRC(hspi);
 8004b66:	682a      	ldr	r2, [r5, #0]
 8004b68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b6c:	602a      	str	r2, [r5, #0]
 8004b6e:	682a      	ldr	r2, [r5, #0]
 8004b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b74:	602a      	str	r2, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b76:	682a      	ldr	r2, [r5, #0]
 8004b78:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8004b7a:	bf5e      	ittt	pl
 8004b7c:	682a      	ldrpl	r2, [r5, #0]
 8004b7e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8004b82:	602a      	strpl	r2, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b84:	68e2      	ldr	r2, [r4, #12]
 8004b86:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004b8a:	d169      	bne.n	8004c60 <HAL_SPI_TransmitReceive+0x192>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b8c:	b113      	cbz	r3, 8004b94 <HAL_SPI_TransmitReceive+0xc6>
 8004b8e:	f1b9 0f01 	cmp.w	r9, #1
 8004b92:	d108      	bne.n	8004ba6 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b94:	4641      	mov	r1, r8
 8004b96:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004b9a:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 8004b9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b9e:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004ba6:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ba8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	b9b3      	cbnz	r3, 8004bdc <HAL_SPI_TransmitReceive+0x10e>
 8004bae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	b99b      	cbnz	r3, 8004bdc <HAL_SPI_TransmitReceive+0x10e>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bba:	f040 80ac 	bne.w	8004d16 <HAL_SPI_TransmitReceive+0x248>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	9700      	str	r7, [sp, #0]
 8004bc2:	4633      	mov	r3, r6
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f7ff fd8c 	bl	80046e4 <SPI_WaitFlagStateUntilTimeout>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	f000 809e 	beq.w	8004d0e <HAL_SPI_TransmitReceive+0x240>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004bd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004bd4:	f043 0302 	orr.w	r3, r3, #2
 8004bd8:	6563      	str	r3, [r4, #84]	; 0x54
 8004bda:	e020      	b.n	8004c1e <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bdc:	6822      	ldr	r2, [r4, #0]
 8004bde:	6893      	ldr	r3, [r2, #8]
 8004be0:	079b      	lsls	r3, r3, #30
 8004be2:	d504      	bpl.n	8004bee <HAL_SPI_TransmitReceive+0x120>
 8004be4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	b10b      	cbz	r3, 8004bee <HAL_SPI_TransmitReceive+0x120>
 8004bea:	bb1d      	cbnz	r5, 8004c34 <HAL_SPI_TransmitReceive+0x166>
{
 8004bec:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bee:	6891      	ldr	r1, [r2, #8]
 8004bf0:	f011 0101 	ands.w	r1, r1, #1
 8004bf4:	d00c      	beq.n	8004c10 <HAL_SPI_TransmitReceive+0x142>
 8004bf6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	b14b      	cbz	r3, 8004c10 <HAL_SPI_TransmitReceive+0x142>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bfe:	68d2      	ldr	r2, [r2, #12]
 8004c00:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c04:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004c06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004c0e:	460d      	mov	r5, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c10:	f7fd ff6a 	bl	8002ae8 <HAL_GetTick>
 8004c14:	1bc0      	subs	r0, r0, r7
 8004c16:	42b0      	cmp	r0, r6
 8004c18:	d3c6      	bcc.n	8004ba8 <HAL_SPI_TransmitReceive+0xda>
 8004c1a:	1c70      	adds	r0, r6, #1
 8004c1c:	d0c4      	beq.n	8004ba8 <HAL_SPI_TransmitReceive+0xda>
      errorcode = HAL_TIMEOUT;
 8004c1e:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004c20:	2301      	movs	r3, #1
 8004c22:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c26:	2300      	movs	r3, #0
 8004c28:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	b005      	add	sp, #20
 8004c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c36:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004c3a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c3c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004c3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004c46:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8004c48:	b2ad      	uxth	r5, r5
 8004c4a:	2d00      	cmp	r5, #0
 8004c4c:	d1ce      	bne.n	8004bec <HAL_SPI_TransmitReceive+0x11e>
 8004c4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c54:	d1ca      	bne.n	8004bec <HAL_SPI_TransmitReceive+0x11e>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004c56:	6813      	ldr	r3, [r2, #0]
 8004c58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	e7c6      	b.n	8004bee <HAL_SPI_TransmitReceive+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c60:	b113      	cbz	r3, 8004c68 <HAL_SPI_TransmitReceive+0x19a>
 8004c62:	f1b9 0f01 	cmp.w	r9, #1
 8004c66:	d109      	bne.n	8004c7c <HAL_SPI_TransmitReceive+0x1ae>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c68:	f898 3000 	ldrb.w	r3, [r8]
 8004c6c:	732b      	strb	r3, [r5, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c70:	3301      	adds	r3, #1
 8004c72:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004c74:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004c7c:	2501      	movs	r5, #1
 8004c7e:	e022      	b.n	8004cc6 <HAL_SPI_TransmitReceive+0x1f8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c80:	6822      	ldr	r2, [r4, #0]
 8004c82:	6893      	ldr	r3, [r2, #8]
 8004c84:	0799      	lsls	r1, r3, #30
 8004c86:	d504      	bpl.n	8004c92 <HAL_SPI_TransmitReceive+0x1c4>
 8004c88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	b10b      	cbz	r3, 8004c92 <HAL_SPI_TransmitReceive+0x1c4>
 8004c8e:	bb1d      	cbnz	r5, 8004cd8 <HAL_SPI_TransmitReceive+0x20a>
        txallowed = 1U;
 8004c90:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c92:	6822      	ldr	r2, [r4, #0]
 8004c94:	6891      	ldr	r1, [r2, #8]
 8004c96:	f011 0101 	ands.w	r1, r1, #1
 8004c9a:	d00d      	beq.n	8004cb8 <HAL_SPI_TransmitReceive+0x1ea>
 8004c9c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	b153      	cbz	r3, 8004cb8 <HAL_SPI_TransmitReceive+0x1ea>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ca2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ca4:	68d2      	ldr	r2, [r2, #12]
 8004ca6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ca8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004caa:	3301      	adds	r3, #1
 8004cac:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004cae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004cb6:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cb8:	f7fd ff16 	bl	8002ae8 <HAL_GetTick>
 8004cbc:	1bc0      	subs	r0, r0, r7
 8004cbe:	42b0      	cmp	r0, r6
 8004cc0:	d322      	bcc.n	8004d08 <HAL_SPI_TransmitReceive+0x23a>
 8004cc2:	1c73      	adds	r3, r6, #1
 8004cc4:	d1ab      	bne.n	8004c1e <HAL_SPI_TransmitReceive+0x150>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cc6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1d8      	bne.n	8004c80 <HAL_SPI_TransmitReceive+0x1b2>
 8004cce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1d4      	bne.n	8004c80 <HAL_SPI_TransmitReceive+0x1b2>
 8004cd6:	e76d      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0xe6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8004cde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004ce4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004cec:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8004cee:	b2ad      	uxth	r5, r5
 8004cf0:	2d00      	cmp	r5, #0
 8004cf2:	d1cd      	bne.n	8004c90 <HAL_SPI_TransmitReceive+0x1c2>
 8004cf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cfa:	d1c9      	bne.n	8004c90 <HAL_SPI_TransmitReceive+0x1c2>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004cfc:	6822      	ldr	r2, [r4, #0]
 8004cfe:	6813      	ldr	r3, [r2, #0]
 8004d00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	e7c4      	b.n	8004c92 <HAL_SPI_TransmitReceive+0x1c4>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d08:	2e00      	cmp	r6, #0
 8004d0a:	d1dc      	bne.n	8004cc6 <HAL_SPI_TransmitReceive+0x1f8>
 8004d0c:	e787      	b.n	8004c1e <HAL_SPI_TransmitReceive+0x150>
    tmpreg = READ_REG(hspi->Instance->DR);
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	9302      	str	r3, [sp, #8]
    UNUSED(tmpreg);
 8004d14:	9b02      	ldr	r3, [sp, #8]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004d16:	6822      	ldr	r2, [r4, #0]
 8004d18:	6895      	ldr	r5, [r2, #8]
 8004d1a:	f015 0510 	ands.w	r5, r5, #16
 8004d1e:	d007      	beq.n	8004d30 <HAL_SPI_TransmitReceive+0x262>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004d20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d22:	f043 0302 	orr.w	r3, r3, #2
 8004d26:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004d28:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004d2c:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8004d2e:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d30:	463a      	mov	r2, r7
 8004d32:	4631      	mov	r1, r6
 8004d34:	4620      	mov	r0, r4
 8004d36:	f7ff fd5f 	bl	80047f8 <SPI_EndRxTxTransaction>
 8004d3a:	b118      	cbz	r0, 8004d44 <HAL_SPI_TransmitReceive+0x276>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d3c:	2320      	movs	r3, #32
 8004d3e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004d40:	2501      	movs	r5, #1
 8004d42:	e76d      	b.n	8004c20 <HAL_SPI_TransmitReceive+0x152>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d44:	68a3      	ldr	r3, [r4, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f47f af6a 	bne.w	8004c20 <HAL_SPI_TransmitReceive+0x152>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d4c:	9303      	str	r3, [sp, #12]
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	9203      	str	r2, [sp, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	9303      	str	r3, [sp, #12]
 8004d58:	9b03      	ldr	r3, [sp, #12]
 8004d5a:	e761      	b.n	8004c20 <HAL_SPI_TransmitReceive+0x152>
    errorcode = HAL_BUSY;
 8004d5c:	2502      	movs	r5, #2
 8004d5e:	e75f      	b.n	8004c20 <HAL_SPI_TransmitReceive+0x152>
  __HAL_LOCK(hspi);
 8004d60:	2502      	movs	r5, #2
 8004d62:	e763      	b.n	8004c2c <HAL_SPI_TransmitReceive+0x15e>

08004d64 <HAL_SPI_Receive>:
{
 8004d64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004d68:	461d      	mov	r5, r3
  __IO uint32_t tmpreg = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	9303      	str	r3, [sp, #12]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d6e:	6843      	ldr	r3, [r0, #4]
 8004d70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8004d74:	4604      	mov	r4, r0
 8004d76:	4688      	mov	r8, r1
 8004d78:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d7a:	d10c      	bne.n	8004d96 <HAL_SPI_Receive+0x32>
 8004d7c:	6883      	ldr	r3, [r0, #8]
 8004d7e:	b953      	cbnz	r3, 8004d96 <HAL_SPI_Receive+0x32>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d80:	2304      	movs	r3, #4
 8004d82:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d86:	4613      	mov	r3, r2
 8004d88:	9500      	str	r5, [sp, #0]
 8004d8a:	460a      	mov	r2, r1
 8004d8c:	f7ff fe9f 	bl	8004ace <HAL_SPI_TransmitReceive>
}
 8004d90:	b004      	add	sp, #16
 8004d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8004d96:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	f000 80cd 	beq.w	8004f3a <HAL_SPI_Receive+0x1d6>
 8004da0:	2301      	movs	r3, #1
 8004da2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004da6:	f7fd fe9f 	bl	8002ae8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004daa:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004dae:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004db0:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004db2:	b2d8      	uxtb	r0, r3
 8004db4:	f040 80bf 	bne.w	8004f36 <HAL_SPI_Receive+0x1d2>
  if ((pData == NULL) || (Size == 0U))
 8004db8:	f1b8 0f00 	cmp.w	r8, #0
 8004dbc:	f000 808a 	beq.w	8004ed4 <HAL_SPI_Receive+0x170>
 8004dc0:	2f00      	cmp	r7, #0
 8004dc2:	f000 8087 	beq.w	8004ed4 <HAL_SPI_Receive+0x170>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dc6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004dc8:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dcc:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004dce:	2304      	movs	r3, #4
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dd0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004dd4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->TxISR       = NULL;
 8004dd8:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ddc:	6560      	str	r0, [r4, #84]	; 0x54
    SPI_RESET_CRC(hspi);
 8004dde:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8004de0:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004de2:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004de4:	6320      	str	r0, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004de6:	86a0      	strh	r0, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004de8:	86e0      	strh	r0, [r4, #54]	; 0x36
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dea:	d10b      	bne.n	8004e04 <HAL_SPI_Receive+0xa0>
    SPI_RESET_CRC(hspi);
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dfa:	601a      	str	r2, [r3, #0]
    hspi->RxXferCount--;
 8004dfc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004dfe:	3a01      	subs	r2, #1
 8004e00:	b292      	uxth	r2, r2
 8004e02:	87e2      	strh	r2, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e04:	68a2      	ldr	r2, [r4, #8]
 8004e06:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004e0a:	d107      	bne.n	8004e1c <HAL_SPI_Receive+0xb8>
    __HAL_SPI_DISABLE(hspi);
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e1a:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8004e20:	bf5e      	ittt	pl
 8004e22:	681a      	ldrpl	r2, [r3, #0]
 8004e24:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8004e28:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e2a:	68e3      	ldr	r3, [r4, #12]
 8004e2c:	b1f3      	cbz	r3, 8004e6c <HAL_SPI_Receive+0x108>
    while (hspi->RxXferCount > 0U)
 8004e2e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	b1fb      	cbz	r3, 8004e74 <HAL_SPI_Receive+0x110>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	07d1      	lsls	r1, r2, #31
 8004e3a:	d555      	bpl.n	8004ee8 <HAL_SPI_Receive+0x184>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e40:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e44:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004e46:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004e4e:	e7ee      	b.n	8004e2e <HAL_SPI_Receive+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	07d7      	lsls	r7, r2, #31
 8004e56:	d535      	bpl.n	8004ec4 <HAL_SPI_Receive+0x160>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e5a:	7b1b      	ldrb	r3, [r3, #12]
 8004e5c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e60:	3301      	adds	r3, #1
 8004e62:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004e64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004e6c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ed      	bne.n	8004e50 <HAL_SPI_Receive+0xec>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e7a:	d144      	bne.n	8004f06 <HAL_SPI_Receive+0x1a2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004e7c:	6822      	ldr	r2, [r4, #0]
 8004e7e:	6813      	ldr	r3, [r2, #0]
 8004e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e84:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004e86:	2201      	movs	r2, #1
 8004e88:	9600      	str	r6, [sp, #0]
 8004e8a:	462b      	mov	r3, r5
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f7ff fc28 	bl	80046e4 <SPI_WaitFlagStateUntilTimeout>
 8004e94:	b9e8      	cbnz	r0, 8004ed2 <HAL_SPI_Receive+0x16e>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e96:	68e1      	ldr	r1, [r4, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e98:	6822      	ldr	r2, [r4, #0]
 8004e9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e9c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ea0:	bf0b      	itete	eq
 8004ea2:	68d2      	ldreq	r2, [r2, #12]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ea4:	7b12      	ldrbne	r2, [r2, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ea6:	801a      	strheq	r2, [r3, #0]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ea8:	701a      	strbne	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004eaa:	2201      	movs	r2, #1
 8004eac:	9600      	str	r6, [sp, #0]
 8004eae:	462b      	mov	r3, r5
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	f7ff fc16 	bl	80046e4 <SPI_WaitFlagStateUntilTimeout>
 8004eb8:	b308      	cbz	r0, 8004efe <HAL_SPI_Receive+0x19a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004eba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ebc:	f043 0302 	orr.w	r3, r3, #2
 8004ec0:	6563      	str	r3, [r4, #84]	; 0x54
 8004ec2:	e006      	b.n	8004ed2 <HAL_SPI_Receive+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ec4:	f7fd fe10 	bl	8002ae8 <HAL_GetTick>
 8004ec8:	1b80      	subs	r0, r0, r6
 8004eca:	42a8      	cmp	r0, r5
 8004ecc:	d309      	bcc.n	8004ee2 <HAL_SPI_Receive+0x17e>
 8004ece:	1c68      	adds	r0, r5, #1
 8004ed0:	d0cc      	beq.n	8004e6c <HAL_SPI_Receive+0x108>
      errorcode = HAL_TIMEOUT;
 8004ed2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004eda:	2300      	movs	r3, #0
 8004edc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8004ee0:	e756      	b.n	8004d90 <HAL_SPI_Receive+0x2c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ee2:	2d00      	cmp	r5, #0
 8004ee4:	d1c2      	bne.n	8004e6c <HAL_SPI_Receive+0x108>
 8004ee6:	e7f4      	b.n	8004ed2 <HAL_SPI_Receive+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ee8:	f7fd fdfe 	bl	8002ae8 <HAL_GetTick>
 8004eec:	1b80      	subs	r0, r0, r6
 8004eee:	42a8      	cmp	r0, r5
 8004ef0:	d302      	bcc.n	8004ef8 <HAL_SPI_Receive+0x194>
 8004ef2:	1c6a      	adds	r2, r5, #1
 8004ef4:	d09b      	beq.n	8004e2e <HAL_SPI_Receive+0xca>
 8004ef6:	e7ec      	b.n	8004ed2 <HAL_SPI_Receive+0x16e>
 8004ef8:	2d00      	cmp	r5, #0
 8004efa:	d198      	bne.n	8004e2e <HAL_SPI_Receive+0xca>
 8004efc:	e7e9      	b.n	8004ed2 <HAL_SPI_Receive+0x16e>
    tmpreg = READ_REG(hspi->Instance->DR);
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	9303      	str	r3, [sp, #12]
    UNUSED(tmpreg);
 8004f04:	9b03      	ldr	r3, [sp, #12]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f06:	4632      	mov	r2, r6
 8004f08:	4629      	mov	r1, r5
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f7ff fc46 	bl	800479c <SPI_EndRxTransaction>
 8004f10:	b108      	cbz	r0, 8004f16 <HAL_SPI_Receive+0x1b2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f12:	2320      	movs	r3, #32
 8004f14:	6563      	str	r3, [r4, #84]	; 0x54
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004f16:	6822      	ldr	r2, [r4, #0]
 8004f18:	6893      	ldr	r3, [r2, #8]
 8004f1a:	06db      	lsls	r3, r3, #27
 8004f1c:	d506      	bpl.n	8004f2c <HAL_SPI_Receive+0x1c8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004f1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f20:	f043 0302 	orr.w	r3, r3, #2
 8004f24:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004f26:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004f2a:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8004f2e:	3800      	subs	r0, #0
 8004f30:	bf18      	it	ne
 8004f32:	2001      	movne	r0, #1
error :
 8004f34:	e7ce      	b.n	8004ed4 <HAL_SPI_Receive+0x170>
    errorcode = HAL_BUSY;
 8004f36:	2002      	movs	r0, #2
 8004f38:	e7cc      	b.n	8004ed4 <HAL_SPI_Receive+0x170>
  __HAL_LOCK(hspi);
 8004f3a:	2002      	movs	r0, #2
 8004f3c:	e728      	b.n	8004d90 <HAL_SPI_Receive+0x2c>

08004f3e <HAL_SPI_GetState>:
  return hspi->State;
 8004f3e:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8004f42:	4770      	bx	lr

08004f44 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f44:	6802      	ldr	r2, [r0, #0]
 8004f46:	68c1      	ldr	r1, [r0, #12]
 8004f48:	6913      	ldr	r3, [r2, #16]
 8004f4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f4e:	430b      	orrs	r3, r1
{
 8004f50:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f52:	6113      	str	r3, [r2, #16]
{
 8004f54:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f56:	6883      	ldr	r3, [r0, #8]
 8004f58:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004f5a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f5c:	4303      	orrs	r3, r0
 8004f5e:	6968      	ldr	r0, [r5, #20]
 8004f60:	4303      	orrs	r3, r0
 8004f62:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8004f64:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8004f68:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f6c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f72:	6953      	ldr	r3, [r2, #20]
 8004f74:	69a9      	ldr	r1, [r5, #24]
 8004f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f7e:	4b1f      	ldr	r3, [pc, #124]	; (8004ffc <UART_SetConfig+0xb8>)
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d003      	beq.n	8004f8c <UART_SetConfig+0x48>
 8004f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d123      	bne.n	8004fd4 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f8c:	f7ff fa26 	bl	80043dc <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f90:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f92:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f98:	e9d5 4600 	ldrd	r4, r6, [r5]
 8004f9c:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fa0:	d11b      	bne.n	8004fda <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fa2:	19b2      	adds	r2, r6, r6
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	415b      	adcs	r3, r3
 8004faa:	f7fb f971 	bl	8000290 <__aeabi_uldivmod>
 8004fae:	2164      	movs	r1, #100	; 0x64
 8004fb0:	fbb0 f5f1 	udiv	r5, r0, r1
 8004fb4:	fb01 0315 	mls	r3, r1, r5, r0
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	3332      	adds	r3, #50	; 0x32
 8004fbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fc0:	f003 0207 	and.w	r2, r3, #7
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8004fca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fce:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fd0:	60a3      	str	r3, [r4, #8]
  }
}
 8004fd2:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fd4:	f7ff f9f2 	bl	80043bc <HAL_RCC_GetPCLK1Freq>
 8004fd8:	e7da      	b.n	8004f90 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fda:	00b2      	lsls	r2, r6, #2
 8004fdc:	0fb3      	lsrs	r3, r6, #30
 8004fde:	f7fb f957 	bl	8000290 <__aeabi_uldivmod>
 8004fe2:	2264      	movs	r2, #100	; 0x64
 8004fe4:	fbb0 f1f2 	udiv	r1, r0, r2
 8004fe8:	fb02 0311 	mls	r3, r2, r1, r0
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	3332      	adds	r3, #50	; 0x32
 8004ff0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ff4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004ff8:	e7ea      	b.n	8004fd0 <UART_SetConfig+0x8c>
 8004ffa:	bf00      	nop
 8004ffc:	40011000 	.word	0x40011000

08005000 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8005000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005002:	4604      	mov	r4, r0
 8005004:	460e      	mov	r6, r1
 8005006:	4617      	mov	r7, r2
 8005008:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800500a:	6822      	ldr	r2, [r4, #0]
 800500c:	6813      	ldr	r3, [r2, #0]
 800500e:	ea36 0303 	bics.w	r3, r6, r3
 8005012:	d101      	bne.n	8005018 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8005014:	2000      	movs	r0, #0
 8005016:	e028      	b.n	800506a <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8005018:	1c6b      	adds	r3, r5, #1
 800501a:	d0f7      	beq.n	800500c <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800501c:	b125      	cbz	r5, 8005028 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 800501e:	f7fd fd63 	bl	8002ae8 <HAL_GetTick>
 8005022:	1bc0      	subs	r0, r0, r7
 8005024:	4285      	cmp	r5, r0
 8005026:	d2f0      	bcs.n	800500a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005028:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	f102 030c 	add.w	r3, r2, #12
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	320c      	adds	r2, #12
 8005038:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 800503c:	6821      	ldr	r1, [r4, #0]
 800503e:	2800      	cmp	r0, #0
 8005040:	d1f2      	bne.n	8005028 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	f101 0314 	add.w	r3, r1, #20
 8005046:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	f101 0014 	add.w	r0, r1, #20
 8005052:	e840 3200 	strex	r2, r3, [r0]
 8005056:	2a00      	cmp	r2, #0
 8005058:	d1f3      	bne.n	8005042 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800505a:	2320      	movs	r3, #32
 800505c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8005060:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8005064:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8005068:	2003      	movs	r0, #3
}
 800506a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800506c <HAL_UART_Init>:
{
 800506c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800506e:	4604      	mov	r4, r0
 8005070:	b340      	cbz	r0, 80050c4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005072:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005076:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800507a:	b91b      	cbnz	r3, 8005084 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800507c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8005080:	f001 febc 	bl	8006dfc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005084:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005086:	2324      	movs	r3, #36	; 0x24
 8005088:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800508c:	68d3      	ldr	r3, [r2, #12]
 800508e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005092:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005094:	4620      	mov	r0, r4
 8005096:	f7ff ff55 	bl	8004f44 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	691a      	ldr	r2, [r3, #16]
 800509e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050a4:	695a      	ldr	r2, [r3, #20]
 80050a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050aa:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050b2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80050b6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b8:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80050c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80050c4:	2001      	movs	r0, #1
 80050c6:	e7fc      	b.n	80050c2 <HAL_UART_Init+0x56>

080050c8 <HAL_UART_DeInit>:
{
 80050c8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80050ca:	4604      	mov	r4, r0
 80050cc:	b198      	cbz	r0, 80050f6 <HAL_UART_DeInit+0x2e>
  __HAL_UART_DISABLE(huart);
 80050ce:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80050d0:	2324      	movs	r3, #36	; 0x24
 80050d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80050d6:	68d3      	ldr	r3, [r2, #12]
 80050d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050dc:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 80050de:	f001 fedf 	bl	8006ea0 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e2:	2000      	movs	r0, #0
 80050e4:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(huart);
 80050e6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 80050ea:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80050ee:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f2:	6320      	str	r0, [r4, #48]	; 0x30
}
 80050f4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80050f6:	2001      	movs	r0, #1
 80050f8:	e7fc      	b.n	80050f4 <HAL_UART_DeInit+0x2c>

080050fa <HAL_UART_Transmit>:
{
 80050fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050fc:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80050fe:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8005102:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8005104:	2a20      	cmp	r2, #32
{
 8005106:	4604      	mov	r4, r0
 8005108:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800510a:	d149      	bne.n	80051a0 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 800510c:	2900      	cmp	r1, #0
 800510e:	d045      	beq.n	800519c <HAL_UART_Transmit+0xa2>
 8005110:	2f00      	cmp	r7, #0
 8005112:	d043      	beq.n	800519c <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8005114:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8005118:	2a01      	cmp	r2, #1
 800511a:	d041      	beq.n	80051a0 <HAL_UART_Transmit+0xa6>
 800511c:	2201      	movs	r2, #1
 800511e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005122:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005124:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005126:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005128:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800512c:	f7fd fcdc 	bl	8002ae8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005130:	68a1      	ldr	r1, [r4, #8]
 8005132:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8005134:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005136:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800513a:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 800513c:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513e:	d103      	bne.n	8005148 <HAL_UART_Transmit+0x4e>
 8005140:	6921      	ldr	r1, [r4, #16]
 8005142:	b909      	cbnz	r1, 8005148 <HAL_UART_Transmit+0x4e>
 8005144:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005146:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8005148:	2100      	movs	r1, #0
 800514a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800514e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8005150:	b289      	uxth	r1, r1
 8005152:	b941      	cbnz	r1, 8005166 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005154:	2140      	movs	r1, #64	; 0x40
 8005156:	4620      	mov	r0, r4
 8005158:	f7ff ff52 	bl	8005000 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800515c:	b960      	cbnz	r0, 8005178 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 800515e:	2320      	movs	r3, #32
 8005160:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8005164:	e009      	b.n	800517a <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005166:	2180      	movs	r1, #128	; 0x80
 8005168:	4620      	mov	r0, r4
 800516a:	e9cd 2300 	strd	r2, r3, [sp]
 800516e:	f7ff ff47 	bl	8005000 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8005172:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005176:	b110      	cbz	r0, 800517e <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8005178:	2003      	movs	r0, #3
}
 800517a:	b003      	add	sp, #12
 800517c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800517e:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8005180:	b94e      	cbnz	r6, 8005196 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005182:	f835 1b02 	ldrh.w	r1, [r5], #2
 8005186:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800518a:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 800518c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800518e:	3901      	subs	r1, #1
 8005190:	b289      	uxth	r1, r1
 8005192:	84e1      	strh	r1, [r4, #38]	; 0x26
 8005194:	e7db      	b.n	800514e <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005196:	f816 1b01 	ldrb.w	r1, [r6], #1
 800519a:	e7f6      	b.n	800518a <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800519c:	2001      	movs	r0, #1
 800519e:	e7ec      	b.n	800517a <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80051a0:	2002      	movs	r0, #2
 80051a2:	e7ea      	b.n	800517a <HAL_UART_Transmit+0x80>

080051a4 <HAL_UART_Receive>:
{
 80051a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051a8:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80051aa:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80051ae:	2b20      	cmp	r3, #32
{
 80051b0:	4604      	mov	r4, r0
 80051b2:	460f      	mov	r7, r1
 80051b4:	4615      	mov	r5, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80051b6:	d14d      	bne.n	8005254 <HAL_UART_Receive+0xb0>
    if ((pData == NULL) || (Size == 0U))
 80051b8:	2900      	cmp	r1, #0
 80051ba:	d049      	beq.n	8005250 <HAL_UART_Receive+0xac>
 80051bc:	2a00      	cmp	r2, #0
 80051be:	d047      	beq.n	8005250 <HAL_UART_Receive+0xac>
    __HAL_LOCK(huart);
 80051c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d045      	beq.n	8005254 <HAL_UART_Receive+0xb0>
 80051c8:	2301      	movs	r3, #1
 80051ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ce:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051d0:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d2:	6406      	str	r6, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051d4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d8:	6306      	str	r6, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 80051da:	f7fd fc85 	bl	8002ae8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051de:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 80051e0:	85a5      	strh	r5, [r4, #44]	; 0x2c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80051e6:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 80051e8:	85e5      	strh	r5, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ea:	d103      	bne.n	80051f4 <HAL_UART_Receive+0x50>
 80051ec:	6923      	ldr	r3, [r4, #16]
 80051ee:	b90b      	cbnz	r3, 80051f4 <HAL_UART_Receive+0x50>
 80051f0:	463e      	mov	r6, r7
      pdata8bits  = NULL;
 80051f2:	461f      	mov	r7, r3
    __HAL_UNLOCK(huart);
 80051f4:	2300      	movs	r3, #0
 80051f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 80051fa:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 80051fc:	b2a8      	uxth	r0, r5
 80051fe:	b920      	cbnz	r0, 800520a <HAL_UART_Receive+0x66>
    huart->RxState = HAL_UART_STATE_READY;
 8005200:	2320      	movs	r3, #32
 8005202:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800520a:	464b      	mov	r3, r9
 800520c:	4642      	mov	r2, r8
 800520e:	2120      	movs	r1, #32
 8005210:	4620      	mov	r0, r4
 8005212:	f7ff fef5 	bl	8005000 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8005216:	b9f8      	cbnz	r0, 8005258 <HAL_UART_Receive+0xb4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005218:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800521a:	b94f      	cbnz	r7, 8005230 <HAL_UART_Receive+0x8c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005222:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8005226:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8005228:	3b01      	subs	r3, #1
 800522a:	b29b      	uxth	r3, r3
 800522c:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800522e:	e7e4      	b.n	80051fa <HAL_UART_Receive+0x56>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005230:	68a2      	ldr	r2, [r4, #8]
 8005232:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005236:	d002      	beq.n	800523e <HAL_UART_Receive+0x9a>
 8005238:	b932      	cbnz	r2, 8005248 <HAL_UART_Receive+0xa4>
 800523a:	6922      	ldr	r2, [r4, #16]
 800523c:	b922      	cbnz	r2, 8005248 <HAL_UART_Receive+0xa4>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800523e:	6859      	ldr	r1, [r3, #4]
 8005240:	b2c9      	uxtb	r1, r1
 8005242:	f807 1b01 	strb.w	r1, [r7], #1
        pdata8bits++;
 8005246:	e7ee      	b.n	8005226 <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005248:	6859      	ldr	r1, [r3, #4]
 800524a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800524e:	e7f8      	b.n	8005242 <HAL_UART_Receive+0x9e>
      return  HAL_ERROR;
 8005250:	2001      	movs	r0, #1
 8005252:	e7d8      	b.n	8005206 <HAL_UART_Receive+0x62>
    return HAL_BUSY;
 8005254:	2002      	movs	r0, #2
 8005256:	e7d6      	b.n	8005206 <HAL_UART_Receive+0x62>
        return HAL_TIMEOUT;
 8005258:	2003      	movs	r0, #3
 800525a:	e7d4      	b.n	8005206 <HAL_UART_Receive+0x62>

0800525c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800525c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                                               Init->InternalBankNumber |\
                                               Init->CASLatency         |\
                                               Init->WriteProtection    |\
                                               Init->SDClockPeriod      |\
                                               Init->ReadBurst          |\
                                               Init->ReadPipeDelay
 8005260:	6a4a      	ldr	r2, [r1, #36]	; 0x24
                                               Init->ReadBurst          |\
 8005262:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
                                               Init->RowBitsNumber      |\
 8005266:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
                                               Init->InternalBankNumber |\
 800526a:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
                                               Init->WriteProtection    |\
 800526e:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005272:	6809      	ldr	r1, [r1, #0]
 8005274:	2901      	cmp	r1, #1
 8005276:	ea43 0304 	orr.w	r3, r3, r4
 800527a:	4912      	ldr	r1, [pc, #72]	; (80052c4 <FMC_SDRAM_Init+0x68>)
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800527c:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800527e:	d00f      	beq.n	80052a0 <FMC_SDRAM_Init+0x44>
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005280:	431a      	orrs	r2, r3
 8005282:	432a      	orrs	r2, r5
 8005284:	ea42 0308 	orr.w	r3, r2, r8
 8005288:	ea43 030e 	orr.w	r3, r3, lr
 800528c:	ea43 030c 	orr.w	r3, r3, ip
 8005290:	433b      	orrs	r3, r7
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005292:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005294:	4333      	orrs	r3, r6
 8005296:	430b      	orrs	r3, r1
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005298:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 800529a:	2000      	movs	r0, #0
 800529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80052a0:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80052a2:	6842      	ldr	r2, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80052a4:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80052a6:	ea45 0208 	orr.w	r2, r5, r8
 80052aa:	ea42 020e 	orr.w	r2, r2, lr
 80052ae:	ea42 020c 	orr.w	r2, r2, ip
 80052b2:	433a      	orrs	r2, r7
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80052b4:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80052b8:	4332      	orrs	r2, r6
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80052ba:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80052bc:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80052be:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80052c0:	6042      	str	r2, [r0, #4]
 80052c2:	e7ea      	b.n	800529a <FMC_SDRAM_Init+0x3e>
 80052c4:	ffff8000 	.word	0xffff8000

080052c8 <FMC_SDRAM_Timing_Init>:
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80052c8:	68cb      	ldr	r3, [r1, #12]
{
 80052ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80052cc:	680c      	ldr	r4, [r1, #0]
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80052ce:	688e      	ldr	r6, [r1, #8]
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80052d0:	690d      	ldr	r5, [r1, #16]
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80052d2:	1e5f      	subs	r7, r3, #1
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80052d4:	694b      	ldr	r3, [r1, #20]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80052d6:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80052da:	684c      	ldr	r4, [r1, #4]
                       (((Timing->RCDDelay)-1U) << 24U));
 80052dc:	6989      	ldr	r1, [r1, #24]
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80052de:	3b01      	subs	r3, #1
 80052e0:	051b      	lsls	r3, r3, #20
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80052e2:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80052e4:	3e01      	subs	r6, #1
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80052e6:	3d01      	subs	r5, #1
                       (((Timing->RCDDelay)-1U) << 24U));
 80052e8:	3901      	subs	r1, #1
  if (Bank != FMC_SDRAM_BANK2) 
 80052ea:	2a01      	cmp	r2, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80052ec:	ea4f 1404 	mov.w	r4, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80052f0:	ea4f 2606 	mov.w	r6, r6, lsl #8
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80052f4:	ea4f 4505 	mov.w	r5, r5, lsl #16
                       (((Timing->RCDDelay)-1U) << 24U));
 80052f8:	ea4f 6101 	mov.w	r1, r1, lsl #24
 80052fc:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
 8005300:	d00c      	beq.n	800531c <FMC_SDRAM_Timing_Init+0x54>
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005302:	ea43 030c 	orr.w	r3, r3, ip
 8005306:	4323      	orrs	r3, r4
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005308:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800530a:	4333      	orrs	r3, r6
 800530c:	432b      	orrs	r3, r5
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800530e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005312:	430b      	orrs	r3, r1
 8005314:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005316:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 8005318:	2000      	movs	r0, #0
 800531a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800531c:	6887      	ldr	r7, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800531e:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
 8005322:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005326:	4334      	orrs	r4, r6
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005328:	433b      	orrs	r3, r7
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800532a:	ea44 020c 	orr.w	r2, r4, ip
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800532e:	68c7      	ldr	r7, [r0, #12]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005330:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005332:	432a      	orrs	r2, r5
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005334:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005338:	430a      	orrs	r2, r1
 800533a:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800533c:	60c2      	str	r2, [r0, #12]
 800533e:	e7eb      	b.n	8005318 <FMC_SDRAM_Timing_Init+0x50>

08005340 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005340:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tmpr = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	9301      	str	r3, [sp, #4]
{
 8005346:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005348:	e9d1 3200 	ldrd	r3, r2, [r1]
 800534c:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
                    ((Command->ModeRegisterDefinition) << 9U)
 800534e:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005350:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8005354:	688a      	ldr	r2, [r1, #8]
 8005356:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005358:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800535c:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 800535e:	9b01      	ldr	r3, [sp, #4]
 8005360:	6103      	str	r3, [r0, #16]
{
 8005362:	4604      	mov	r4, r0

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005364:	f7fd fbc0 	bl	8002ae8 <HAL_GetTick>
 8005368:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800536a:	69a3      	ldr	r3, [r4, #24]
 800536c:	f013 0320 	ands.w	r3, r3, #32
 8005370:	d101      	bne.n	8005376 <FMC_SDRAM_SendCommand+0x36>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8005372:	4618      	mov	r0, r3
 8005374:	e003      	b.n	800537e <FMC_SDRAM_SendCommand+0x3e>
    if(Timeout != HAL_MAX_DELAY)
 8005376:	1c6b      	adds	r3, r5, #1
 8005378:	d0f7      	beq.n	800536a <FMC_SDRAM_SendCommand+0x2a>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800537a:	b915      	cbnz	r5, 8005382 <FMC_SDRAM_SendCommand+0x42>
        return HAL_TIMEOUT;
 800537c:	2003      	movs	r0, #3
}
 800537e:	b002      	add	sp, #8
 8005380:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005382:	f7fd fbb1 	bl	8002ae8 <HAL_GetTick>
 8005386:	1b80      	subs	r0, r0, r6
 8005388:	42a8      	cmp	r0, r5
 800538a:	d9ee      	bls.n	800536a <FMC_SDRAM_SendCommand+0x2a>
 800538c:	e7f6      	b.n	800537c <FMC_SDRAM_SendCommand+0x3c>

0800538e <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800538e:	6943      	ldr	r3, [r0, #20]
 8005390:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8005394:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8005396:	2000      	movs	r0, #0
 8005398:	4770      	bx	lr
	...

0800539c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800539c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053d4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80053a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80053a2:	e003      	b.n	80053ac <LoopCopyDataInit>

080053a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80053a4:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80053a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80053a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80053aa:	3104      	adds	r1, #4

080053ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80053ac:	480b      	ldr	r0, [pc, #44]	; (80053dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80053ae:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80053b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80053b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80053b4:	d3f6      	bcc.n	80053a4 <CopyDataInit>
  ldr  r2, =_sbss
 80053b6:	4a0b      	ldr	r2, [pc, #44]	; (80053e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80053b8:	e002      	b.n	80053c0 <LoopFillZerobss>

080053ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80053ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80053bc:	f842 3b04 	str.w	r3, [r2], #4

080053c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80053c0:	4b09      	ldr	r3, [pc, #36]	; (80053e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80053c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80053c4:	d3f9      	bcc.n	80053ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80053c6:	f7fd fb1f 	bl	8002a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053ca:	f002 f9ef 	bl	80077ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053ce:	f000 ffd5 	bl	800637c <main>
  bx  lr    
 80053d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80053d4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80053d8:	08037f10 	.word	0x08037f10
  ldr  r0, =_sdata
 80053dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80053e0:	20000284 	.word	0x20000284
  ldr  r2, =_sbss
 80053e4:	20000284 	.word	0x20000284
  ldr  r3, = _ebss
 80053e8:	2000478c 	.word	0x2000478c

080053ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053ec:	e7fe      	b.n	80053ec <ADC_IRQHandler>
	...

080053f0 <GPIOB_Init>:
 *      Author: patricio
 */

#include "main.h"

void GPIOB_Init(void) {
 80053f0:	b530      	push	{r4, r5, lr}
 80053f2:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;

  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053f4:	2300      	movs	r3, #0
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <GPIOB_Init+0x40>)
  GPIO_InitStruct.Pin = RELAY_IN_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053fa:	480e      	ldr	r0, [pc, #56]	; (8005434 <GPIOB_Init+0x44>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053fe:	f042 0202 	orr.w	r2, r2, #2
 8005402:	631a      	str	r2, [r3, #48]	; 0x30
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800540c:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800540e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005410:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8005412:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005414:	2510      	movs	r5, #16
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005416:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8005418:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800541a:	e9cd 5401 	strd	r5, r4, [sp, #4]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800541e:	f7fd fe05 	bl	800302c <HAL_GPIO_Init>

  // Disable Relay input at init
  HAL_GPIO_WritePin(GPIOB, RELAY_IN_PIN, GPIO_PIN_SET);
 8005422:	4804      	ldr	r0, [pc, #16]	; (8005434 <GPIOB_Init+0x44>)
 8005424:	4622      	mov	r2, r4
 8005426:	4629      	mov	r1, r5
 8005428:	f7fd ff8e 	bl	8003348 <HAL_GPIO_WritePin>

}
 800542c:	b007      	add	sp, #28
 800542e:	bd30      	pop	{r4, r5, pc}
 8005430:	40023800 	.word	0x40023800
 8005434:	40020400 	.word	0x40020400

08005438 <PCD_WriteRegister>:

/* Public functions ----------------------------------------------------------*/

void PCD_WriteRegister(	uint8_t reg,		///< The register to write to. One of the PCD_Register enums.
						uint8_t value		///< The value to write.
						) {
 8005438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		MFRC522_CS_LOW;				// Select slave
 800543a:	4e0c      	ldr	r6, [pc, #48]	; (800546c <PCD_WriteRegister+0x34>)
		SPI_TransmitByte(MFRC522_SPI, (reg & 0x7E));	// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 800543c:	4f0c      	ldr	r7, [pc, #48]	; (8005470 <PCD_WriteRegister+0x38>)
		MFRC522_CS_LOW;				// Select slave
 800543e:	2200      	movs	r2, #0
						) {
 8005440:	4605      	mov	r5, r0
 8005442:	460c      	mov	r4, r1
		MFRC522_CS_LOW;				// Select slave
 8005444:	4630      	mov	r0, r6
 8005446:	2108      	movs	r1, #8
 8005448:	f7fd ff7e 	bl	8003348 <HAL_GPIO_WritePin>
		SPI_TransmitByte(MFRC522_SPI, (reg & 0x7E));	// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 800544c:	f005 017e 	and.w	r1, r5, #126	; 0x7e
 8005450:	4638      	mov	r0, r7
 8005452:	f000 fc71 	bl	8005d38 <SPI_TransmitByte>
		SPI_TransmitByte(MFRC522_SPI, value);
 8005456:	4621      	mov	r1, r4
 8005458:	4638      	mov	r0, r7
 800545a:	f000 fc6d 	bl	8005d38 <SPI_TransmitByte>
		MFRC522_CS_HIGH;			// Release slave again
 800545e:	4630      	mov	r0, r6
 8005460:	2201      	movs	r2, #1
} // End PCD_WriteRegister()
 8005462:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		MFRC522_CS_HIGH;			// Release slave again
 8005466:	2108      	movs	r1, #8
 8005468:	f7fd bf6e 	b.w	8003348 <HAL_GPIO_WritePin>
 800546c:	40021000 	.word	0x40021000
 8005470:	20000a68 	.word	0x20000a68

08005474 <PCD_WriteRegisterMulti>:
 * The interface is described in the datasheet section 8.1.2.
 */
void PCD_WriteRegisterMulti( uint8_t reg,		///< The register to write to. One of the PCD_Register enums.
							 uint8_t count,		///< The number of uint8_ts to write to the register
							 uint8_t *values	///< The values to write. uint8_t array.
							) {
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	4606      	mov	r6, r0
 8005478:	460d      	mov	r5, r1
	MFRC522_CS_LOW;		// Select slave
 800547a:	480e      	ldr	r0, [pc, #56]	; (80054b4 <PCD_WriteRegisterMulti+0x40>)
							) {
 800547c:	4614      	mov	r4, r2
	MFRC522_CS_LOW;		// Select slave
 800547e:	2108      	movs	r1, #8
 8005480:	2200      	movs	r2, #0
 8005482:	f7fd ff61 	bl	8003348 <HAL_GPIO_WritePin>
	SPI_TransmitByte(MFRC522_SPI, (reg & 0x7E));	// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 8005486:	f006 017e 	and.w	r1, r6, #126	; 0x7e
 800548a:	480b      	ldr	r0, [pc, #44]	; (80054b8 <PCD_WriteRegisterMulti+0x44>)
	for (uint8_t index = 0; index < count; index++) {
		SPI_TransmitByte(MFRC522_SPI, values[index]);
 800548c:	4e0a      	ldr	r6, [pc, #40]	; (80054b8 <PCD_WriteRegisterMulti+0x44>)
	SPI_TransmitByte(MFRC522_SPI, (reg & 0x7E));	// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 800548e:	f000 fc53 	bl	8005d38 <SPI_TransmitByte>
	for (uint8_t index = 0; index < count; index++) {
 8005492:	4425      	add	r5, r4
 8005494:	42ac      	cmp	r4, r5
 8005496:	d106      	bne.n	80054a6 <PCD_WriteRegisterMulti+0x32>
	}
	MFRC522_CS_HIGH;	// Release slave again
} // End PCD_WriteRegister()
 8005498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	MFRC522_CS_HIGH;	// Release slave again
 800549c:	4805      	ldr	r0, [pc, #20]	; (80054b4 <PCD_WriteRegisterMulti+0x40>)
 800549e:	2201      	movs	r2, #1
 80054a0:	2108      	movs	r1, #8
 80054a2:	f7fd bf51 	b.w	8003348 <HAL_GPIO_WritePin>
		SPI_TransmitByte(MFRC522_SPI, values[index]);
 80054a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054aa:	4630      	mov	r0, r6
 80054ac:	f000 fc44 	bl	8005d38 <SPI_TransmitByte>
	for (uint8_t index = 0; index < count; index++) {
 80054b0:	e7f0      	b.n	8005494 <PCD_WriteRegisterMulti+0x20>
 80054b2:	bf00      	nop
 80054b4:	40021000 	.word	0x40021000
 80054b8:	20000a68 	.word	0x20000a68

080054bc <PCD_ReadRegister>:
/**
 * Reads a uint8_t from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
uint8_t PCD_ReadRegister( uint8_t reg	///< The register to read from. One of the PCD_Register enums.
						 ) {
 80054bc:	b538      	push	{r3, r4, r5, lr}
	uint8_t value;
	MFRC522_CS_LOW;			// Select slave
 80054be:	4d0d      	ldr	r5, [pc, #52]	; (80054f4 <PCD_ReadRegister+0x38>)
 80054c0:	2200      	movs	r2, #0
						 ) {
 80054c2:	4604      	mov	r4, r0
	MFRC522_CS_LOW;			// Select slave
 80054c4:	2108      	movs	r1, #8
 80054c6:	4628      	mov	r0, r5
 80054c8:	f7fd ff3e 	bl	8003348 <HAL_GPIO_WritePin>
	SPI_TransmitByte(MFRC522_SPI, (0x80 | (reg & 0x7E)));	// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80054cc:	f004 017e 	and.w	r1, r4, #126	; 0x7e
 80054d0:	4c09      	ldr	r4, [pc, #36]	; (80054f8 <PCD_ReadRegister+0x3c>)
 80054d2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80054d6:	4620      	mov	r0, r4
 80054d8:	f000 fc2e 	bl	8005d38 <SPI_TransmitByte>
	value = SPI_TransmitByte(MFRC522_SPI, 0);				// Read the value back. Send 0 to stop reading.
 80054dc:	2100      	movs	r1, #0
 80054de:	4620      	mov	r0, r4
 80054e0:	f000 fc2a 	bl	8005d38 <SPI_TransmitByte>
	MFRC522_CS_HIGH;		// Release slave again
 80054e4:	2201      	movs	r2, #1
	value = SPI_TransmitByte(MFRC522_SPI, 0);				// Read the value back. Send 0 to stop reading.
 80054e6:	4604      	mov	r4, r0
	MFRC522_CS_HIGH;		// Release slave again
 80054e8:	2108      	movs	r1, #8
 80054ea:	4628      	mov	r0, r5
 80054ec:	f7fd ff2c 	bl	8003348 <HAL_GPIO_WritePin>
	return value;
} // End PCD_ReadRegister()
 80054f0:	4620      	mov	r0, r4
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	40021000 	.word	0x40021000
 80054f8:	20000a68 	.word	0x20000a68

080054fc <PCD_ReadRegisterMulti>:
 */
void PCD_ReadRegisterMulti(	uint8_t reg,		///< The register to read from. One of the PCD_Register enums.
								uint8_t count,		///< The number of uint8_ts to read
								uint8_t *rcvData,	///< uint8_t array to store the values in.
								uint8_t rxAlign	    ///< Only bit positions rxAlign..7 in values[0] are updated.
								) {
 80054fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005500:	4616      	mov	r6, r2
 8005502:	461f      	mov	r7, r3
	uint8_t dummy;		// this is actualy never used - only for the sake of code readability
	uint8_t readdata;
	if (count == 0) {
 8005504:	460c      	mov	r4, r1
 8005506:	2900      	cmp	r1, #0
 8005508:	d046      	beq.n	8005598 <PCD_ReadRegisterMulti+0x9c>
		return;
	}
	//Form the register address:
	uint8_t address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address.
 800550a:	f000 007e 	and.w	r0, r0, #126	; 0x7e
 800550e:	f040 0580 	orr.w	r5, r0, #128	; 0x80
												// MFRC522 Datasheet section 8.1.2.3.
	uint8_t index = 0;							// Index in values array.
	MFRC522_CS_LOW;		// Select slave
 8005512:	2200      	movs	r2, #0
 8005514:	4821      	ldr	r0, [pc, #132]	; (800559c <PCD_ReadRegisterMulti+0xa0>)
	count--;								// One read is performed outside of the loop - this is dummy read
	dummy = SPI_TransmitByte(MFRC522_SPI, address);		// The first read is dummy - just tell MFRC522 which address we want to read

	while (index < count) {
		// Read value and tell that we want to read the same address again:
		readdata = SPI_TransmitByte(MFRC522_SPI, address);
 8005516:	f8df a088 	ldr.w	sl, [pc, #136]	; 80055a0 <PCD_ReadRegisterMulti+0xa4>
	MFRC522_CS_LOW;		// Select slave
 800551a:	2108      	movs	r1, #8
 800551c:	f7fd ff14 	bl	8003348 <HAL_GPIO_WritePin>
	dummy = SPI_TransmitByte(MFRC522_SPI, address);		// The first read is dummy - just tell MFRC522 which address we want to read
 8005520:	481f      	ldr	r0, [pc, #124]	; (80055a0 <PCD_ReadRegisterMulti+0xa4>)
 8005522:	4629      	mov	r1, r5
 8005524:	f000 fc08 	bl	8005d38 <SPI_TransmitByte>
	count--;								// One read is performed outside of the loop - this is dummy read
 8005528:	3c01      	subs	r4, #1
 800552a:	b2e4      	uxtb	r4, r4
	while (index < count) {
 800552c:	f04f 0900 	mov.w	r9, #0
		// If this is the first byte in the bit oriented frame, check where is the first received bit:
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in rcvData[0]
			// Create bit mask for bit positions rxAlign..7
			uint8_t mask = 0;
			for (uint8_t i = rxAlign; i <= 7; i++) {
				mask |= (1 << i);
 8005530:	f04f 0b01 	mov.w	fp, #1
	while (index < count) {
 8005534:	fa5f f889 	uxtb.w	r8, r9
 8005538:	4544      	cmp	r4, r8
 800553a:	d80b      	bhi.n	8005554 <PCD_ReadRegisterMulti+0x58>
		else { // Normal case
			rcvData[index] = readdata;	// Read value and tell that we want to read the same address again.
		}
		index++;
	}
	rcvData[index] = SPI_TransmitByte(MFRC522_SPI, 0);			// Read the final uint8_t. Send 0 to stop reading.
 800553c:	2100      	movs	r1, #0
 800553e:	4818      	ldr	r0, [pc, #96]	; (80055a0 <PCD_ReadRegisterMulti+0xa4>)
 8005540:	f000 fbfa 	bl	8005d38 <SPI_TransmitByte>
	MFRC522_CS_HIGH;			// Release slave again
 8005544:	2201      	movs	r2, #1
	rcvData[index] = SPI_TransmitByte(MFRC522_SPI, 0);			// Read the final uint8_t. Send 0 to stop reading.
 8005546:	5530      	strb	r0, [r6, r4]
	MFRC522_CS_HIGH;			// Release slave again
 8005548:	2108      	movs	r1, #8
} // End PCD_ReadRegister()
 800554a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	MFRC522_CS_HIGH;			// Release slave again
 800554e:	4813      	ldr	r0, [pc, #76]	; (800559c <PCD_ReadRegisterMulti+0xa0>)
 8005550:	f7fd befa 	b.w	8003348 <HAL_GPIO_WritePin>
		readdata = SPI_TransmitByte(MFRC522_SPI, address);
 8005554:	4629      	mov	r1, r5
 8005556:	4650      	mov	r0, sl
 8005558:	f000 fbee 	bl	8005d38 <SPI_TransmitByte>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in rcvData[0]
 800555c:	f1b8 0f00 	cmp.w	r8, #0
 8005560:	d117      	bne.n	8005592 <PCD_ReadRegisterMulti+0x96>
 8005562:	b1b7      	cbz	r7, 8005592 <PCD_ReadRegisterMulti+0x96>
 8005564:	4639      	mov	r1, r7
			for (uint8_t i = rxAlign; i <= 7; i++) {
 8005566:	b2cb      	uxtb	r3, r1
 8005568:	2b07      	cmp	r3, #7
				mask |= (1 << i);
 800556a:	fa4f f288 	sxtb.w	r2, r8
			for (uint8_t i = rxAlign; i <= 7; i++) {
 800556e:	d909      	bls.n	8005584 <PCD_ReadRegisterMulti+0x88>
			rcvData[0] = (rcvData[0] & ~mask) | (readdata & mask);
 8005570:	7833      	ldrb	r3, [r6, #0]
 8005572:	ea00 0008 	and.w	r0, r0, r8
 8005576:	ea23 0302 	bic.w	r3, r3, r2
 800557a:	4318      	orrs	r0, r3
 800557c:	7030      	strb	r0, [r6, #0]
		index++;
 800557e:	f109 0901 	add.w	r9, r9, #1
 8005582:	e7d7      	b.n	8005534 <PCD_ReadRegisterMulti+0x38>
				mask |= (1 << i);
 8005584:	fa0b f301 	lsl.w	r3, fp, r1
 8005588:	4313      	orrs	r3, r2
 800558a:	fa5f f883 	uxtb.w	r8, r3
			for (uint8_t i = rxAlign; i <= 7; i++) {
 800558e:	3101      	adds	r1, #1
 8005590:	e7e9      	b.n	8005566 <PCD_ReadRegisterMulti+0x6a>
			rcvData[index] = readdata;	// Read value and tell that we want to read the same address again.
 8005592:	f806 0009 	strb.w	r0, [r6, r9]
 8005596:	e7f2      	b.n	800557e <PCD_ReadRegisterMulti+0x82>
} // End PCD_ReadRegister()
 8005598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800559c:	40021000 	.word	0x40021000
 80055a0:	20000a68 	.word	0x20000a68

080055a4 <PCD_SetRegisterBitMask>:
/**
 * Sets the bits given in mask in register reg.
 */
void PCD_SetRegisterBitMask( uint8_t reg,	///< The register to update. One of the PCD_Register enums.
							 uint8_t mask	///< The bits to set.
							) {
 80055a4:	b538      	push	{r3, r4, r5, lr}
 80055a6:	460d      	mov	r5, r1
 80055a8:	4604      	mov	r4, r0
	uint8_t tmp;
	tmp = PCD_ReadRegister(reg);
 80055aa:	f7ff ff87 	bl	80054bc <PCD_ReadRegister>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80055ae:	4328      	orrs	r0, r5
 80055b0:	b2c1      	uxtb	r1, r0
 80055b2:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
 80055b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80055b8:	f7ff bf3e 	b.w	8005438 <PCD_WriteRegister>

080055bc <PCD_ClearRegisterBitMask>:
/**
 * Clears the bits given in mask from register reg.
 */
void PCD_ClearRegisterBitMask(	uint8_t reg,	///< The register to update. One of the PCD_Register enums.
								uint8_t mask	///< The bits to clear.
								) {
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	460d      	mov	r5, r1
 80055c0:	4604      	mov	r4, r0
	uint8_t tmp;
	tmp = PCD_ReadRegister(reg);
 80055c2:	f7ff ff7b 	bl	80054bc <PCD_ReadRegister>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80055c6:	ea20 0005 	bic.w	r0, r0, r5
 80055ca:	b2c1      	uxtb	r1, r0
 80055cc:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
 80055ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80055d2:	f7ff bf31 	b.w	8005438 <PCD_WriteRegister>

080055d6 <PCD_CalculateCRC>:
 */
StatusCode_t PCD_CalculateCRC(
							uint8_t *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
							uint8_t length,		///< In: The number of uint8_ts to transfer.
							uint8_t *result		///< Out: Pointer to result buffer. Result is written to result[0..1], low uint8_t first.
					 	 ) {
 80055d6:	b570      	push	{r4, r5, r6, lr}
 80055d8:	460d      	mov	r5, r1
 80055da:	4606      	mov	r6, r0
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80055dc:	2100      	movs	r1, #0
 80055de:	2002      	movs	r0, #2
					 	 ) {
 80055e0:	4614      	mov	r4, r2
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80055e2:	f7ff ff29 	bl	8005438 <PCD_WriteRegister>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
 80055e6:	2104      	movs	r1, #4
 80055e8:	200a      	movs	r0, #10
 80055ea:	f7ff ff25 	bl	8005438 <PCD_WriteRegister>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80055ee:	2180      	movs	r1, #128	; 0x80
 80055f0:	2014      	movs	r0, #20
 80055f2:	f7ff ffd7 	bl	80055a4 <PCD_SetRegisterBitMask>
	PCD_WriteRegisterMulti(FIFODataReg, length, data);		// Write data to the FIFO
 80055f6:	4629      	mov	r1, r5
 80055f8:	4632      	mov	r2, r6
 80055fa:	2012      	movs	r0, #18
 80055fc:	f7ff ff3a 	bl	8005474 <PCD_WriteRegisterMulti>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
 8005600:	2103      	movs	r1, #3
 8005602:	2002      	movs	r0, #2
 8005604:	f7ff ff18 	bl	8005438 <PCD_WriteRegister>
 8005608:	f241 3588 	movw	r5, #5000	; 0x1388

	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73µs.
	int32_t i = 5000;
	uint8_t n;
	while (1) {
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
 800560c:	200a      	movs	r0, #10
 800560e:	f7ff ff55 	bl	80054bc <PCD_ReadRegister>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
 8005612:	0743      	lsls	r3, r0, #29
 8005614:	d403      	bmi.n	800561e <PCD_CalculateCRC+0x48>
			break;
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
 8005616:	3d01      	subs	r5, #1
 8005618:	d1f8      	bne.n	800560c <PCD_CalculateCRC+0x36>
			return STATUS_TIMEOUT;
 800561a:	2004      	movs	r0, #4
 800561c:	e00c      	b.n	8005638 <PCD_CalculateCRC+0x62>
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
 800561e:	2100      	movs	r1, #0
 8005620:	2002      	movs	r0, #2
 8005622:	f7ff ff09 	bl	8005438 <PCD_WriteRegister>

	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
 8005626:	2044      	movs	r0, #68	; 0x44
 8005628:	f7ff ff48 	bl	80054bc <PCD_ReadRegister>
 800562c:	7020      	strb	r0, [r4, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
 800562e:	2042      	movs	r0, #66	; 0x42
 8005630:	f7ff ff44 	bl	80054bc <PCD_ReadRegister>
 8005634:	7060      	strb	r0, [r4, #1]
	return STATUS_OK;
 8005636:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
 8005638:	bd70      	pop	{r4, r5, r6, pc}

0800563a <PCD_Reset>:

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void PCD_Reset() {
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 800563a:	2002      	movs	r0, #2
void PCD_Reset() {
 800563c:	b508      	push	{r3, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 800563e:	210f      	movs	r1, #15
 8005640:	f7ff fefa 	bl	8005438 <PCD_WriteRegister>
	//uint8_t tmp = PCD_ReadRegister(CommandReg);
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg)
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74µs. Let us be generous: 50ms.
	HAL_Delay(50);
 8005644:	2032      	movs	r0, #50	; 0x32
 8005646:	f7fd fa55 	bl	8002af4 <HAL_Delay>
	//tmp = PCD_ReadRegister(CommandReg);
	// Wait for the PowerDown bit in CommandReg to be cleared
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
 800564a:	2002      	movs	r0, #2
 800564c:	f7ff ff36 	bl	80054bc <PCD_ReadRegister>
 8005650:	06c3      	lsls	r3, r0, #27
 8005652:	d4fa      	bmi.n	800564a <PCD_Reset+0x10>
		// PCD still restarting - unlikely after waiting 50ms, but better safe than sorry.
	}
	//tmp = PCD_ReadRegister(CommandReg);
} // End PCD_Reset()
 8005654:	bd08      	pop	{r3, pc}

08005656 <PCD_AntennaOn>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void PCD_AntennaOn() {
 8005656:	b508      	push	{r3, lr}
	uint8_t value = PCD_ReadRegister(TxControlReg);
 8005658:	2028      	movs	r0, #40	; 0x28
 800565a:	f7ff ff2f 	bl	80054bc <PCD_ReadRegister>
	if ((value & 0x03) != 0x03) {
 800565e:	f000 0303 	and.w	r3, r0, #3
 8005662:	2b03      	cmp	r3, #3
 8005664:	d00a      	beq.n	800567c <PCD_AntennaOn+0x26>
		PCD_WriteRegister(TxControlReg, value | 0x03);
 8005666:	f040 0003 	orr.w	r0, r0, #3
 800566a:	b2c1      	uxtb	r1, r0
 800566c:	2028      	movs	r0, #40	; 0x28
 800566e:	f7ff fee3 	bl	8005438 <PCD_WriteRegister>
		uint8_t tmp = PCD_ReadRegister(TxControlReg);
	}
} // End PCD_AntennaOn()
 8005672:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		uint8_t tmp = PCD_ReadRegister(TxControlReg);
 8005676:	2028      	movs	r0, #40	; 0x28
 8005678:	f7ff bf20 	b.w	80054bc <PCD_ReadRegister>
} // End PCD_AntennaOn()
 800567c:	bd08      	pop	{r3, pc}
	...

08005680 <PCD_Init>:
void PCD_Init() {
 8005680:	b508      	push	{r3, lr}
	InitSPI(MFRC522_SPI);
 8005682:	4810      	ldr	r0, [pc, #64]	; (80056c4 <PCD_Init+0x44>)
 8005684:	f000 fb3a 	bl	8005cfc <InitSPI>
	PCD_Reset();
 8005688:	f7ff ffd7 	bl	800563a <PCD_Reset>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 800568c:	2180      	movs	r1, #128	; 0x80
 800568e:	2054      	movs	r0, #84	; 0x54
 8005690:	f7ff fed2 	bl	8005438 <PCD_WriteRegister>
    PCD_WriteRegister(TPrescalerReg, 0xA9);		// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25µs.
 8005694:	21a9      	movs	r1, #169	; 0xa9
 8005696:	2056      	movs	r0, #86	; 0x56
 8005698:	f7ff fece 	bl	8005438 <PCD_WriteRegister>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 800569c:	2103      	movs	r1, #3
 800569e:	2058      	movs	r0, #88	; 0x58
 80056a0:	f7ff feca 	bl	8005438 <PCD_WriteRegister>
    PCD_WriteRegister(TReloadRegL, 0xE8);
 80056a4:	21e8      	movs	r1, #232	; 0xe8
 80056a6:	205a      	movs	r0, #90	; 0x5a
 80056a8:	f7ff fec6 	bl	8005438 <PCD_WriteRegister>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 80056ac:	2140      	movs	r1, #64	; 0x40
 80056ae:	202a      	movs	r0, #42	; 0x2a
 80056b0:	f7ff fec2 	bl	8005438 <PCD_WriteRegister>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 80056b4:	213d      	movs	r1, #61	; 0x3d
 80056b6:	2022      	movs	r0, #34	; 0x22
 80056b8:	f7ff febe 	bl	8005438 <PCD_WriteRegister>
} // End PCD_Init()
 80056bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80056c0:	f7ff bfc9 	b.w	8005656 <PCD_AntennaOn>
 80056c4:	20000a68 	.word	0x20000a68

080056c8 <PCD_CommunicateWithPICC>:
								uint8_t *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
								uint8_t *backLen,		///< In: Max number of uint8_ts to write to *backData. Out: The number of uint8_ts returned.
								uint8_t *validBits,		///< In/Out: The number of valid bits in the last uint8_t. 0 for 8 valid bits.
								uint8_t rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
								bool checkCRC			///< In: True => The last two uint8_ts of the response is assumed to be a CRC_A that must be validated.
								) {
 80056c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056cc:	b087      	sub	sp, #28
 80056ce:	468a      	mov	sl, r1
 80056d0:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 80056d4:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 80056d8:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 80056dc:	9101      	str	r1, [sp, #4]
 80056de:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 80056e2:	4681      	mov	r9, r0
 80056e4:	2600      	movs	r6, #0
	uint8_t n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	uint8_t txLastBits = validBits ? *validBits : 0;
 80056e6:	f1b8 0f00 	cmp.w	r8, #0
 80056ea:	d035      	beq.n	8005758 <PCD_CommunicateWithPICC+0x90>
 80056ec:	f898 7000 	ldrb.w	r7, [r8]
	uint8_t bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]

	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80056f0:	2100      	movs	r1, #0
 80056f2:	2002      	movs	r0, #2
 80056f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056f8:	f7ff fe9e 	bl	8005438 <PCD_WriteRegister>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
 80056fc:	217f      	movs	r1, #127	; 0x7f
 80056fe:	2008      	movs	r0, #8
 8005700:	f7ff fe9a 	bl	8005438 <PCD_WriteRegister>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);			// FlushBuffer = 1, FIFO initialization
 8005704:	2180      	movs	r1, #128	; 0x80
 8005706:	2014      	movs	r0, #20
 8005708:	f7ff ff4c 	bl	80055a4 <PCD_SetRegisterBitMask>
	PCD_WriteRegisterMulti(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 800570c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	uint8_t bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 8005710:	eb07 170b 	add.w	r7, r7, fp, lsl #4
	PCD_WriteRegisterMulti(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 8005714:	4619      	mov	r1, r3
 8005716:	2012      	movs	r0, #18
	uint8_t bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 8005718:	b2ff      	uxtb	r7, r7
	PCD_WriteRegisterMulti(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 800571a:	f7ff feab 	bl	8005474 <PCD_WriteRegisterMulti>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
 800571e:	4639      	mov	r1, r7
 8005720:	201a      	movs	r0, #26
 8005722:	f7ff fe89 	bl	8005438 <PCD_WriteRegister>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
 8005726:	4649      	mov	r1, r9
 8005728:	2002      	movs	r0, #2
 800572a:	f7ff fe85 	bl	8005438 <PCD_WriteRegister>
	if (command == PCD_Transceive) 	{
 800572e:	f1b9 0f0c 	cmp.w	r9, #12
 8005732:	d103      	bne.n	800573c <PCD_CommunicateWithPICC+0x74>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
 8005734:	2180      	movs	r1, #128	; 0x80
 8005736:	201a      	movs	r0, #26
 8005738:	f7ff ff34 	bl	80055a4 <PCD_SetRegisterBitMask>
	uint8_t txLastBits = validBits ? *validBits : 0;
 800573c:	f242 7710 	movw	r7, #10000	; 0x2710
	// Wait for the command to complete.
	// In PCD_Init() we set the TAuto flag in TModeReg. This means the timer automatically starts when the PCD stops transmitting.
	// Each iteration of the do-while-loop takes 17.86µs.
	i = 10000;
	while (1) {
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
 8005740:	2008      	movs	r0, #8
 8005742:	f7ff febb 	bl	80054bc <PCD_ReadRegister>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
 8005746:	ea10 0f0a 	tst.w	r0, sl
 800574a:	d107      	bne.n	800575c <PCD_CommunicateWithPICC+0x94>
			break;
		}
		if (n & 0x01) {	// Timer interrupt - nothing received in 25ms
 800574c:	07c2      	lsls	r2, r0, #31
 800574e:	d401      	bmi.n	8005754 <PCD_CommunicateWithPICC+0x8c>
			return STATUS_TIMEOUT;
		}
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
 8005750:	3f01      	subs	r7, #1
 8005752:	d1f5      	bne.n	8005740 <PCD_CommunicateWithPICC+0x78>
			return STATUS_TIMEOUT;
 8005754:	2004      	movs	r0, #4
 8005756:	e046      	b.n	80057e6 <PCD_CommunicateWithPICC+0x11e>
	uint8_t txLastBits = validBits ? *validBits : 0;
 8005758:	4647      	mov	r7, r8
 800575a:	e7c9      	b.n	80056f0 <PCD_CommunicateWithPICC+0x28>
			return STATUS_TIMEOUT;
		}
	}

	// Stop now if any errors except collisions were detected.
	uint8_t errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 800575c:	200c      	movs	r0, #12
 800575e:	f7ff fead 	bl	80054bc <PCD_ReadRegister>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 8005762:	f010 0f13 	tst.w	r0, #19
	uint8_t errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 8005766:	4607      	mov	r7, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 8005768:	d140      	bne.n	80057ec <PCD_CommunicateWithPICC+0x124>
		return STATUS_ERROR;
	}

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
 800576a:	b1bc      	cbz	r4, 800579c <PCD_CommunicateWithPICC+0xd4>
 800576c:	b1b5      	cbz	r5, 800579c <PCD_CommunicateWithPICC+0xd4>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of uint8_ts in the FIFO
 800576e:	2014      	movs	r0, #20
 8005770:	f7ff fea4 	bl	80054bc <PCD_ReadRegister>
		if (n > *backLen) {
 8005774:	782b      	ldrb	r3, [r5, #0]
 8005776:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of uint8_ts in the FIFO
 8005778:	4601      	mov	r1, r0
		if (n > *backLen) {
 800577a:	d339      	bcc.n	80057f0 <PCD_CommunicateWithPICC+0x128>
			return STATUS_NO_ROOM;
		}
		*backLen = n;												// Number of uint8_ts returned
 800577c:	7028      	strb	r0, [r5, #0]
		PCD_ReadRegisterMulti(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
 800577e:	465b      	mov	r3, fp
 8005780:	4622      	mov	r2, r4
 8005782:	2012      	movs	r0, #18
 8005784:	f7ff feba 	bl	80054fc <PCD_ReadRegisterMulti>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received uint8_t. If this value is 000b, the whole uint8_t is valid.
 8005788:	2018      	movs	r0, #24
 800578a:	f7ff fe97 	bl	80054bc <PCD_ReadRegister>
 800578e:	f000 0607 	and.w	r6, r0, #7
		if (validBits) {
 8005792:	f1b8 0f00 	cmp.w	r8, #0
 8005796:	d001      	beq.n	800579c <PCD_CommunicateWithPICC+0xd4>
			*validBits = _validBits;
 8005798:	f888 6000 	strb.w	r6, [r8]
		}
	}

	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
 800579c:	073b      	lsls	r3, r7, #28
 800579e:	d429      	bmi.n	80057f4 <PCD_CommunicateWithPICC+0x12c>
		return STATUS_COLLISION;
	}

	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
 80057a0:	b354      	cbz	r4, 80057f8 <PCD_CommunicateWithPICC+0x130>
 80057a2:	b34d      	cbz	r5, 80057f8 <PCD_CommunicateWithPICC+0x130>
 80057a4:	9b01      	ldr	r3, [sp, #4]
 80057a6:	b33b      	cbz	r3, 80057f8 <PCD_CommunicateWithPICC+0x130>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
 80057a8:	7829      	ldrb	r1, [r5, #0]
 80057aa:	2901      	cmp	r1, #1
 80057ac:	d103      	bne.n	80057b6 <PCD_CommunicateWithPICC+0xee>
 80057ae:	2e04      	cmp	r6, #4
 80057b0:	d124      	bne.n	80057fc <PCD_CommunicateWithPICC+0x134>
			return STATUS_MIFARE_NACK;
 80057b2:	2009      	movs	r0, #9
 80057b4:	e017      	b.n	80057e6 <PCD_CommunicateWithPICC+0x11e>
		}
		// We need at least the CRC_A value and all 8 bits of the last uint8_t must be received.
		if (*backLen < 2 || _validBits != 0) {
 80057b6:	d921      	bls.n	80057fc <PCD_CommunicateWithPICC+0x134>
 80057b8:	bb06      	cbnz	r6, 80057fc <PCD_CommunicateWithPICC+0x134>
			return STATUS_CRC_WRONG;
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		uint8_t controlBuffer[2];
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
 80057ba:	3902      	subs	r1, #2
 80057bc:	aa05      	add	r2, sp, #20
 80057be:	b2c9      	uxtb	r1, r1
 80057c0:	4620      	mov	r0, r4
 80057c2:	f7ff ff08 	bl	80055d6 <PCD_CalculateCRC>
		if (n != STATUS_OK) {
 80057c6:	2801      	cmp	r0, #1
 80057c8:	d10d      	bne.n	80057e6 <PCD_CommunicateWithPICC+0x11e>
			return n;
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
 80057ca:	782b      	ldrb	r3, [r5, #0]
 80057cc:	441c      	add	r4, r3
 80057ce:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80057d2:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d110      	bne.n	80057fc <PCD_CommunicateWithPICC+0x134>
 80057da:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80057de:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d10a      	bne.n	80057fc <PCD_CommunicateWithPICC+0x134>
			return STATUS_CRC_WRONG;
		}
	}

	return STATUS_OK;
} // End PCD_CommunicateWithPICC()
 80057e6:	b007      	add	sp, #28
 80057e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
 80057ec:	2002      	movs	r0, #2
 80057ee:	e7fa      	b.n	80057e6 <PCD_CommunicateWithPICC+0x11e>
			return STATUS_NO_ROOM;
 80057f0:	2005      	movs	r0, #5
 80057f2:	e7f8      	b.n	80057e6 <PCD_CommunicateWithPICC+0x11e>
		return STATUS_COLLISION;
 80057f4:	2003      	movs	r0, #3
 80057f6:	e7f6      	b.n	80057e6 <PCD_CommunicateWithPICC+0x11e>
	return STATUS_OK;
 80057f8:	2001      	movs	r0, #1
 80057fa:	e7f4      	b.n	80057e6 <PCD_CommunicateWithPICC+0x11e>
			return STATUS_CRC_WRONG;
 80057fc:	2008      	movs	r0, #8
 80057fe:	e7f2      	b.n	80057e6 <PCD_CommunicateWithPICC+0x11e>

08005800 <PCD_TransceiveData>:
							) {
 8005800:	b510      	push	{r4, lr}
 8005802:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
 8005804:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 8005808:	9404      	str	r4, [sp, #16]
 800580a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800580e:	9403      	str	r4, [sp, #12]
 8005810:	9c08      	ldr	r4, [sp, #32]
 8005812:	9200      	str	r2, [sp, #0]
 8005814:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	200c      	movs	r0, #12
 800581e:	2130      	movs	r1, #48	; 0x30
 8005820:	f7ff ff52 	bl	80056c8 <PCD_CommunicateWithPICC>
} // End PCD_TransceiveData()
 8005824:	b006      	add	sp, #24
 8005826:	bd10      	pop	{r4, pc}

08005828 <PICC_REQA_or_WUPA>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode_t PICC_REQA_or_WUPA(	uint8_t command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
							uint8_t *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
							uint8_t *bufferSize	///< Buffer size, at least two uint8_ts. Also number of uint8_ts returned if STATUS_OK.
						 ) {
 8005828:	b530      	push	{r4, r5, lr}
 800582a:	b089      	sub	sp, #36	; 0x24
 800582c:	4614      	mov	r4, r2
 800582e:	f88d 0017 	strb.w	r0, [sp, #23]
	uint8_t validBits;
	StatusCode_t status;

	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 uint8_ts long.
 8005832:	460d      	mov	r5, r1
 8005834:	b311      	cbz	r1, 800587c <PICC_REQA_or_WUPA+0x54>
 8005836:	7813      	ldrb	r3, [r2, #0]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d91f      	bls.n	800587c <PICC_REQA_or_WUPA+0x54>
		return STATUS_NO_ROOM;
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 800583c:	2180      	movs	r1, #128	; 0x80
 800583e:	201c      	movs	r0, #28
 8005840:	f7ff febc 	bl	80055bc <PCD_ClearRegisterBitMask>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) uint8_t. TxLastBits = BitFramingReg[2..0]
 8005844:	2307      	movs	r3, #7
 8005846:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits, 0, false);
 800584a:	2300      	movs	r3, #0
 800584c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8005850:	f10d 031f 	add.w	r3, sp, #31
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	462a      	mov	r2, r5
 8005858:	4623      	mov	r3, r4
 800585a:	2101      	movs	r1, #1
 800585c:	f10d 0017 	add.w	r0, sp, #23
 8005860:	f7ff ffce 	bl	8005800 <PCD_TransceiveData>
	if (status != STATUS_OK) {
 8005864:	2801      	cmp	r0, #1
 8005866:	d107      	bne.n	8005878 <PICC_REQA_or_WUPA+0x50>
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
 8005868:	7823      	ldrb	r3, [r4, #0]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d108      	bne.n	8005880 <PICC_REQA_or_WUPA+0x58>
 800586e:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
 8005872:	2b00      	cmp	r3, #0
 8005874:	bf18      	it	ne
 8005876:	2002      	movne	r0, #2
	}
	return STATUS_OK;
} // End PICC_REQA_or_WUPA()
 8005878:	b009      	add	sp, #36	; 0x24
 800587a:	bd30      	pop	{r4, r5, pc}
		return STATUS_NO_ROOM;
 800587c:	2005      	movs	r0, #5
 800587e:	e7fb      	b.n	8005878 <PICC_REQA_or_WUPA+0x50>
		return STATUS_ERROR;
 8005880:	2002      	movs	r0, #2
 8005882:	e7f9      	b.n	8005878 <PICC_REQA_or_WUPA+0x50>

08005884 <PICC_RequestA>:
							) {
 8005884:	460a      	mov	r2, r1
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
 8005886:	4601      	mov	r1, r0
 8005888:	2026      	movs	r0, #38	; 0x26
 800588a:	f7ff bfcd 	b.w	8005828 <PICC_REQA_or_WUPA>

0800588e <PICC_AnticollisionLoop>:

StatusCode_t PICC_AnticollisionLoop(uint8_t CollisionLevel,
									UID* puid,
									uint8_t* anticollision_frame,
									uint8_t acframe_size,
									uint8_t* SAK_frame){
 800588e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005892:	b087      	sub	sp, #28

	uint8_t result;

	StatusCode_t status;

	switch (CollisionLevel) {
 8005894:	2802      	cmp	r0, #2
									uint8_t* SAK_frame){
 8005896:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800589a:	4615      	mov	r5, r2
 800589c:	461f      	mov	r7, r3
	switch (CollisionLevel) {
 800589e:	d059      	beq.n	8005954 <PICC_AnticollisionLoop+0xc6>
 80058a0:	2803      	cmp	r0, #3
 80058a2:	d059      	beq.n	8005958 <PICC_AnticollisionLoop+0xca>
 80058a4:	2801      	cmp	r0, #1
 80058a6:	f040 8090 	bne.w	80059ca <PICC_AnticollisionLoop+0x13c>
		case PICC_CL1:
			anticollision_frame[0] = PICC_CMD_SEL_CL1;
 80058aa:	2393      	movs	r3, #147	; 0x93
		case PICC_CL2:
			anticollision_frame[0] = PICC_CMD_SEL_CL2;
			//uid_startindex = 3;
			break;
		case PICC_CL3:
			anticollision_frame[0] = PICC_CMD_SEL_CL3;
 80058ac:	702b      	strb	r3, [r5, #0]

	// prepare frames and buffers
	bytecountUID	= currentLevelKnownBits / 8;	// Number of whole uint8_ts in the UID part.
	bytecountNVB	= 2 + bytecountUID;				// Number of whole uint8_ts: SEL + NVB + UIDs
	bitcountNVB		= currentLevelKnownBits % 8;
	anticollision_frame[1]	= (bytecountNVB << 4) + bitcountNVB	;	// NVB - Number of Valid Bits
 80058ae:	2320      	movs	r3, #32
	txLastBits = 0;		// for nvb=0x20, all bits of the last byte should be transmitted
 80058b0:	2400      	movs	r4, #0
	anticollision_frame[1]	= (bytecountNVB << 4) + bitcountNVB	;	// NVB - Number of Valid Bits
 80058b2:	706b      	strb	r3, [r5, #1]
	// Having a seperate variable is overkill. But it makes the code easier to read:
	txLastBits			= bitcountNVB; // Transmit only txLastBits from FIFO

	// Store response in the unused part of anticolision frame buffer
	pResponseBuffer	= &anticollision_frame[bytecountNVB]; // pointer to the first byte to receive response from FIFO
	responseBufferLength = acframe_size - bytecountNVB;  // length of the response buffer
 80058b4:	1ebb      	subs	r3, r7, #2
	txLastBits = 0;		// for nvb=0x20, all bits of the last byte should be transmitted
 80058b6:	f88d 4016 	strb.w	r4, [sp, #22]
	pResponseBuffer	= &anticollision_frame[bytecountNVB]; // pointer to the first byte to receive response from FIFO
 80058ba:	f105 0b02 	add.w	fp, r5, #2
	responseBufferLength = acframe_size - bytecountNVB;  // length of the response buffer
 80058be:	f88d 3017 	strb.w	r3, [sp, #23]
	currentLevelKnownBits = 0;
 80058c2:	46a1      	mov	r9, r4
	Part1LengthInFIFO	= bytecountNVB + (bitcountNVB ? 1 : 0); // length of Part1 in full bytes in FIFO
 80058c4:	f04f 0a02 	mov.w	sl, #2
	rxAlign = txLastBits;	// the first bit to be received is stored in FIFO at bit position txLastBits+1


	while(1) {
		// Prepare MFRC522 for transcieve:
		PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80058c8:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80058cc:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 80058d0:	b2c9      	uxtb	r1, r1
 80058d2:	201a      	movs	r0, #26
 80058d4:	f7ff fdb0 	bl	8005438 <PCD_WriteRegister>
		PCD_ClearRegisterBitMask(CollReg, 0x80);  // ValuesAfterColl=1 => Bits received after collision will be cleared.
		// Transmit Anticollision command in anticollision frame
		status = PCD_TransceiveData(anticollision_frame,
 80058d8:	2600      	movs	r6, #0
		PCD_ClearRegisterBitMask(CollReg, 0x80);  // ValuesAfterColl=1 => Bits received after collision will be cleared.
 80058da:	2180      	movs	r1, #128	; 0x80
 80058dc:	201c      	movs	r0, #28
 80058de:	f7ff fe6d 	bl	80055bc <PCD_ClearRegisterBitMask>
		status = PCD_TransceiveData(anticollision_frame,
 80058e2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80058e6:	f10d 0416 	add.w	r4, sp, #22
 80058ea:	9400      	str	r4, [sp, #0]
 80058ec:	f10d 0317 	add.w	r3, sp, #23
 80058f0:	465a      	mov	r2, fp
 80058f2:	4651      	mov	r1, sl
 80058f4:	4628      	mov	r0, r5
 80058f6:	f7ff ff83 	bl	8005800 <PCD_TransceiveData>
									&txLastBits,
									rxAlign,
									false);

		// Detect collision:
		if (status == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80058fa:	2803      	cmp	r0, #3
 80058fc:	d12e      	bne.n	800595c <PICC_AnticollisionLoop+0xce>
			result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
 80058fe:	201c      	movs	r0, #28
 8005900:	f7ff fddc 	bl	80054bc <PCD_ReadRegister>
			// First check if we have the valid position of collision:
			if (result & 0x20) { // CollPosNotValid
 8005904:	0681      	lsls	r1, r0, #26
 8005906:	d45e      	bmi.n	80059c6 <PICC_AnticollisionLoop+0x138>
				return STATUS_INV_COLL_POS; // Without a valid collision position we cannot continue
			}
			// find out the collision position:
			collisionPos = result & 0x1F; // Values 0-31, 0 means bit 32.
			if (collisionPos == 0) {
				collisionPos = 32;
 8005908:	f010 041f 	ands.w	r4, r0, #31
 800590c:	bf08      	it	eq
 800590e:	2420      	moveq	r4, #32
			}
			if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen
 8005910:	454c      	cmp	r4, r9
 8005912:	d95a      	bls.n	80059ca <PICC_AnticollisionLoop+0x13c>
				return STATUS_INTERNAL_ERROR;
			}

			currentLevelKnownBits = currentLevelKnownBits + collisionPos;
 8005914:	444c      	add	r4, r9


			// prepare frames and buffers for the new reception:
			bytecountUID	= currentLevelKnownBits / 8;	// Number of whole uint8_ts in the UID part.
 8005916:	f3c4 03c4 	ubfx	r3, r4, #3, #5
			bytecountNVB	= 2 + bytecountUID;				// Number of whole uint8_ts: SEL + NVB + UIDs
 800591a:	3302      	adds	r3, #2
			currentLevelKnownBits = currentLevelKnownBits + collisionPos;
 800591c:	fa5f f984 	uxtb.w	r9, r4
			bitcountNVB		= currentLevelKnownBits % 8;
 8005920:	f004 0407 	and.w	r4, r4, #7
			anticollision_frame[1]	= (bytecountNVB << 4) + bitcountNVB	;	// NVB - Number of Valid Bits
 8005924:	eb04 1203 	add.w	r2, r4, r3, lsl #4
 8005928:	706a      	strb	r2, [r5, #1]

			// I decided to choose the PICC with the bit set
			//    - its position is bitcountNVB within the last byte in the anticollision frame:
			anticollision_frame[bytecountNVB] |= (1 << bitcountNVB);
 800592a:	2201      	movs	r2, #1
 800592c:	fa02 f104 	lsl.w	r1, r2, r4
 8005930:	5cea      	ldrb	r2, [r5, r3]

			Part1LengthInFIFO	= bytecountNVB + (bitcountNVB ? 1 : 0); // length of Part1 in full bytes in FIFO
			// Having a seperate variable is overkill. But it makes the code easier to read:
			txLastBits			= bitcountNVB; // Transmit only txLastBits from FIFO
 8005932:	f88d 4016 	strb.w	r4, [sp, #22]
			anticollision_frame[bytecountNVB] |= (1 << bitcountNVB);
 8005936:	430a      	orrs	r2, r1
			Part1LengthInFIFO	= bytecountNVB + (bitcountNVB ? 1 : 0); // length of Part1 in full bytes in FIFO
 8005938:	42b4      	cmp	r4, r6
 800593a:	bf0c      	ite	eq
 800593c:	469a      	moveq	sl, r3
 800593e:	f103 0a01 	addne.w	sl, r3, #1
			anticollision_frame[bytecountNVB] |= (1 << bitcountNVB);
 8005942:	54ea      	strb	r2, [r5, r3]
 8005944:	eb05 0b03 	add.w	fp, r5, r3

			// Store response in the unused part of anticolision frame buffer
			pResponseBuffer	= &anticollision_frame[bytecountNVB]; // pointer to the first byte to receive response from FIFO
			responseBufferLength = acframe_size - bytecountNVB;  // length of the response buffer
 8005948:	1afb      	subs	r3, r7, r3
			Part1LengthInFIFO	= bytecountNVB + (bitcountNVB ? 1 : 0); // length of Part1 in full bytes in FIFO
 800594a:	fa5f fa8a 	uxtb.w	sl, sl
			responseBufferLength = acframe_size - bytecountNVB;  // length of the response buffer
 800594e:	f88d 3017 	strb.w	r3, [sp, #23]
		PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 8005952:	e7b9      	b.n	80058c8 <PICC_AnticollisionLoop+0x3a>
			anticollision_frame[0] = PICC_CMD_SEL_CL2;
 8005954:	2395      	movs	r3, #149	; 0x95
 8005956:	e7a9      	b.n	80058ac <PICC_AnticollisionLoop+0x1e>
			anticollision_frame[0] = PICC_CMD_SEL_CL3;
 8005958:	2397      	movs	r3, #151	; 0x97
 800595a:	e7a7      	b.n	80058ac <PICC_AnticollisionLoop+0x1e>
			// Having a seperate variable is overkill. But it makes the code easier to read:
			rxAlign = txLastBits;	// the first bit to be received is stored in FIFO at bit position txLastBits+1
		}
		else if (status != STATUS_OK) {  // in case of error return the status
 800595c:	2801      	cmp	r0, #1
 800595e:	d12f      	bne.n	80059c0 <PICC_AnticollisionLoop+0x132>
		}
	} // while (collision)


	// There is no more collisions and we have to send the SELECT command:
	anticollision_frame[1] = 0x70; // NVB - Number of Valid Bits: Seven whole uint8_ts
 8005960:	2370      	movs	r3, #112	; 0x70
	// Calculate BCC - Block Check Character
	anticollision_frame[6] = anticollision_frame[2] ^ anticollision_frame[3] ^ anticollision_frame[4] ^ anticollision_frame[5];
 8005962:	78ea      	ldrb	r2, [r5, #3]
	anticollision_frame[1] = 0x70; // NVB - Number of Valid Bits: Seven whole uint8_ts
 8005964:	706b      	strb	r3, [r5, #1]
	anticollision_frame[6] = anticollision_frame[2] ^ anticollision_frame[3] ^ anticollision_frame[4] ^ anticollision_frame[5];
 8005966:	78ab      	ldrb	r3, [r5, #2]
 8005968:	4053      	eors	r3, r2
 800596a:	792a      	ldrb	r2, [r5, #4]
 800596c:	4053      	eors	r3, r2
 800596e:	796a      	ldrb	r2, [r5, #5]
 8005970:	4053      	eors	r3, r2
 8005972:	71ab      	strb	r3, [r5, #6]
	// Calculate CRC_A
	status = PCD_CalculateCRC(anticollision_frame, 7, &anticollision_frame[7]);
 8005974:	1dea      	adds	r2, r5, #7
 8005976:	2107      	movs	r1, #7
 8005978:	4628      	mov	r0, r5
 800597a:	f7ff fe2c 	bl	80055d6 <PCD_CalculateCRC>
	if (status != STATUS_OK) {
 800597e:	2801      	cmp	r0, #1
 8005980:	d11e      	bne.n	80059c0 <PICC_AnticollisionLoop+0x132>
		return status;
	}
	txLastBits				= 0; // 0 => All 8 bits of the last byte will be transmitted.
	Part1LengthInFIFO		= 9; // the length of the SELECT frame is 9: SEL-NVB + 4 UIDs + BCC + 2 CRC
	responseBufferLength	= 3; // SAK response is 3-byte long
 8005982:	2303      	movs	r3, #3

	rxAlign = txLastBits; // the first bit to be received is stored in FIFO at bit position txLastBits (0 in this case)
	PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 8005984:	4631      	mov	r1, r6
 8005986:	201a      	movs	r0, #26
	responseBufferLength	= 3; // SAK response is 3-byte long
 8005988:	f88d 3017 	strb.w	r3, [sp, #23]
	txLastBits				= 0; // 0 => All 8 bits of the last byte will be transmitted.
 800598c:	f88d 6016 	strb.w	r6, [sp, #22]
	PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 8005990:	f7ff fd52 	bl	8005438 <PCD_WriteRegister>
	status = PCD_TransceiveData(anticollision_frame,
 8005994:	f10d 0317 	add.w	r3, sp, #23
 8005998:	4642      	mov	r2, r8
 800599a:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800599e:	9400      	str	r4, [sp, #0]
 80059a0:	2109      	movs	r1, #9
 80059a2:	4628      	mov	r0, r5
 80059a4:	f7ff ff2c 	bl	8005800 <PCD_TransceiveData>
								&responseBufferLength,
								&txLastBits,
								rxAlign,
								false);

	if (SAK_frame[0] & 0x04) { // Cascade bit set: UID not complete
 80059a8:	f898 3000 	ldrb.w	r3, [r8]
 80059ac:	075a      	lsls	r2, r3, #29
 80059ae:	d40e      	bmi.n	80059ce <PICC_AnticollisionLoop+0x140>
		return STATUS_UID_NOTCOMPLETE;
	}
	else if ((SAK_frame[0] & 0x20) && !(SAK_frame[0] & 0x04)) { // UID complete, PICC compliant with ISO/IEC 14443-4
 80059b0:	f003 0324 	and.w	r3, r3, #36	; 0x24
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d00c      	beq.n	80059d2 <PICC_AnticollisionLoop+0x144>
	}
	else if (!(SAK_frame[0] & 0x20) && !(SAK_frame[0] & 0x04)) { // UID complete, PICC non-compliant with ISO/IEC 14443-4
			return STATUS_UID_COMPLETE_NC;
		}
	else {
		return STATUS_ERROR;
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	bf0c      	ite	eq
 80059bc:	200b      	moveq	r0, #11
 80059be:	2002      	movne	r0, #2
	}


	return STATUS_ERROR; // should not get here!
}
 80059c0:	b007      	add	sp, #28
 80059c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return STATUS_INV_COLL_POS; // Without a valid collision position we cannot continue
 80059c6:	200d      	movs	r0, #13
 80059c8:	e7fa      	b.n	80059c0 <PICC_AnticollisionLoop+0x132>
				return STATUS_INTERNAL_ERROR;
 80059ca:	2006      	movs	r0, #6
 80059cc:	e7f8      	b.n	80059c0 <PICC_AnticollisionLoop+0x132>
		return STATUS_UID_NOTCOMPLETE;
 80059ce:	200c      	movs	r0, #12
 80059d0:	e7f6      	b.n	80059c0 <PICC_AnticollisionLoop+0x132>
		return STATUS_UID_COMPLETE;
 80059d2:	200a      	movs	r0, #10
 80059d4:	e7f4      	b.n	80059c0 <PICC_AnticollisionLoop+0x132>

080059d6 <PICC_Select>:
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode_t PICC_Select(	UID *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
						uint8_t validBits	///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						) {
 80059d6:	b530      	push	{r4, r5, lr}
 80059d8:	b08d      	sub	sp, #52	; 0x34
	uint8_t anticollision_frame_CL3[9];
	uint8_t SAK_frame[3];

	uint8_t acframe_size = sizeof(anticollision_frame_CL1) / sizeof(anticollision_frame_CL1[0]);

	StatusCode_t status = PICC_AnticollisionLoop(PICC_CL1, uid, anticollision_frame_CL1, acframe_size, SAK_frame);
 80059da:	ad02      	add	r5, sp, #8
 80059dc:	4601      	mov	r1, r0
						) {
 80059de:	4604      	mov	r4, r0
	StatusCode_t status = PICC_AnticollisionLoop(PICC_CL1, uid, anticollision_frame_CL1, acframe_size, SAK_frame);
 80059e0:	9500      	str	r5, [sp, #0]
 80059e2:	2309      	movs	r3, #9
 80059e4:	aa03      	add	r2, sp, #12
 80059e6:	2001      	movs	r0, #1
 80059e8:	f7ff ff51 	bl	800588e <PICC_AnticollisionLoop>
	if (status == STATUS_UID_NOTCOMPLETE) {
 80059ec:	280c      	cmp	r0, #12
 80059ee:	d134      	bne.n	8005a5a <PICC_Select+0x84>
		status = PICC_AnticollisionLoop(PICC_CL2, uid, anticollision_frame_CL2, acframe_size, SAK_frame);
 80059f0:	9500      	str	r5, [sp, #0]
 80059f2:	2309      	movs	r3, #9
 80059f4:	aa06      	add	r2, sp, #24
 80059f6:	4621      	mov	r1, r4
 80059f8:	2002      	movs	r0, #2
 80059fa:	f7ff ff48 	bl	800588e <PICC_AnticollisionLoop>
		if (status == STATUS_UID_NOTCOMPLETE) {
 80059fe:	280c      	cmp	r0, #12
 8005a00:	d129      	bne.n	8005a56 <PICC_Select+0x80>
			status = PICC_AnticollisionLoop(PICC_CL3, uid, anticollision_frame_CL3, acframe_size, SAK_frame);
 8005a02:	2309      	movs	r3, #9
 8005a04:	9500      	str	r5, [sp, #0]
 8005a06:	aa09      	add	r2, sp, #36	; 0x24
 8005a08:	4621      	mov	r1, r4
 8005a0a:	2003      	movs	r0, #3
 8005a0c:	f7ff ff3f 	bl	800588e <PICC_AnticollisionLoop>
			uid->size = 10;
 8005a10:	230a      	movs	r3, #10
		else{
			uid->size = 7;
		}
	}
	else{
		uid->size = 4;
 8005a12:	7023      	strb	r3, [r4, #0]
	}

	for (int i = 0; i<10; i++) uid->uids[i] = 0;

	// Copy UIDs form anticollision frames into uid buffer:
	if (uid->size == 4){
 8005a14:	7823      	ldrb	r3, [r4, #0]
	for (int i = 0; i<10; i++) uid->uids[i] = 0;
 8005a16:	2200      	movs	r2, #0
	if (uid->size == 4){
 8005a18:	2b04      	cmp	r3, #4
	for (int i = 0; i<10; i++) uid->uids[i] = 0;
 8005a1a:	f8c4 2001 	str.w	r2, [r4, #1]
 8005a1e:	f8c4 2005 	str.w	r2, [r4, #5]
 8005a22:	f8a4 2009 	strh.w	r2, [r4, #9]
	if (uid->size == 4){
 8005a26:	d11a      	bne.n	8005a5e <PICC_Select+0x88>
		for (int i = 0; i < 4; i++){
			uid->uids[i] = anticollision_frame_CL1[i+2];
 8005a28:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005a2c:	7063      	strb	r3, [r4, #1]
 8005a2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005a32:	70a3      	strb	r3, [r4, #2]
 8005a34:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005a38:	70e3      	strb	r3, [r4, #3]
 8005a3a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8005a3e:	7123      	strb	r3, [r4, #4]
			uid->uids[i+3] = anticollision_frame_CL2[i+2];
		}
	}
	// Copy final SAK frame:
	for (int i = 0; i<3; i++){
		uid->sak[i] = SAK_frame[i];
 8005a40:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005a44:	72e3      	strb	r3, [r4, #11]
 8005a46:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8005a4a:	7323      	strb	r3, [r4, #12]
 8005a4c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8005a50:	7363      	strb	r3, [r4, #13]
	}
	return status;
}
 8005a52:	b00d      	add	sp, #52	; 0x34
 8005a54:	bd30      	pop	{r4, r5, pc}
			uid->size = 7;
 8005a56:	2307      	movs	r3, #7
 8005a58:	e7db      	b.n	8005a12 <PICC_Select+0x3c>
		uid->size = 4;
 8005a5a:	2304      	movs	r3, #4
 8005a5c:	e7d9      	b.n	8005a12 <PICC_Select+0x3c>
	if (uid->size == 7){
 8005a5e:	2b07      	cmp	r3, #7
 8005a60:	d1ee      	bne.n	8005a40 <PICC_Select+0x6a>
			uid->uids[i] = anticollision_frame_CL1[i+3];
 8005a62:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005a66:	7063      	strb	r3, [r4, #1]
 8005a68:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005a6c:	70a3      	strb	r3, [r4, #2]
 8005a6e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8005a72:	70e3      	strb	r3, [r4, #3]
			uid->uids[i+3] = anticollision_frame_CL2[i+2];
 8005a74:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8005a78:	7123      	strb	r3, [r4, #4]
 8005a7a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005a7e:	7163      	strb	r3, [r4, #5]
 8005a80:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8005a84:	71a3      	strb	r3, [r4, #6]
 8005a86:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8005a8a:	71e3      	strb	r3, [r4, #7]
		for (int i = 0; i<4; i++){
 8005a8c:	e7d8      	b.n	8005a40 <PICC_Select+0x6a>

08005a8e <PICC_HaltA>:
/**
 * Instructs a PICC in state ACTIVE(*) to go to state HALT.
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode_t PICC_HaltA() {
 8005a8e:	b530      	push	{r4, r5, lr}
 8005a90:	b087      	sub	sp, #28
	StatusCode_t status;
	uint8_t buffer[4];

	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
 8005a92:	2350      	movs	r3, #80	; 0x50
	buffer[1] = 0;
 8005a94:	2500      	movs	r5, #0
	// Calculate CRC_A
	status = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 8005a96:	f10d 0216 	add.w	r2, sp, #22
 8005a9a:	2102      	movs	r1, #2
 8005a9c:	a805      	add	r0, sp, #20
	buffer[0] = PICC_CMD_HLTA;
 8005a9e:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
 8005aa2:	f88d 5015 	strb.w	r5, [sp, #21]
	status = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 8005aa6:	f7ff fd96 	bl	80055d6 <PCD_CalculateCRC>
	if (status != STATUS_OK) {
 8005aaa:	2801      	cmp	r0, #1
	status = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 8005aac:	4604      	mov	r4, r0
	if (status != STATUS_OK) {
 8005aae:	d10e      	bne.n	8005ace <PICC_HaltA+0x40>
	// Send the command.
	// The standard says:
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is a success.
	status = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0, NULL, 0, false);
 8005ab0:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8005ab4:	9500      	str	r5, [sp, #0]
 8005ab6:	462b      	mov	r3, r5
 8005ab8:	462a      	mov	r2, r5
 8005aba:	2104      	movs	r1, #4
 8005abc:	a805      	add	r0, sp, #20
 8005abe:	f7ff fe9f 	bl	8005800 <PCD_TransceiveData>
	if (status == STATUS_TIMEOUT) {
 8005ac2:	2804      	cmp	r0, #4
 8005ac4:	d003      	beq.n	8005ace <PICC_HaltA+0x40>
		return STATUS_OK;
	}
	if (status == STATUS_OK) { // That is ironically NOT ok in this case ;-)
		return STATUS_ERROR;
 8005ac6:	2801      	cmp	r0, #1
 8005ac8:	bf14      	ite	ne
 8005aca:	4604      	movne	r4, r0
 8005acc:	2402      	moveq	r4, #2
	}
	return status;
} // End PICC_HaltA()
 8005ace:	4620      	mov	r0, r4
 8005ad0:	b007      	add	sp, #28
 8005ad2:	bd30      	pop	{r4, r5, pc}

08005ad4 <PCD_Authenticate>:
 */
StatusCode_t PCD_Authenticate(	uint8_t command,		///< PICC_CMD_MF_AUTH_KEY_A or PICC_CMD_MF_AUTH_KEY_B
							uint8_t blockAddr, 	///< The block number. See numbering in the comments in the .h file.
							MIFARE_Key *key,	///< Pointer to the Crypto key to use (6 uint8_ts)
							UID *uid			///< Pointer to Uid struct. The first 4 uint8_ts of the UID is used.
							) {
 8005ad4:	b500      	push	{lr}
 8005ad6:	b08b      	sub	sp, #44	; 0x2c
	// Build command buffer
	uint8_t sendData[12];
	sendData[0] = command;
	sendData[1] = blockAddr;
	// copy authentication key into sendData[]:
	if (command == PICC_CMD_MF_AUTH_KEY_A){
 8005ad8:	2860      	cmp	r0, #96	; 0x60
	sendData[0] = command;
 8005ada:	f88d 001c 	strb.w	r0, [sp, #28]
	sendData[1] = blockAddr;
 8005ade:	f88d 101d 	strb.w	r1, [sp, #29]
	if (command == PICC_CMD_MF_AUTH_KEY_A){
 8005ae2:	d120      	bne.n	8005b26 <PCD_Authenticate+0x52>
		for (uint8_t i = 0; i < MF_KEY_SIZE; i++) {	// 6 key uint8_ts
			sendData[2+i] = key->keyA[i];
 8005ae4:	6811      	ldr	r1, [r2, #0]
 8005ae6:	8892      	ldrh	r2, [r2, #4]
 8005ae8:	f8cd 101e 	str.w	r1, [sp, #30]
		}
	}
	else if (command == PICC_CMD_MF_AUTH_KEY_B){
		for (uint8_t i = 0; i < MF_KEY_SIZE; i++) {	// 6 key uint8_ts
			sendData[2+i] = key->keyB[i];
 8005aec:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
	}
	else return STATUS_ERROR;

	// copy UID into authentication data
	for (uint8_t i = 0; i < 4; i++) {				// The first 4 uint8_ts of the UID
		sendData[8+i] = uid->uids[i];
 8005af0:	785a      	ldrb	r2, [r3, #1]
 8005af2:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8005af6:	789a      	ldrb	r2, [r3, #2]
 8005af8:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 8005afc:	78da      	ldrb	r2, [r3, #3]
 8005afe:	791b      	ldrb	r3, [r3, #4]
 8005b00:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	}

	// Start the authentication.
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData), NULL, 0, 0, 0, false);
 8005b04:	2300      	movs	r3, #0
 8005b06:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005b0a:	e9cd 3301 	strd	r3, r3, [sp, #4]
		sendData[8+i] = uid->uids[i];
 8005b0e:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData), NULL, 0, 0, 0, false);
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	aa07      	add	r2, sp, #28
 8005b16:	230c      	movs	r3, #12
 8005b18:	2110      	movs	r1, #16
 8005b1a:	200e      	movs	r0, #14
 8005b1c:	f7ff fdd4 	bl	80056c8 <PCD_CommunicateWithPICC>
} // End PCD_Authenticate()
 8005b20:	b00b      	add	sp, #44	; 0x2c
 8005b22:	f85d fb04 	ldr.w	pc, [sp], #4
	else if (command == PICC_CMD_MF_AUTH_KEY_B){
 8005b26:	2861      	cmp	r0, #97	; 0x61
 8005b28:	d105      	bne.n	8005b36 <PCD_Authenticate+0x62>
			sendData[2+i] = key->keyB[i];
 8005b2a:	f8d2 1006 	ldr.w	r1, [r2, #6]
 8005b2e:	f8cd 101e 	str.w	r1, [sp, #30]
 8005b32:	8952      	ldrh	r2, [r2, #10]
 8005b34:	e7da      	b.n	8005aec <PCD_Authenticate+0x18>
	else return STATUS_ERROR;
 8005b36:	2002      	movs	r0, #2
 8005b38:	e7f2      	b.n	8005b20 <PCD_Authenticate+0x4c>

08005b3a <PCD_StopCrypto1>:
 * Used to exit the PCD from its authenticated state.
 * Remember to call this function after communicating with an authenticated PICC - otherwise no new communications can start.
 */
void PCD_StopCrypto1() {
	// Clear MFCrypto1On bit
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
 8005b3a:	2108      	movs	r1, #8
 8005b3c:	2010      	movs	r0, #16
 8005b3e:	f7ff bd3d 	b.w	80055bc <PCD_ClearRegisterBitMask>

08005b42 <MIFARE_Read>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
StatusCode_t MIFARE_Read(uint8_t blockAddr, 	///< MIFARE Classic: The block (0-0xff) number. MIFARE Ultralight: The first page to return data from.
					uint8_t *buffer,		///< The buffer to store the data in
					uint8_t *bufferSize	///< Buffer size, at least 18 uint8_ts. Also number of uint8_ts returned if STATUS_OK.
					) {
 8005b42:	b530      	push	{r4, r5, lr}
 8005b44:	4615      	mov	r5, r2
 8005b46:	b085      	sub	sp, #20
	StatusCode_t status;

	// Sanity check
	if (buffer == NULL || *bufferSize < 18) {
 8005b48:	460c      	mov	r4, r1
 8005b4a:	b1c1      	cbz	r1, 8005b7e <MIFARE_Read+0x3c>
 8005b4c:	7813      	ldrb	r3, [r2, #0]
 8005b4e:	2b11      	cmp	r3, #17
 8005b50:	d915      	bls.n	8005b7e <MIFARE_Read+0x3c>
		return STATUS_NO_ROOM;
	}

	// Build command buffer
	buffer[0] = PICC_CMD_MF_READ;
 8005b52:	2330      	movs	r3, #48	; 0x30
	buffer[1] = blockAddr;
 8005b54:	7048      	strb	r0, [r1, #1]
	buffer[0] = PICC_CMD_MF_READ;
 8005b56:	700b      	strb	r3, [r1, #0]
	// Calculate CRC_A
	status = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 8005b58:	1c8a      	adds	r2, r1, #2
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	2102      	movs	r1, #2
 8005b5e:	f7ff fd3a 	bl	80055d6 <PCD_CalculateCRC>
	if (status != STATUS_OK) {
 8005b62:	2801      	cmp	r0, #1
 8005b64:	d109      	bne.n	8005b7a <MIFARE_Read+0x38>
		return status;
	}

	// Transmit the buffer and receive the response, validate CRC_A.
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
 8005b66:	2300      	movs	r3, #0
 8005b68:	e9cd 3300 	strd	r3, r3, [sp]
 8005b6c:	9002      	str	r0, [sp, #8]
 8005b6e:	462b      	mov	r3, r5
 8005b70:	4622      	mov	r2, r4
 8005b72:	2104      	movs	r1, #4
 8005b74:	4620      	mov	r0, r4
 8005b76:	f7ff fe43 	bl	8005800 <PCD_TransceiveData>
} // End MIFARE_Read()
 8005b7a:	b005      	add	sp, #20
 8005b7c:	bd30      	pop	{r4, r5, pc}
		return STATUS_NO_ROOM;
 8005b7e:	2005      	movs	r0, #5
 8005b80:	e7fb      	b.n	8005b7a <MIFARE_Read+0x38>

08005b82 <PICC_IsNewCardPresent>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 *
 * @return bool
 */
bool PICC_IsNewCardPresent() {
 8005b82:	b507      	push	{r0, r1, r2, lr}
	uint8_t bufferATQA[2];
	uint8_t bufferSize = sizeof(bufferATQA);
 8005b84:	2302      	movs	r3, #2
	StatusCode_t status = PICC_RequestA(bufferATQA, &bufferSize);
 8005b86:	f10d 0103 	add.w	r1, sp, #3
 8005b8a:	a801      	add	r0, sp, #4
	uint8_t bufferSize = sizeof(bufferATQA);
 8005b8c:	f88d 3003 	strb.w	r3, [sp, #3]
	StatusCode_t status = PICC_RequestA(bufferATQA, &bufferSize);
 8005b90:	f7ff fe78 	bl	8005884 <PICC_RequestA>
	return (status == STATUS_OK || status == STATUS_COLLISION);
 8005b94:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
 8005b98:	1e43      	subs	r3, r0, #1
 8005b9a:	4258      	negs	r0, r3
 8005b9c:	4158      	adcs	r0, r3
 8005b9e:	b003      	add	sp, #12
 8005ba0:	f85d fb04 	ldr.w	pc, [sp], #4

08005ba4 <PICC_ReadCardSerial>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 *
 * @return bool
 */
bool PICC_ReadCardSerial(UID* uid) {
 8005ba4:	b508      	push	{r3, lr}
	//uint8_t result = PICC_Select(uid, 0);
	StatusCode_t status = PICC_Select(uid, 0);
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	f7ff ff15 	bl	80059d6 <PICC_Select>

	return ((status == STATUS_UID_COMPLETE) || (status == STATUS_UID_COMPLETE_NC)); //return a '1' if PICC_Select returns a valid UID, else a '0'
 8005bac:	380a      	subs	r0, #10
 8005bae:	b2c0      	uxtb	r0, r0
} // End PICC_ReadCardSerial()
 8005bb0:	2801      	cmp	r0, #1
 8005bb2:	bf8c      	ite	hi
 8005bb4:	2000      	movhi	r0, #0
 8005bb6:	2001      	movls	r0, #1
 8005bb8:	bd08      	pop	{r3, pc}
	...

08005bbc <PICC_ReadBlock>:
  *
  *
  */
StatusCode_t PICC_ReadBlock(int blockNumber, uint8_t arrayAddress[], MIFARE_Key *key, auth_key_t authkey)
{
  int largestModulo4Number=blockNumber/4*4;
 8005bbc:	2800      	cmp	r0, #0
{
 8005bbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bc0:	4604      	mov	r4, r0
  int largestModulo4Number=blockNumber/4*4;
 8005bc2:	bfb8      	it	lt
 8005bc4:	3003      	addlt	r0, #3
{
 8005bc6:	460d      	mov	r5, r1
  int trailerBlock=largestModulo4Number+3;//determine trailer block for the sector
 8005bc8:	f040 0103 	orr.w	r1, r0, #3
  //this method is used to authenticate a certain block for writing or reading
  //command: See enumerations above -> PICC_CMD_MF_AUTH_KEY_A	= 0x60 (=1100000),		// this command performs authentication with Key A
  //blockAddr is the number of the block from 0 to 15.
  //MIFARE_Key *key is a pointer to the MIFARE_Key struct defined above, this struct needs to be defined for each block. New cards have all A/B= FF FF FF FF FF FF
  //Uid *uid is a pointer to the UID struct that contains the user ID of the card.
  if (authkey == AUTH_KEY_A) {
 8005bcc:	b9a3      	cbnz	r3, 8005bf8 <PICC_ReadBlock+0x3c>
	  status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_A, trailerBlock, key, &(uid));
 8005bce:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <PICC_ReadBlock+0x50>)
 8005bd0:	b2c9      	uxtb	r1, r1
 8005bd2:	2060      	movs	r0, #96	; 0x60
  }
  else if (authkey == AUTH_KEY_B) {
	  status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_B, trailerBlock, key, &(uid));
 8005bd4:	f7ff ff7e 	bl	8005ad4 <PCD_Authenticate>
  }
  else return STATUS_ERROR;
  if (status != STATUS_OK) {
 8005bd8:	2801      	cmp	r0, #1
 8005bda:	d115      	bne.n	8005c08 <PICC_ReadBlock+0x4c>
  //If a different sector is being authenticated access to the previous one is lost.


  /*****************************************reading a block***********************************************************/

  uint8_t buffersize = 18;//we need to define a variable with the read buffer size, since the MIFARE_Read method below needs a pointer to the variable that contains the size...
 8005bdc:	2312      	movs	r3, #18
  status = MIFARE_Read(blockNumber, arrayAddress, &buffersize);//&buffersize is a pointer to the buffersize variable; MIFARE_Read requires a pointer instead of just a number
 8005bde:	f10d 0207 	add.w	r2, sp, #7
 8005be2:	4629      	mov	r1, r5
 8005be4:	b2e0      	uxtb	r0, r4
  uint8_t buffersize = 18;//we need to define a variable with the read buffer size, since the MIFARE_Read method below needs a pointer to the variable that contains the size...
 8005be6:	f88d 3007 	strb.w	r3, [sp, #7]
  status = MIFARE_Read(blockNumber, arrayAddress, &buffersize);//&buffersize is a pointer to the buffersize variable; MIFARE_Read requires a pointer instead of just a number
 8005bea:	f7ff ffaa 	bl	8005b42 <MIFARE_Read>
  if (status != STATUS_OK) {
	  //printf("MIFARE_read() failed: %s\r\n", GetStatusCodeName(status));
	  return STATUS_MIFARE_R_FAIL;
 8005bee:	2801      	cmp	r0, #1
 8005bf0:	bf18      	it	ne
 8005bf2:	2010      	movne	r0, #16
  }
  //printf("block was read\r\n");
  return status;
}
 8005bf4:	b003      	add	sp, #12
 8005bf6:	bd30      	pop	{r4, r5, pc}
  else if (authkey == AUTH_KEY_B) {
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d103      	bne.n	8005c04 <PICC_ReadBlock+0x48>
	  status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_B, trailerBlock, key, &(uid));
 8005bfc:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <PICC_ReadBlock+0x50>)
 8005bfe:	b2c9      	uxtb	r1, r1
 8005c00:	2061      	movs	r0, #97	; 0x61
 8005c02:	e7e7      	b.n	8005bd4 <PICC_ReadBlock+0x18>
  else return STATUS_ERROR;
 8005c04:	2002      	movs	r0, #2
 8005c06:	e7f5      	b.n	8005bf4 <PICC_ReadBlock+0x38>
      return STATUS_AUTH_FAILED;
 8005c08:	200e      	movs	r0, #14
 8005c0a:	e7f3      	b.n	8005bf4 <PICC_ReadBlock+0x38>
 8005c0c:	20000641 	.word	0x20000641

08005c10 <TAG_CheckID>:
}



StatusCode_t TAG_CheckID(uint8_t *id, uint8_t* codeTable, uint8_t numCodes, uint8_t codeSize, int8_t* indexUID)
{
 8005c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t id_c = 0;
	for (uint8_t i = 0; i < numCodes; i++) {
 8005c14:	2500      	movs	r5, #0
 8005c16:	462e      	mov	r6, r5
 8005c18:	eb00 0e03 	add.w	lr, r0, r3
 8005c1c:	b2f4      	uxtb	r4, r6
 8005c1e:	42a2      	cmp	r2, r4
 8005c20:	d91a      	bls.n	8005c58 <TAG_CheckID+0x48>
 8005c22:	4607      	mov	r7, r0
 8005c24:	eb01 0c05 	add.w	ip, r1, r5
 8005c28:	2400      	movs	r4, #0
 8005c2a:	e007      	b.n	8005c3c <TAG_CheckID+0x2c>
		for (uint8_t j = 0; j < codeSize; j++) {
			if (id[j] == *(codeTable + i*codeSize + j)){
 8005c2c:	f817 9b01 	ldrb.w	r9, [r7], #1
 8005c30:	f81c 8b01 	ldrb.w	r8, [ip], #1
 8005c34:	45c1      	cmp	r9, r8
				id_c++;
 8005c36:	bf04      	itt	eq
 8005c38:	3401      	addeq	r4, #1
 8005c3a:	b2e4      	uxtbeq	r4, r4
		for (uint8_t j = 0; j < codeSize; j++) {
 8005c3c:	4577      	cmp	r7, lr
 8005c3e:	d1f5      	bne.n	8005c2c <TAG_CheckID+0x1c>
			}
		}
		if (id_c == codeSize) {
 8005c40:	429c      	cmp	r4, r3
 8005c42:	f106 0701 	add.w	r7, r6, #1
 8005c46:	441d      	add	r5, r3
 8005c48:	d104      	bne.n	8005c54 <TAG_CheckID+0x44>
			*indexUID = i;		// index of the matched uid in the known UIDS table
 8005c4a:	9b07      	ldr	r3, [sp, #28]
			return STATUS_OK;
 8005c4c:	2001      	movs	r0, #1
			*indexUID = i;		// index of the matched uid in the known UIDS table
 8005c4e:	701e      	strb	r6, [r3, #0]
		} else {
			id_c = 0;
		}
	}
	return STATUS_INVALID;
}
 8005c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c54:	463e      	mov	r6, r7
 8005c56:	e7e1      	b.n	8005c1c <TAG_CheckID+0xc>
	return STATUS_INVALID;
 8005c58:	2007      	movs	r0, #7
 8005c5a:	e7f9      	b.n	8005c50 <TAG_CheckID+0x40>

08005c5c <TAG_ReadMifareClassicSector>:



StatusCode_t TAG_ReadMifareClassicSector(UID* uid, MIFARE_CLASSIC_1K_Card_t* card, uint8_t sector, MIFARE_Key *key, auth_key_t authkey){
 8005c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c60:	b087      	sub	sp, #28
	uint8_t in[PICC_BLOCK_SIZE+2];
	StatusCode_t status;
	uint8_t block;
	uint8_t firstblock = sector*4;
 8005c62:	0097      	lsls	r7, r2, #2
StatusCode_t TAG_ReadMifareClassicSector(UID* uid, MIFARE_CLASSIC_1K_Card_t* card, uint8_t sector, MIFARE_Key *key, auth_key_t authkey){
 8005c64:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
 8005c68:	460e      	mov	r6, r1
 8005c6a:	4615      	mov	r5, r2
 8005c6c:	4698      	mov	r8, r3
	uint8_t firstblock = sector*4;
 8005c6e:	b2ff      	uxtb	r7, r7
	uint8_t trailer = sector*4 + 3;


	// 1. Authenticate sector:
	if (authkey == AUTH_KEY_A) {
 8005c70:	f1b9 0f00 	cmp.w	r9, #0
 8005c74:	d110      	bne.n	8005c98 <TAG_ReadMifareClassicSector+0x3c>
		status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_A, firstblock, key, uid);
 8005c76:	4603      	mov	r3, r0
 8005c78:	4642      	mov	r2, r8
 8005c7a:	4639      	mov	r1, r7
 8005c7c:	2060      	movs	r0, #96	; 0x60
	}
	else if (authkey == AUTH_KEY_B) {
		status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_B, firstblock, key, uid);
 8005c7e:	f7ff ff29 	bl	8005ad4 <PCD_Authenticate>
	}
	else return STATUS_ERROR;
	//status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_B, firstblock, key, uid);
	if (status != STATUS_OK) {
 8005c82:	2801      	cmp	r0, #1
		status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_B, firstblock, key, uid);
 8005c84:	4604      	mov	r4, r0
	if (status != STATUS_OK) {
 8005c86:	d00f      	beq.n	8005ca8 <TAG_ReadMifareClassicSector+0x4c>
		printf("Authentication FAILED in Sector %d \n", sector);
 8005c88:	481b      	ldr	r0, [pc, #108]	; (8005cf8 <TAG_ReadMifareClassicSector+0x9c>)
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	f001 fdba 	bl	8007804 <iprintf>
			card->sector[sector].Block[j][k] = in[k];
		}
	}

	return STATUS_OK;
}
 8005c90:	4620      	mov	r0, r4
 8005c92:	b007      	add	sp, #28
 8005c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if (authkey == AUTH_KEY_B) {
 8005c98:	f1b9 0f01 	cmp.w	r9, #1
 8005c9c:	d12a      	bne.n	8005cf4 <TAG_ReadMifareClassicSector+0x98>
		status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_B, firstblock, key, uid);
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	4642      	mov	r2, r8
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	2061      	movs	r0, #97	; 0x61
 8005ca6:	e7ea      	b.n	8005c7e <TAG_ReadMifareClassicSector+0x22>
 8005ca8:	2241      	movs	r2, #65	; 0x41
 8005caa:	fb02 6505 	mla	r5, r2, r5, r6
 8005cae:	3504      	adds	r5, #4
	for (int j = 0; j < 4; j++){
 8005cb0:	f04f 0a00 	mov.w	sl, #0
			card->sector[sector].Block[j][k] = in[k];
 8005cb4:	f10d 0b14 	add.w	fp, sp, #20
		status = PICC_ReadBlock(block, (uint8_t*)in, key, authkey);
 8005cb8:	eb07 000a 	add.w	r0, r7, sl
 8005cbc:	464b      	mov	r3, r9
 8005cbe:	4642      	mov	r2, r8
 8005cc0:	a901      	add	r1, sp, #4
 8005cc2:	b2c0      	uxtb	r0, r0
 8005cc4:	f7ff ff7a 	bl	8005bbc <PICC_ReadBlock>
		if (status != STATUS_OK){
 8005cc8:	2801      	cmp	r0, #1
		status = PICC_ReadBlock(block, (uint8_t*)in, key, authkey);
 8005cca:	4604      	mov	r4, r0
		if (status != STATUS_OK){
 8005ccc:	d1e0      	bne.n	8005c90 <TAG_ReadMifareClassicSector+0x34>
			card->sector[sector].Block[j][k] = in[k];
 8005cce:	aa01      	add	r2, sp, #4
 8005cd0:	462b      	mov	r3, r5
 8005cd2:	4616      	mov	r6, r2
 8005cd4:	ce03      	ldmia	r6!, {r0, r1}
 8005cd6:	455e      	cmp	r6, fp
 8005cd8:	6018      	str	r0, [r3, #0]
 8005cda:	6059      	str	r1, [r3, #4]
 8005cdc:	4632      	mov	r2, r6
 8005cde:	f103 0308 	add.w	r3, r3, #8
 8005ce2:	d1f6      	bne.n	8005cd2 <TAG_ReadMifareClassicSector+0x76>
	for (int j = 0; j < 4; j++){
 8005ce4:	f10a 0a01 	add.w	sl, sl, #1
 8005ce8:	f1ba 0f04 	cmp.w	sl, #4
 8005cec:	f105 0510 	add.w	r5, r5, #16
 8005cf0:	d1e2      	bne.n	8005cb8 <TAG_ReadMifareClassicSector+0x5c>
 8005cf2:	e7cd      	b.n	8005c90 <TAG_ReadMifareClassicSector+0x34>
	else return STATUS_ERROR;
 8005cf4:	2402      	movs	r4, #2
 8005cf6:	e7cb      	b.n	8005c90 <TAG_ReadMifareClassicSector+0x34>
 8005cf8:	08037b64 	.word	0x08037b64

08005cfc <InitSPI>:


HAL_StatusTypeDef InitSPI (SPI_HandleTypeDef* SpiHandle){

	// Set the SPI parameters
	SpiHandle->Instance               = SPIx;
 8005cfc:	4a0d      	ldr	r2, [pc, #52]	; (8005d34 <InitSPI+0x38>)
HAL_StatusTypeDef InitSPI (SPI_HandleTypeDef* SpiHandle){
 8005cfe:	b508      	push	{r3, lr}
	SpiHandle->Instance               = SPIx;
 8005d00:	6002      	str	r2, [r0, #0]
	SpiHandle->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005d02:	2220      	movs	r2, #32
 8005d04:	61c2      	str	r2, [r0, #28]
	SpiHandle->Init.Direction         = SPI_DIRECTION_2LINES;
	SpiHandle->Init.CLKPhase          = SPI_PHASE_1EDGE;
	SpiHandle->Init.CLKPolarity       = SPI_POLARITY_LOW;
	SpiHandle->Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
	SpiHandle->Init.CRCPolynomial     = 10;
 8005d06:	210a      	movs	r1, #10
	SpiHandle->Init.Direction         = SPI_DIRECTION_2LINES;
 8005d08:	2200      	movs	r2, #0
	SpiHandle->Init.CLKPolarity       = SPI_POLARITY_LOW;
 8005d0a:	e9c0 2204 	strd	r2, r2, [r0, #16]
	SpiHandle->Init.Direction         = SPI_DIRECTION_2LINES;
 8005d0e:	6082      	str	r2, [r0, #8]
	SpiHandle->Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8005d10:	6282      	str	r2, [r0, #40]	; 0x28
	SpiHandle->Init.CRCPolynomial     = 10;
 8005d12:	62c1      	str	r1, [r0, #44]	; 0x2c
	SpiHandle->Init.DataSize          = SPI_DATASIZE_8BIT;
 8005d14:	60c2      	str	r2, [r0, #12]
	SpiHandle->Init.FirstBit          = SPI_FIRSTBIT_MSB;
	SpiHandle->Init.NSS               = SPI_NSS_SOFT;
 8005d16:	f44f 7100 	mov.w	r1, #512	; 0x200
	SpiHandle->Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8005d1a:	6202      	str	r2, [r0, #32]
	SpiHandle->Init.TIMode            = SPI_TIMODE_DISABLE;
 8005d1c:	6242      	str	r2, [r0, #36]	; 0x24
	SpiHandle->Init.Mode 			  = SPI_MODE_MASTER;
 8005d1e:	f44f 7282 	mov.w	r2, #260	; 0x104
	SpiHandle->Init.NSS               = SPI_NSS_SOFT;
 8005d22:	6181      	str	r1, [r0, #24]
	SpiHandle->Init.Mode 			  = SPI_MODE_MASTER;
 8005d24:	6042      	str	r2, [r0, #4]


	if(HAL_SPI_Init(SpiHandle) != HAL_OK)
 8005d26:	f7fe fd95 	bl	8004854 <HAL_SPI_Init>
	{
		//Error_Handler();
		return HAL_ERROR;
	}
	return HAL_OK;
}
 8005d2a:	3800      	subs	r0, #0
 8005d2c:	bf18      	it	ne
 8005d2e:	2001      	movne	r0, #1
 8005d30:	bd08      	pop	{r3, pc}
 8005d32:	bf00      	nop
 8005d34:	40013400 	.word	0x40013400

08005d38 <SPI_TransmitByte>:
/**
  * @brief  SPI transmit byte in full duplex mode
  * @param  hspi: SPI handle, data - trasmit data
  * @retval recv data
  */
uint8_t SPI_TransmitByte(SPI_HandleTypeDef *hspi, uint8_t data){
 8005d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t TxData[1];
	uint8_t RxData[1];

	TxData[0] = data;
	HAL_SPI_TransmitReceive(hspi, TxData, RxData, 1, HAL_MAX_DELAY);
 8005d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	TxData[0] = data;
 8005d3e:	f88d 1008 	strb.w	r1, [sp, #8]
	HAL_SPI_TransmitReceive(hspi, TxData, RxData, 1, HAL_MAX_DELAY);
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	aa03      	add	r2, sp, #12
 8005d46:	2301      	movs	r3, #1
 8005d48:	a902      	add	r1, sp, #8
 8005d4a:	f7fe fec0 	bl	8004ace <HAL_SPI_TransmitReceive>

	return RxData[0];
}
 8005d4e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8005d52:	b005      	add	sp, #20
 8005d54:	f85d fb04 	ldr.w	pc, [sp], #4

08005d58 <USART_Init>:
   * USART1 Init
   *
   */


void USART_Init(UART_HandleTypeDef* pUartHandle){
 8005d58:	b510      	push	{r4, lr}
        - Parity = None
        - BaudRate = 9600 baud
        - Hardware flow control disabled (RTS and CTS signals) */
  pUartHandle->Instance        = USARTx;

  pUartHandle->Init.BaudRate   = USART_SPEED;
 8005d5a:	4a0a      	ldr	r2, [pc, #40]	; (8005d84 <USART_Init+0x2c>)
 8005d5c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005d60:	e9c0 2300 	strd	r2, r3, [r0]
  pUartHandle->Init.WordLength = UART_WORDLENGTH_8B;
 8005d64:	2300      	movs	r3, #0
  pUartHandle->Init.StopBits   = UART_STOPBITS_1;
 8005d66:	e9c0 3302 	strd	r3, r3, [r0, #8]
  pUartHandle->Init.Parity     = UART_PARITY_NONE;
 8005d6a:	6103      	str	r3, [r0, #16]
  pUartHandle->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8005d6c:	6183      	str	r3, [r0, #24]
  pUartHandle->Init.Mode       = UART_MODE_TX_RX;
 8005d6e:	230c      	movs	r3, #12
void USART_Init(UART_HandleTypeDef* pUartHandle){
 8005d70:	4604      	mov	r4, r0
  pUartHandle->Init.Mode       = UART_MODE_TX_RX;
 8005d72:	6143      	str	r3, [r0, #20]
  //pUartHandle->Init.Mode       = UART_MODE_TX;
  if(HAL_UART_DeInit(pUartHandle) != HAL_OK)
 8005d74:	f7ff f9a8 	bl	80050c8 <HAL_UART_DeInit>
  {
    //Error_Handler();
  }
  if(HAL_UART_Init(pUartHandle) != HAL_OK)
 8005d78:	4620      	mov	r0, r4
  {
    //Error_Handler();
  }
}
 8005d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_UART_Init(pUartHandle) != HAL_OK)
 8005d7e:	f7ff b975 	b.w	800506c <HAL_UART_Init>
 8005d82:	bf00      	nop
 8005d84:	40011000 	.word	0x40011000

08005d88 <LCD_Show_Feature>:
  * @brief  Show LCD Features
  * @param  feature: feature index
  * @retval None
  */
static void LCD_Show_Feature(uint8_t feature)
{
 8005d88:	b570      	push	{r4, r5, r6, lr}
  Point Points[]= {{100, 100}, {160, 100}, {160, 140}};
 8005d8a:	4b9e      	ldr	r3, [pc, #632]	; (8006004 <LCD_Show_Feature+0x27c>)
{
 8005d8c:	b086      	sub	sp, #24
  Point Points[]= {{100, 100}, {160, 100}, {160, 140}};
 8005d8e:	6859      	ldr	r1, [r3, #4]
{
 8005d90:	4604      	mov	r4, r0
  Point Points[]= {{100, 100}, {160, 100}, {160, 140}};
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	466a      	mov	r2, sp
 8005d96:	c203      	stmia	r2!, {r0, r1}
 8005d98:	6898      	ldr	r0, [r3, #8]
  Point Points2[]= {{100, 150}, {160, 150}, {160, 200}};
 8005d9a:	6919      	ldr	r1, [r3, #16]
  Point Points[]= {{100, 100}, {160, 100}, {160, 140}};
 8005d9c:	6010      	str	r0, [r2, #0]
  Point Points2[]= {{100, 150}, {160, 150}, {160, 200}};
 8005d9e:	68d8      	ldr	r0, [r3, #12]
 8005da0:	aa03      	add	r2, sp, #12
 8005da2:	c203      	stmia	r2!, {r0, r1}
 8005da4:	6958      	ldr	r0, [r3, #20]
 8005da6:	6010      	str	r0, [r2, #0]
  
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);  
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dac:	f7fb fda4 	bl	80018f8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);    
 8005db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005db4:	f7fb fd94 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(12, 92, BSP_LCD_GetXSize() - 24, BSP_LCD_GetYSize()- 104);
 8005db8:	f7fb fd3c 	bl	8001834 <BSP_LCD_GetXSize>
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	f7fb fd41 	bl	8001844 <BSP_LCD_GetYSize>
 8005dc2:	f1a5 0218 	sub.w	r2, r5, #24
 8005dc6:	3868      	subs	r0, #104	; 0x68
 8005dc8:	b283      	uxth	r3, r0
 8005dca:	b292      	uxth	r2, r2
 8005dcc:	215c      	movs	r1, #92	; 0x5c
 8005dce:	200c      	movs	r0, #12
 8005dd0:	f7fb fed8 	bl	8001b84 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005dd4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005dd8:	f7fb fd82 	bl	80018e0 <BSP_LCD_SetTextColor>
  
  switch (feature)
 8005ddc:	2c01      	cmp	r4, #1
 8005dde:	d043      	beq.n	8005e68 <LCD_Show_Feature+0xe0>
 8005de0:	2c02      	cmp	r4, #2
 8005de2:	f000 80bf 	beq.w	8005f64 <LCD_Show_Feature+0x1dc>
 8005de6:	2c00      	cmp	r4, #0
 8005de8:	d13c      	bne.n	8005e64 <LCD_Show_Feature+0xdc>
  {
  case 0:
    /* Text Feature */
    BSP_LCD_DisplayStringAt(14, 100, (uint8_t*)"Left aligned Text", LEFT_MODE);
 8005dea:	4a87      	ldr	r2, [pc, #540]	; (8006008 <LCD_Show_Feature+0x280>)
    BSP_LCD_DisplayStringAt((uint16_t)(-14), 130, (uint8_t*)"Right aligned Text", RIGHT_MODE);
    BSP_LCD_SetFont(&Font24);
    BSP_LCD_DisplayStringAt(14, 180, (uint8_t*)"Font24", LEFT_MODE);
    BSP_LCD_SetFont(&Font20);
    BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()/2 -20, 180 + Font20.Height, (uint8_t*)"Font20", LEFT_MODE);
    BSP_LCD_SetFont(&Font16);
 8005dec:	4d87      	ldr	r5, [pc, #540]	; (800600c <LCD_Show_Feature+0x284>)
    BSP_LCD_DisplayStringAt(14, 100, (uint8_t*)"Left aligned Text", LEFT_MODE);
 8005dee:	2303      	movs	r3, #3
 8005df0:	2164      	movs	r1, #100	; 0x64
 8005df2:	200e      	movs	r0, #14
 8005df4:	f7fc f8ec 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 115, (uint8_t*)"Center aligned Text", CENTER_MODE);
 8005df8:	4620      	mov	r0, r4
 8005dfa:	4a85      	ldr	r2, [pc, #532]	; (8006010 <LCD_Show_Feature+0x288>)
    BSP_LCD_SetFont(&Font20);
 8005dfc:	4c85      	ldr	r4, [pc, #532]	; (8006014 <LCD_Show_Feature+0x28c>)
    BSP_LCD_DisplayStringAt(0, 115, (uint8_t*)"Center aligned Text", CENTER_MODE);
 8005dfe:	2301      	movs	r3, #1
 8005e00:	2173      	movs	r1, #115	; 0x73
 8005e02:	f7fc f8e5 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt((uint16_t)(-14), 130, (uint8_t*)"Right aligned Text", RIGHT_MODE);
 8005e06:	4a84      	ldr	r2, [pc, #528]	; (8006018 <LCD_Show_Feature+0x290>)
 8005e08:	2302      	movs	r3, #2
 8005e0a:	2182      	movs	r1, #130	; 0x82
 8005e0c:	f64f 70f2 	movw	r0, #65522	; 0xfff2
 8005e10:	f7fc f8de 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font24);
 8005e14:	4881      	ldr	r0, [pc, #516]	; (800601c <LCD_Show_Feature+0x294>)
 8005e16:	f7fb fd7b 	bl	8001910 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(14, 180, (uint8_t*)"Font24", LEFT_MODE);
 8005e1a:	4a81      	ldr	r2, [pc, #516]	; (8006020 <LCD_Show_Feature+0x298>)
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	21b4      	movs	r1, #180	; 0xb4
 8005e20:	200e      	movs	r0, #14
 8005e22:	f7fc f8d5 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font20);
 8005e26:	4620      	mov	r0, r4
 8005e28:	f7fb fd72 	bl	8001910 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()/2 -20, 180 + Font20.Height, (uint8_t*)"Font20", LEFT_MODE);
 8005e2c:	f7fb fd02 	bl	8001834 <BSP_LCD_GetXSize>
 8005e30:	88e1      	ldrh	r1, [r4, #6]
 8005e32:	4a7c      	ldr	r2, [pc, #496]	; (8006024 <LCD_Show_Feature+0x29c>)
 8005e34:	0840      	lsrs	r0, r0, #1
 8005e36:	31b4      	adds	r1, #180	; 0xb4
 8005e38:	3814      	subs	r0, #20
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	b289      	uxth	r1, r1
 8005e3e:	b280      	uxth	r0, r0
 8005e40:	f7fc f8c6 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8005e44:	4628      	mov	r0, r5
 8005e46:	f7fb fd63 	bl	8001910 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize() - 80, 180 + Font20.Height + Font16.Height, (uint8_t*)"Font16", LEFT_MODE);
 8005e4a:	f7fb fcf3 	bl	8001834 <BSP_LCD_GetXSize>
 8005e4e:	88eb      	ldrh	r3, [r5, #6]
 8005e50:	88e1      	ldrh	r1, [r4, #6]
 8005e52:	4a75      	ldr	r2, [pc, #468]	; (8006028 <LCD_Show_Feature+0x2a0>)
 8005e54:	4419      	add	r1, r3
 8005e56:	31b4      	adds	r1, #180	; 0xb4
 8005e58:	3850      	subs	r0, #80	; 0x50
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	b289      	uxth	r1, r1
 8005e5e:	b280      	uxth	r0, r0
 8005e60:	f7fc f8b6 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
    
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize()-100, BSP_LCD_GetYSize()- 80, (uint8_t *)stlogo);
    HAL_Delay(500);    
    break;
  }
}
 8005e64:	b006      	add	sp, #24
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK); 
 8005e68:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005e6c:	f7fb fd38 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(20, 100, 60 , 40);
 8005e70:	2328      	movs	r3, #40	; 0x28
 8005e72:	223c      	movs	r2, #60	; 0x3c
 8005e74:	2164      	movs	r1, #100	; 0x64
 8005e76:	2014      	movs	r0, #20
 8005e78:	f7fb fdca 	bl	8001a10 <BSP_LCD_DrawRect>
    BSP_LCD_FillRect(20, 150, 60 , 40); 
 8005e7c:	2328      	movs	r3, #40	; 0x28
 8005e7e:	223c      	movs	r2, #60	; 0x3c
 8005e80:	2196      	movs	r1, #150	; 0x96
 8005e82:	2014      	movs	r0, #20
 8005e84:	f7fb fe7e 	bl	8001b84 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_GRAY); 
 8005e88:	4868      	ldr	r0, [pc, #416]	; (800602c <LCD_Show_Feature+0x2a4>)
 8005e8a:	f7fb fd29 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawCircle(50, 220, 20);
 8005e8e:	2214      	movs	r2, #20
 8005e90:	21dc      	movs	r1, #220	; 0xdc
 8005e92:	2032      	movs	r0, #50	; 0x32
 8005e94:	f7fc fa6c 	bl	8002370 <BSP_LCD_DrawCircle>
    BSP_LCD_FillCircle(120, 220, 20);
 8005e98:	2214      	movs	r2, #20
 8005e9a:	21dc      	movs	r1, #220	; 0xdc
 8005e9c:	2078      	movs	r0, #120	; 0x78
 8005e9e:	f7fc fb09 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 8005ea2:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8005ea6:	f7fb fd1b 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawPolygon(Points, 3);
 8005eaa:	4668      	mov	r0, sp
 8005eac:	2103      	movs	r1, #3
 8005eae:	f7fc f957 	bl	8002160 <BSP_LCD_DrawPolygon>
    BSP_LCD_FillPolygon(Points2, 3);
 8005eb2:	2103      	movs	r1, #3
 8005eb4:	a803      	add	r0, sp, #12
 8005eb6:	f7fc f9dc 	bl	8002272 <BSP_LCD_FillPolygon>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8005eba:	485d      	ldr	r0, [pc, #372]	; (8006030 <LCD_Show_Feature+0x2a8>)
 8005ebc:	f7fb fd10 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawEllipse(BSP_LCD_GetXSize() - 45, 120, 30, 20);
 8005ec0:	f7fb fcb8 	bl	8001834 <BSP_LCD_GetXSize>
 8005ec4:	2314      	movs	r3, #20
 8005ec6:	221e      	movs	r2, #30
 8005ec8:	2178      	movs	r1, #120	; 0x78
 8005eca:	382d      	subs	r0, #45	; 0x2d
 8005ecc:	f7fc fb5a 	bl	8002584 <BSP_LCD_DrawEllipse>
    BSP_LCD_FillEllipse(BSP_LCD_GetXSize() - 45, 170, 30, 20);
 8005ed0:	f7fb fcb0 	bl	8001834 <BSP_LCD_GetXSize>
 8005ed4:	2314      	movs	r3, #20
 8005ed6:	221e      	movs	r2, #30
 8005ed8:	21aa      	movs	r1, #170	; 0xaa
 8005eda:	382d      	subs	r0, #45	; 0x2d
 8005edc:	f7fb feb6 	bl	8001c4c <BSP_LCD_FillEllipse>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK); 
 8005ee0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005ee4:	f7fb fcfc 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawHLine(20, BSP_LCD_GetYSize() - 30, BSP_LCD_GetXSize() / 5);
 8005ee8:	f7fb fcac 	bl	8001844 <BSP_LCD_GetYSize>
 8005eec:	4604      	mov	r4, r0
 8005eee:	f7fb fca1 	bl	8001834 <BSP_LCD_GetXSize>
 8005ef2:	f1a4 011e 	sub.w	r1, r4, #30
 8005ef6:	b289      	uxth	r1, r1
 8005ef8:	2205      	movs	r2, #5
 8005efa:	fbb0 f2f2 	udiv	r2, r0, r2
 8005efe:	2014      	movs	r0, #20
 8005f00:	b292      	uxth	r2, r2
 8005f02:	f7fb fd2f 	bl	8001964 <BSP_LCD_DrawHLine>
    BSP_LCD_DrawLine (BSP_LCD_GetXSize() - 150, BSP_LCD_GetYSize()- 20, BSP_LCD_GetXSize()- 20, BSP_LCD_GetYSize()- 50);
 8005f06:	f7fb fc95 	bl	8001834 <BSP_LCD_GetXSize>
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	f7fb fc9a 	bl	8001844 <BSP_LCD_GetYSize>
 8005f10:	4605      	mov	r5, r0
 8005f12:	f7fb fc8f 	bl	8001834 <BSP_LCD_GetXSize>
 8005f16:	4606      	mov	r6, r0
 8005f18:	f7fb fc94 	bl	8001844 <BSP_LCD_GetYSize>
 8005f1c:	3c96      	subs	r4, #150	; 0x96
 8005f1e:	3832      	subs	r0, #50	; 0x32
 8005f20:	f1a6 0214 	sub.w	r2, r6, #20
 8005f24:	f1a5 0114 	sub.w	r1, r5, #20
 8005f28:	b283      	uxth	r3, r0
 8005f2a:	b292      	uxth	r2, r2
 8005f2c:	b289      	uxth	r1, r1
 8005f2e:	b2a0      	uxth	r0, r4
 8005f30:	f7fc f8ac 	bl	800208c <BSP_LCD_DrawLine>
    BSP_LCD_DrawLine (BSP_LCD_GetXSize() - 150, BSP_LCD_GetYSize()- 50, BSP_LCD_GetXSize()- 20, BSP_LCD_GetYSize()- 20);
 8005f34:	f7fb fc7e 	bl	8001834 <BSP_LCD_GetXSize>
 8005f38:	4604      	mov	r4, r0
 8005f3a:	f7fb fc83 	bl	8001844 <BSP_LCD_GetYSize>
 8005f3e:	4605      	mov	r5, r0
 8005f40:	f7fb fc78 	bl	8001834 <BSP_LCD_GetXSize>
 8005f44:	4606      	mov	r6, r0
 8005f46:	f7fb fc7d 	bl	8001844 <BSP_LCD_GetYSize>
 8005f4a:	3c96      	subs	r4, #150	; 0x96
 8005f4c:	3814      	subs	r0, #20
 8005f4e:	f1a6 0214 	sub.w	r2, r6, #20
 8005f52:	f1a5 0132 	sub.w	r1, r5, #50	; 0x32
 8005f56:	b283      	uxth	r3, r0
 8005f58:	b292      	uxth	r2, r2
 8005f5a:	b289      	uxth	r1, r1
 8005f5c:	b2a0      	uxth	r0, r4
 8005f5e:	f7fc f895 	bl	800208c <BSP_LCD_DrawLine>
    break;
 8005f62:	e77f      	b.n	8005e64 <LCD_Show_Feature+0xdc>
    BSP_LCD_DrawBitmap(20, 100, (uint8_t *)stlogo);
 8005f64:	4a33      	ldr	r2, [pc, #204]	; (8006034 <LCD_Show_Feature+0x2ac>)
 8005f66:	2164      	movs	r1, #100	; 0x64
 8005f68:	2014      	movs	r0, #20
 8005f6a:	f7fb fd6b 	bl	8001a44 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);
 8005f6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f72:	f7fc fdbf 	bl	8002af4 <HAL_Delay>
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize()-100, 100, (uint8_t *)stlogo);
 8005f76:	f7fb fc5d 	bl	8001834 <BSP_LCD_GetXSize>
 8005f7a:	4a2e      	ldr	r2, [pc, #184]	; (8006034 <LCD_Show_Feature+0x2ac>)
 8005f7c:	2164      	movs	r1, #100	; 0x64
 8005f7e:	3864      	subs	r0, #100	; 0x64
 8005f80:	f7fb fd60 	bl	8001a44 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);
 8005f84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f88:	f7fc fdb4 	bl	8002af4 <HAL_Delay>
    BSP_LCD_DrawBitmap(20, (BSP_LCD_GetYSize()-104-92)/2+100, (uint8_t *)stlogo);
 8005f8c:	f7fb fc5a 	bl	8001844 <BSP_LCD_GetYSize>
 8005f90:	38c4      	subs	r0, #196	; 0xc4
 8005f92:	0841      	lsrs	r1, r0, #1
 8005f94:	4a27      	ldr	r2, [pc, #156]	; (8006034 <LCD_Show_Feature+0x2ac>)
 8005f96:	3164      	adds	r1, #100	; 0x64
 8005f98:	2014      	movs	r0, #20
 8005f9a:	f7fb fd53 	bl	8001a44 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);    
 8005f9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005fa2:	f7fc fda7 	bl	8002af4 <HAL_Delay>
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize()-100, (BSP_LCD_GetYSize()-104-92)/2+100, (uint8_t *)stlogo);
 8005fa6:	f7fb fc45 	bl	8001834 <BSP_LCD_GetXSize>
 8005faa:	4604      	mov	r4, r0
 8005fac:	f7fb fc4a 	bl	8001844 <BSP_LCD_GetYSize>
 8005fb0:	f1a0 01c4 	sub.w	r1, r0, #196	; 0xc4
 8005fb4:	0849      	lsrs	r1, r1, #1
 8005fb6:	4a1f      	ldr	r2, [pc, #124]	; (8006034 <LCD_Show_Feature+0x2ac>)
 8005fb8:	3164      	adds	r1, #100	; 0x64
 8005fba:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
 8005fbe:	f7fb fd41 	bl	8001a44 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);     
 8005fc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005fc6:	f7fc fd95 	bl	8002af4 <HAL_Delay>
    BSP_LCD_DrawBitmap(20, BSP_LCD_GetYSize()- 80, (uint8_t *)stlogo);
 8005fca:	f7fb fc3b 	bl	8001844 <BSP_LCD_GetYSize>
 8005fce:	4a19      	ldr	r2, [pc, #100]	; (8006034 <LCD_Show_Feature+0x2ac>)
 8005fd0:	f1a0 0150 	sub.w	r1, r0, #80	; 0x50
 8005fd4:	2014      	movs	r0, #20
 8005fd6:	f7fb fd35 	bl	8001a44 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);
 8005fda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005fde:	f7fc fd89 	bl	8002af4 <HAL_Delay>
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize()-100, BSP_LCD_GetYSize()- 80, (uint8_t *)stlogo);
 8005fe2:	f7fb fc27 	bl	8001834 <BSP_LCD_GetXSize>
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	f7fb fc2c 	bl	8001844 <BSP_LCD_GetYSize>
 8005fec:	4a11      	ldr	r2, [pc, #68]	; (8006034 <LCD_Show_Feature+0x2ac>)
 8005fee:	f1a0 0150 	sub.w	r1, r0, #80	; 0x50
 8005ff2:	f1a4 0064 	sub.w	r0, r4, #100	; 0x64
 8005ff6:	f7fb fd25 	bl	8001a44 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);    
 8005ffa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ffe:	f7fc fd79 	bl	8002af4 <HAL_Delay>
}
 8006002:	e72f      	b.n	8005e64 <LCD_Show_Feature+0xdc>
 8006004:	0800c6e0 	.word	0x0800c6e0
 8006008:	08037b89 	.word	0x08037b89
 800600c:	200000ec 	.word	0x200000ec
 8006010:	08037b9b 	.word	0x08037b9b
 8006014:	200000f4 	.word	0x200000f4
 8006018:	08037baf 	.word	0x08037baf
 800601c:	200000d4 	.word	0x200000d4
 8006020:	08037bc2 	.word	0x08037bc2
 8006024:	08037bc9 	.word	0x08037bc9
 8006028:	08037bd0 	.word	0x08037bd0
 800602c:	ff808080 	.word	0xff808080
 8006030:	ffff0000 	.word	0xffff0000
 8006034:	0800c740 	.word	0x0800c740

08006038 <LCD_demo>:
{ 
 8006038:	b510      	push	{r4, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800603a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800603e:	f7fb fc73 	bl	8001928 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8006042:	4832      	ldr	r0, [pc, #200]	; (800610c <LCD_demo+0xd4>)
 8006044:	f7fb fc4c 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8006048:	f7fb fbf4 	bl	8001834 <BSP_LCD_GetXSize>
 800604c:	2100      	movs	r1, #0
 800604e:	b282      	uxth	r2, r0
 8006050:	2350      	movs	r3, #80	; 0x50
 8006052:	4608      	mov	r0, r1
 8006054:	f7fb fd96 	bl	8001b84 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8006058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800605c:	f7fb fc40 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 8006060:	482a      	ldr	r0, [pc, #168]	; (800610c <LCD_demo+0xd4>)
 8006062:	f7fb fc49 	bl	80018f8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8006066:	482a      	ldr	r0, [pc, #168]	; (8006110 <LCD_demo+0xd8>)
 8006068:	f7fb fc52 	bl	8001910 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"LCD", CENTER_MODE);
 800606c:	2100      	movs	r1, #0
 800606e:	4608      	mov	r0, r1
 8006070:	4a28      	ldr	r2, [pc, #160]	; (8006114 <LCD_demo+0xdc>)
 8006072:	2301      	movs	r3, #1
 8006074:	f7fb ffac 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8006078:	4827      	ldr	r0, [pc, #156]	; (8006118 <LCD_demo+0xe0>)
 800607a:	f7fb fc49 	bl	8001910 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"This example shows the different", CENTER_MODE);
 800607e:	4a27      	ldr	r2, [pc, #156]	; (800611c <LCD_demo+0xe4>)
 8006080:	2301      	movs	r3, #1
 8006082:	211e      	movs	r1, #30
 8006084:	2000      	movs	r0, #0
 8006086:	f7fb ffa3 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t*)"LCD Features, use BUTTON", CENTER_MODE);
 800608a:	4a25      	ldr	r2, [pc, #148]	; (8006120 <LCD_demo+0xe8>)
 800608c:	2301      	movs	r3, #1
 800608e:	212d      	movs	r1, #45	; 0x2d
 8006090:	2000      	movs	r0, #0
 8006092:	f7fb ff9d 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"to display next page", CENTER_MODE);
 8006096:	4a23      	ldr	r2, [pc, #140]	; (8006124 <LCD_demo+0xec>)
 8006098:	2301      	movs	r3, #1
 800609a:	213c      	movs	r1, #60	; 0x3c
 800609c:	2000      	movs	r0, #0
 800609e:	f7fb ff97 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);  
 80060a2:	481a      	ldr	r0, [pc, #104]	; (800610c <LCD_demo+0xd4>)
 80060a4:	f7fb fc1c 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize()- 100);
 80060a8:	f7fb fbc4 	bl	8001834 <BSP_LCD_GetXSize>
 80060ac:	4604      	mov	r4, r0
 80060ae:	f7fb fbc9 	bl	8001844 <BSP_LCD_GetYSize>
 80060b2:	f1a4 0214 	sub.w	r2, r4, #20
 80060b6:	3864      	subs	r0, #100	; 0x64
 80060b8:	b283      	uxth	r3, r0
 80060ba:	b292      	uxth	r2, r2
 80060bc:	215a      	movs	r1, #90	; 0x5a
 80060be:	200a      	movs	r0, #10
 80060c0:	f7fb fca6 	bl	8001a10 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102);
 80060c4:	f7fb fbb6 	bl	8001834 <BSP_LCD_GetXSize>
 80060c8:	4604      	mov	r4, r0
 80060ca:	f7fb fbbb 	bl	8001844 <BSP_LCD_GetYSize>
 80060ce:	f1a4 0216 	sub.w	r2, r4, #22
 80060d2:	3866      	subs	r0, #102	; 0x66
 80060d4:	b283      	uxth	r3, r0
  LCD_Feature = 0;
 80060d6:	4c14      	ldr	r4, [pc, #80]	; (8006128 <LCD_demo+0xf0>)
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102);
 80060d8:	200b      	movs	r0, #11
 80060da:	b292      	uxth	r2, r2
 80060dc:	215b      	movs	r1, #91	; 0x5b
 80060de:	f7fb fc97 	bl	8001a10 <BSP_LCD_DrawRect>
  LCD_Feature = 0;
 80060e2:	2000      	movs	r0, #0
 80060e4:	7020      	strb	r0, [r4, #0]
  LCD_Show_Feature (LCD_Feature); 
 80060e6:	f7ff fe4f 	bl	8005d88 <LCD_Show_Feature>
    if(CheckForUserInput() > 0)
 80060ea:	f000 facd 	bl	8006688 <CheckForUserInput>
 80060ee:	b138      	cbz	r0, 8006100 <LCD_demo+0xc8>
      if(++LCD_Feature < LCD_FEATURES_NUM)
 80060f0:	7820      	ldrb	r0, [r4, #0]
 80060f2:	3001      	adds	r0, #1
 80060f4:	b2c0      	uxtb	r0, r0
 80060f6:	2802      	cmp	r0, #2
 80060f8:	7020      	strb	r0, [r4, #0]
 80060fa:	d805      	bhi.n	8006108 <LCD_demo+0xd0>
        LCD_Show_Feature (LCD_Feature); 
 80060fc:	f7ff fe44 	bl	8005d88 <LCD_Show_Feature>
    HAL_Delay(100);
 8006100:	2064      	movs	r0, #100	; 0x64
 8006102:	f7fc fcf7 	bl	8002af4 <HAL_Delay>
    if(CheckForUserInput() > 0)
 8006106:	e7f0      	b.n	80060ea <LCD_demo+0xb2>
}
 8006108:	bd10      	pop	{r4, pc}
 800610a:	bf00      	nop
 800610c:	ff0000ff 	.word	0xff0000ff
 8006110:	200000d4 	.word	0x200000d4
 8006114:	08037bd7 	.word	0x08037bd7
 8006118:	200000e4 	.word	0x200000e4
 800611c:	08037bdb 	.word	0x08037bdb
 8006120:	08037bfc 	.word	0x08037bfc
 8006124:	08037c15 	.word	0x08037c15
 8006128:	200005c4 	.word	0x200005c4

0800612c <Log_demo>:
  * @brief  LCD Log demo 
  * @param  None
  * @retval None
  */
void Log_demo(void)
{ 
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i = 0;

  /* Initialize LCD Log module */
  LCD_LOG_Init();
 800612e:	f001 faa9 	bl	8007684 <LCD_LOG_Init>
  
  /* Show Header and Footer texts */
  LCD_LOG_SetHeader((uint8_t*)"This is the header");
 8006132:	481a      	ldr	r0, [pc, #104]	; (800619c <Log_demo+0x70>)
 8006134:	f001 fab0 	bl	8007698 <LCD_LOG_SetHeader>
  LCD_LOG_SetFooter((uint8_t*)"This is the footer");
 8006138:	4819      	ldr	r0, [pc, #100]	; (80061a0 <Log_demo+0x74>)
 800613a:	f001 fae3 	bl	8007704 <LCD_LOG_SetFooter>
  
  /* Wait For User inputs */
  while(CheckForUserInput() == 0);
 800613e:	f000 faa3 	bl	8006688 <CheckForUserInput>
 8006142:	2800      	cmp	r0, #0
 8006144:	d0fb      	beq.n	800613e <Log_demo+0x12>
  
  /* Output User logs */
  for (i = 0; i < 10; i++)
  {
    LCD_UsrLog ("This is Line %d \n", i);
 8006146:	4d17      	ldr	r5, [pc, #92]	; (80061a4 <Log_demo+0x78>)
 8006148:	4f17      	ldr	r7, [pc, #92]	; (80061a8 <Log_demo+0x7c>)
 800614a:	4e18      	ldr	r6, [pc, #96]	; (80061ac <Log_demo+0x80>)
 800614c:	2400      	movs	r4, #0
 800614e:	4621      	mov	r1, r4
 8006150:	4630      	mov	r0, r6
 8006152:	602f      	str	r7, [r5, #0]
  for (i = 0; i < 10; i++)
 8006154:	3401      	adds	r4, #1
    LCD_UsrLog ("This is Line %d \n", i);
 8006156:	f001 fb55 	bl	8007804 <iprintf>
    HAL_Delay(100);
 800615a:	2064      	movs	r0, #100	; 0x64
 800615c:	f7fc fcca 	bl	8002af4 <HAL_Delay>
  for (i = 0; i < 10; i++)
 8006160:	2c0a      	cmp	r4, #10
 8006162:	d1f4      	bne.n	800614e <Log_demo+0x22>
  }
  
  HAL_Delay(1500);
 8006164:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006168:	f7fc fcc4 	bl	8002af4 <HAL_Delay>
  
   /* Clear Old logs */
  LCD_LOG_ClearTextZone();
 800616c:	f001 fb0c 	bl	8007788 <LCD_LOG_ClearTextZone>
  
   /* Output new user logs */
  for (i = 0; i < 30; i++)
  {
    LCD_UsrLog ("This is Line %d \n", i);
 8006170:	4f0d      	ldr	r7, [pc, #52]	; (80061a8 <Log_demo+0x7c>)
 8006172:	4e0e      	ldr	r6, [pc, #56]	; (80061ac <Log_demo+0x80>)
  LCD_LOG_ClearTextZone();
 8006174:	2400      	movs	r4, #0
    LCD_UsrLog ("This is Line %d \n", i);
 8006176:	4621      	mov	r1, r4
 8006178:	4630      	mov	r0, r6
 800617a:	602f      	str	r7, [r5, #0]
  for (i = 0; i < 30; i++)
 800617c:	3401      	adds	r4, #1
    LCD_UsrLog ("This is Line %d \n", i);
 800617e:	f001 fb41 	bl	8007804 <iprintf>
    HAL_Delay(100);
 8006182:	2064      	movs	r0, #100	; 0x64
 8006184:	f7fc fcb6 	bl	8002af4 <HAL_Delay>
  for (i = 0; i < 30; i++)
 8006188:	2c1e      	cmp	r4, #30
 800618a:	d1f4      	bne.n	8006176 <Log_demo+0x4a>
  }
  
  /* Check for joystick user input for scroll (back and forward) */
  while (1)
  {
    if(CheckForUserInput() > 0)
 800618c:	f000 fa7c 	bl	8006688 <CheckForUserInput>
 8006190:	b918      	cbnz	r0, 800619a <Log_demo+0x6e>
    {
      return;
    }    
    HAL_Delay (10);
 8006192:	200a      	movs	r0, #10
 8006194:	f7fc fcae 	bl	8002af4 <HAL_Delay>
    if(CheckForUserInput() > 0)
 8006198:	e7f8      	b.n	800618c <Log_demo+0x60>
  }
}
 800619a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800619c:	08037c2a 	.word	0x08037c2a
 80061a0:	08037c3d 	.word	0x08037c3d
 80061a4:	20000b10 	.word	0x20000b10
 80061a8:	ff000080 	.word	0xff000080
 80061ac:	08037c50 	.word	0x08037c50

080061b0 <Display_InitContent>:
  * @brief  Display main messages
  * @param  None
  * @retval None
  */
static void Display_InitContent(void)
{
 80061b0:	b510      	push	{r4, lr}
  uint8_t desc[50];

  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(1);
 80061b2:	2001      	movs	r0, #1
 80061b4:	f7fb fb8e 	bl	80018d4 <BSP_LCD_SelectLayer>

  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80061b8:	481a      	ldr	r0, [pc, #104]	; (8006224 <Display_InitContent+0x74>)
 80061ba:	f7fb fba9 	bl	8001910 <BSP_LCD_SetFont>

  /* Clear the LCD */
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80061be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061c2:	f7fb fb99 	bl	80018f8 <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80061c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061ca:	f7fb fbad 	bl	8001928 <BSP_LCD_Clear>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80061ce:	4816      	ldr	r0, [pc, #88]	; (8006228 <Display_InitContent+0x78>)
 80061d0:	f7fb fb86 	bl	80018e0 <BSP_LCD_SetTextColor>

  /* Display LCD messages */
  //BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)"STM32F429I BSP", CENTER_MODE);
  BSP_LCD_DisplayStringAt(0, 6, (uint8_t*)"Kontrola", CENTER_MODE);
 80061d4:	4a15      	ldr	r2, [pc, #84]	; (800622c <Display_InitContent+0x7c>)
 80061d6:	2301      	movs	r3, #1
 80061d8:	2106      	movs	r1, #6
 80061da:	2000      	movs	r0, #0
 80061dc:	f7fb fef8 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 26, (uint8_t*)"dostopa", CENTER_MODE);
 80061e0:	2301      	movs	r3, #1
 80061e2:	4a13      	ldr	r2, [pc, #76]	; (8006230 <Display_InitContent+0x80>)
 80061e4:	211a      	movs	r1, #26
 80061e6:	2000      	movs	r0, #0
 80061e8:	f7fb fef2 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  //BSP_LCD_DisplayStringAt(0, 55, (uint8_t*)"Prislonite RFID", CENTER_MODE);
  //BSP_LCD_DisplayStringAt(0, 68, (uint8_t*)"kljucek", CENTER_MODE);

  /* Draw Bitmap */
  //BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80)/2, 75, (uint8_t *)stlogo);
  PB_BSP_LCD_DrawBitmap(0, 50, &bmimg_hisa);
 80061ec:	4a11      	ldr	r2, [pc, #68]	; (8006234 <Display_InitContent+0x84>)
 80061ee:	2132      	movs	r1, #50	; 0x32
 80061f0:	2000      	movs	r0, #0
 80061f2:	f7fb fc89 	bl	8001b08 <PB_BSP_LCD_DrawBitmap>
  //PB_BSP_LCD_DrawBitmap(0, 50, &bmimg_hisa888);

  BSP_LCD_SetFont(&Font20);
 80061f6:	4810      	ldr	r0, [pc, #64]	; (8006238 <Display_InitContent+0x88>)
 80061f8:	f7fb fb8a 	bl	8001910 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize( )- 40, (uint8_t*)"Razvil:", CENTER_MODE);
 80061fc:	f7fb fb22 	bl	8001844 <BSP_LCD_GetYSize>
 8006200:	3828      	subs	r0, #40	; 0x28
 8006202:	b281      	uxth	r1, r0
 8006204:	4a0d      	ldr	r2, [pc, #52]	; (800623c <Display_InitContent+0x8c>)
 8006206:	2301      	movs	r3, #1
 8006208:	2000      	movs	r0, #0
 800620a:	f7fb fee1 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize( )- 20, (uint8_t*)"Pa3cio, 2022", CENTER_MODE);
 800620e:	f7fb fb19 	bl	8001844 <BSP_LCD_GetYSize>
 8006212:	3814      	subs	r0, #20
 8006214:	b281      	uxth	r1, r0
  /* Draw Bitmap */
  //BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 180)/2, 0, (uint8_t *)stlogo);
  //PB_BSP_LCD_DrawBitmap(0, 20, (uint8_t *)hisa);
  //sprintf((char *)desc,"%s example", BSP_examples[DemoIndex].DemoName);
  //BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 45, (uint8_t *)desc, CENTER_MODE);
}
 8006216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize( )- 20, (uint8_t*)"Pa3cio, 2022", CENTER_MODE);
 800621a:	4a09      	ldr	r2, [pc, #36]	; (8006240 <Display_InitContent+0x90>)
 800621c:	2301      	movs	r3, #1
 800621e:	2000      	movs	r0, #0
 8006220:	f7fb bed6 	b.w	8001fd0 <BSP_LCD_DisplayStringAt>
 8006224:	200000d4 	.word	0x200000d4
 8006228:	ff000080 	.word	0xff000080
 800622c:	08037c62 	.word	0x08037c62
 8006230:	08037c6b 	.word	0x08037c6b
 8006234:	0800c6f8 	.word	0x0800c6f8
 8006238:	200000f4 	.word	0x200000f4
 800623c:	08037c73 	.word	0x08037c73
 8006240:	08037c7b 	.word	0x08037c7b

08006244 <Display_AccesDenied>:
	//BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 50, (uint8_t*)"kljucek", CENTER_MODE);
	 */
}

static void Display_AccesDenied(void)
{
 8006244:	b570      	push	{r4, r5, r6, lr}
	BSP_LCD_SetFont(&Font24);
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8006246:	4d1f      	ldr	r5, [pc, #124]	; (80062c4 <Display_AccesDenied+0x80>)
	BSP_LCD_SetFont(&Font24);
 8006248:	481f      	ldr	r0, [pc, #124]	; (80062c8 <Display_AccesDenied+0x84>)
 800624a:	f7fb fb61 	bl	8001910 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800624e:	4628      	mov	r0, r5
 8006250:	f7fb fb46 	bl	80018e0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, BSP_LCD_GetYSize()/2 + 35, BSP_LCD_GetXSize(), 80);
 8006254:	f7fb faf6 	bl	8001844 <BSP_LCD_GetYSize>
 8006258:	4604      	mov	r4, r0
 800625a:	f7fb faeb 	bl	8001834 <BSP_LCD_GetXSize>
 800625e:	0861      	lsrs	r1, r4, #1
 8006260:	3123      	adds	r1, #35	; 0x23
 8006262:	b282      	uxth	r2, r0
 8006264:	2350      	movs	r3, #80	; 0x50
 8006266:	b289      	uxth	r1, r1
 8006268:	2000      	movs	r0, #0
 800626a:	f7fb fc8b 	bl	8001b84 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800626e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006272:	f7fb fb35 	bl	80018e0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8006276:	4628      	mov	r0, r5
 8006278:	f7fb fb3e 	bl	80018f8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 35 + 10, (uint8_t*)"Dostop", CENTER_MODE);
 800627c:	f7fb fae2 	bl	8001844 <BSP_LCD_GetYSize>
 8006280:	0840      	lsrs	r0, r0, #1
 8006282:	f100 012d 	add.w	r1, r0, #45	; 0x2d
 8006286:	4a11      	ldr	r2, [pc, #68]	; (80062cc <Display_AccesDenied+0x88>)
 8006288:	2301      	movs	r3, #1
 800628a:	b289      	uxth	r1, r1
 800628c:	2000      	movs	r0, #0
 800628e:	f7fb fe9f 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 35 + 30, (uint8_t*)"zavrnjen!", CENTER_MODE);
 8006292:	f7fb fad7 	bl	8001844 <BSP_LCD_GetYSize>
 8006296:	0840      	lsrs	r0, r0, #1
 8006298:	f100 0141 	add.w	r1, r0, #65	; 0x41
 800629c:	4a0c      	ldr	r2, [pc, #48]	; (80062d0 <Display_AccesDenied+0x8c>)
 800629e:	2301      	movs	r3, #1
 80062a0:	b289      	uxth	r1, r1
 80062a2:	2000      	movs	r0, #0
 80062a4:	f7fb fe94 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 35 + 50, strUID, CENTER_MODE);
 80062a8:	f7fb facc 	bl	8001844 <BSP_LCD_GetYSize>
 80062ac:	0840      	lsrs	r0, r0, #1
 80062ae:	f100 0155 	add.w	r1, r0, #85	; 0x55
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 30, (uint8_t*)"RFID prebran!", CENTER_MODE);
	//BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 50, (uint8_t*)"kljucek", CENTER_MODE);
	 *
	 */
}
 80062b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 35 + 50, strUID, CENTER_MODE);
 80062b6:	4a07      	ldr	r2, [pc, #28]	; (80062d4 <Display_AccesDenied+0x90>)
 80062b8:	2301      	movs	r3, #1
 80062ba:	b289      	uxth	r1, r1
 80062bc:	2000      	movs	r0, #0
 80062be:	f7fb be87 	b.w	8001fd0 <BSP_LCD_DisplayStringAt>
 80062c2:	bf00      	nop
 80062c4:	ffff0000 	.word	0xffff0000
 80062c8:	200000d4 	.word	0x200000d4
 80062cc:	08037c88 	.word	0x08037c88
 80062d0:	08037c8f 	.word	0x08037c8f
 80062d4:	200005c8 	.word	0x200005c8

080062d8 <Clear_AccesGranted>:


static void Clear_AccesGranted(void)
{
 80062d8:	b570      	push	{r4, r5, r6, lr}
	BSP_LCD_SetFont(&Font16);
 80062da:	4d24      	ldr	r5, [pc, #144]	; (800636c <Clear_AccesGranted+0x94>)
 80062dc:	4628      	mov	r0, r5
 80062de:	f7fb fb17 	bl	8001910 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80062e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062e6:	f7fb fafb 	bl	80018e0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, BSP_LCD_GetYSize()/2 - 85, BSP_LCD_GetXSize(), 60);
 80062ea:	f7fb faab 	bl	8001844 <BSP_LCD_GetYSize>
 80062ee:	4604      	mov	r4, r0
 80062f0:	f7fb faa0 	bl	8001834 <BSP_LCD_GetXSize>
 80062f4:	0861      	lsrs	r1, r4, #1
 80062f6:	3955      	subs	r1, #85	; 0x55
 80062f8:	b282      	uxth	r2, r0
 80062fa:	233c      	movs	r3, #60	; 0x3c
 80062fc:	b289      	uxth	r1, r1
 80062fe:	2000      	movs	r0, #0
 8006300:	f7fb fc40 	bl	8001b84 <BSP_LCD_FillRect>

	BSP_LCD_SetFont(&Font16);
 8006304:	4628      	mov	r0, r5
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8006306:	4d1a      	ldr	r5, [pc, #104]	; (8006370 <Clear_AccesGranted+0x98>)
	BSP_LCD_SetFont(&Font16);
 8006308:	f7fb fb02 	bl	8001910 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800630c:	4628      	mov	r0, r5
 800630e:	f7fb fae7 	bl	80018e0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, BSP_LCD_GetYSize()/2 + 15, BSP_LCD_GetXSize(), 60);
 8006312:	f7fb fa97 	bl	8001844 <BSP_LCD_GetYSize>
 8006316:	4604      	mov	r4, r0
 8006318:	f7fb fa8c 	bl	8001834 <BSP_LCD_GetXSize>
 800631c:	0861      	lsrs	r1, r4, #1
 800631e:	310f      	adds	r1, #15
 8006320:	b282      	uxth	r2, r0
 8006322:	233c      	movs	r3, #60	; 0x3c
 8006324:	b289      	uxth	r1, r1
 8006326:	2000      	movs	r0, #0
 8006328:	f7fb fc2c 	bl	8001b84 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800632c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006330:	f7fb fad6 	bl	80018e0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8006334:	4628      	mov	r0, r5
 8006336:	f7fb fadf 	bl	80018f8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 30, (uint8_t*)"Prislonite RFID", CENTER_MODE);
 800633a:	f7fb fa83 	bl	8001844 <BSP_LCD_GetYSize>
 800633e:	0840      	lsrs	r0, r0, #1
 8006340:	f100 011e 	add.w	r1, r0, #30
 8006344:	4a0b      	ldr	r2, [pc, #44]	; (8006374 <Clear_AccesGranted+0x9c>)
 8006346:	2301      	movs	r3, #1
 8006348:	b289      	uxth	r1, r1
 800634a:	2000      	movs	r0, #0
 800634c:	f7fb fe40 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 50, (uint8_t*)"kljucek", CENTER_MODE);
 8006350:	f7fb fa78 	bl	8001844 <BSP_LCD_GetYSize>
 8006354:	0840      	lsrs	r0, r0, #1
 8006356:	f100 0132 	add.w	r1, r0, #50	; 0x32
}
 800635a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 50, (uint8_t*)"kljucek", CENTER_MODE);
 800635e:	4a06      	ldr	r2, [pc, #24]	; (8006378 <Clear_AccesGranted+0xa0>)
 8006360:	2301      	movs	r3, #1
 8006362:	b289      	uxth	r1, r1
 8006364:	2000      	movs	r0, #0
 8006366:	f7fb be33 	b.w	8001fd0 <BSP_LCD_DisplayStringAt>
 800636a:	bf00      	nop
 800636c:	200000ec 	.word	0x200000ec
 8006370:	ff0000ff 	.word	0xff0000ff
 8006374:	08037c99 	.word	0x08037c99
 8006378:	08037ca9 	.word	0x08037ca9

0800637c <main>:
{ 
 800637c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006380:	b096      	sub	sp, #88	; 0x58
  HAL_Init();
 8006382:	f7fc fb8b 	bl	8002a9c <HAL_Init>
  GPIOB_Init();
 8006386:	f7ff f833 	bl	80053f0 <GPIOB_Init>
  HAL_GPIO_WritePin(RELAY_PORT, RELAY_IN_PIN, GPIO_PIN_SET);
 800638a:	2110      	movs	r1, #16
 800638c:	2201      	movs	r2, #1
 800638e:	48ac      	ldr	r0, [pc, #688]	; (8006640 <main+0x2c4>)
					HAL_GPIO_WritePin(RELAY_PORT, RELAY_IN_PIN, GPIO_PIN_RESET);
 8006390:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8006640 <main+0x2c4>
  HAL_GPIO_WritePin(RELAY_PORT, RELAY_IN_PIN, GPIO_PIN_SET);
 8006394:	f7fc ffd8 	bl	8003348 <HAL_GPIO_WritePin>
  BSP_LED_Init(LED3);
 8006398:	2000      	movs	r0, #0
 800639a:	f7fa ff4f 	bl	800123c <BSP_LED_Init>
  BSP_LED_Init(LED4); 
 800639e:	2001      	movs	r0, #1
 80063a0:	f7fa ff4c 	bl	800123c <BSP_LED_Init>
  BSP_LED_Off(LED3);
 80063a4:	2000      	movs	r0, #0
 80063a6:	f7fa ff91 	bl	80012cc <BSP_LED_Off>
  BSP_LED_Off(LED4);
 80063aa:	2001      	movs	r0, #1
 80063ac:	f7fa ff8e 	bl	80012cc <BSP_LED_Off>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80063b0:	2500      	movs	r5, #0
 80063b2:	4ba4      	ldr	r3, [pc, #656]	; (8006644 <main+0x2c8>)
 80063b4:	9503      	str	r5, [sp, #12]
 80063b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80063bc:	641a      	str	r2, [r3, #64]	; 0x40
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063c4:	9303      	str	r3, [sp, #12]
 80063c6:	9b03      	ldr	r3, [sp, #12]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80063c8:	4b9f      	ldr	r3, [pc, #636]	; (8006648 <main+0x2cc>)
 80063ca:	9504      	str	r5, [sp, #16]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80063da:	9304      	str	r3, [sp, #16]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80063dc:	2601      	movs	r6, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80063de:	9b04      	ldr	r3, [sp, #16]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80063e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80063e4:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80063e6:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80063ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 360;
 80063ee:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80063f0:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80063f4:	af0a      	add	r7, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 360;
 80063f6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80063fa:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80063fe:	4638      	mov	r0, r7
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006400:	2307      	movs	r3, #7
 8006402:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006404:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8006406:	f7fd fd5f 	bl	8003ec8 <HAL_RCC_OscConfig>

  /* Activate the Over-Drive mode */
  HAL_PWREx_EnableOverDrive();
 800640a:	f7fd fd23 	bl	8003e54 <HAL_PWREx_EnableOverDrive>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800640e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006410:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006414:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8006418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  USART_Init(&UartHandle);
 800641c:	4c8b      	ldr	r4, [pc, #556]	; (800664c <main+0x2d0>)
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800641e:	9507      	str	r5, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006420:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8006424:	a805      	add	r0, sp, #20
 8006426:	2105      	movs	r1, #5
 8006428:	f7fd ff2c 	bl	8004284 <HAL_RCC_ClockConfig>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800642c:	4631      	mov	r1, r6
 800642e:	4628      	mov	r0, r5
 8006430:	f7fa ff5a 	bl	80012e8 <BSP_PB_Init>
  USART_Init(&UartHandle);
 8006434:	f104 0010 	add.w	r0, r4, #16
 8006438:	f7ff fc8e 	bl	8005d58 <USART_Init>
  RetargetInit(&UartHandle);
 800643c:	f104 0010 	add.w	r0, r4, #16
 8006440:	f000 fbea 	bl	8006c18 <RetargetInit>
  printf("\n RFID STM32F429i Discovery \n\n");
 8006444:	4882      	ldr	r0, [pc, #520]	; (8006650 <main+0x2d4>)
 8006446:	f001 fa63 	bl	8007910 <puts>
  	  new_key.keyA[i] = cKEYA[i];	// keyA is defined in the "MIFARE_Key" 'struct' definition in the .h file of the library
 800644a:	4a82      	ldr	r2, [pc, #520]	; (8006654 <main+0x2d8>)
  B0.c1bit = ACC_BIT_RESET; B0.c2bit = ACC_BIT_RESET; B0.c3bit = ACC_BIT_RESET;
 800644c:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
	  key.keyA[i] = 0xFF;	// keyA is defined in the "MIFARE_Key" 'struct' definition in the .h file of the library
 8006450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  	  new_key.keyA[i] = cKEYA[i];	// keyA is defined in the "MIFARE_Key" 'struct' definition in the .h file of the library
 8006454:	6811      	ldr	r1, [r2, #0]
 8006456:	8892      	ldrh	r2, [r2, #4]
	  key.keyA[i] = 0xFF;	// keyA is defined in the "MIFARE_Key" 'struct' definition in the .h file of the library
 8006458:	6563      	str	r3, [r4, #84]	; 0x54
 800645a:	65a3      	str	r3, [r4, #88]	; 0x58
 800645c:	65e3      	str	r3, [r4, #92]	; 0x5c
  	  new_key.keyA[i] = cKEYA[i];	// keyA is defined in the "MIFARE_Key" 'struct' definition in the .h file of the library
 800645e:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  	  new_key.keyB[i] = 0xFF;
 8006462:	f8c4 3066 	str.w	r3, [r4, #102]	; 0x66
 8006466:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  	  new_key.keyA[i] = cKEYA[i];	// keyA is defined in the "MIFARE_Key" 'struct' definition in the .h file of the library
 800646a:	6621      	str	r1, [r4, #96]	; 0x60
  B0.c1bit = ACC_BIT_RESET; B0.c2bit = ACC_BIT_RESET; B0.c3bit = ACC_BIT_RESET;
 800646c:	f884 506d 	strb.w	r5, [r4, #109]	; 0x6d
 8006470:	f884 506e 	strb.w	r5, [r4, #110]	; 0x6e
  B1.c1bit = ACC_BIT_RESET; B1.c2bit = ACC_BIT_RESET; B1.c3bit = ACC_BIT_RESET;
 8006474:	f884 506f 	strb.w	r5, [r4, #111]	; 0x6f
 8006478:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
 800647c:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
  B2.c1bit = ACC_BIT_RESET; B2.c2bit = ACC_BIT_RESET; B2.c3bit = ACC_BIT_RESET;
 8006480:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
 8006484:	f884 5073 	strb.w	r5, [r4, #115]	; 0x73
 8006488:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
  TB.c1bit = ACC_BIT_RESET; TB.c2bit = ACC_BIT_RESET; TB.c3bit = ACC_BIT_SET;
 800648c:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
 8006490:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
 8006494:	f884 6077 	strb.w	r6, [r4, #119]	; 0x77
  BSP_LCD_Init();
 8006498:	f7fb fcd0 	bl	8001e3c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 800649c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80064a0:	4630      	mov	r0, r6
 80064a2:	f7fb f9d7 	bl	8001854 <BSP_LCD_LayerDefaultInit>
  Display_InitContent();
 80064a6:	f7ff fe83 	bl	80061b0 <Display_InitContent>
  PCD_Init();
 80064aa:	f7ff f8e9 	bl	8005680 <PCD_Init>
		status = TAG_CheckID(uid.uids, (uint8_t*)RFIDcodes, NRFIDCODES4, 4, &(uid.index));
 80064ae:	f104 0987 	add.w	r9, r4, #135	; 0x87
		  BSP_LED_On(LED3);
 80064b2:	2000      	movs	r0, #0
 80064b4:	f7fa fefc 	bl	80012b0 <BSP_LED_On>
		  HAL_Delay(80);
 80064b8:	2050      	movs	r0, #80	; 0x50
 80064ba:	f7fc fb1b 	bl	8002af4 <HAL_Delay>
		  BSP_LED_Off(LED3);
 80064be:	2000      	movs	r0, #0
 80064c0:	f7fa ff04 	bl	80012cc <BSP_LED_Off>
		  HAL_Delay(80);
 80064c4:	2050      	movs	r0, #80	; 0x50
 80064c6:	f7fc fb15 	bl	8002af4 <HAL_Delay>
		  cardPresent = PICC_IsNewCardPresent(); 	// sets successRead to 1 when we get read from reader otherwise 0
 80064ca:	f7ff fb5a 	bl	8005b82 <PICC_IsNewCardPresent>
 80064ce:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	  } while (!cardPresent); 	//the program will not go further while you not get a successful read
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d0ed      	beq.n	80064b2 <main+0x136>
	if (PICC_ReadCardSerial(&uid)) {
 80064d6:	4d60      	ldr	r5, [pc, #384]	; (8006658 <main+0x2dc>)
	  cardPresent = false;
 80064d8:	2600      	movs	r6, #0
	if (PICC_ReadCardSerial(&uid)) {
 80064da:	4628      	mov	r0, r5
	  cardPresent = false;
 80064dc:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
	if (PICC_ReadCardSerial(&uid)) {
 80064e0:	f7ff fb60 	bl	8005ba4 <PICC_ReadCardSerial>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d0e4      	beq.n	80064b2 <main+0x136>
		uid.index = -1;
 80064e8:	23ff      	movs	r3, #255	; 0xff
	for (i = 0; i<uid->size; i++){
 80064ea:	f894 c079 	ldrb.w	ip, [r4, #121]	; 0x79
		uid.index = -1;
 80064ee:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
		card.uid = &uid;
 80064f2:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
static void UIDtoString(UID* uid, char* stringUID){
 80064f6:	f1a5 0079 	sub.w	r0, r5, #121	; 0x79
	for (i = 0; i<uid->size; i++){
 80064fa:	4633      	mov	r3, r6
 80064fc:	4563      	cmp	r3, ip
 80064fe:	f2c0 8089 	blt.w	8006614 <main+0x298>
		status = TAG_CheckID(uid.uids, (uint8_t*)RFIDcodes, NRFIDCODES4, 4, &(uid.index));
 8006502:	4956      	ldr	r1, [pc, #344]	; (800665c <main+0x2e0>)
 8006504:	4856      	ldr	r0, [pc, #344]	; (8006660 <main+0x2e4>)
 8006506:	f8cd 9000 	str.w	r9, [sp]
 800650a:	2304      	movs	r3, #4
 800650c:	220d      	movs	r2, #13
 800650e:	f7ff fb7f 	bl	8005c10 <TAG_CheckID>
		if (status == STATUS_OK){
 8006512:	2801      	cmp	r0, #1
 8006514:	f040 8090 	bne.w	8006638 <main+0x2bc>
			status = TAG_ReadMifareClassicSector(&uid, &card, 15, &new_key, AUTH_KEY_A);
 8006518:	4b52      	ldr	r3, [pc, #328]	; (8006664 <main+0x2e8>)
 800651a:	2600      	movs	r6, #0
 800651c:	220f      	movs	r2, #15
 800651e:	9600      	str	r6, [sp, #0]
 8006520:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006524:	f103 0019 	add.w	r0, r3, #25
 8006528:	f7ff fb98 	bl	8005c5c <TAG_ReadMifareClassicSector>
			if (status == STATUS_OK){
 800652c:	2801      	cmp	r0, #1
			status = TAG_ReadMifareClassicSector(&uid, &card, 15, &new_key, AUTH_KEY_A);
 800652e:	4602      	mov	r2, r0
			if (status == STATUS_OK){
 8006530:	f040 8082 	bne.w	8006638 <main+0x2bc>
				status = TAG_CheckID(id, &RFIDcodesSize16[0][0], 1, 16, &dummy);
 8006534:	494c      	ldr	r1, [pc, #304]	; (8006668 <main+0x2ec>)
 8006536:	484d      	ldr	r0, [pc, #308]	; (800666c <main+0x2f0>)
 8006538:	9700      	str	r7, [sp, #0]
 800653a:	2310      	movs	r3, #16
 800653c:	f7ff fb68 	bl	8005c10 <TAG_CheckID>
				if (status == STATUS_OK){
 8006540:	2801      	cmp	r0, #1
				status = TAG_CheckID(id, &RFIDcodesSize16[0][0], 1, 16, &dummy);
 8006542:	4605      	mov	r5, r0
				if (status == STATUS_OK){
 8006544:	d161      	bne.n	800660a <main+0x28e>
	BSP_LCD_SetFont(&Font24);
 8006546:	484a      	ldr	r0, [pc, #296]	; (8006670 <main+0x2f4>)
 8006548:	f7fb f9e2 	bl	8001910 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 800654c:	4849      	ldr	r0, [pc, #292]	; (8006674 <main+0x2f8>)
 800654e:	f7fb f9c7 	bl	80018e0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, BSP_LCD_GetYSize()/2 + 35, BSP_LCD_GetXSize(), 80);
 8006552:	f7fb f977 	bl	8001844 <BSP_LCD_GetYSize>
 8006556:	4682      	mov	sl, r0
 8006558:	f7fb f96c 	bl	8001834 <BSP_LCD_GetXSize>
 800655c:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8006560:	3123      	adds	r1, #35	; 0x23
 8006562:	b282      	uxth	r2, r0
 8006564:	2350      	movs	r3, #80	; 0x50
 8006566:	b289      	uxth	r1, r1
 8006568:	4630      	mov	r0, r6
 800656a:	f7fb fb0b 	bl	8001b84 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800656e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006572:	f7fb f9b5 	bl	80018e0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
 8006576:	483f      	ldr	r0, [pc, #252]	; (8006674 <main+0x2f8>)
 8006578:	f7fb f9be 	bl	80018f8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font20);
 800657c:	483e      	ldr	r0, [pc, #248]	; (8006678 <main+0x2fc>)
 800657e:	f7fb f9c7 	bl	8001910 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 35 + 10, (uint8_t*)"Dostop:", CENTER_MODE);
 8006582:	f7fb f95f 	bl	8001844 <BSP_LCD_GetYSize>
 8006586:	0840      	lsrs	r0, r0, #1
 8006588:	f100 012d 	add.w	r1, r0, #45	; 0x2d
 800658c:	4a3b      	ldr	r2, [pc, #236]	; (800667c <main+0x300>)
 800658e:	462b      	mov	r3, r5
 8006590:	b289      	uxth	r1, r1
 8006592:	4630      	mov	r0, r6
 8006594:	f7fb fd1c 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font24);
 8006598:	4835      	ldr	r0, [pc, #212]	; (8006670 <main+0x2f4>)
 800659a:	f7fb f9b9 	bl	8001910 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 35 + 30, sNames[uid.index], CENTER_MODE);
 800659e:	f7fb f951 	bl	8001844 <BSP_LCD_GetYSize>
 80065a2:	f994 c087 	ldrsb.w	ip, [r4, #135]	; 0x87
 80065a6:	4a36      	ldr	r2, [pc, #216]	; (8006680 <main+0x304>)
 80065a8:	0840      	lsrs	r0, r0, #1
 80065aa:	f100 0141 	add.w	r1, r0, #65	; 0x41
 80065ae:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80065b2:	462b      	mov	r3, r5
 80065b4:	b289      	uxth	r1, r1
 80065b6:	4630      	mov	r0, r6
 80065b8:	f7fb fd0a 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 80065bc:	4831      	ldr	r0, [pc, #196]	; (8006684 <main+0x308>)
 80065be:	f7fb f9a7 	bl	8001910 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 35 + 60, strUID, CENTER_MODE);
 80065c2:	f7fb f93f 	bl	8001844 <BSP_LCD_GetYSize>
 80065c6:	0840      	lsrs	r0, r0, #1
 80065c8:	f100 015f 	add.w	r1, r0, #95	; 0x5f
 80065cc:	462b      	mov	r3, r5
 80065ce:	4a1f      	ldr	r2, [pc, #124]	; (800664c <main+0x2d0>)
 80065d0:	b289      	uxth	r1, r1
 80065d2:	4630      	mov	r0, r6
 80065d4:	f7fb fcfc 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
					HAL_GPIO_WritePin(RELAY_PORT, RELAY_IN_PIN, GPIO_PIN_RESET);
 80065d8:	4632      	mov	r2, r6
 80065da:	2110      	movs	r1, #16
 80065dc:	4640      	mov	r0, r8
 80065de:	f7fc feb3 	bl	8003348 <HAL_GPIO_WritePin>
					BSP_LED_On(LED3);
 80065e2:	4630      	mov	r0, r6
 80065e4:	f7fa fe64 	bl	80012b0 <BSP_LED_On>
					HAL_Delay(1000);
 80065e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065ec:	f7fc fa82 	bl	8002af4 <HAL_Delay>
					HAL_GPIO_WritePin(RELAY_PORT, RELAY_IN_PIN, GPIO_PIN_SET);
 80065f0:	462a      	mov	r2, r5
 80065f2:	2110      	movs	r1, #16
 80065f4:	4640      	mov	r0, r8
 80065f6:	f7fc fea7 	bl	8003348 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 80065fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065fe:	f7fc fa79 	bl	8002af4 <HAL_Delay>
				Clear_AccesGranted();
 8006602:	f7ff fe69 	bl	80062d8 <Clear_AccesGranted>
				Display_InitContent();
 8006606:	f7ff fdd3 	bl	80061b0 <Display_InitContent>
		PICC_HaltA();
 800660a:	f7ff fa40 	bl	8005a8e <PICC_HaltA>
		PCD_StopCrypto1();
 800660e:	f7ff fa94 	bl	8005b3a <PCD_StopCrypto1>
}
 8006612:	e74e      	b.n	80064b2 <main+0x136>
		nibbleH = (uid->uids[i] >> 4) & 0x0F;
 8006614:	786e      	ldrb	r6, [r5, #1]
		nibbleL = uid->uids[i] & 0x0F;
 8006616:	f006 020f 	and.w	r2, r6, #15
		nibbleH = (uid->uids[i] >> 4) & 0x0F;
 800661a:	0931      	lsrs	r1, r6, #4
		if (nibbleH < 10) {
 800661c:	2e9f      	cmp	r6, #159	; 0x9f
			c1 = nibbleH + 0x30;
 800661e:	bf94      	ite	ls
 8006620:	3130      	addls	r1, #48	; 0x30
		else c1 = nibbleH + 0x37;
 8006622:	3137      	addhi	r1, #55	; 0x37
		if (nibbleL < 10) {
 8006624:	2a09      	cmp	r2, #9
			c2 = nibbleL + 0x30;
 8006626:	bf94      	ite	ls
 8006628:	3230      	addls	r2, #48	; 0x30
		else c2 = nibbleL + 0x37;
 800662a:	3237      	addhi	r2, #55	; 0x37
		strUID[2*i] = c1;
 800662c:	7001      	strb	r1, [r0, #0]
		strUID[2*i+1] = c2;
 800662e:	7042      	strb	r2, [r0, #1]
	for (i = 0; i<uid->size; i++){
 8006630:	3301      	adds	r3, #1
 8006632:	3002      	adds	r0, #2
 8006634:	3501      	adds	r5, #1
 8006636:	e761      	b.n	80064fc <main+0x180>
				Display_AccesDenied();
 8006638:	f7ff fe04 	bl	8006244 <Display_AccesDenied>
 800663c:	e7dd      	b.n	80065fa <main+0x27e>
 800663e:	bf00      	nop
 8006640:	40020400 	.word	0x40020400
 8006644:	40023800 	.word	0x40023800
 8006648:	40007000 	.word	0x40007000
 800664c:	200005c8 	.word	0x200005c8
 8006650:	08037cb1 	.word	0x08037cb1
 8006654:	08037cd7 	.word	0x08037cd7
 8006658:	20000641 	.word	0x20000641
 800665c:	0800c704 	.word	0x0800c704
 8006660:	20000642 	.word	0x20000642
 8006664:	20000628 	.word	0x20000628
 8006668:	0800c728 	.word	0x0800c728
 800666c:	20000a23 	.word	0x20000a23
 8006670:	200000d4 	.word	0x200000d4
 8006674:	ff008000 	.word	0xff008000
 8006678:	200000f4 	.word	0x200000f4
 800667c:	08037ccf 	.word	0x08037ccf
 8006680:	2000010c 	.word	0x2000010c
 8006684:	200000ec 	.word	0x200000ec

08006688 <CheckForUserInput>:
  * @brief  Check for user input
  * @param  None
  * @retval Input state (1 : active / 0 : Inactive)
  */
uint8_t CheckForUserInput(void)
{
 8006688:	b508      	push	{r3, lr}
  if(BSP_PB_GetState(BUTTON_KEY) == RESET)
 800668a:	2000      	movs	r0, #0
 800668c:	f7fa fe66 	bl	800135c <BSP_PB_GetState>
 8006690:	b930      	cbnz	r0, 80066a0 <CheckForUserInput+0x18>
  {
    while (BSP_PB_GetState(BUTTON_KEY) == RESET);
 8006692:	2000      	movs	r0, #0
 8006694:	f7fa fe62 	bl	800135c <BSP_PB_GetState>
 8006698:	2800      	cmp	r0, #0
 800669a:	d0fa      	beq.n	8006692 <CheckForUserInput+0xa>
    return 1;
 800669c:	2001      	movs	r0, #1
  }
  return 0;
}
 800669e:	bd08      	pop	{r3, pc}
  return 0;
 80066a0:	2000      	movs	r0, #0
 80066a2:	e7fc      	b.n	800669e <CheckForUserInput+0x16>

080066a4 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 if (GPIO_Pin == KEY_BUTTON_PIN)
 80066a4:	2801      	cmp	r0, #1
 {
   ubKeyPressed = SET;
 80066a6:	bf04      	itt	eq
 80066a8:	4b01      	ldreq	r3, [pc, #4]	; (80066b0 <HAL_GPIO_EXTI_Callback+0xc>)
 80066aa:	f883 049d 	strbeq.w	r0, [r3, #1181]	; 0x49d
 }
}
 80066ae:	4770      	bx	lr
 80066b0:	200005c8 	.word	0x200005c8

080066b4 <Gyroscope_DrawBackground>:
  * @param  Localstate: Touch zone state
  * @retval None
  */
static void Gyroscope_DrawBackground (uint8_t Localstate)
{
  switch(Localstate)
 80066b4:	2810      	cmp	r0, #16
{
 80066b6:	b510      	push	{r4, lr}
  switch(Localstate)
 80066b8:	d814      	bhi.n	80066e4 <Gyroscope_DrawBackground+0x30>
 80066ba:	2810      	cmp	r0, #16
 80066bc:	d815      	bhi.n	80066ea <Gyroscope_DrawBackground+0x36>
 80066be:	e8df f010 	tbh	[pc, r0, lsl #1]
 80066c2:	0015      	.short	0x0015
 80066c4:	00a70085 	.word	0x00a70085
 80066c8:	00c60014 	.word	0x00c60014
 80066cc:	00140014 	.word	0x00140014
 80066d0:	00e60014 	.word	0x00e60014
 80066d4:	00140014 	.word	0x00140014
 80066d8:	00140014 	.word	0x00140014
 80066dc:	00140014 	.word	0x00140014
 80066e0:	01090014 	.word	0x01090014
 80066e4:	2820      	cmp	r0, #32
 80066e6:	f000 8115 	beq.w	8006914 <Gyroscope_DrawBackground+0x260>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
    BSP_LCD_SetBackColor(LCD_COLOR_ORANGE);
    BSP_LCD_DisplayStringAt(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, (uint8_t*)"Z+", LEFT_MODE);
    break;
  }
}
 80066ea:	bd10      	pop	{r4, pc}
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 80066ec:	489a      	ldr	r0, [pc, #616]	; (8006958 <Gyroscope_DrawBackground+0x2a4>)
 80066ee:	f7fb f8f7 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_LEFT_X_POS, CIRCLE_LEFT_Y_POS, CIRCLE_RADIUS);
 80066f2:	f7fb f89f 	bl	8001834 <BSP_LCD_GetXSize>
 80066f6:	2405      	movs	r4, #5
 80066f8:	221e      	movs	r2, #30
 80066fa:	21c8      	movs	r1, #200	; 0xc8
 80066fc:	fbb0 f0f4 	udiv	r0, r0, r4
 8006700:	b280      	uxth	r0, r0
 8006702:	f7fb fed7 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 8006706:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800670a:	f7fb f8e9 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_RIGHT_X_POS, CIRCLE_RIGHT_Y_POS, CIRCLE_RADIUS);
 800670e:	f7fb f891 	bl	8001834 <BSP_LCD_GetXSize>
 8006712:	fbb0 f0f4 	udiv	r0, r0, r4
 8006716:	0080      	lsls	r0, r0, #2
 8006718:	221e      	movs	r2, #30
 800671a:	21c8      	movs	r1, #200	; 0xc8
 800671c:	b280      	uxth	r0, r0
 800671e:	f7fb fec9 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 8006722:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8006726:	f7fb f8db 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_UP_X_POS, CIRCLE_UP_Y_POS, CIRCLE_RADIUS);
 800672a:	f7fb f883 	bl	8001834 <BSP_LCD_GetXSize>
 800672e:	221e      	movs	r2, #30
 8006730:	2182      	movs	r1, #130	; 0x82
 8006732:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8006736:	f7fb febd 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 800673a:	4888      	ldr	r0, [pc, #544]	; (800695c <Gyroscope_DrawBackground+0x2a8>)
 800673c:	f7fb f8d0 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_DOWN_X_POS, CIRCLE_DOWN_Y_POS, CIRCLE_RADIUS);
 8006740:	f7fb f878 	bl	8001834 <BSP_LCD_GetXSize>
 8006744:	221e      	movs	r2, #30
 8006746:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800674a:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800674e:	f7fb feb1 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_ORANGE); 
 8006752:	4883      	ldr	r0, [pc, #524]	; (8006960 <Gyroscope_DrawBackground+0x2ac>)
 8006754:	f7fb f8c4 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS);
 8006758:	f7fb f86c 	bl	8001834 <BSP_LCD_GetXSize>
 800675c:	221e      	movs	r2, #30
 800675e:	21c8      	movs	r1, #200	; 0xc8
 8006760:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8006764:	f7fb fea6 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8006768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800676c:	f7fb f8b8 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_LEFT_X_POS, CIRCLE_LEFT_Y_POS, CIRCLE_RADIUS - 2);        
 8006770:	f7fb f860 	bl	8001834 <BSP_LCD_GetXSize>
 8006774:	221c      	movs	r2, #28
 8006776:	21c8      	movs	r1, #200	; 0xc8
 8006778:	fbb0 f0f4 	udiv	r0, r0, r4
 800677c:	b280      	uxth	r0, r0
 800677e:	f7fb fe99 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_RIGHT_X_POS, CIRCLE_RIGHT_Y_POS,  CIRCLE_RADIUS - 2); 
 8006782:	f7fb f857 	bl	8001834 <BSP_LCD_GetXSize>
 8006786:	fbb0 f0f4 	udiv	r0, r0, r4
 800678a:	0080      	lsls	r0, r0, #2
 800678c:	221c      	movs	r2, #28
 800678e:	21c8      	movs	r1, #200	; 0xc8
 8006790:	b280      	uxth	r0, r0
 8006792:	f7fb fe8f 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_UP_X_POS, CIRCLE_UP_Y_POS, CIRCLE_RADIUS - 2);
 8006796:	f7fb f84d 	bl	8001834 <BSP_LCD_GetXSize>
 800679a:	221c      	movs	r2, #28
 800679c:	2182      	movs	r1, #130	; 0x82
 800679e:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80067a2:	f7fb fe87 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_DOWN_X_POS, CIRCLE_DOWN_Y_POS, CIRCLE_RADIUS - 2);
 80067a6:	f7fb f845 	bl	8001834 <BSP_LCD_GetXSize>
 80067aa:	221c      	movs	r2, #28
 80067ac:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80067b0:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80067b4:	f7fb fe7e 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS - 2);
 80067b8:	f7fb f83c 	bl	8001834 <BSP_LCD_GetXSize>
}
 80067bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS - 2);
 80067c0:	221c      	movs	r2, #28
 80067c2:	21c8      	movs	r1, #200	; 0xc8
 80067c4:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80067c8:	f7fb be74 	b.w	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 80067cc:	4863      	ldr	r0, [pc, #396]	; (800695c <Gyroscope_DrawBackground+0x2a8>)
 80067ce:	f7fb f887 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_DOWN_X_POS, CIRCLE_DOWN_Y_POS, CIRCLE_RADIUS);
 80067d2:	f7fb f82f 	bl	8001834 <BSP_LCD_GetXSize>
 80067d6:	221e      	movs	r2, #30
 80067d8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80067dc:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80067e0:	f7fb fe68 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font24);
 80067e4:	485f      	ldr	r0, [pc, #380]	; (8006964 <Gyroscope_DrawBackground+0x2b0>)
 80067e6:	f7fb f893 	bl	8001910 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80067ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067ee:	f7fb f877 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80067f2:	485a      	ldr	r0, [pc, #360]	; (800695c <Gyroscope_DrawBackground+0x2a8>)
 80067f4:	f7fb f880 	bl	80018f8 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_DOWN_X_POS-(CIRCLE_RADIUS/2), CIRCLE_DOWN_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"X+",LEFT_MODE);
 80067f8:	f7fb f81c 	bl	8001834 <BSP_LCD_GetXSize>
 80067fc:	4a5a      	ldr	r2, [pc, #360]	; (8006968 <Gyroscope_DrawBackground+0x2b4>)
 80067fe:	0840      	lsrs	r0, r0, #1
 8006800:	380f      	subs	r0, #15
 8006802:	2303      	movs	r3, #3
 8006804:	21ff      	movs	r1, #255	; 0xff
    BSP_LCD_DisplayStringAt(CIRCLE_UP_X_POS-(CIRCLE_RADIUS/2), CIRCLE_UP_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"X-", LEFT_MODE);
 8006806:	b280      	uxth	r0, r0
}
 8006808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    BSP_LCD_DisplayStringAt(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, (uint8_t*)"Z+", LEFT_MODE);
 800680c:	f7fb bbe0 	b.w	8001fd0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 8006810:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8006814:	f7fb f864 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_UP_X_POS, CIRCLE_UP_Y_POS, CIRCLE_RADIUS);
 8006818:	f7fb f80c 	bl	8001834 <BSP_LCD_GetXSize>
 800681c:	221e      	movs	r2, #30
 800681e:	2182      	movs	r1, #130	; 0x82
 8006820:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8006824:	f7fb fe46 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font24);
 8006828:	484e      	ldr	r0, [pc, #312]	; (8006964 <Gyroscope_DrawBackground+0x2b0>)
 800682a:	f7fb f871 	bl	8001910 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800682e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8006832:	f7fb f855 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_YELLOW);
 8006836:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800683a:	f7fb f85d 	bl	80018f8 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_UP_X_POS-(CIRCLE_RADIUS/2), CIRCLE_UP_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"X-", LEFT_MODE);
 800683e:	f7fa fff9 	bl	8001834 <BSP_LCD_GetXSize>
 8006842:	0840      	lsrs	r0, r0, #1
 8006844:	4a49      	ldr	r2, [pc, #292]	; (800696c <Gyroscope_DrawBackground+0x2b8>)
 8006846:	380f      	subs	r0, #15
 8006848:	2303      	movs	r3, #3
 800684a:	2173      	movs	r1, #115	; 0x73
 800684c:	e7db      	b.n	8006806 <Gyroscope_DrawBackground+0x152>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 800684e:	4842      	ldr	r0, [pc, #264]	; (8006958 <Gyroscope_DrawBackground+0x2a4>)
 8006850:	f7fb f846 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_LEFT_X_POS, CIRCLE_LEFT_Y_POS, CIRCLE_RADIUS);
 8006854:	f7fa ffee 	bl	8001834 <BSP_LCD_GetXSize>
 8006858:	2405      	movs	r4, #5
 800685a:	221e      	movs	r2, #30
 800685c:	21c8      	movs	r1, #200	; 0xc8
 800685e:	fbb0 f0f4 	udiv	r0, r0, r4
 8006862:	b280      	uxth	r0, r0
 8006864:	f7fb fe26 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font24);
 8006868:	483e      	ldr	r0, [pc, #248]	; (8006964 <Gyroscope_DrawBackground+0x2b0>)
 800686a:	f7fb f851 	bl	8001910 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800686e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006872:	f7fb f835 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8006876:	4838      	ldr	r0, [pc, #224]	; (8006958 <Gyroscope_DrawBackground+0x2a4>)
 8006878:	f7fb f83e 	bl	80018f8 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_LEFT_X_POS-(CIRCLE_RADIUS/2), CIRCLE_LEFT_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"Y-", LEFT_MODE);
 800687c:	f7fa ffda 	bl	8001834 <BSP_LCD_GetXSize>
 8006880:	4a3b      	ldr	r2, [pc, #236]	; (8006970 <Gyroscope_DrawBackground+0x2bc>)
 8006882:	fbb0 f0f4 	udiv	r0, r0, r4
 8006886:	2303      	movs	r3, #3
 8006888:	380f      	subs	r0, #15
    BSP_LCD_DisplayStringAt(CIRCLE_RIGHT_X_POS-(CIRCLE_RADIUS/2), CIRCLE_RIGHT_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"Y+", LEFT_MODE);
 800688a:	21b9      	movs	r1, #185	; 0xb9
 800688c:	e7bb      	b.n	8006806 <Gyroscope_DrawBackground+0x152>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 800688e:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8006892:	f7fb f825 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_RIGHT_X_POS, CIRCLE_RIGHT_Y_POS, CIRCLE_RADIUS);
 8006896:	f7fa ffcd 	bl	8001834 <BSP_LCD_GetXSize>
 800689a:	2405      	movs	r4, #5
 800689c:	fbb0 f0f4 	udiv	r0, r0, r4
 80068a0:	0080      	lsls	r0, r0, #2
 80068a2:	221e      	movs	r2, #30
 80068a4:	21c8      	movs	r1, #200	; 0xc8
 80068a6:	b280      	uxth	r0, r0
 80068a8:	f7fb fe04 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font24);
 80068ac:	482d      	ldr	r0, [pc, #180]	; (8006964 <Gyroscope_DrawBackground+0x2b0>)
 80068ae:	f7fb f82f 	bl	8001910 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80068b2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80068b6:	f7fb f813 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 80068ba:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80068be:	f7fb f81b 	bl	80018f8 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_RIGHT_X_POS-(CIRCLE_RADIUS/2), CIRCLE_RIGHT_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"Y+", LEFT_MODE);
 80068c2:	f7fa ffb7 	bl	8001834 <BSP_LCD_GetXSize>
 80068c6:	fbb0 f0f4 	udiv	r0, r0, r4
 80068ca:	0080      	lsls	r0, r0, #2
 80068cc:	4a29      	ldr	r2, [pc, #164]	; (8006974 <Gyroscope_DrawBackground+0x2c0>)
 80068ce:	380f      	subs	r0, #15
 80068d0:	2303      	movs	r3, #3
 80068d2:	e7da      	b.n	800688a <Gyroscope_DrawBackground+0x1d6>
    if((state & 32) == 0)
 80068d4:	4b28      	ldr	r3, [pc, #160]	; (8006978 <Gyroscope_DrawBackground+0x2c4>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	069a      	lsls	r2, r3, #26
 80068da:	d40a      	bmi.n	80068f2 <Gyroscope_DrawBackground+0x23e>
      BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 80068dc:	4820      	ldr	r0, [pc, #128]	; (8006960 <Gyroscope_DrawBackground+0x2ac>)
 80068de:	f7fa ffff 	bl	80018e0 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS);
 80068e2:	f7fa ffa7 	bl	8001834 <BSP_LCD_GetXSize>
 80068e6:	221e      	movs	r2, #30
 80068e8:	21c8      	movs	r1, #200	; 0xc8
 80068ea:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80068ee:	f7fb fde1 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font16);
 80068f2:	4822      	ldr	r0, [pc, #136]	; (800697c <Gyroscope_DrawBackground+0x2c8>)
 80068f4:	f7fb f80c 	bl	8001910 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068fc:	f7fa fff0 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_ORANGE);
 8006900:	4817      	ldr	r0, [pc, #92]	; (8006960 <Gyroscope_DrawBackground+0x2ac>)
 8006902:	f7fa fff9 	bl	80018f8 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_CENTRAL_X_POS-(CIRCLE_RADIUS/2), CIRCLE_CENTRAL_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"Z-", LEFT_MODE);
 8006906:	f7fa ff95 	bl	8001834 <BSP_LCD_GetXSize>
 800690a:	0840      	lsrs	r0, r0, #1
 800690c:	4a1c      	ldr	r2, [pc, #112]	; (8006980 <Gyroscope_DrawBackground+0x2cc>)
 800690e:	380f      	subs	r0, #15
 8006910:	2303      	movs	r3, #3
 8006912:	e7ba      	b.n	800688a <Gyroscope_DrawBackground+0x1d6>
    if((state & 16) == 0)
 8006914:	4b18      	ldr	r3, [pc, #96]	; (8006978 <Gyroscope_DrawBackground+0x2c4>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	06db      	lsls	r3, r3, #27
 800691a:	d40a      	bmi.n	8006932 <Gyroscope_DrawBackground+0x27e>
      BSP_LCD_SetTextColor(LCD_COLOR_ORANGE); 
 800691c:	4810      	ldr	r0, [pc, #64]	; (8006960 <Gyroscope_DrawBackground+0x2ac>)
 800691e:	f7fa ffdf 	bl	80018e0 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS);
 8006922:	f7fa ff87 	bl	8001834 <BSP_LCD_GetXSize>
 8006926:	221e      	movs	r2, #30
 8006928:	21c8      	movs	r1, #200	; 0xc8
 800692a:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800692e:	f7fb fdc1 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font16);
 8006932:	4812      	ldr	r0, [pc, #72]	; (800697c <Gyroscope_DrawBackground+0x2c8>)
 8006934:	f7fa ffec 	bl	8001910 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8006938:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800693c:	f7fa ffd0 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_ORANGE);
 8006940:	4807      	ldr	r0, [pc, #28]	; (8006960 <Gyroscope_DrawBackground+0x2ac>)
 8006942:	f7fa ffd9 	bl	80018f8 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, (uint8_t*)"Z+", LEFT_MODE);
 8006946:	f7fa ff75 	bl	8001834 <BSP_LCD_GetXSize>
 800694a:	4a0e      	ldr	r2, [pc, #56]	; (8006984 <Gyroscope_DrawBackground+0x2d0>)
 800694c:	2303      	movs	r3, #3
 800694e:	21c8      	movs	r1, #200	; 0xc8
 8006950:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8006954:	e758      	b.n	8006808 <Gyroscope_DrawBackground+0x154>
 8006956:	bf00      	nop
 8006958:	ff0000ff 	.word	0xff0000ff
 800695c:	ffff0000 	.word	0xffff0000
 8006960:	ffffa500 	.word	0xffffa500
 8006964:	200000d4 	.word	0x200000d4
 8006968:	08037d27 	.word	0x08037d27
 800696c:	08037d2a 	.word	0x08037d2a
 8006970:	08037d2d 	.word	0x08037d2d
 8006974:	08037d30 	.word	0x08037d30
 8006978:	20000ac4 	.word	0x20000ac4
 800697c:	200000ec 	.word	0x200000ec
 8006980:	08037d33 	.word	0x08037d33
 8006984:	08037d36 	.word	0x08037d36

08006988 <MEMS_demo>:
{
 8006988:	b538      	push	{r3, r4, r5, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800698a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
 800698e:	ed2d 8b02 	vpush	{d8}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8006992:	f7fa ffc9 	bl	8001928 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8006996:	4892      	ldr	r0, [pc, #584]	; (8006be0 <MEMS_demo+0x258>)
 8006998:	f7fa ffa2 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 800699c:	f7fa ff4a 	bl	8001834 <BSP_LCD_GetXSize>
 80069a0:	2100      	movs	r1, #0
 80069a2:	b282      	uxth	r2, r0
 80069a4:	2350      	movs	r3, #80	; 0x50
 80069a6:	4608      	mov	r0, r1
 80069a8:	f7fb f8ec 	bl	8001b84 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80069ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069b0:	f7fa ff96 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 80069b4:	488a      	ldr	r0, [pc, #552]	; (8006be0 <MEMS_demo+0x258>)
 80069b6:	f7fa ff9f 	bl	80018f8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 80069ba:	488a      	ldr	r0, [pc, #552]	; (8006be4 <MEMS_demo+0x25c>)
 80069bc:	f7fa ffa8 	bl	8001910 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"MEMS", CENTER_MODE);
 80069c0:	2100      	movs	r1, #0
 80069c2:	4608      	mov	r0, r1
 80069c4:	4a88      	ldr	r2, [pc, #544]	; (8006be8 <MEMS_demo+0x260>)
 80069c6:	2301      	movs	r3, #1
 80069c8:	f7fb fb02 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 80069cc:	4887      	ldr	r0, [pc, #540]	; (8006bec <MEMS_demo+0x264>)
 80069ce:	f7fa ff9f 	bl	8001910 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"This example shows MEMS Features", CENTER_MODE);
 80069d2:	4a87      	ldr	r2, [pc, #540]	; (8006bf0 <MEMS_demo+0x268>)
 80069d4:	2301      	movs	r3, #1
 80069d6:	211e      	movs	r1, #30
 80069d8:	2000      	movs	r0, #0
 80069da:	f7fb faf9 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t*)"move board around axis", CENTER_MODE);
 80069de:	4a85      	ldr	r2, [pc, #532]	; (8006bf4 <MEMS_demo+0x26c>)
 80069e0:	2301      	movs	r3, #1
 80069e2:	212d      	movs	r1, #45	; 0x2d
 80069e4:	2000      	movs	r0, #0
 80069e6:	f7fb faf3 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"to start test", CENTER_MODE);
 80069ea:	4a83      	ldr	r2, [pc, #524]	; (8006bf8 <MEMS_demo+0x270>)
 80069ec:	2301      	movs	r3, #1
 80069ee:	213c      	movs	r1, #60	; 0x3c
 80069f0:	2000      	movs	r0, #0
 80069f2:	f7fb faed 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);  
 80069f6:	487a      	ldr	r0, [pc, #488]	; (8006be0 <MEMS_demo+0x258>)
 80069f8:	f7fa ff72 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize()- 100);
 80069fc:	f7fa ff1a 	bl	8001834 <BSP_LCD_GetXSize>
 8006a00:	4604      	mov	r4, r0
 8006a02:	f7fa ff1f 	bl	8001844 <BSP_LCD_GetYSize>
 8006a06:	f1a4 0214 	sub.w	r2, r4, #20
 8006a0a:	3864      	subs	r0, #100	; 0x64
 8006a0c:	b283      	uxth	r3, r0
 8006a0e:	b292      	uxth	r2, r2
 8006a10:	215a      	movs	r1, #90	; 0x5a
 8006a12:	200a      	movs	r0, #10
 8006a14:	f7fa fffc 	bl	8001a10 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102);
 8006a18:	f7fa ff0c 	bl	8001834 <BSP_LCD_GetXSize>
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	f7fa ff11 	bl	8001844 <BSP_LCD_GetYSize>
 8006a22:	f1a4 0216 	sub.w	r2, r4, #22
 8006a26:	3866      	subs	r0, #102	; 0x66
 8006a28:	b283      	uxth	r3, r0
 8006a2a:	b292      	uxth	r2, r2
 8006a2c:	215b      	movs	r1, #91	; 0x5b
 8006a2e:	200b      	movs	r0, #11
 8006a30:	f7fa ffee 	bl	8001a10 <BSP_LCD_DrawRect>
  if (BSP_GYRO_Init() != GYRO_OK)
 8006a34:	f7fa fe68 	bl	8001708 <BSP_GYRO_Init>
 8006a38:	4c70      	ldr	r4, [pc, #448]	; (8006bfc <MEMS_demo+0x274>)
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d072      	beq.n	8006b24 <MEMS_demo+0x19c>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 8006a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a42:	f7fa ff59 	bl	80018f8 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8006a46:	486e      	ldr	r0, [pc, #440]	; (8006c00 <MEMS_demo+0x278>)
 8006a48:	f7fa ff4a 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 8006a4c:	f7fa fefa 	bl	8001844 <BSP_LCD_GetYSize>
 8006a50:	385f      	subs	r0, #95	; 0x5f
 8006a52:	b281      	uxth	r1, r0
 8006a54:	4a6b      	ldr	r2, [pc, #428]	; (8006c04 <MEMS_demo+0x27c>)
 8006a56:	2301      	movs	r3, #1
 8006a58:	2000      	movs	r0, #0
 8006a5a:	f7fb fab9 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"MEMS cannot be initialized", CENTER_MODE);
 8006a5e:	f7fa fef1 	bl	8001844 <BSP_LCD_GetYSize>
 8006a62:	3850      	subs	r0, #80	; 0x50
 8006a64:	b281      	uxth	r1, r0
 8006a66:	4a68      	ldr	r2, [pc, #416]	; (8006c08 <MEMS_demo+0x280>)
 8006a68:	2301      	movs	r3, #1
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	f7fb fab0 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  BSP_GYRO_Reset();
 8006a70:	f7fa fe6a 	bl	8001748 <BSP_GYRO_Reset>
    BSP_GYRO_GetXYZ(Buffer);
 8006a74:	4d65      	ldr	r5, [pc, #404]	; (8006c0c <MEMS_demo+0x284>)
      if(Buffer[2] < -10000.0f)
 8006a76:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8006c10 <MEMS_demo+0x288>
      else if(Buffer[2] > 10000.0f)
 8006a7a:	eddf 8a66 	vldr	s17, [pc, #408]	; 8006c14 <MEMS_demo+0x28c>
    BSP_GYRO_GetXYZ(Buffer);
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f7fa fe6a 	bl	8001758 <BSP_GYRO_GetXYZ>
    Xval = ABS((Buffer[0]));
 8006a84:	ed94 5a01 	vldr	s10, [r4, #4]
    Yval = ABS((Buffer[1])); 
 8006a88:	edd4 5a02 	vldr	s11, [r4, #8]
    Zval = ABS((Buffer[2])); 
 8006a8c:	ed94 6a03 	vldr	s12, [r4, #12]
        if((state & 1) == 0)
 8006a90:	7823      	ldrb	r3, [r4, #0]
    Xval = ABS((Buffer[0]));
 8006a92:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8006a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Yval = ABS((Buffer[1])); 
 8006a9a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
    Xval = ABS((Buffer[0]));
 8006a9e:	bf4c      	ite	mi
 8006aa0:	eef1 6a45 	vnegmi.f32	s13, s10
 8006aa4:	eef0 6a45 	vmovpl.f32	s13, s10
    Yval = ABS((Buffer[1])); 
 8006aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aac:	bf4c      	ite	mi
 8006aae:	eeb1 7a65 	vnegmi.f32	s14, s11
 8006ab2:	eeb0 7a65 	vmovpl.f32	s14, s11
    Zval = ABS((Buffer[2])); 
 8006ab6:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8006aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if((Xval>Yval) && (Xval>Zval))
 8006abe:	eef4 6ac7 	vcmpe.f32	s13, s14
    Zval = ABS((Buffer[2])); 
 8006ac2:	bf4c      	ite	mi
 8006ac4:	eef1 7a46 	vnegmi.f32	s15, s12
 8006ac8:	eef0 7a46 	vmovpl.f32	s15, s12
    if((Xval>Yval) && (Xval>Zval))
 8006acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Xval = ABS((Buffer[0]));
 8006ad0:	edc4 6a04 	vstr	s13, [r4, #16]
    Yval = ABS((Buffer[1])); 
 8006ad4:	ed84 7a05 	vstr	s14, [r4, #20]
    Zval = ABS((Buffer[2])); 
 8006ad8:	edc4 7a06 	vstr	s15, [r4, #24]
    if((Xval>Yval) && (Xval>Zval))
 8006adc:	dd34      	ble.n	8006b48 <MEMS_demo+0x1c0>
 8006ade:	eef4 6ae7 	vcmpe.f32	s13, s15
 8006ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae6:	dd2f      	ble.n	8006b48 <MEMS_demo+0x1c0>
      if(Buffer[0] > 10000.0f)
 8006ae8:	eeb4 5ae8 	vcmpe.f32	s10, s17
 8006aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af0:	dd1c      	ble.n	8006b2c <MEMS_demo+0x1a4>
        if((state & 1) == 0)
 8006af2:	07da      	lsls	r2, r3, #31
 8006af4:	d40a      	bmi.n	8006b0c <MEMS_demo+0x184>
          Gyroscope_DrawBackground(1);			
 8006af6:	2001      	movs	r0, #1
 8006af8:	f7ff fddc 	bl	80066b4 <Gyroscope_DrawBackground>
          state |= 1;
 8006afc:	7823      	ldrb	r3, [r4, #0]
 8006afe:	f043 0301 	orr.w	r3, r3, #1
          HAL_Delay(1000);			
 8006b02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
          state |= 32;
 8006b06:	7023      	strb	r3, [r4, #0]
          HAL_Delay(1000);			
 8006b08:	f7fb fff4 	bl	8002af4 <HAL_Delay>
    if (state != 0x3F)	
 8006b0c:	7823      	ldrb	r3, [r4, #0]
 8006b0e:	2b3f      	cmp	r3, #63	; 0x3f
 8006b10:	d1b5      	bne.n	8006a7e <MEMS_demo+0xf6>
    else if (CheckForUserInput() > 0)
 8006b12:	f7ff fdb9 	bl	8006688 <CheckForUserInput>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d0af      	beq.n	8006a7a <MEMS_demo+0xf2>
      state = 0;    
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	7023      	strb	r3, [r4, #0]
}
 8006b1e:	ecbd 8b02 	vpop	{d8}
 8006b22:	bd38      	pop	{r3, r4, r5, pc}
    Gyroscope_DrawBackground(state);
 8006b24:	7820      	ldrb	r0, [r4, #0]
 8006b26:	f7ff fdc5 	bl	80066b4 <Gyroscope_DrawBackground>
 8006b2a:	e7a1      	b.n	8006a70 <MEMS_demo+0xe8>
      else if(Buffer[0] < -10000.0f)
 8006b2c:	eeb4 5ac8 	vcmpe.f32	s10, s16
 8006b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b34:	d5ea      	bpl.n	8006b0c <MEMS_demo+0x184>
        if((state & 2) == 0)
 8006b36:	079b      	lsls	r3, r3, #30
 8006b38:	d4e8      	bmi.n	8006b0c <MEMS_demo+0x184>
          Gyroscope_DrawBackground(2);            
 8006b3a:	2002      	movs	r0, #2
 8006b3c:	f7ff fdba 	bl	80066b4 <Gyroscope_DrawBackground>
          state |= 2;
 8006b40:	7823      	ldrb	r3, [r4, #0]
 8006b42:	f043 0302 	orr.w	r3, r3, #2
 8006b46:	e7dc      	b.n	8006b02 <MEMS_demo+0x17a>
    else if ((Yval>Xval) && (Yval>Zval))
 8006b48:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b50:	d520      	bpl.n	8006b94 <MEMS_demo+0x20c>
 8006b52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b5a:	dd1b      	ble.n	8006b94 <MEMS_demo+0x20c>
      if(Buffer[1] < -10000.0f)
 8006b5c:	eef4 5ac8 	vcmpe.f32	s11, s16
 8006b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b64:	d508      	bpl.n	8006b78 <MEMS_demo+0x1f0>
        if((state & 4) == 0)
 8006b66:	0758      	lsls	r0, r3, #29
 8006b68:	d4d0      	bmi.n	8006b0c <MEMS_demo+0x184>
          Gyroscope_DrawBackground(4);            
 8006b6a:	2004      	movs	r0, #4
 8006b6c:	f7ff fda2 	bl	80066b4 <Gyroscope_DrawBackground>
          state |= 4;
 8006b70:	7823      	ldrb	r3, [r4, #0]
 8006b72:	f043 0304 	orr.w	r3, r3, #4
 8006b76:	e7c4      	b.n	8006b02 <MEMS_demo+0x17a>
      else if(Buffer[1] > 10000.0f)
 8006b78:	eef4 5ae8 	vcmpe.f32	s11, s17
 8006b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b80:	ddc4      	ble.n	8006b0c <MEMS_demo+0x184>
        if((state & 8) == 0)
 8006b82:	0719      	lsls	r1, r3, #28
 8006b84:	d4c2      	bmi.n	8006b0c <MEMS_demo+0x184>
          Gyroscope_DrawBackground(8);            
 8006b86:	2008      	movs	r0, #8
 8006b88:	f7ff fd94 	bl	80066b4 <Gyroscope_DrawBackground>
          state |= 8;
 8006b8c:	7823      	ldrb	r3, [r4, #0]
 8006b8e:	f043 0308 	orr.w	r3, r3, #8
 8006b92:	e7b6      	b.n	8006b02 <MEMS_demo+0x17a>
    else if ((Zval>Xval) && (Zval>Yval))
 8006b94:	eef4 6ae7 	vcmpe.f32	s13, s15
 8006b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b9c:	d5b6      	bpl.n	8006b0c <MEMS_demo+0x184>
 8006b9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba6:	d5b1      	bpl.n	8006b0c <MEMS_demo+0x184>
      if(Buffer[2] < -10000.0f)
 8006ba8:	eeb4 6ac8 	vcmpe.f32	s12, s16
 8006bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bb0:	d508      	bpl.n	8006bc4 <MEMS_demo+0x23c>
        if((state & 16) == 0)
 8006bb2:	06da      	lsls	r2, r3, #27
 8006bb4:	d4aa      	bmi.n	8006b0c <MEMS_demo+0x184>
          Gyroscope_DrawBackground(16);            
 8006bb6:	2010      	movs	r0, #16
 8006bb8:	f7ff fd7c 	bl	80066b4 <Gyroscope_DrawBackground>
          state |= 16;
 8006bbc:	7823      	ldrb	r3, [r4, #0]
 8006bbe:	f043 0310 	orr.w	r3, r3, #16
 8006bc2:	e79e      	b.n	8006b02 <MEMS_demo+0x17a>
      else if(Buffer[2] > 10000.0f)
 8006bc4:	eeb4 6ae8 	vcmpe.f32	s12, s17
 8006bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bcc:	dd9e      	ble.n	8006b0c <MEMS_demo+0x184>
        if((state & 32) == 0)
 8006bce:	069b      	lsls	r3, r3, #26
 8006bd0:	d49c      	bmi.n	8006b0c <MEMS_demo+0x184>
          Gyroscope_DrawBackground(32);            
 8006bd2:	2020      	movs	r0, #32
 8006bd4:	f7ff fd6e 	bl	80066b4 <Gyroscope_DrawBackground>
          state |= 32;
 8006bd8:	7823      	ldrb	r3, [r4, #0]
 8006bda:	f043 0320 	orr.w	r3, r3, #32
 8006bde:	e790      	b.n	8006b02 <MEMS_demo+0x17a>
 8006be0:	ff0000ff 	.word	0xff0000ff
 8006be4:	200000d4 	.word	0x200000d4
 8006be8:	08037d39 	.word	0x08037d39
 8006bec:	200000e4 	.word	0x200000e4
 8006bf0:	08037d3e 	.word	0x08037d3e
 8006bf4:	08037d5f 	.word	0x08037d5f
 8006bf8:	08037d76 	.word	0x08037d76
 8006bfc:	20000ac4 	.word	0x20000ac4
 8006c00:	ffff0000 	.word	0xffff0000
 8006c04:	08037d84 	.word	0x08037d84
 8006c08:	08037d8a 	.word	0x08037d8a
 8006c0c:	20000ac8 	.word	0x20000ac8
 8006c10:	c61c4000 	.word	0xc61c4000
 8006c14:	461c4000 	.word	0x461c4000

08006c18 <RetargetInit>:
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
  gHuart = huart;
 8006c18:	4b04      	ldr	r3, [pc, #16]	; (8006c2c <RetargetInit+0x14>)
 8006c1a:	6018      	str	r0, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8006c1c:	4b04      	ldr	r3, [pc, #16]	; (8006c30 <RetargetInit+0x18>)
 8006c1e:	6818      	ldr	r0, [r3, #0]
 8006c20:	2300      	movs	r3, #0
 8006c22:	6880      	ldr	r0, [r0, #8]
 8006c24:	2202      	movs	r2, #2
 8006c26:	4619      	mov	r1, r3
 8006c28:	f000 be7a 	b.w	8007920 <setvbuf>
 8006c2c:	20000ae0 	.word	0x20000ae0
 8006c30:	20000220 	.word	0x20000220

08006c34 <_isatty>:
}

int _isatty(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8006c34:	2802      	cmp	r0, #2
int _isatty(int fd) {
 8006c36:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8006c38:	d905      	bls.n	8006c46 <_isatty+0x12>
    return 1;

  errno = EBADF;
 8006c3a:	f000 fdb1 	bl	80077a0 <__errno>
 8006c3e:	2309      	movs	r3, #9
 8006c40:	6003      	str	r3, [r0, #0]
  return 0;
 8006c42:	2000      	movs	r0, #0
}
 8006c44:	bd08      	pop	{r3, pc}
    return 1;
 8006c46:	2001      	movs	r0, #1
 8006c48:	e7fc      	b.n	8006c44 <_isatty+0x10>
	...

08006c4c <_write>:

int _write(int fd, char* ptr, int len) {
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8006c4c:	3801      	subs	r0, #1
 8006c4e:	2801      	cmp	r0, #1
int _write(int fd, char* ptr, int len) {
 8006c50:	b510      	push	{r4, lr}
 8006c52:	4614      	mov	r4, r2
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8006c54:	d80b      	bhi.n	8006c6e <_write+0x22>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8006c56:	4809      	ldr	r0, [pc, #36]	; (8006c7c <_write+0x30>)
 8006c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c5c:	6800      	ldr	r0, [r0, #0]
 8006c5e:	b292      	uxth	r2, r2
 8006c60:	f7fe fa4b 	bl	80050fa <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
      return len;
    else
      return EIO;
 8006c64:	2800      	cmp	r0, #0
 8006c66:	bf18      	it	ne
 8006c68:	2405      	movne	r4, #5
  }
  errno = EBADF;
  return -1;
}
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	bd10      	pop	{r4, pc}
  errno = EBADF;
 8006c6e:	f000 fd97 	bl	80077a0 <__errno>
 8006c72:	2309      	movs	r3, #9
 8006c74:	6003      	str	r3, [r0, #0]
  return -1;
 8006c76:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006c7a:	e7f6      	b.n	8006c6a <_write+0x1e>
 8006c7c:	20000ae0 	.word	0x20000ae0

08006c80 <_close>:

int _close(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8006c80:	2802      	cmp	r0, #2
int _close(int fd) {
 8006c82:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8006c84:	d906      	bls.n	8006c94 <_close+0x14>
    return 0;

  errno = EBADF;
 8006c86:	f000 fd8b 	bl	80077a0 <__errno>
 8006c8a:	2309      	movs	r3, #9
 8006c8c:	6003      	str	r3, [r0, #0]
  return -1;
 8006c8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006c92:	bd08      	pop	{r3, pc}
    return 0;
 8006c94:	2000      	movs	r0, #0
 8006c96:	e7fc      	b.n	8006c92 <_close+0x12>

08006c98 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8006c98:	b508      	push	{r3, lr}
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8006c9a:	f000 fd81 	bl	80077a0 <__errno>
 8006c9e:	2309      	movs	r3, #9
 8006ca0:	6003      	str	r3, [r0, #0]
  return -1;
}
 8006ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ca6:	bd08      	pop	{r3, pc}

08006ca8 <_read>:

int _read(int fd, char* ptr, int len) {
 8006ca8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8006caa:	b958      	cbnz	r0, 8006cc4 <_read+0x1c>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8006cac:	4809      	ldr	r0, [pc, #36]	; (8006cd4 <_read+0x2c>)
 8006cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cb2:	6800      	ldr	r0, [r0, #0]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f7fe fa75 	bl	80051a4 <HAL_UART_Receive>
    if (hstatus == HAL_OK)
      return 1;
    else
      return EIO;
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	bf0c      	ite	eq
 8006cbe:	2001      	moveq	r0, #1
 8006cc0:	2005      	movne	r0, #5
  }
  errno = EBADF;
  return -1;
}
 8006cc2:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8006cc4:	f000 fd6c 	bl	80077a0 <__errno>
 8006cc8:	2309      	movs	r3, #9
 8006cca:	6003      	str	r3, [r0, #0]
  return -1;
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cd0:	e7f7      	b.n	8006cc2 <_read+0x1a>
 8006cd2:	bf00      	nop
 8006cd4:	20000ae0 	.word	0x20000ae0

08006cd8 <_fstat>:

int _fstat(int fd, struct stat* st) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8006cd8:	2802      	cmp	r0, #2
int _fstat(int fd, struct stat* st) {
 8006cda:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8006cdc:	d804      	bhi.n	8006ce8 <_fstat+0x10>
    st->st_mode = S_IFCHR;
 8006cde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ce2:	604b      	str	r3, [r1, #4]
    return 0;
  }

  errno = EBADF;
  return 0;
}
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8006ce8:	f000 fd5a 	bl	80077a0 <__errno>
 8006cec:	2309      	movs	r3, #9
 8006cee:	6003      	str	r3, [r0, #0]
  return 0;
 8006cf0:	e7f8      	b.n	8006ce4 <_fstat+0xc>
	...

08006cf4 <HAL_SPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for SPI interrupt request enable
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8006cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cf6:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  SPIx_SCK_GPIO_CLK_ENABLE();
 8006cf8:	4b2e      	ldr	r3, [pc, #184]	; (8006db4 <HAL_SPI_MspInit+0xc0>)

  GPIO_InitStruct.Pin       = SPIx_NSS_PIN;
  GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull 		= GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  HAL_GPIO_Init(SPIx_GPIO_PORT, &GPIO_InitStruct);
 8006cfa:	482f      	ldr	r0, [pc, #188]	; (8006db8 <HAL_SPI_MspInit+0xc4>)
  SPIx_SCK_GPIO_CLK_ENABLE();
 8006cfc:	2400      	movs	r4, #0
 8006cfe:	9401      	str	r4, [sp, #4]
 8006d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d02:	f042 0210 	orr.w	r2, r2, #16
 8006d06:	631a      	str	r2, [r3, #48]	; 0x30
 8006d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d0a:	f002 0210 	and.w	r2, r2, #16
 8006d0e:	9201      	str	r2, [sp, #4]
 8006d10:	9a01      	ldr	r2, [sp, #4]
  SPIx_MISO_GPIO_CLK_ENABLE();
 8006d12:	9402      	str	r4, [sp, #8]
 8006d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d16:	f042 0210 	orr.w	r2, r2, #16
 8006d1a:	631a      	str	r2, [r3, #48]	; 0x30
 8006d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d1e:	f002 0210 	and.w	r2, r2, #16
 8006d22:	9202      	str	r2, [sp, #8]
 8006d24:	9a02      	ldr	r2, [sp, #8]
  SPIx_MOSI_GPIO_CLK_ENABLE();
 8006d26:	9403      	str	r4, [sp, #12]
 8006d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d2a:	f042 0210 	orr.w	r2, r2, #16
 8006d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8006d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d32:	f002 0210 	and.w	r2, r2, #16
 8006d36:	9203      	str	r2, [sp, #12]
 8006d38:	9a03      	ldr	r2, [sp, #12]
  SPIx_CLK_ENABLE();
 8006d3a:	9404      	str	r4, [sp, #16]
 8006d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d42:	645a      	str	r2, [r3, #68]	; 0x44
 8006d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8006d4a:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8006d4c:	2702      	movs	r7, #2
  SPIx_CLK_ENABLE();
 8006d4e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8006d50:	2608      	movs	r6, #8
  HAL_GPIO_Init(SPIx_GPIO_PORT, &GPIO_InitStruct);
 8006d52:	a905      	add	r1, sp, #20
  SPIx_CLK_ENABLE();
 8006d54:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Pull 		= GPIO_PULLUP;
 8006d56:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8006d58:	e9cd 6505 	strd	r6, r5, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8006d5c:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(SPIx_GPIO_PORT, &GPIO_InitStruct);
 8006d5e:	f7fc f965 	bl	800302c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(SPIx_GPIO_PORT, SPIx_NSS_PIN, GPIO_PIN_SET); // disable SPI slave
 8006d62:	462a      	mov	r2, r5
 8006d64:	4631      	mov	r1, r6
 8006d66:	4814      	ldr	r0, [pc, #80]	; (8006db8 <HAL_SPI_MspInit+0xc4>)
 8006d68:	f7fc faee 	bl	8003348 <HAL_GPIO_WritePin>


  /* SPI SCK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
  GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8006d6c:	2605      	movs	r6, #5
  GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 8006d6e:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;

  HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006d70:	a905      	add	r1, sp, #20
 8006d72:	4811      	ldr	r0, [pc, #68]	; (8006db8 <HAL_SPI_MspInit+0xc4>)
  GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 8006d74:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006d76:	e9cd 7506 	strd	r7, r5, [sp, #24]
  GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8006d7a:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8006d7c:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006d7e:	f7fc f955 	bl	800302c <HAL_GPIO_Init>

  /* SPI MISO GPIO pin configuration  */
  GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8006d82:	2320      	movs	r3, #32
  GPIO_InitStruct.Alternate = SPIx_MISO_AF;

  HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8006d84:	a905      	add	r1, sp, #20
 8006d86:	480c      	ldr	r0, [pc, #48]	; (8006db8 <HAL_SPI_MspInit+0xc4>)
  GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8006d88:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8006d8a:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8006d8c:	f7fc f94e 	bl	800302c <HAL_GPIO_Init>

  /* SPI MOSI GPIO pin configuration  */
  GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8006d90:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Alternate = SPIx_MOSI_AF;

  HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006d92:	a905      	add	r1, sp, #20
 8006d94:	4808      	ldr	r0, [pc, #32]	; (8006db8 <HAL_SPI_MspInit+0xc4>)
  GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8006d96:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8006d98:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006d9a:	f7fc f947 	bl	800302c <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for SPI #########################################*/
  /* NVIC for SPI */
  HAL_NVIC_SetPriority(SPIx_IRQn, 0, 1);
 8006d9e:	462a      	mov	r2, r5
 8006da0:	4621      	mov	r1, r4
 8006da2:	2054      	movs	r0, #84	; 0x54
 8006da4:	f7fb fecc 	bl	8002b40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPIx_IRQn);
 8006da8:	2054      	movs	r0, #84	; 0x54
 8006daa:	f7fb fefb 	bl	8002ba4 <HAL_NVIC_EnableIRQ>
}
 8006dae:	b00b      	add	sp, #44	; 0x2c
 8006db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006db2:	bf00      	nop
 8006db4:	40023800 	.word	0x40023800
 8006db8:	40021000 	.word	0x40021000

08006dbc <HAL_SPI_MspDeInit>:
  *          - Revert GPIO and NVIC configuration to their default state
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8006dbc:	b508      	push	{r3, lr}
  /*##-1- Reset peripherals ##################################################*/
  SPIx_FORCE_RESET();
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	; (8006df4 <HAL_SPI_MspDeInit+0x38>)
  SPIx_RELEASE_RESET();

  /*##-2- Disable peripherals and GPIO Clocks ################################*/
  /* Configure SPI SCK as alternate function  */
  HAL_GPIO_DeInit(SPIx_SCK_GPIO_PORT, SPIx_SCK_PIN);
 8006dc0:	480d      	ldr	r0, [pc, #52]	; (8006df8 <HAL_SPI_MspDeInit+0x3c>)
  SPIx_FORCE_RESET();
 8006dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dc8:	625a      	str	r2, [r3, #36]	; 0x24
  SPIx_RELEASE_RESET();
 8006dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dd0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_GPIO_DeInit(SPIx_SCK_GPIO_PORT, SPIx_SCK_PIN);
 8006dd2:	2104      	movs	r1, #4
 8006dd4:	f7fc fa10 	bl	80031f8 <HAL_GPIO_DeInit>
  /* Configure SPI MISO as alternate function  */
  HAL_GPIO_DeInit(SPIx_MISO_GPIO_PORT, SPIx_MISO_PIN);
 8006dd8:	4807      	ldr	r0, [pc, #28]	; (8006df8 <HAL_SPI_MspDeInit+0x3c>)
 8006dda:	2120      	movs	r1, #32
 8006ddc:	f7fc fa0c 	bl	80031f8 <HAL_GPIO_DeInit>
  /* Configure SPI MOSI as alternate function  */
  HAL_GPIO_DeInit(SPIx_MOSI_GPIO_PORT, SPIx_MOSI_PIN);
 8006de0:	4805      	ldr	r0, [pc, #20]	; (8006df8 <HAL_SPI_MspDeInit+0x3c>)
 8006de2:	2140      	movs	r1, #64	; 0x40
 8006de4:	f7fc fa08 	bl	80031f8 <HAL_GPIO_DeInit>

  /*##-3- Disable the NVIC for SPI ###########################################*/
  HAL_NVIC_DisableIRQ(SPIx_IRQn);
}
 8006de8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_DisableIRQ(SPIx_IRQn);
 8006dec:	2054      	movs	r0, #84	; 0x54
 8006dee:	f7fb bee7 	b.w	8002bc0 <HAL_NVIC_DisableIRQ>
 8006df2:	bf00      	nop
 8006df4:	40023800 	.word	0x40023800
 8006df8:	40021000 	.word	0x40021000

08006dfc <HAL_UART_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8006e00:	4b25      	ldr	r3, [pc, #148]	; (8006e98 <HAL_UART_MspInit+0x9c>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006e02:	4826      	ldr	r0, [pc, #152]	; (8006e9c <HAL_UART_MspInit+0xa0>)
  USARTx_TX_GPIO_CLK_ENABLE();
 8006e04:	2400      	movs	r4, #0
 8006e06:	9401      	str	r4, [sp, #4]
 8006e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e0a:	f042 0201 	orr.w	r2, r2, #1
 8006e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8006e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e12:	f002 0201 	and.w	r2, r2, #1
 8006e16:	9201      	str	r2, [sp, #4]
 8006e18:	9a01      	ldr	r2, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 8006e1a:	9402      	str	r4, [sp, #8]
 8006e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e1e:	f042 0201 	orr.w	r2, r2, #1
 8006e22:	631a      	str	r2, [r3, #48]	; 0x30
 8006e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e26:	f002 0201 	and.w	r2, r2, #1
 8006e2a:	9202      	str	r2, [sp, #8]
 8006e2c:	9a02      	ldr	r2, [sp, #8]
  USARTx_CLK_ENABLE();
 8006e2e:	9403      	str	r4, [sp, #12]
 8006e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e32:	f042 0210 	orr.w	r2, r2, #16
 8006e36:	645a      	str	r2, [r3, #68]	; 0x44
 8006e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e3a:	f002 0210 	and.w	r2, r2, #16
 8006e3e:	9203      	str	r2, [sp, #12]
 8006e40:	9a03      	ldr	r2, [sp, #12]
  DMAx_CLK_ENABLE();
 8006e42:	9404      	str	r4, [sp, #16]
 8006e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e46:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006e4a:	631a      	str	r2, [r3, #48]	; 0x30
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e52:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006e54:	f44f 7200 	mov.w	r2, #512	; 0x200
  DMAx_CLK_ENABLE();
 8006e58:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8006e60:	2501      	movs	r5, #1
 8006e62:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8006e64:	2607      	movs	r6, #7
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006e66:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8006e68:	e9cd 5307 	strd	r5, r3, [sp, #28]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8006e6c:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006e6e:	f7fc f8dd 	bl	800302c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8006e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8006e76:	a905      	add	r1, sp, #20
 8006e78:	4808      	ldr	r0, [pc, #32]	; (8006e9c <HAL_UART_MspInit+0xa0>)
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8006e7a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8006e7c:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8006e7e:	f7fc f8d5 	bl	800302c <HAL_GPIO_Init>
  HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);

#endif

  /* NVIC for USART, to catch the TX complete */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 8006e82:	462a      	mov	r2, r5
 8006e84:	4621      	mov	r1, r4
 8006e86:	2025      	movs	r0, #37	; 0x25
 8006e88:	f7fb fe5a 	bl	8002b40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8006e8c:	2025      	movs	r0, #37	; 0x25
 8006e8e:	f7fb fe89 	bl	8002ba4 <HAL_NVIC_EnableIRQ>

}
 8006e92:	b00a      	add	sp, #40	; 0x28
 8006e94:	bd70      	pop	{r4, r5, r6, pc}
 8006e96:	bf00      	nop
 8006e98:	40023800 	.word	0x40023800
 8006e9c:	40020000 	.word	0x40020000

08006ea0 <HAL_UART_MspDeInit>:
  *          - Revert GPIO, DMA and NVIC configuration to their default state
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8006ea0:	b508      	push	{r3, lr}

  /*##-1- Reset peripherals ##################################################*/
  USARTx_FORCE_RESET();
 8006ea2:	4b0c      	ldr	r3, [pc, #48]	; (8006ed4 <HAL_UART_MspDeInit+0x34>)
  USARTx_RELEASE_RESET();

  /*##-2- Disable peripherals and GPIO Clocks #################################*/
  /* Configure USARTx Tx as alternate function  */
  HAL_GPIO_DeInit(USARTx_TX_GPIO_PORT, USARTx_TX_PIN);
 8006ea4:	480c      	ldr	r0, [pc, #48]	; (8006ed8 <HAL_UART_MspDeInit+0x38>)
  USARTx_FORCE_RESET();
 8006ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ea8:	f042 0210 	orr.w	r2, r2, #16
 8006eac:	625a      	str	r2, [r3, #36]	; 0x24
  USARTx_RELEASE_RESET();
 8006eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006eb0:	f022 0210 	bic.w	r2, r2, #16
 8006eb4:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_GPIO_DeInit(USARTx_TX_GPIO_PORT, USARTx_TX_PIN);
 8006eb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006eba:	f7fc f99d 	bl	80031f8 <HAL_GPIO_DeInit>
  /* Configure USARTx Rx as alternate function  */
  HAL_GPIO_DeInit(USARTx_RX_GPIO_PORT, USARTx_RX_PIN);
 8006ebe:	4806      	ldr	r0, [pc, #24]	; (8006ed8 <HAL_UART_MspDeInit+0x38>)
 8006ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ec4:	f7fc f998 	bl	80031f8 <HAL_GPIO_DeInit>
  HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
  HAL_NVIC_DisableIRQ(USARTx_DMA_RX_IRQn);
#endif
  HAL_NVIC_DisableIRQ(USARTx_IRQn);

}
 8006ec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_DisableIRQ(USARTx_IRQn);
 8006ecc:	2025      	movs	r0, #37	; 0x25
 8006ece:	f7fb be77 	b.w	8002bc0 <HAL_NVIC_DisableIRQ>
 8006ed2:	bf00      	nop
 8006ed4:	40023800 	.word	0x40023800
 8006ed8:	40020000 	.word	0x40020000

08006edc <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8006edc:	4770      	bx	lr

08006ede <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006ede:	e7fe      	b.n	8006ede <HardFault_Handler>

08006ee0 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8006ee0:	e7fe      	b.n	8006ee0 <MemManage_Handler>

08006ee2 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8006ee2:	e7fe      	b.n	8006ee2 <BusFault_Handler>

08006ee4 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8006ee4:	e7fe      	b.n	8006ee4 <UsageFault_Handler>

08006ee6 <SVC_Handler>:
 8006ee6:	4770      	bx	lr

08006ee8 <DebugMon_Handler>:
 8006ee8:	4770      	bx	lr

08006eea <PendSV_Handler>:
 8006eea:	4770      	bx	lr

08006eec <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8006eec:	f7fb bdf0 	b.w	8002ad0 <HAL_IncTick>

08006ef0 <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	f7fc ba2f 	b.w	8003354 <HAL_GPIO_EXTI_IRQHandler>
	...

08006ef8 <Touchscreen_demo>:
  * @brief  Touchscreen Demo
  * @param  None
  * @retval None
  */
void Touchscreen_demo(void)
{ 
 8006ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t status = 0;
  uint16_t x,y;
  uint8_t state = 0;
  
  if(IsCalibrationDone() == 0)
 8006efc:	f000 fba8 	bl	8007650 <IsCalibrationDone>
 8006f00:	b908      	cbnz	r0, 8006f06 <Touchscreen_demo+0xe>
  {
    Touchscreen_Calibration();
 8006f02:	f000 fa9d 	bl	8007440 <Touchscreen_Calibration>
  * @retval None
  */
static void Touchscreen_SetHint(void)
{
  /* Clear the LCD */ 
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8006f06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f0a:	f7fa fd0d 	bl	8001928 <BSP_LCD_Clear>
  
  /* Set Touchscreen Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8006f0e:	48bf      	ldr	r0, [pc, #764]	; (800720c <Touchscreen_demo+0x314>)
 8006f10:	f7fa fce6 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8006f14:	f7fa fc8e 	bl	8001834 <BSP_LCD_GetXSize>
 8006f18:	2100      	movs	r1, #0
 8006f1a:	b282      	uxth	r2, r0
 8006f1c:	2350      	movs	r3, #80	; 0x50
 8006f1e:	4608      	mov	r0, r1
 8006f20:	f7fa fe30 	bl	8001b84 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8006f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f28:	f7fa fcda 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 8006f2c:	48b7      	ldr	r0, [pc, #732]	; (800720c <Touchscreen_demo+0x314>)
 8006f2e:	f7fa fce3 	bl	80018f8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8006f32:	48b7      	ldr	r0, [pc, #732]	; (8007210 <Touchscreen_demo+0x318>)
 8006f34:	f7fa fcec 	bl	8001910 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"Touchscreen", CENTER_MODE);
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4608      	mov	r0, r1
 8006f3c:	4ab5      	ldr	r2, [pc, #724]	; (8007214 <Touchscreen_demo+0x31c>)
 8006f3e:	2301      	movs	r3, #1
 8006f40:	f7fb f846 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8006f44:	48b4      	ldr	r0, [pc, #720]	; (8007218 <Touchscreen_demo+0x320>)
 8006f46:	f7fa fce3 	bl	8001910 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"Please use the Touchscreen to", CENTER_MODE);
 8006f4a:	4ab4      	ldr	r2, [pc, #720]	; (800721c <Touchscreen_demo+0x324>)
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	211e      	movs	r1, #30
 8006f50:	2000      	movs	r0, #0
 8006f52:	f7fb f83d 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t*)"activate the colored circle", CENTER_MODE);
 8006f56:	4ab2      	ldr	r2, [pc, #712]	; (8007220 <Touchscreen_demo+0x328>)
 8006f58:	2301      	movs	r3, #1
 8006f5a:	212d      	movs	r1, #45	; 0x2d
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	f7fb f837 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"inside the rectangle", CENTER_MODE);
 8006f62:	4ab0      	ldr	r2, [pc, #704]	; (8007224 <Touchscreen_demo+0x32c>)
 8006f64:	2301      	movs	r3, #1
 8006f66:	213c      	movs	r1, #60	; 0x3c
 8006f68:	2000      	movs	r0, #0
 8006f6a:	f7fb f831 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);  
 8006f6e:	48a7      	ldr	r0, [pc, #668]	; (800720c <Touchscreen_demo+0x314>)
 8006f70:	f7fa fcb6 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize()- 100);
 8006f74:	f7fa fc5e 	bl	8001834 <BSP_LCD_GetXSize>
 8006f78:	4604      	mov	r4, r0
 8006f7a:	f7fa fc63 	bl	8001844 <BSP_LCD_GetYSize>
 8006f7e:	f1a4 0214 	sub.w	r2, r4, #20
 8006f82:	3864      	subs	r0, #100	; 0x64
 8006f84:	b283      	uxth	r3, r0
 8006f86:	b292      	uxth	r2, r2
 8006f88:	215a      	movs	r1, #90	; 0x5a
 8006f8a:	200a      	movs	r0, #10
 8006f8c:	f7fa fd40 	bl	8001a10 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102); 
 8006f90:	f7fa fc50 	bl	8001834 <BSP_LCD_GetXSize>
 8006f94:	4604      	mov	r4, r0
 8006f96:	f7fa fc55 	bl	8001844 <BSP_LCD_GetYSize>
 8006f9a:	f1a4 0216 	sub.w	r2, r4, #22
 8006f9e:	3866      	subs	r0, #102	; 0x66
 8006fa0:	b283      	uxth	r3, r0
 8006fa2:	b292      	uxth	r2, r2
 8006fa4:	215b      	movs	r1, #91	; 0x5b
 8006fa6:	200b      	movs	r0, #11
 8006fa8:	f7fa fd32 	bl	8001a10 <BSP_LCD_DrawRect>
  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8006fac:	f7fa fc42 	bl	8001834 <BSP_LCD_GetXSize>
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	f7fa fc47 	bl	8001844 <BSP_LCD_GetYSize>
 8006fb6:	b281      	uxth	r1, r0
 8006fb8:	b2a0      	uxth	r0, r4
 8006fba:	f7fb fcb1 	bl	8002920 <BSP_TS_Init>
  if (status != TS_OK)
 8006fbe:	4680      	mov	r8, r0
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	f000 818d 	beq.w	80072e0 <Touchscreen_demo+0x3e8>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 8006fc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fca:	f7fa fc95 	bl	80018f8 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8006fce:	4896      	ldr	r0, [pc, #600]	; (8007228 <Touchscreen_demo+0x330>)
 8006fd0:	f7fa fc86 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 8006fd4:	f7fa fc36 	bl	8001844 <BSP_LCD_GetYSize>
 8006fd8:	385f      	subs	r0, #95	; 0x5f
 8006fda:	b281      	uxth	r1, r0
 8006fdc:	4a93      	ldr	r2, [pc, #588]	; (800722c <Touchscreen_demo+0x334>)
 8006fde:	2301      	movs	r3, #1
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	f7fa fff5 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"Touchscreen cannot be initialized", CENTER_MODE);
 8006fe6:	f7fa fc2d 	bl	8001844 <BSP_LCD_GetYSize>
 8006fea:	3850      	subs	r0, #80	; 0x50
 8006fec:	b281      	uxth	r1, r0
 8006fee:	4a90      	ldr	r2, [pc, #576]	; (8007230 <Touchscreen_demo+0x338>)
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	f7fa ffec 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
      BSP_TS_GetState(&TS_State);
 8006ff8:	4f8e      	ldr	r7, [pc, #568]	; (8007234 <Touchscreen_demo+0x33c>)
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);        
    break;
    
  case 2:
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8006ffa:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8007228 <Touchscreen_demo+0x330>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8006ffe:	f8df a20c 	ldr.w	sl, [pc, #524]	; 800720c <Touchscreen_demo+0x314>
{ 
 8007002:	2400      	movs	r4, #0
    if (status == TS_OK)
 8007004:	f1b8 0f00 	cmp.w	r8, #0
 8007008:	f040 8166 	bne.w	80072d8 <Touchscreen_demo+0x3e0>
      BSP_TS_GetState(&TS_State);
 800700c:	4889      	ldr	r0, [pc, #548]	; (8007234 <Touchscreen_demo+0x33c>)
 800700e:	f7fb fca3 	bl	8002958 <BSP_TS_GetState>
      if (TS_State.TouchDetected) {
 8007012:	883b      	ldrh	r3, [r7, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 815f 	beq.w	80072d8 <Touchscreen_demo+0x3e0>
        x = Calibration_GetX(TS_State.X);
 800701a:	8878      	ldrh	r0, [r7, #2]
 800701c:	f000 faf8 	bl	8007610 <Calibration_GetX>
 8007020:	4605      	mov	r5, r0
        y = Calibration_GetY(TS_State.Y);
 8007022:	88b8      	ldrh	r0, [r7, #4]
 8007024:	f000 fb04 	bl	8007630 <Calibration_GetY>
        if((TS_State.TouchDetected) && 
 8007028:	883b      	ldrh	r3, [r7, #0]
        y = Calibration_GetY(TS_State.Y);
 800702a:	4606      	mov	r6, r0
        if((TS_State.TouchDetected) && 
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 8153 	beq.w	80072d8 <Touchscreen_demo+0x3e0>
           (y > (CIRCLE_YPOS(1) - CIRCLE_RADIUS))&&
 8007032:	f7fa fc07 	bl	8001844 <BSP_LCD_GetYSize>
 8007036:	3878      	subs	r0, #120	; 0x78
        if((TS_State.TouchDetected) && 
 8007038:	4286      	cmp	r6, r0
 800703a:	f240 814d 	bls.w	80072d8 <Touchscreen_demo+0x3e0>
             (y < (CIRCLE_YPOS(1) + CIRCLE_RADIUS)))
 800703e:	f7fa fc01 	bl	8001844 <BSP_LCD_GetYSize>
 8007042:	383c      	subs	r0, #60	; 0x3c
           (y > (CIRCLE_YPOS(1) - CIRCLE_RADIUS))&&
 8007044:	4286      	cmp	r6, r0
 8007046:	f080 8147 	bcs.w	80072d8 <Touchscreen_demo+0x3e0>
          if((x > (CIRCLE_XPOS(1) - CIRCLE_RADIUS))&&
 800704a:	f7fa fbf3 	bl	8001834 <BSP_LCD_GetXSize>
 800704e:	f04f 0b05 	mov.w	fp, #5
 8007052:	fbb0 f0fb 	udiv	r0, r0, fp
 8007056:	381e      	subs	r0, #30
 8007058:	4285      	cmp	r5, r0
 800705a:	d93b      	bls.n	80070d4 <Touchscreen_demo+0x1dc>
             (x < (CIRCLE_XPOS(1) + CIRCLE_RADIUS)))
 800705c:	f7fa fbea 	bl	8001834 <BSP_LCD_GetXSize>
 8007060:	fbb0 f0fb 	udiv	r0, r0, fp
 8007064:	301e      	adds	r0, #30
          if((x > (CIRCLE_XPOS(1) - CIRCLE_RADIUS))&&
 8007066:	4285      	cmp	r5, r0
 8007068:	d234      	bcs.n	80070d4 <Touchscreen_demo+0x1dc>
            if((state & 1) == 0)
 800706a:	07e0      	lsls	r0, r4, #31
 800706c:	d432      	bmi.n	80070d4 <Touchscreen_demo+0x1dc>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 800706e:	4650      	mov	r0, sl
 8007070:	f7fa fc36 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 8007074:	f7fa fbde 	bl	8001834 <BSP_LCD_GetXSize>
 8007078:	4606      	mov	r6, r0
 800707a:	f7fa fbe3 	bl	8001844 <BSP_LCD_GetYSize>
 800707e:	fbb6 f6fb 	udiv	r6, r6, fp
 8007082:	385a      	subs	r0, #90	; 0x5a
 8007084:	b281      	uxth	r1, r0
 8007086:	221e      	movs	r2, #30
 8007088:	b2b0      	uxth	r0, r6
 800708a:	f7fb fa13 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 800708e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007092:	f7fa fc25 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);        
 8007096:	f7fa fbcd 	bl	8001834 <BSP_LCD_GetXSize>
 800709a:	4606      	mov	r6, r0
 800709c:	f7fa fbd2 	bl	8001844 <BSP_LCD_GetYSize>
 80070a0:	fbb6 f6fb 	udiv	r6, r6, fp
 80070a4:	385a      	subs	r0, #90	; 0x5a
 80070a6:	b281      	uxth	r1, r0
 80070a8:	221c      	movs	r2, #28
 80070aa:	b2b0      	uxth	r0, r6
 80070ac:	f7fb fa02 	bl	80024b4 <BSP_LCD_FillCircle>
              BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 80070b0:	4650      	mov	r0, sl
 80070b2:	f7fa fc15 	bl	80018e0 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 80070b6:	f7fa fbbd 	bl	8001834 <BSP_LCD_GetXSize>
 80070ba:	4606      	mov	r6, r0
 80070bc:	f7fa fbc2 	bl	8001844 <BSP_LCD_GetYSize>
 80070c0:	fbb6 f6fb 	udiv	r6, r6, fp
 80070c4:	385a      	subs	r0, #90	; 0x5a
 80070c6:	b281      	uxth	r1, r0
 80070c8:	221e      	movs	r2, #30
 80070ca:	b2b0      	uxth	r0, r6
 80070cc:	f7fb f9f2 	bl	80024b4 <BSP_LCD_FillCircle>
              state |= 1;
 80070d0:	f044 0401 	orr.w	r4, r4, #1
          if((x > (CIRCLE_XPOS(2) - CIRCLE_RADIUS))&&
 80070d4:	f7fa fbae 	bl	8001834 <BSP_LCD_GetXSize>
 80070d8:	f04f 0b05 	mov.w	fp, #5
 80070dc:	0040      	lsls	r0, r0, #1
 80070de:	fbb0 f0fb 	udiv	r0, r0, fp
 80070e2:	381e      	subs	r0, #30
 80070e4:	4285      	cmp	r5, r0
 80070e6:	d93f      	bls.n	8007168 <Touchscreen_demo+0x270>
             (x < (CIRCLE_XPOS(2) + CIRCLE_RADIUS)))
 80070e8:	f7fa fba4 	bl	8001834 <BSP_LCD_GetXSize>
 80070ec:	0040      	lsls	r0, r0, #1
 80070ee:	fbb0 f0fb 	udiv	r0, r0, fp
 80070f2:	301e      	adds	r0, #30
          if((x > (CIRCLE_XPOS(2) - CIRCLE_RADIUS))&&
 80070f4:	4285      	cmp	r5, r0
 80070f6:	d237      	bcs.n	8007168 <Touchscreen_demo+0x270>
            if((state & 2) == 0)
 80070f8:	07a1      	lsls	r1, r4, #30
 80070fa:	d435      	bmi.n	8007168 <Touchscreen_demo+0x270>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 80070fc:	4648      	mov	r0, r9
 80070fe:	f7fa fbef 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 8007102:	f7fa fb97 	bl	8001834 <BSP_LCD_GetXSize>
 8007106:	4606      	mov	r6, r0
 8007108:	f7fa fb9c 	bl	8001844 <BSP_LCD_GetYSize>
 800710c:	385a      	subs	r0, #90	; 0x5a
 800710e:	b281      	uxth	r1, r0
 8007110:	221e      	movs	r2, #30
 8007112:	0076      	lsls	r6, r6, #1
 8007114:	fbb6 f6fb 	udiv	r6, r6, fp
 8007118:	b2b0      	uxth	r0, r6
 800711a:	f7fb f9cb 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 800711e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007122:	f7fa fbdd 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2); 
 8007126:	f7fa fb85 	bl	8001834 <BSP_LCD_GetXSize>
 800712a:	4606      	mov	r6, r0
 800712c:	f7fa fb8a 	bl	8001844 <BSP_LCD_GetYSize>
 8007130:	385a      	subs	r0, #90	; 0x5a
 8007132:	b281      	uxth	r1, r0
 8007134:	221c      	movs	r2, #28
 8007136:	0076      	lsls	r6, r6, #1
 8007138:	fbb6 f6fb 	udiv	r6, r6, fp
 800713c:	b2b0      	uxth	r0, r6
 800713e:	f7fb f9b9 	bl	80024b4 <BSP_LCD_FillCircle>
              BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8007142:	4648      	mov	r0, r9
 8007144:	f7fa fbcc 	bl	80018e0 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 8007148:	f7fa fb74 	bl	8001834 <BSP_LCD_GetXSize>
 800714c:	4606      	mov	r6, r0
 800714e:	f7fa fb79 	bl	8001844 <BSP_LCD_GetYSize>
 8007152:	385a      	subs	r0, #90	; 0x5a
 8007154:	b281      	uxth	r1, r0
 8007156:	0076      	lsls	r6, r6, #1
 8007158:	221e      	movs	r2, #30
 800715a:	fbb6 f6fb 	udiv	r6, r6, fp
 800715e:	b2b0      	uxth	r0, r6
 8007160:	f7fb f9a8 	bl	80024b4 <BSP_LCD_FillCircle>
              state |= 2;
 8007164:	f044 0402 	orr.w	r4, r4, #2
          if((x > (CIRCLE_XPOS(3) - CIRCLE_RADIUS))&&
 8007168:	f7fa fb64 	bl	8001834 <BSP_LCD_GetXSize>
 800716c:	f04f 0b05 	mov.w	fp, #5
 8007170:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007174:	fbb0 f0fb 	udiv	r0, r0, fp
 8007178:	381e      	subs	r0, #30
 800717a:	4285      	cmp	r5, r0
 800717c:	d95c      	bls.n	8007238 <Touchscreen_demo+0x340>
             (x < (CIRCLE_XPOS(3) + CIRCLE_RADIUS)))
 800717e:	f7fa fb59 	bl	8001834 <BSP_LCD_GetXSize>
 8007182:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007186:	fbb0 f0fb 	udiv	r0, r0, fp
 800718a:	301e      	adds	r0, #30
          if((x > (CIRCLE_XPOS(3) - CIRCLE_RADIUS))&&
 800718c:	4285      	cmp	r5, r0
 800718e:	d253      	bcs.n	8007238 <Touchscreen_demo+0x340>
            if((state & 4) == 0)
 8007190:	0762      	lsls	r2, r4, #29
 8007192:	d451      	bmi.n	8007238 <Touchscreen_demo+0x340>
    break;
    
  case 4:
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 8007194:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8007198:	f7fa fba2 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 800719c:	f7fa fb4a 	bl	8001834 <BSP_LCD_GetXSize>
 80071a0:	4606      	mov	r6, r0
 80071a2:	f7fa fb4f 	bl	8001844 <BSP_LCD_GetYSize>
 80071a6:	385a      	subs	r0, #90	; 0x5a
 80071a8:	b281      	uxth	r1, r0
 80071aa:	221e      	movs	r2, #30
 80071ac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80071b0:	fbb6 f6fb 	udiv	r6, r6, fp
 80071b4:	b2b0      	uxth	r0, r6
 80071b6:	f7fb f97d 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 80071ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071be:	f7fa fb8f 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2); 
 80071c2:	f7fa fb37 	bl	8001834 <BSP_LCD_GetXSize>
 80071c6:	4606      	mov	r6, r0
 80071c8:	f7fa fb3c 	bl	8001844 <BSP_LCD_GetYSize>
 80071cc:	385a      	subs	r0, #90	; 0x5a
 80071ce:	b281      	uxth	r1, r0
 80071d0:	221c      	movs	r2, #28
 80071d2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80071d6:	fbb6 f6fb 	udiv	r6, r6, fp
 80071da:	b2b0      	uxth	r0, r6
 80071dc:	f7fb f96a 	bl	80024b4 <BSP_LCD_FillCircle>
              BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 80071e0:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80071e4:	f7fa fb7c 	bl	80018e0 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 80071e8:	f7fa fb24 	bl	8001834 <BSP_LCD_GetXSize>
 80071ec:	4606      	mov	r6, r0
 80071ee:	f7fa fb29 	bl	8001844 <BSP_LCD_GetYSize>
 80071f2:	385a      	subs	r0, #90	; 0x5a
 80071f4:	b281      	uxth	r1, r0
 80071f6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80071fa:	221e      	movs	r2, #30
 80071fc:	fbb6 f6fb 	udiv	r6, r6, fp
 8007200:	b2b0      	uxth	r0, r6
 8007202:	f7fb f957 	bl	80024b4 <BSP_LCD_FillCircle>
              state |= 4;
 8007206:	f044 0404 	orr.w	r4, r4, #4
 800720a:	e015      	b.n	8007238 <Touchscreen_demo+0x340>
 800720c:	ff0000ff 	.word	0xff0000ff
 8007210:	200000d4 	.word	0x200000d4
 8007214:	08037e27 	.word	0x08037e27
 8007218:	200000e4 	.word	0x200000e4
 800721c:	08037da5 	.word	0x08037da5
 8007220:	08037dc3 	.word	0x08037dc3
 8007224:	08037ddf 	.word	0x08037ddf
 8007228:	ffff0000 	.word	0xffff0000
 800722c:	08037d84 	.word	0x08037d84
 8007230:	08037df4 	.word	0x08037df4
 8007234:	20000ae4 	.word	0x20000ae4
          if((x > (CIRCLE_XPOS(4) - CIRCLE_RADIUS))&&
 8007238:	f7fa fafc 	bl	8001834 <BSP_LCD_GetXSize>
 800723c:	2605      	movs	r6, #5
 800723e:	0080      	lsls	r0, r0, #2
 8007240:	fbb0 f0f6 	udiv	r0, r0, r6
 8007244:	381e      	subs	r0, #30
 8007246:	4285      	cmp	r5, r0
 8007248:	d941      	bls.n	80072ce <Touchscreen_demo+0x3d6>
             (x < (CIRCLE_XPOS(4) + CIRCLE_RADIUS)))
 800724a:	f7fa faf3 	bl	8001834 <BSP_LCD_GetXSize>
 800724e:	0080      	lsls	r0, r0, #2
 8007250:	fbb0 f0f6 	udiv	r0, r0, r6
 8007254:	301e      	adds	r0, #30
          if((x > (CIRCLE_XPOS(4) - CIRCLE_RADIUS))&&
 8007256:	4285      	cmp	r5, r0
 8007258:	d239      	bcs.n	80072ce <Touchscreen_demo+0x3d6>
            if((state & 8) == 0)
 800725a:	0723      	lsls	r3, r4, #28
 800725c:	d437      	bmi.n	80072ce <Touchscreen_demo+0x3d6>
    break;
    
  case 8:
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 800725e:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8007262:	f7fa fb3d 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS);
 8007266:	f7fa fae5 	bl	8001834 <BSP_LCD_GetXSize>
 800726a:	4605      	mov	r5, r0
 800726c:	f7fa faea 	bl	8001844 <BSP_LCD_GetYSize>
 8007270:	385a      	subs	r0, #90	; 0x5a
 8007272:	b281      	uxth	r1, r0
 8007274:	221e      	movs	r2, #30
 8007276:	00ad      	lsls	r5, r5, #2
 8007278:	fbb5 f5f6 	udiv	r5, r5, r6
 800727c:	b2a8      	uxth	r0, r5
 800727e:	f7fb f919 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8007282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007286:	f7fa fb2b 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2); 
 800728a:	f7fa fad3 	bl	8001834 <BSP_LCD_GetXSize>
 800728e:	4605      	mov	r5, r0
 8007290:	f7fa fad8 	bl	8001844 <BSP_LCD_GetYSize>
 8007294:	385a      	subs	r0, #90	; 0x5a
 8007296:	b281      	uxth	r1, r0
 8007298:	221c      	movs	r2, #28
 800729a:	00ad      	lsls	r5, r5, #2
 800729c:	fbb5 f5f6 	udiv	r5, r5, r6
 80072a0:	b2a8      	uxth	r0, r5
 80072a2:	f7fb f907 	bl	80024b4 <BSP_LCD_FillCircle>
              BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 80072a6:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80072aa:	f7fa fb19 	bl	80018e0 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 80072ae:	f7fa fac1 	bl	8001834 <BSP_LCD_GetXSize>
 80072b2:	4605      	mov	r5, r0
 80072b4:	f7fa fac6 	bl	8001844 <BSP_LCD_GetYSize>
 80072b8:	385a      	subs	r0, #90	; 0x5a
 80072ba:	b281      	uxth	r1, r0
 80072bc:	00ad      	lsls	r5, r5, #2
 80072be:	221e      	movs	r2, #30
 80072c0:	fbb5 f5f6 	udiv	r5, r5, r6
 80072c4:	b2a8      	uxth	r0, r5
 80072c6:	f7fb f8f5 	bl	80024b4 <BSP_LCD_FillCircle>
              state |= 8;
 80072ca:	f044 0408 	orr.w	r4, r4, #8
          if (state != 0x0F)
 80072ce:	2c0f      	cmp	r4, #15
 80072d0:	f000 808a 	beq.w	80073e8 <Touchscreen_demo+0x4f0>
            TS_State.TouchDetected = 0;
 80072d4:	2300      	movs	r3, #0
 80072d6:	803b      	strh	r3, [r7, #0]
    HAL_Delay(100);
 80072d8:	2064      	movs	r0, #100	; 0x64
 80072da:	f7fb fc0b 	bl	8002af4 <HAL_Delay>
    if (status == TS_OK)
 80072de:	e691      	b.n	8007004 <Touchscreen_demo+0x10c>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 80072e0:	4845      	ldr	r0, [pc, #276]	; (80073f8 <Touchscreen_demo+0x500>)
 80072e2:	f7fa fafd 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 80072e6:	f7fa faa5 	bl	8001834 <BSP_LCD_GetXSize>
 80072ea:	4605      	mov	r5, r0
 80072ec:	f7fa faaa 	bl	8001844 <BSP_LCD_GetYSize>
 80072f0:	385a      	subs	r0, #90	; 0x5a
 80072f2:	2405      	movs	r4, #5
 80072f4:	b281      	uxth	r1, r0
 80072f6:	221e      	movs	r2, #30
 80072f8:	fbb5 f5f4 	udiv	r5, r5, r4
 80072fc:	b2a8      	uxth	r0, r5
 80072fe:	f7fb f8d9 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8007302:	483e      	ldr	r0, [pc, #248]	; (80073fc <Touchscreen_demo+0x504>)
 8007304:	f7fa faec 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 8007308:	f7fa fa94 	bl	8001834 <BSP_LCD_GetXSize>
 800730c:	4605      	mov	r5, r0
 800730e:	f7fa fa99 	bl	8001844 <BSP_LCD_GetYSize>
 8007312:	385a      	subs	r0, #90	; 0x5a
 8007314:	b281      	uxth	r1, r0
 8007316:	221e      	movs	r2, #30
 8007318:	006d      	lsls	r5, r5, #1
 800731a:	fbb5 f5f4 	udiv	r5, r5, r4
 800731e:	b2a8      	uxth	r0, r5
 8007320:	f7fb f8c8 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 8007324:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8007328:	f7fa fada 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 800732c:	f7fa fa82 	bl	8001834 <BSP_LCD_GetXSize>
 8007330:	4605      	mov	r5, r0
 8007332:	f7fa fa87 	bl	8001844 <BSP_LCD_GetYSize>
 8007336:	385a      	subs	r0, #90	; 0x5a
 8007338:	b281      	uxth	r1, r0
 800733a:	221e      	movs	r2, #30
 800733c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007340:	fbb5 f5f4 	udiv	r5, r5, r4
 8007344:	b2a8      	uxth	r0, r5
 8007346:	f7fb f8b5 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 800734a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800734e:	f7fa fac7 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8007352:	f7fa fa6f 	bl	8001834 <BSP_LCD_GetXSize>
 8007356:	4605      	mov	r5, r0
 8007358:	f7fa fa74 	bl	8001844 <BSP_LCD_GetYSize>
 800735c:	385a      	subs	r0, #90	; 0x5a
 800735e:	b281      	uxth	r1, r0
 8007360:	221e      	movs	r2, #30
 8007362:	00ad      	lsls	r5, r5, #2
 8007364:	fbb5 f5f4 	udiv	r5, r5, r4
 8007368:	b2a8      	uxth	r0, r5
 800736a:	f7fb f8a3 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 800736e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007372:	f7fa fab5 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);        
 8007376:	f7fa fa5d 	bl	8001834 <BSP_LCD_GetXSize>
 800737a:	4605      	mov	r5, r0
 800737c:	f7fa fa62 	bl	8001844 <BSP_LCD_GetYSize>
 8007380:	fbb5 f5f4 	udiv	r5, r5, r4
 8007384:	385a      	subs	r0, #90	; 0x5a
 8007386:	b281      	uxth	r1, r0
 8007388:	221c      	movs	r2, #28
 800738a:	b2a8      	uxth	r0, r5
 800738c:	f7fb f892 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2);
 8007390:	f7fa fa50 	bl	8001834 <BSP_LCD_GetXSize>
 8007394:	4605      	mov	r5, r0
 8007396:	f7fa fa55 	bl	8001844 <BSP_LCD_GetYSize>
 800739a:	385a      	subs	r0, #90	; 0x5a
 800739c:	b281      	uxth	r1, r0
 800739e:	221c      	movs	r2, #28
 80073a0:	006d      	lsls	r5, r5, #1
 80073a2:	fbb5 f5f4 	udiv	r5, r5, r4
 80073a6:	b2a8      	uxth	r0, r5
 80073a8:	f7fb f884 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2);
 80073ac:	f7fa fa42 	bl	8001834 <BSP_LCD_GetXSize>
 80073b0:	4605      	mov	r5, r0
 80073b2:	f7fa fa47 	bl	8001844 <BSP_LCD_GetYSize>
 80073b6:	385a      	subs	r0, #90	; 0x5a
 80073b8:	b281      	uxth	r1, r0
 80073ba:	221c      	movs	r2, #28
 80073bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073c0:	fbb5 f5f4 	udiv	r5, r5, r4
 80073c4:	b2a8      	uxth	r0, r5
 80073c6:	f7fb f875 	bl	80024b4 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2); 
 80073ca:	f7fa fa33 	bl	8001834 <BSP_LCD_GetXSize>
 80073ce:	4605      	mov	r5, r0
 80073d0:	f7fa fa38 	bl	8001844 <BSP_LCD_GetYSize>
 80073d4:	385a      	subs	r0, #90	; 0x5a
 80073d6:	00ad      	lsls	r5, r5, #2
 80073d8:	b281      	uxth	r1, r0
 80073da:	fbb5 f4f4 	udiv	r4, r5, r4
 80073de:	221c      	movs	r2, #28
 80073e0:	b2a0      	uxth	r0, r4
 80073e2:	f7fb f867 	bl	80024b4 <BSP_LCD_FillCircle>
    break; 
  }
}
 80073e6:	e607      	b.n	8006ff8 <Touchscreen_demo+0x100>
            if(CheckForUserInput() > 0)
 80073e8:	f7ff f94e 	bl	8006688 <CheckForUserInput>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	f43f af73 	beq.w	80072d8 <Touchscreen_demo+0x3e0>
}
 80073f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f6:	bf00      	nop
 80073f8:	ff0000ff 	.word	0xff0000ff
 80073fc:	ffff0000 	.word	0xffff0000

08007400 <WaitForPressedState>:
  * @brief  Wait For Pressed State.
  * @param  None
  * @retval None
  */
static void WaitForPressedState(uint8_t Pressed) 
{
 8007400:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  do 
  {
    BSP_TS_GetState(&State);
    HAL_Delay(10);
    if (State.TouchDetected == Pressed) 
 8007402:	4604      	mov	r4, r0
    BSP_TS_GetState(&State);
 8007404:	4668      	mov	r0, sp
 8007406:	f7fb faa7 	bl	8002958 <BSP_TS_GetState>
    HAL_Delay(10);
 800740a:	200a      	movs	r0, #10
 800740c:	f7fb fb72 	bl	8002af4 <HAL_Delay>
    if (State.TouchDetected == Pressed) 
 8007410:	f8bd 3000 	ldrh.w	r3, [sp]
 8007414:	42a3      	cmp	r3, r4
 8007416:	d1f5      	bne.n	8007404 <WaitForPressedState+0x4>
    {
      uint16_t TimeStart = HAL_GetTick();
 8007418:	f7fb fb66 	bl	8002ae8 <HAL_GetTick>
        BSP_TS_GetState(&State);
        HAL_Delay(10);
        if (State.TouchDetected != Pressed) 
        {
          break;
        } else if ((HAL_GetTick() - 100) > TimeStart) 
 800741c:	b285      	uxth	r5, r0
        BSP_TS_GetState(&State);
 800741e:	4668      	mov	r0, sp
 8007420:	f7fb fa9a 	bl	8002958 <BSP_TS_GetState>
        HAL_Delay(10);
 8007424:	200a      	movs	r0, #10
 8007426:	f7fb fb65 	bl	8002af4 <HAL_Delay>
        if (State.TouchDetected != Pressed) 
 800742a:	f8bd 3000 	ldrh.w	r3, [sp]
 800742e:	42a3      	cmp	r3, r4
 8007430:	d1e8      	bne.n	8007404 <WaitForPressedState+0x4>
        } else if ((HAL_GetTick() - 100) > TimeStart) 
 8007432:	f7fb fb59 	bl	8002ae8 <HAL_GetTick>
 8007436:	3864      	subs	r0, #100	; 0x64
 8007438:	42a8      	cmp	r0, r5
 800743a:	d9f0      	bls.n	800741e <WaitForPressedState+0x1e>
          return;
        }
      } while (1);
    }
  } while (1);
}
 800743c:	b003      	add	sp, #12
 800743e:	bd30      	pop	{r4, r5, pc}

08007440 <Touchscreen_Calibration>:
{ 
 8007440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007448:	f7fa fa6e 	bl	8001928 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800744c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007450:	f7fa fa46 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007458:	f7fa fa4e 	bl	80018f8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font12);
 800745c:	4864      	ldr	r0, [pc, #400]	; (80075f0 <Touchscreen_Calibration+0x1b0>)
 800745e:	f7fa fa57 	bl	8001910 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"Before using the Touchscreen", CENTER_MODE);
 8007462:	f7fa f9ef 	bl	8001844 <BSP_LCD_GetYSize>
 8007466:	0840      	lsrs	r0, r0, #1
 8007468:	f1a0 011b 	sub.w	r1, r0, #27
 800746c:	4a61      	ldr	r2, [pc, #388]	; (80075f4 <Touchscreen_Calibration+0x1b4>)
 800746e:	2301      	movs	r3, #1
 8007470:	b289      	uxth	r1, r1
 8007472:	2000      	movs	r0, #0
 8007474:	f7fa fdac 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"you need to calibrate it.", CENTER_MODE);
 8007478:	f7fa f9e4 	bl	8001844 <BSP_LCD_GetYSize>
 800747c:	0840      	lsrs	r0, r0, #1
 800747e:	f1a0 010c 	sub.w	r1, r0, #12
 8007482:	4a5d      	ldr	r2, [pc, #372]	; (80075f8 <Touchscreen_Calibration+0x1b8>)
 8007484:	2301      	movs	r3, #1
 8007486:	b289      	uxth	r1, r1
 8007488:	2000      	movs	r0, #0
 800748a:	f7fa fda1 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"Press on the black circles", CENTER_MODE);
 800748e:	f7fa f9d9 	bl	8001844 <BSP_LCD_GetYSize>
 8007492:	0840      	lsrs	r0, r0, #1
 8007494:	1cc1      	adds	r1, r0, #3
 8007496:	b289      	uxth	r1, r1
 8007498:	4a58      	ldr	r2, [pc, #352]	; (80075fc <Touchscreen_Calibration+0x1bc>)
 800749a:	2301      	movs	r3, #1
 800749c:	2000      	movs	r0, #0
 800749e:	f7fa fd97 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80074a2:	f7fa f9c7 	bl	8001834 <BSP_LCD_GetXSize>
 80074a6:	4604      	mov	r4, r0
 80074a8:	f7fa f9cc 	bl	8001844 <BSP_LCD_GetYSize>
 80074ac:	b281      	uxth	r1, r0
 80074ae:	b2a0      	uxth	r0, r4
 80074b0:	f7fb fa36 	bl	8002920 <BSP_TS_Init>
  if (status != TS_OK)
 80074b4:	b1e0      	cbz	r0, 80074f0 <Touchscreen_Calibration+0xb0>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 80074b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074ba:	f7fa fa1d 	bl	80018f8 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80074be:	4850      	ldr	r0, [pc, #320]	; (8007600 <Touchscreen_Calibration+0x1c0>)
 80074c0:	f7fa fa0e 	bl	80018e0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 80074c4:	f7fa f9be 	bl	8001844 <BSP_LCD_GetYSize>
 80074c8:	385f      	subs	r0, #95	; 0x5f
 80074ca:	b281      	uxth	r1, r0
 80074cc:	4a4d      	ldr	r2, [pc, #308]	; (8007604 <Touchscreen_Calibration+0x1c4>)
 80074ce:	2301      	movs	r3, #1
 80074d0:	2000      	movs	r0, #0
 80074d2:	f7fa fd7d 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"Touchscreen cannot be initialized", CENTER_MODE);
 80074d6:	f7fa f9b5 	bl	8001844 <BSP_LCD_GetYSize>
 80074da:	3850      	subs	r0, #80	; 0x50
 80074dc:	b281      	uxth	r1, r0
 80074de:	4a4a      	ldr	r2, [pc, #296]	; (8007608 <Touchscreen_Calibration+0x1c8>)
 80074e0:	2301      	movs	r3, #1
 80074e2:	2000      	movs	r0, #0
 80074e4:	f7fa fd74 	bl	8001fd0 <BSP_LCD_DisplayStringAt>
    HAL_Delay(5);
 80074e8:	2005      	movs	r0, #5
 80074ea:	f7fb fb03 	bl	8002af4 <HAL_Delay>
  while (1)
 80074ee:	e7fb      	b.n	80074e8 <Touchscreen_Calibration+0xa8>
      aLogX[0] = 15;
 80074f0:	4d46      	ldr	r5, [pc, #280]	; (800760c <Touchscreen_Calibration+0x1cc>)
 80074f2:	230f      	movs	r3, #15
 80074f4:	802b      	strh	r3, [r5, #0]
      aLogY[0] = 15;
 80074f6:	80ab      	strh	r3, [r5, #4]
      aLogX[1] = BSP_LCD_GetXSize() - 15;
 80074f8:	f7fa f99c 	bl	8001834 <BSP_LCD_GetXSize>
 80074fc:	380f      	subs	r0, #15
 80074fe:	8068      	strh	r0, [r5, #2]
      aLogY[1] = BSP_LCD_GetYSize() - 15;
 8007500:	f7fa f9a0 	bl	8001844 <BSP_LCD_GetYSize>
 8007504:	1d2f      	adds	r7, r5, #4
 8007506:	380f      	subs	r0, #15
 8007508:	80e8      	strh	r0, [r5, #6]
      for (i = 0; i < 2; i++) 
 800750a:	f105 0908 	add.w	r9, r5, #8
 800750e:	f105 080c 	add.w	r8, r5, #12
 8007512:	46bb      	mov	fp, r7
 8007514:	462c      	mov	r4, r5
  BSP_TS_GetState(&TS_State);
 8007516:	f105 0a10 	add.w	sl, r5, #16
        GetPhysValues(aLogX[i], aLogY[i], &aPhysX[i], &aPhysY[i]);
 800751a:	f935 6b02 	ldrsh.w	r6, [r5], #2
 800751e:	f937 1b02 	ldrsh.w	r1, [r7], #2
 8007522:	9101      	str	r1, [sp, #4]
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007524:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007528:	f7fa f9da 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 800752c:	9901      	ldr	r1, [sp, #4]
 800752e:	b2b6      	uxth	r6, r6
 8007530:	b289      	uxth	r1, r1
 8007532:	2205      	movs	r2, #5
 8007534:	4630      	mov	r0, r6
 8007536:	9101      	str	r1, [sp, #4]
 8007538:	f7fa ffbc 	bl	80024b4 <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800753c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007540:	f7fa f9ce 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 2);
 8007544:	9901      	ldr	r1, [sp, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	4630      	mov	r0, r6
 800754a:	f7fa ffb3 	bl	80024b4 <BSP_LCD_FillCircle>
  WaitForPressedState(1);
 800754e:	2001      	movs	r0, #1
 8007550:	f7ff ff56 	bl	8007400 <WaitForPressedState>
  BSP_TS_GetState(&TS_State);
 8007554:	4650      	mov	r0, sl
 8007556:	f7fb f9ff 	bl	8002958 <BSP_TS_GetState>
  *pPhysX = TS_State.X;
 800755a:	8a63      	ldrh	r3, [r4, #18]
 800755c:	f829 3b02 	strh.w	r3, [r9], #2
  *pPhysY = TS_State.Y; 
 8007560:	8aa3      	ldrh	r3, [r4, #20]
 8007562:	f828 3b02 	strh.w	r3, [r8], #2
  WaitForPressedState(0);
 8007566:	2000      	movs	r0, #0
 8007568:	f7ff ff4a 	bl	8007400 <WaitForPressedState>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800756c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007570:	f7fa f9b6 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8007574:	9901      	ldr	r1, [sp, #4]
 8007576:	2205      	movs	r2, #5
 8007578:	4630      	mov	r0, r6
 800757a:	f7fa ff9b 	bl	80024b4 <BSP_LCD_FillCircle>
      for (i = 0; i < 2; i++) 
 800757e:	455d      	cmp	r5, fp
 8007580:	d1cb      	bne.n	800751a <Touchscreen_Calibration+0xda>
      A1 = (1000 * ( aLogX[1] - aLogX[0]))/ ( aPhysX[1] - aPhysX[0]); 
 8007582:	f9b4 0000 	ldrsh.w	r0, [r4]
 8007586:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800758a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800758e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8007592:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8007596:	1a12      	subs	r2, r2, r0
 8007598:	1a5b      	subs	r3, r3, r1
 800759a:	436a      	muls	r2, r5
 800759c:	fb92 f2f3 	sdiv	r2, r2, r3
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0]; 
 80075a0:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
 80075a4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80075a8:	fb11 f102 	smulbb	r1, r1, r2
 80075ac:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 80075b0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0]; 
 80075b4:	8361      	strh	r1, [r4, #26]
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 80075b6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80075ba:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
      A1 = (1000 * ( aLogX[1] - aLogX[0]))/ ( aPhysX[1] - aPhysX[0]); 
 80075be:	8322      	strh	r2, [r4, #24]
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 80075c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075c4:	1a5b      	subs	r3, r3, r1
 80075c6:	1a80      	subs	r0, r0, r2
 80075c8:	436b      	muls	r3, r5
 80075ca:	fb93 f3f0 	sdiv	r3, r3, r0
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0]; 
 80075ce:	ebc1 1041 	rsb	r0, r1, r1, lsl #5
 80075d2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80075d6:	fb12 f203 	smulbb	r2, r2, r3
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 80075da:	83a3      	strh	r3, [r4, #28]
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0]; 
 80075dc:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
      Calibration_Done = 1;
 80075e0:	2301      	movs	r3, #1
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0]; 
 80075e2:	83e2      	strh	r2, [r4, #30]
      Calibration_Done = 1;
 80075e4:	f884 3020 	strb.w	r3, [r4, #32]
}
 80075e8:	b003      	add	sp, #12
 80075ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ee:	bf00      	nop
 80075f0:	200000e4 	.word	0x200000e4
 80075f4:	08037e16 	.word	0x08037e16
 80075f8:	08037e33 	.word	0x08037e33
 80075fc:	08037e4d 	.word	0x08037e4d
 8007600:	ffff0000 	.word	0xffff0000
 8007604:	08037d84 	.word	0x08037d84
 8007608:	08037df4 	.word	0x08037df4
 800760c:	20000aec 	.word	0x20000aec

08007610 <Calibration_GetX>:
  * @param  x : X position
  * @retval Calibrated x
  */
uint16_t Calibration_GetX(uint16_t x)
{
  return (((A1 * x) + B1)/1000);
 8007610:	4a06      	ldr	r2, [pc, #24]	; (800762c <Calibration_GetX+0x1c>)
 8007612:	f9b2 301a 	ldrsh.w	r3, [r2, #26]
 8007616:	f9b2 1018 	ldrsh.w	r1, [r2, #24]
 800761a:	fb00 3001 	mla	r0, r0, r1, r3
 800761e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007622:	fb90 f0f3 	sdiv	r0, r0, r3
}
 8007626:	b280      	uxth	r0, r0
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	20000aec 	.word	0x20000aec

08007630 <Calibration_GetY>:
  * @param  y : Y position
  * @retval Calibrated y
  */
uint16_t Calibration_GetY(uint16_t y)
{
  return (((A2 * y) + B2)/1000);
 8007630:	4a06      	ldr	r2, [pc, #24]	; (800764c <Calibration_GetY+0x1c>)
 8007632:	f9b2 301e 	ldrsh.w	r3, [r2, #30]
 8007636:	f9b2 101c 	ldrsh.w	r1, [r2, #28]
 800763a:	fb00 3001 	mla	r0, r0, r1, r3
 800763e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007642:	fb90 f0f3 	sdiv	r0, r0, r3
}
 8007646:	b280      	uxth	r0, r0
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20000aec 	.word	0x20000aec

08007650 <IsCalibrationDone>:
  * @retval Calibration state (1 : calibrated / 0: no)
  */ 
uint8_t IsCalibrationDone(void)
{
  return (Calibration_Done);
}
 8007650:	4b01      	ldr	r3, [pc, #4]	; (8007658 <IsCalibrationDone+0x8>)
 8007652:	f893 0020 	ldrb.w	r0, [r3, #32]
 8007656:	4770      	bx	lr
 8007658:	20000aec 	.word	0x20000aec

0800765c <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 800765c:	4b07      	ldr	r3, [pc, #28]	; (800767c <LCD_LOG_DeInit+0x20>)
 800765e:	4a08      	ldr	r2, [pc, #32]	; (8007680 <LCD_LOG_DeInit+0x24>)
 8007660:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 8007662:	2101      	movs	r1, #1
  LCD_CacheBuffer_xptr = 0;
 8007664:	2200      	movs	r2, #0
 8007666:	809a      	strh	r2, [r3, #4]
  LCD_CacheBuffer_yptr_top = 0;
 8007668:	80da      	strh	r2, [r3, #6]
  LCD_CacheBuffer_yptr_bottom = 0;
 800766a:	811a      	strh	r2, [r3, #8]
  LCD_CacheBuffer_yptr_top_bak = 0;
 800766c:	815a      	strh	r2, [r3, #10]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 800766e:	819a      	strh	r2, [r3, #12]
  LCD_CacheBuffer_yptr_invert= ENABLE;
 8007670:	7399      	strb	r1, [r3, #14]
  LCD_ScrollActive = DISABLE;
 8007672:	73da      	strb	r2, [r3, #15]
  LCD_Lock = DISABLE;
 8007674:	741a      	strb	r2, [r3, #16]
  LCD_Scrolled = DISABLE;
 8007676:	745a      	strb	r2, [r3, #17]
  LCD_ScrollBackStep = 0;
 8007678:	825a      	strh	r2, [r3, #18]
}
 800767a:	4770      	bx	lr
 800767c:	20000b10 	.word	0x20000b10
 8007680:	ff000080 	.word	0xff000080

08007684 <LCD_LOG_Init>:
{
 8007684:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
 8007686:	f7ff ffe9 	bl	800765c <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 800768a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800768e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 8007692:	f7fa b949 	b.w	8001928 <BSP_LCD_Clear>
	...

08007698 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 8007698:	b570      	push	{r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 800769a:	4c16      	ldr	r4, [pc, #88]	; (80076f4 <LCD_LOG_SetHeader+0x5c>)

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800769c:	4e16      	ldr	r6, [pc, #88]	; (80076f8 <LCD_LOG_SetHeader+0x60>)
{
 800769e:	4605      	mov	r5, r0
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 80076a0:	4620      	mov	r0, r4
 80076a2:	f7fa f935 	bl	8001910 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80076a6:	4630      	mov	r0, r6
 80076a8:	f7fa f91a 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 80076ac:	f7fa f8c2 	bl	8001834 <BSP_LCD_GetXSize>
 80076b0:	88e3      	ldrh	r3, [r4, #6]
 80076b2:	2100      	movs	r1, #0
 80076b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80076b8:	b282      	uxth	r2, r0
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	4608      	mov	r0, r1
 80076be:	f7fa fa61 	bl	8001b84 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 80076c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076c6:	f7fa f90b 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80076ca:	4630      	mov	r0, r6
 80076cc:	f7fa f914 	bl	80018f8 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 80076d0:	88e1      	ldrh	r1, [r4, #6]
 80076d2:	462a      	mov	r2, r5
 80076d4:	2301      	movs	r3, #1
 80076d6:	2000      	movs	r0, #0
 80076d8:	f7fa fc7a 	bl	8001fd0 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 80076dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076e0:	f7fa f90a 	bl	80018f8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 80076e4:	4805      	ldr	r0, [pc, #20]	; (80076fc <LCD_LOG_SetHeader+0x64>)
 80076e6:	f7fa f8fb 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
}
 80076ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 80076ee:	4804      	ldr	r0, [pc, #16]	; (8007700 <LCD_LOG_SetHeader+0x68>)
 80076f0:	f7fa b90e 	b.w	8001910 <BSP_LCD_SetFont>
 80076f4:	200000ec 	.word	0x200000ec
 80076f8:	ff0000ff 	.word	0xff0000ff
 80076fc:	ff000080 	.word	0xff000080
 8007700:	200000e4 	.word	0x200000e4

08007704 <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 8007704:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8007706:	4c1d      	ldr	r4, [pc, #116]	; (800777c <LCD_LOG_SetFooter+0x78>)

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8007708:	4e1d      	ldr	r6, [pc, #116]	; (8007780 <LCD_LOG_SetFooter+0x7c>)
{
 800770a:	4605      	mov	r5, r0
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 800770c:	4620      	mov	r0, r4
 800770e:	f7fa f8ff 	bl	8001910 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8007712:	4630      	mov	r0, r6
 8007714:	f7fa f8e4 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 8007718:	f7fa f894 	bl	8001844 <BSP_LCD_GetYSize>
 800771c:	88e1      	ldrh	r1, [r4, #6]
 800771e:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
 8007722:	31fc      	adds	r1, #252	; 0xfc
 8007724:	4401      	add	r1, r0
 8007726:	b289      	uxth	r1, r1
 8007728:	9101      	str	r1, [sp, #4]
 800772a:	f7fa f883 	bl	8001834 <BSP_LCD_GetXSize>
 800772e:	88e3      	ldrh	r3, [r4, #6]
 8007730:	9901      	ldr	r1, [sp, #4]
 8007732:	3304      	adds	r3, #4
 8007734:	b282      	uxth	r2, r0
 8007736:	b29b      	uxth	r3, r3
 8007738:	2000      	movs	r0, #0
 800773a:	f7fa fa23 	bl	8001b84 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 800773e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007742:	f7fa f8cd 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8007746:	4630      	mov	r0, r6
 8007748:	f7fa f8d6 	bl	80018f8 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 800774c:	f7fa f87a 	bl	8001844 <BSP_LCD_GetYSize>
 8007750:	88e1      	ldrh	r1, [r4, #6]
 8007752:	1a41      	subs	r1, r0, r1
 8007754:	2301      	movs	r3, #1
 8007756:	462a      	mov	r2, r5
 8007758:	b289      	uxth	r1, r1
 800775a:	2000      	movs	r0, #0
 800775c:	f7fa fc38 	bl	8001fd0 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8007760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007764:	f7fa f8c8 	bl	80018f8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8007768:	4806      	ldr	r0, [pc, #24]	; (8007784 <LCD_LOG_SetFooter+0x80>)
 800776a:	f7fa f8b9 	bl	80018e0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800776e:	4620      	mov	r0, r4
}
 8007770:	b002      	add	sp, #8
 8007772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8007776:	f7fa b8cb 	b.w	8001910 <BSP_LCD_SetFont>
 800777a:	bf00      	nop
 800777c:	200000e4 	.word	0x200000e4
 8007780:	ff0000ff 	.word	0xff0000ff
 8007784:	ff000080 	.word	0xff000080

08007788 <LCD_LOG_ClearTextZone>:
  * @brief  Clear the Text Zone 
  * @param  None 
  * @retval None
  */
void LCD_LOG_ClearTextZone(void)
{
 8007788:	b510      	push	{r4, lr}
 800778a:	2404      	movs	r4, #4
  uint8_t i=0;
  
  for (i= 0 ; i < YWINDOW_SIZE; i++)
  {
    BSP_LCD_ClearStringLine(i + YWINDOW_MIN);
 800778c:	4620      	mov	r0, r4
  for (i= 0 ; i < YWINDOW_SIZE; i++)
 800778e:	3401      	adds	r4, #1
    BSP_LCD_ClearStringLine(i + YWINDOW_MIN);
 8007790:	f7fa fa2e 	bl	8001bf0 <BSP_LCD_ClearStringLine>
  for (i= 0 ; i < YWINDOW_SIZE; i++)
 8007794:	2c15      	cmp	r4, #21
 8007796:	d1f9      	bne.n	800778c <LCD_LOG_ClearTextZone+0x4>
  }
  
  LCD_LOG_DeInit();
}
 8007798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LCD_LOG_DeInit();
 800779c:	f7ff bf5e 	b.w	800765c <LCD_LOG_DeInit>

080077a0 <__errno>:
 80077a0:	4b01      	ldr	r3, [pc, #4]	; (80077a8 <__errno+0x8>)
 80077a2:	6818      	ldr	r0, [r3, #0]
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	20000220 	.word	0x20000220

080077ac <__libc_init_array>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	4d0d      	ldr	r5, [pc, #52]	; (80077e4 <__libc_init_array+0x38>)
 80077b0:	4c0d      	ldr	r4, [pc, #52]	; (80077e8 <__libc_init_array+0x3c>)
 80077b2:	1b64      	subs	r4, r4, r5
 80077b4:	10a4      	asrs	r4, r4, #2
 80077b6:	2600      	movs	r6, #0
 80077b8:	42a6      	cmp	r6, r4
 80077ba:	d109      	bne.n	80077d0 <__libc_init_array+0x24>
 80077bc:	4d0b      	ldr	r5, [pc, #44]	; (80077ec <__libc_init_array+0x40>)
 80077be:	4c0c      	ldr	r4, [pc, #48]	; (80077f0 <__libc_init_array+0x44>)
 80077c0:	f001 f900 	bl	80089c4 <_init>
 80077c4:	1b64      	subs	r4, r4, r5
 80077c6:	10a4      	asrs	r4, r4, #2
 80077c8:	2600      	movs	r6, #0
 80077ca:	42a6      	cmp	r6, r4
 80077cc:	d105      	bne.n	80077da <__libc_init_array+0x2e>
 80077ce:	bd70      	pop	{r4, r5, r6, pc}
 80077d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077d4:	4798      	blx	r3
 80077d6:	3601      	adds	r6, #1
 80077d8:	e7ee      	b.n	80077b8 <__libc_init_array+0xc>
 80077da:	f855 3b04 	ldr.w	r3, [r5], #4
 80077de:	4798      	blx	r3
 80077e0:	3601      	adds	r6, #1
 80077e2:	e7f2      	b.n	80077ca <__libc_init_array+0x1e>
 80077e4:	08037f08 	.word	0x08037f08
 80077e8:	08037f08 	.word	0x08037f08
 80077ec:	08037f08 	.word	0x08037f08
 80077f0:	08037f0c 	.word	0x08037f0c

080077f4 <memset>:
 80077f4:	4402      	add	r2, r0
 80077f6:	4603      	mov	r3, r0
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d100      	bne.n	80077fe <memset+0xa>
 80077fc:	4770      	bx	lr
 80077fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007802:	e7f9      	b.n	80077f8 <memset+0x4>

08007804 <iprintf>:
 8007804:	b40f      	push	{r0, r1, r2, r3}
 8007806:	4b0a      	ldr	r3, [pc, #40]	; (8007830 <iprintf+0x2c>)
 8007808:	b513      	push	{r0, r1, r4, lr}
 800780a:	681c      	ldr	r4, [r3, #0]
 800780c:	b124      	cbz	r4, 8007818 <iprintf+0x14>
 800780e:	69a3      	ldr	r3, [r4, #24]
 8007810:	b913      	cbnz	r3, 8007818 <iprintf+0x14>
 8007812:	4620      	mov	r0, r4
 8007814:	f000 fb24 	bl	8007e60 <__sinit>
 8007818:	ab05      	add	r3, sp, #20
 800781a:	9a04      	ldr	r2, [sp, #16]
 800781c:	68a1      	ldr	r1, [r4, #8]
 800781e:	9301      	str	r3, [sp, #4]
 8007820:	4620      	mov	r0, r4
 8007822:	f000 fd35 	bl	8008290 <_vfiprintf_r>
 8007826:	b002      	add	sp, #8
 8007828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800782c:	b004      	add	sp, #16
 800782e:	4770      	bx	lr
 8007830:	20000220 	.word	0x20000220

08007834 <_puts_r>:
 8007834:	b570      	push	{r4, r5, r6, lr}
 8007836:	460e      	mov	r6, r1
 8007838:	4605      	mov	r5, r0
 800783a:	b118      	cbz	r0, 8007844 <_puts_r+0x10>
 800783c:	6983      	ldr	r3, [r0, #24]
 800783e:	b90b      	cbnz	r3, 8007844 <_puts_r+0x10>
 8007840:	f000 fb0e 	bl	8007e60 <__sinit>
 8007844:	69ab      	ldr	r3, [r5, #24]
 8007846:	68ac      	ldr	r4, [r5, #8]
 8007848:	b913      	cbnz	r3, 8007850 <_puts_r+0x1c>
 800784a:	4628      	mov	r0, r5
 800784c:	f000 fb08 	bl	8007e60 <__sinit>
 8007850:	4b2c      	ldr	r3, [pc, #176]	; (8007904 <_puts_r+0xd0>)
 8007852:	429c      	cmp	r4, r3
 8007854:	d120      	bne.n	8007898 <_puts_r+0x64>
 8007856:	686c      	ldr	r4, [r5, #4]
 8007858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800785a:	07db      	lsls	r3, r3, #31
 800785c:	d405      	bmi.n	800786a <_puts_r+0x36>
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	0598      	lsls	r0, r3, #22
 8007862:	d402      	bmi.n	800786a <_puts_r+0x36>
 8007864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007866:	f000 fb99 	bl	8007f9c <__retarget_lock_acquire_recursive>
 800786a:	89a3      	ldrh	r3, [r4, #12]
 800786c:	0719      	lsls	r1, r3, #28
 800786e:	d51d      	bpl.n	80078ac <_puts_r+0x78>
 8007870:	6923      	ldr	r3, [r4, #16]
 8007872:	b1db      	cbz	r3, 80078ac <_puts_r+0x78>
 8007874:	3e01      	subs	r6, #1
 8007876:	68a3      	ldr	r3, [r4, #8]
 8007878:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800787c:	3b01      	subs	r3, #1
 800787e:	60a3      	str	r3, [r4, #8]
 8007880:	bb39      	cbnz	r1, 80078d2 <_puts_r+0x9e>
 8007882:	2b00      	cmp	r3, #0
 8007884:	da38      	bge.n	80078f8 <_puts_r+0xc4>
 8007886:	4622      	mov	r2, r4
 8007888:	210a      	movs	r1, #10
 800788a:	4628      	mov	r0, r5
 800788c:	f000 f90e 	bl	8007aac <__swbuf_r>
 8007890:	3001      	adds	r0, #1
 8007892:	d011      	beq.n	80078b8 <_puts_r+0x84>
 8007894:	250a      	movs	r5, #10
 8007896:	e011      	b.n	80078bc <_puts_r+0x88>
 8007898:	4b1b      	ldr	r3, [pc, #108]	; (8007908 <_puts_r+0xd4>)
 800789a:	429c      	cmp	r4, r3
 800789c:	d101      	bne.n	80078a2 <_puts_r+0x6e>
 800789e:	68ac      	ldr	r4, [r5, #8]
 80078a0:	e7da      	b.n	8007858 <_puts_r+0x24>
 80078a2:	4b1a      	ldr	r3, [pc, #104]	; (800790c <_puts_r+0xd8>)
 80078a4:	429c      	cmp	r4, r3
 80078a6:	bf08      	it	eq
 80078a8:	68ec      	ldreq	r4, [r5, #12]
 80078aa:	e7d5      	b.n	8007858 <_puts_r+0x24>
 80078ac:	4621      	mov	r1, r4
 80078ae:	4628      	mov	r0, r5
 80078b0:	f000 f94e 	bl	8007b50 <__swsetup_r>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	d0dd      	beq.n	8007874 <_puts_r+0x40>
 80078b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80078bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078be:	07da      	lsls	r2, r3, #31
 80078c0:	d405      	bmi.n	80078ce <_puts_r+0x9a>
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	059b      	lsls	r3, r3, #22
 80078c6:	d402      	bmi.n	80078ce <_puts_r+0x9a>
 80078c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ca:	f000 fb68 	bl	8007f9e <__retarget_lock_release_recursive>
 80078ce:	4628      	mov	r0, r5
 80078d0:	bd70      	pop	{r4, r5, r6, pc}
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	da04      	bge.n	80078e0 <_puts_r+0xac>
 80078d6:	69a2      	ldr	r2, [r4, #24]
 80078d8:	429a      	cmp	r2, r3
 80078da:	dc06      	bgt.n	80078ea <_puts_r+0xb6>
 80078dc:	290a      	cmp	r1, #10
 80078de:	d004      	beq.n	80078ea <_puts_r+0xb6>
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	6022      	str	r2, [r4, #0]
 80078e6:	7019      	strb	r1, [r3, #0]
 80078e8:	e7c5      	b.n	8007876 <_puts_r+0x42>
 80078ea:	4622      	mov	r2, r4
 80078ec:	4628      	mov	r0, r5
 80078ee:	f000 f8dd 	bl	8007aac <__swbuf_r>
 80078f2:	3001      	adds	r0, #1
 80078f4:	d1bf      	bne.n	8007876 <_puts_r+0x42>
 80078f6:	e7df      	b.n	80078b8 <_puts_r+0x84>
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	250a      	movs	r5, #10
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	6022      	str	r2, [r4, #0]
 8007900:	701d      	strb	r5, [r3, #0]
 8007902:	e7db      	b.n	80078bc <_puts_r+0x88>
 8007904:	08037e8c 	.word	0x08037e8c
 8007908:	08037eac 	.word	0x08037eac
 800790c:	08037e6c 	.word	0x08037e6c

08007910 <puts>:
 8007910:	4b02      	ldr	r3, [pc, #8]	; (800791c <puts+0xc>)
 8007912:	4601      	mov	r1, r0
 8007914:	6818      	ldr	r0, [r3, #0]
 8007916:	f7ff bf8d 	b.w	8007834 <_puts_r>
 800791a:	bf00      	nop
 800791c:	20000220 	.word	0x20000220

08007920 <setvbuf>:
 8007920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007924:	461d      	mov	r5, r3
 8007926:	4b5d      	ldr	r3, [pc, #372]	; (8007a9c <setvbuf+0x17c>)
 8007928:	681f      	ldr	r7, [r3, #0]
 800792a:	4604      	mov	r4, r0
 800792c:	460e      	mov	r6, r1
 800792e:	4690      	mov	r8, r2
 8007930:	b127      	cbz	r7, 800793c <setvbuf+0x1c>
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	b913      	cbnz	r3, 800793c <setvbuf+0x1c>
 8007936:	4638      	mov	r0, r7
 8007938:	f000 fa92 	bl	8007e60 <__sinit>
 800793c:	4b58      	ldr	r3, [pc, #352]	; (8007aa0 <setvbuf+0x180>)
 800793e:	429c      	cmp	r4, r3
 8007940:	d167      	bne.n	8007a12 <setvbuf+0xf2>
 8007942:	687c      	ldr	r4, [r7, #4]
 8007944:	f1b8 0f02 	cmp.w	r8, #2
 8007948:	d006      	beq.n	8007958 <setvbuf+0x38>
 800794a:	f1b8 0f01 	cmp.w	r8, #1
 800794e:	f200 809f 	bhi.w	8007a90 <setvbuf+0x170>
 8007952:	2d00      	cmp	r5, #0
 8007954:	f2c0 809c 	blt.w	8007a90 <setvbuf+0x170>
 8007958:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800795a:	07db      	lsls	r3, r3, #31
 800795c:	d405      	bmi.n	800796a <setvbuf+0x4a>
 800795e:	89a3      	ldrh	r3, [r4, #12]
 8007960:	0598      	lsls	r0, r3, #22
 8007962:	d402      	bmi.n	800796a <setvbuf+0x4a>
 8007964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007966:	f000 fb19 	bl	8007f9c <__retarget_lock_acquire_recursive>
 800796a:	4621      	mov	r1, r4
 800796c:	4638      	mov	r0, r7
 800796e:	f000 f9e3 	bl	8007d38 <_fflush_r>
 8007972:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007974:	b141      	cbz	r1, 8007988 <setvbuf+0x68>
 8007976:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800797a:	4299      	cmp	r1, r3
 800797c:	d002      	beq.n	8007984 <setvbuf+0x64>
 800797e:	4638      	mov	r0, r7
 8007980:	f000 fb7c 	bl	800807c <_free_r>
 8007984:	2300      	movs	r3, #0
 8007986:	6363      	str	r3, [r4, #52]	; 0x34
 8007988:	2300      	movs	r3, #0
 800798a:	61a3      	str	r3, [r4, #24]
 800798c:	6063      	str	r3, [r4, #4]
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	0619      	lsls	r1, r3, #24
 8007992:	d503      	bpl.n	800799c <setvbuf+0x7c>
 8007994:	6921      	ldr	r1, [r4, #16]
 8007996:	4638      	mov	r0, r7
 8007998:	f000 fb70 	bl	800807c <_free_r>
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80079a2:	f023 0303 	bic.w	r3, r3, #3
 80079a6:	f1b8 0f02 	cmp.w	r8, #2
 80079aa:	81a3      	strh	r3, [r4, #12]
 80079ac:	d06c      	beq.n	8007a88 <setvbuf+0x168>
 80079ae:	ab01      	add	r3, sp, #4
 80079b0:	466a      	mov	r2, sp
 80079b2:	4621      	mov	r1, r4
 80079b4:	4638      	mov	r0, r7
 80079b6:	f000 faf3 	bl	8007fa0 <__swhatbuf_r>
 80079ba:	89a3      	ldrh	r3, [r4, #12]
 80079bc:	4318      	orrs	r0, r3
 80079be:	81a0      	strh	r0, [r4, #12]
 80079c0:	2d00      	cmp	r5, #0
 80079c2:	d130      	bne.n	8007a26 <setvbuf+0x106>
 80079c4:	9d00      	ldr	r5, [sp, #0]
 80079c6:	4628      	mov	r0, r5
 80079c8:	f000 fb50 	bl	800806c <malloc>
 80079cc:	4606      	mov	r6, r0
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d155      	bne.n	8007a7e <setvbuf+0x15e>
 80079d2:	f8dd 9000 	ldr.w	r9, [sp]
 80079d6:	45a9      	cmp	r9, r5
 80079d8:	d14a      	bne.n	8007a70 <setvbuf+0x150>
 80079da:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80079de:	2200      	movs	r2, #0
 80079e0:	60a2      	str	r2, [r4, #8]
 80079e2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80079e6:	6022      	str	r2, [r4, #0]
 80079e8:	6122      	str	r2, [r4, #16]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079f0:	6162      	str	r2, [r4, #20]
 80079f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079f4:	f043 0302 	orr.w	r3, r3, #2
 80079f8:	07d2      	lsls	r2, r2, #31
 80079fa:	81a3      	strh	r3, [r4, #12]
 80079fc:	d405      	bmi.n	8007a0a <setvbuf+0xea>
 80079fe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007a02:	d102      	bne.n	8007a0a <setvbuf+0xea>
 8007a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a06:	f000 faca 	bl	8007f9e <__retarget_lock_release_recursive>
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	b003      	add	sp, #12
 8007a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a12:	4b24      	ldr	r3, [pc, #144]	; (8007aa4 <setvbuf+0x184>)
 8007a14:	429c      	cmp	r4, r3
 8007a16:	d101      	bne.n	8007a1c <setvbuf+0xfc>
 8007a18:	68bc      	ldr	r4, [r7, #8]
 8007a1a:	e793      	b.n	8007944 <setvbuf+0x24>
 8007a1c:	4b22      	ldr	r3, [pc, #136]	; (8007aa8 <setvbuf+0x188>)
 8007a1e:	429c      	cmp	r4, r3
 8007a20:	bf08      	it	eq
 8007a22:	68fc      	ldreq	r4, [r7, #12]
 8007a24:	e78e      	b.n	8007944 <setvbuf+0x24>
 8007a26:	2e00      	cmp	r6, #0
 8007a28:	d0cd      	beq.n	80079c6 <setvbuf+0xa6>
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	b913      	cbnz	r3, 8007a34 <setvbuf+0x114>
 8007a2e:	4638      	mov	r0, r7
 8007a30:	f000 fa16 	bl	8007e60 <__sinit>
 8007a34:	f1b8 0f01 	cmp.w	r8, #1
 8007a38:	bf08      	it	eq
 8007a3a:	89a3      	ldrheq	r3, [r4, #12]
 8007a3c:	6026      	str	r6, [r4, #0]
 8007a3e:	bf04      	itt	eq
 8007a40:	f043 0301 	orreq.w	r3, r3, #1
 8007a44:	81a3      	strheq	r3, [r4, #12]
 8007a46:	89a2      	ldrh	r2, [r4, #12]
 8007a48:	f012 0308 	ands.w	r3, r2, #8
 8007a4c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007a50:	d01c      	beq.n	8007a8c <setvbuf+0x16c>
 8007a52:	07d3      	lsls	r3, r2, #31
 8007a54:	bf41      	itttt	mi
 8007a56:	2300      	movmi	r3, #0
 8007a58:	426d      	negmi	r5, r5
 8007a5a:	60a3      	strmi	r3, [r4, #8]
 8007a5c:	61a5      	strmi	r5, [r4, #24]
 8007a5e:	bf58      	it	pl
 8007a60:	60a5      	strpl	r5, [r4, #8]
 8007a62:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007a64:	f015 0501 	ands.w	r5, r5, #1
 8007a68:	d115      	bne.n	8007a96 <setvbuf+0x176>
 8007a6a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007a6e:	e7c8      	b.n	8007a02 <setvbuf+0xe2>
 8007a70:	4648      	mov	r0, r9
 8007a72:	f000 fafb 	bl	800806c <malloc>
 8007a76:	4606      	mov	r6, r0
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d0ae      	beq.n	80079da <setvbuf+0xba>
 8007a7c:	464d      	mov	r5, r9
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a84:	81a3      	strh	r3, [r4, #12]
 8007a86:	e7d0      	b.n	8007a2a <setvbuf+0x10a>
 8007a88:	2500      	movs	r5, #0
 8007a8a:	e7a8      	b.n	80079de <setvbuf+0xbe>
 8007a8c:	60a3      	str	r3, [r4, #8]
 8007a8e:	e7e8      	b.n	8007a62 <setvbuf+0x142>
 8007a90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007a94:	e7b9      	b.n	8007a0a <setvbuf+0xea>
 8007a96:	2500      	movs	r5, #0
 8007a98:	e7b7      	b.n	8007a0a <setvbuf+0xea>
 8007a9a:	bf00      	nop
 8007a9c:	20000220 	.word	0x20000220
 8007aa0:	08037e8c 	.word	0x08037e8c
 8007aa4:	08037eac 	.word	0x08037eac
 8007aa8:	08037e6c 	.word	0x08037e6c

08007aac <__swbuf_r>:
 8007aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aae:	460e      	mov	r6, r1
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	b118      	cbz	r0, 8007abe <__swbuf_r+0x12>
 8007ab6:	6983      	ldr	r3, [r0, #24]
 8007ab8:	b90b      	cbnz	r3, 8007abe <__swbuf_r+0x12>
 8007aba:	f000 f9d1 	bl	8007e60 <__sinit>
 8007abe:	4b21      	ldr	r3, [pc, #132]	; (8007b44 <__swbuf_r+0x98>)
 8007ac0:	429c      	cmp	r4, r3
 8007ac2:	d12b      	bne.n	8007b1c <__swbuf_r+0x70>
 8007ac4:	686c      	ldr	r4, [r5, #4]
 8007ac6:	69a3      	ldr	r3, [r4, #24]
 8007ac8:	60a3      	str	r3, [r4, #8]
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	071a      	lsls	r2, r3, #28
 8007ace:	d52f      	bpl.n	8007b30 <__swbuf_r+0x84>
 8007ad0:	6923      	ldr	r3, [r4, #16]
 8007ad2:	b36b      	cbz	r3, 8007b30 <__swbuf_r+0x84>
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	6820      	ldr	r0, [r4, #0]
 8007ad8:	1ac0      	subs	r0, r0, r3
 8007ada:	6963      	ldr	r3, [r4, #20]
 8007adc:	b2f6      	uxtb	r6, r6
 8007ade:	4283      	cmp	r3, r0
 8007ae0:	4637      	mov	r7, r6
 8007ae2:	dc04      	bgt.n	8007aee <__swbuf_r+0x42>
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f000 f926 	bl	8007d38 <_fflush_r>
 8007aec:	bb30      	cbnz	r0, 8007b3c <__swbuf_r+0x90>
 8007aee:	68a3      	ldr	r3, [r4, #8]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	60a3      	str	r3, [r4, #8]
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	6022      	str	r2, [r4, #0]
 8007afa:	701e      	strb	r6, [r3, #0]
 8007afc:	6963      	ldr	r3, [r4, #20]
 8007afe:	3001      	adds	r0, #1
 8007b00:	4283      	cmp	r3, r0
 8007b02:	d004      	beq.n	8007b0e <__swbuf_r+0x62>
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	07db      	lsls	r3, r3, #31
 8007b08:	d506      	bpl.n	8007b18 <__swbuf_r+0x6c>
 8007b0a:	2e0a      	cmp	r6, #10
 8007b0c:	d104      	bne.n	8007b18 <__swbuf_r+0x6c>
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4628      	mov	r0, r5
 8007b12:	f000 f911 	bl	8007d38 <_fflush_r>
 8007b16:	b988      	cbnz	r0, 8007b3c <__swbuf_r+0x90>
 8007b18:	4638      	mov	r0, r7
 8007b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b1c:	4b0a      	ldr	r3, [pc, #40]	; (8007b48 <__swbuf_r+0x9c>)
 8007b1e:	429c      	cmp	r4, r3
 8007b20:	d101      	bne.n	8007b26 <__swbuf_r+0x7a>
 8007b22:	68ac      	ldr	r4, [r5, #8]
 8007b24:	e7cf      	b.n	8007ac6 <__swbuf_r+0x1a>
 8007b26:	4b09      	ldr	r3, [pc, #36]	; (8007b4c <__swbuf_r+0xa0>)
 8007b28:	429c      	cmp	r4, r3
 8007b2a:	bf08      	it	eq
 8007b2c:	68ec      	ldreq	r4, [r5, #12]
 8007b2e:	e7ca      	b.n	8007ac6 <__swbuf_r+0x1a>
 8007b30:	4621      	mov	r1, r4
 8007b32:	4628      	mov	r0, r5
 8007b34:	f000 f80c 	bl	8007b50 <__swsetup_r>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d0cb      	beq.n	8007ad4 <__swbuf_r+0x28>
 8007b3c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007b40:	e7ea      	b.n	8007b18 <__swbuf_r+0x6c>
 8007b42:	bf00      	nop
 8007b44:	08037e8c 	.word	0x08037e8c
 8007b48:	08037eac 	.word	0x08037eac
 8007b4c:	08037e6c 	.word	0x08037e6c

08007b50 <__swsetup_r>:
 8007b50:	4b32      	ldr	r3, [pc, #200]	; (8007c1c <__swsetup_r+0xcc>)
 8007b52:	b570      	push	{r4, r5, r6, lr}
 8007b54:	681d      	ldr	r5, [r3, #0]
 8007b56:	4606      	mov	r6, r0
 8007b58:	460c      	mov	r4, r1
 8007b5a:	b125      	cbz	r5, 8007b66 <__swsetup_r+0x16>
 8007b5c:	69ab      	ldr	r3, [r5, #24]
 8007b5e:	b913      	cbnz	r3, 8007b66 <__swsetup_r+0x16>
 8007b60:	4628      	mov	r0, r5
 8007b62:	f000 f97d 	bl	8007e60 <__sinit>
 8007b66:	4b2e      	ldr	r3, [pc, #184]	; (8007c20 <__swsetup_r+0xd0>)
 8007b68:	429c      	cmp	r4, r3
 8007b6a:	d10f      	bne.n	8007b8c <__swsetup_r+0x3c>
 8007b6c:	686c      	ldr	r4, [r5, #4]
 8007b6e:	89a3      	ldrh	r3, [r4, #12]
 8007b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b74:	0719      	lsls	r1, r3, #28
 8007b76:	d42c      	bmi.n	8007bd2 <__swsetup_r+0x82>
 8007b78:	06dd      	lsls	r5, r3, #27
 8007b7a:	d411      	bmi.n	8007ba0 <__swsetup_r+0x50>
 8007b7c:	2309      	movs	r3, #9
 8007b7e:	6033      	str	r3, [r6, #0]
 8007b80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b84:	81a3      	strh	r3, [r4, #12]
 8007b86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b8a:	e03e      	b.n	8007c0a <__swsetup_r+0xba>
 8007b8c:	4b25      	ldr	r3, [pc, #148]	; (8007c24 <__swsetup_r+0xd4>)
 8007b8e:	429c      	cmp	r4, r3
 8007b90:	d101      	bne.n	8007b96 <__swsetup_r+0x46>
 8007b92:	68ac      	ldr	r4, [r5, #8]
 8007b94:	e7eb      	b.n	8007b6e <__swsetup_r+0x1e>
 8007b96:	4b24      	ldr	r3, [pc, #144]	; (8007c28 <__swsetup_r+0xd8>)
 8007b98:	429c      	cmp	r4, r3
 8007b9a:	bf08      	it	eq
 8007b9c:	68ec      	ldreq	r4, [r5, #12]
 8007b9e:	e7e6      	b.n	8007b6e <__swsetup_r+0x1e>
 8007ba0:	0758      	lsls	r0, r3, #29
 8007ba2:	d512      	bpl.n	8007bca <__swsetup_r+0x7a>
 8007ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ba6:	b141      	cbz	r1, 8007bba <__swsetup_r+0x6a>
 8007ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bac:	4299      	cmp	r1, r3
 8007bae:	d002      	beq.n	8007bb6 <__swsetup_r+0x66>
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f000 fa63 	bl	800807c <_free_r>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	6363      	str	r3, [r4, #52]	; 0x34
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bc0:	81a3      	strh	r3, [r4, #12]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	6063      	str	r3, [r4, #4]
 8007bc6:	6923      	ldr	r3, [r4, #16]
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	f043 0308 	orr.w	r3, r3, #8
 8007bd0:	81a3      	strh	r3, [r4, #12]
 8007bd2:	6923      	ldr	r3, [r4, #16]
 8007bd4:	b94b      	cbnz	r3, 8007bea <__swsetup_r+0x9a>
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007be0:	d003      	beq.n	8007bea <__swsetup_r+0x9a>
 8007be2:	4621      	mov	r1, r4
 8007be4:	4630      	mov	r0, r6
 8007be6:	f000 fa01 	bl	8007fec <__smakebuf_r>
 8007bea:	89a0      	ldrh	r0, [r4, #12]
 8007bec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bf0:	f010 0301 	ands.w	r3, r0, #1
 8007bf4:	d00a      	beq.n	8007c0c <__swsetup_r+0xbc>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60a3      	str	r3, [r4, #8]
 8007bfa:	6963      	ldr	r3, [r4, #20]
 8007bfc:	425b      	negs	r3, r3
 8007bfe:	61a3      	str	r3, [r4, #24]
 8007c00:	6923      	ldr	r3, [r4, #16]
 8007c02:	b943      	cbnz	r3, 8007c16 <__swsetup_r+0xc6>
 8007c04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c08:	d1ba      	bne.n	8007b80 <__swsetup_r+0x30>
 8007c0a:	bd70      	pop	{r4, r5, r6, pc}
 8007c0c:	0781      	lsls	r1, r0, #30
 8007c0e:	bf58      	it	pl
 8007c10:	6963      	ldrpl	r3, [r4, #20]
 8007c12:	60a3      	str	r3, [r4, #8]
 8007c14:	e7f4      	b.n	8007c00 <__swsetup_r+0xb0>
 8007c16:	2000      	movs	r0, #0
 8007c18:	e7f7      	b.n	8007c0a <__swsetup_r+0xba>
 8007c1a:	bf00      	nop
 8007c1c:	20000220 	.word	0x20000220
 8007c20:	08037e8c 	.word	0x08037e8c
 8007c24:	08037eac 	.word	0x08037eac
 8007c28:	08037e6c 	.word	0x08037e6c

08007c2c <__sflush_r>:
 8007c2c:	898a      	ldrh	r2, [r1, #12]
 8007c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c32:	4605      	mov	r5, r0
 8007c34:	0710      	lsls	r0, r2, #28
 8007c36:	460c      	mov	r4, r1
 8007c38:	d458      	bmi.n	8007cec <__sflush_r+0xc0>
 8007c3a:	684b      	ldr	r3, [r1, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	dc05      	bgt.n	8007c4c <__sflush_r+0x20>
 8007c40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	dc02      	bgt.n	8007c4c <__sflush_r+0x20>
 8007c46:	2000      	movs	r0, #0
 8007c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c4e:	2e00      	cmp	r6, #0
 8007c50:	d0f9      	beq.n	8007c46 <__sflush_r+0x1a>
 8007c52:	2300      	movs	r3, #0
 8007c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c58:	682f      	ldr	r7, [r5, #0]
 8007c5a:	602b      	str	r3, [r5, #0]
 8007c5c:	d032      	beq.n	8007cc4 <__sflush_r+0x98>
 8007c5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c60:	89a3      	ldrh	r3, [r4, #12]
 8007c62:	075a      	lsls	r2, r3, #29
 8007c64:	d505      	bpl.n	8007c72 <__sflush_r+0x46>
 8007c66:	6863      	ldr	r3, [r4, #4]
 8007c68:	1ac0      	subs	r0, r0, r3
 8007c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c6c:	b10b      	cbz	r3, 8007c72 <__sflush_r+0x46>
 8007c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c70:	1ac0      	subs	r0, r0, r3
 8007c72:	2300      	movs	r3, #0
 8007c74:	4602      	mov	r2, r0
 8007c76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c78:	6a21      	ldr	r1, [r4, #32]
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	47b0      	blx	r6
 8007c7e:	1c43      	adds	r3, r0, #1
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	d106      	bne.n	8007c92 <__sflush_r+0x66>
 8007c84:	6829      	ldr	r1, [r5, #0]
 8007c86:	291d      	cmp	r1, #29
 8007c88:	d82c      	bhi.n	8007ce4 <__sflush_r+0xb8>
 8007c8a:	4a2a      	ldr	r2, [pc, #168]	; (8007d34 <__sflush_r+0x108>)
 8007c8c:	40ca      	lsrs	r2, r1
 8007c8e:	07d6      	lsls	r6, r2, #31
 8007c90:	d528      	bpl.n	8007ce4 <__sflush_r+0xb8>
 8007c92:	2200      	movs	r2, #0
 8007c94:	6062      	str	r2, [r4, #4]
 8007c96:	04d9      	lsls	r1, r3, #19
 8007c98:	6922      	ldr	r2, [r4, #16]
 8007c9a:	6022      	str	r2, [r4, #0]
 8007c9c:	d504      	bpl.n	8007ca8 <__sflush_r+0x7c>
 8007c9e:	1c42      	adds	r2, r0, #1
 8007ca0:	d101      	bne.n	8007ca6 <__sflush_r+0x7a>
 8007ca2:	682b      	ldr	r3, [r5, #0]
 8007ca4:	b903      	cbnz	r3, 8007ca8 <__sflush_r+0x7c>
 8007ca6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007caa:	602f      	str	r7, [r5, #0]
 8007cac:	2900      	cmp	r1, #0
 8007cae:	d0ca      	beq.n	8007c46 <__sflush_r+0x1a>
 8007cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cb4:	4299      	cmp	r1, r3
 8007cb6:	d002      	beq.n	8007cbe <__sflush_r+0x92>
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f000 f9df 	bl	800807c <_free_r>
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	6360      	str	r0, [r4, #52]	; 0x34
 8007cc2:	e7c1      	b.n	8007c48 <__sflush_r+0x1c>
 8007cc4:	6a21      	ldr	r1, [r4, #32]
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	4628      	mov	r0, r5
 8007cca:	47b0      	blx	r6
 8007ccc:	1c41      	adds	r1, r0, #1
 8007cce:	d1c7      	bne.n	8007c60 <__sflush_r+0x34>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0c4      	beq.n	8007c60 <__sflush_r+0x34>
 8007cd6:	2b1d      	cmp	r3, #29
 8007cd8:	d001      	beq.n	8007cde <__sflush_r+0xb2>
 8007cda:	2b16      	cmp	r3, #22
 8007cdc:	d101      	bne.n	8007ce2 <__sflush_r+0xb6>
 8007cde:	602f      	str	r7, [r5, #0]
 8007ce0:	e7b1      	b.n	8007c46 <__sflush_r+0x1a>
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	e7ad      	b.n	8007c48 <__sflush_r+0x1c>
 8007cec:	690f      	ldr	r7, [r1, #16]
 8007cee:	2f00      	cmp	r7, #0
 8007cf0:	d0a9      	beq.n	8007c46 <__sflush_r+0x1a>
 8007cf2:	0793      	lsls	r3, r2, #30
 8007cf4:	680e      	ldr	r6, [r1, #0]
 8007cf6:	bf08      	it	eq
 8007cf8:	694b      	ldreq	r3, [r1, #20]
 8007cfa:	600f      	str	r7, [r1, #0]
 8007cfc:	bf18      	it	ne
 8007cfe:	2300      	movne	r3, #0
 8007d00:	eba6 0807 	sub.w	r8, r6, r7
 8007d04:	608b      	str	r3, [r1, #8]
 8007d06:	f1b8 0f00 	cmp.w	r8, #0
 8007d0a:	dd9c      	ble.n	8007c46 <__sflush_r+0x1a>
 8007d0c:	6a21      	ldr	r1, [r4, #32]
 8007d0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d10:	4643      	mov	r3, r8
 8007d12:	463a      	mov	r2, r7
 8007d14:	4628      	mov	r0, r5
 8007d16:	47b0      	blx	r6
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	dc06      	bgt.n	8007d2a <__sflush_r+0xfe>
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d22:	81a3      	strh	r3, [r4, #12]
 8007d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d28:	e78e      	b.n	8007c48 <__sflush_r+0x1c>
 8007d2a:	4407      	add	r7, r0
 8007d2c:	eba8 0800 	sub.w	r8, r8, r0
 8007d30:	e7e9      	b.n	8007d06 <__sflush_r+0xda>
 8007d32:	bf00      	nop
 8007d34:	20400001 	.word	0x20400001

08007d38 <_fflush_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	690b      	ldr	r3, [r1, #16]
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	b913      	cbnz	r3, 8007d48 <_fflush_r+0x10>
 8007d42:	2500      	movs	r5, #0
 8007d44:	4628      	mov	r0, r5
 8007d46:	bd38      	pop	{r3, r4, r5, pc}
 8007d48:	b118      	cbz	r0, 8007d52 <_fflush_r+0x1a>
 8007d4a:	6983      	ldr	r3, [r0, #24]
 8007d4c:	b90b      	cbnz	r3, 8007d52 <_fflush_r+0x1a>
 8007d4e:	f000 f887 	bl	8007e60 <__sinit>
 8007d52:	4b14      	ldr	r3, [pc, #80]	; (8007da4 <_fflush_r+0x6c>)
 8007d54:	429c      	cmp	r4, r3
 8007d56:	d11b      	bne.n	8007d90 <_fflush_r+0x58>
 8007d58:	686c      	ldr	r4, [r5, #4]
 8007d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0ef      	beq.n	8007d42 <_fflush_r+0xa>
 8007d62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d64:	07d0      	lsls	r0, r2, #31
 8007d66:	d404      	bmi.n	8007d72 <_fflush_r+0x3a>
 8007d68:	0599      	lsls	r1, r3, #22
 8007d6a:	d402      	bmi.n	8007d72 <_fflush_r+0x3a>
 8007d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d6e:	f000 f915 	bl	8007f9c <__retarget_lock_acquire_recursive>
 8007d72:	4628      	mov	r0, r5
 8007d74:	4621      	mov	r1, r4
 8007d76:	f7ff ff59 	bl	8007c2c <__sflush_r>
 8007d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d7c:	07da      	lsls	r2, r3, #31
 8007d7e:	4605      	mov	r5, r0
 8007d80:	d4e0      	bmi.n	8007d44 <_fflush_r+0xc>
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	059b      	lsls	r3, r3, #22
 8007d86:	d4dd      	bmi.n	8007d44 <_fflush_r+0xc>
 8007d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d8a:	f000 f908 	bl	8007f9e <__retarget_lock_release_recursive>
 8007d8e:	e7d9      	b.n	8007d44 <_fflush_r+0xc>
 8007d90:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <_fflush_r+0x70>)
 8007d92:	429c      	cmp	r4, r3
 8007d94:	d101      	bne.n	8007d9a <_fflush_r+0x62>
 8007d96:	68ac      	ldr	r4, [r5, #8]
 8007d98:	e7df      	b.n	8007d5a <_fflush_r+0x22>
 8007d9a:	4b04      	ldr	r3, [pc, #16]	; (8007dac <_fflush_r+0x74>)
 8007d9c:	429c      	cmp	r4, r3
 8007d9e:	bf08      	it	eq
 8007da0:	68ec      	ldreq	r4, [r5, #12]
 8007da2:	e7da      	b.n	8007d5a <_fflush_r+0x22>
 8007da4:	08037e8c 	.word	0x08037e8c
 8007da8:	08037eac 	.word	0x08037eac
 8007dac:	08037e6c 	.word	0x08037e6c

08007db0 <std>:
 8007db0:	2300      	movs	r3, #0
 8007db2:	b510      	push	{r4, lr}
 8007db4:	4604      	mov	r4, r0
 8007db6:	e9c0 3300 	strd	r3, r3, [r0]
 8007dba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dbe:	6083      	str	r3, [r0, #8]
 8007dc0:	8181      	strh	r1, [r0, #12]
 8007dc2:	6643      	str	r3, [r0, #100]	; 0x64
 8007dc4:	81c2      	strh	r2, [r0, #14]
 8007dc6:	6183      	str	r3, [r0, #24]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	2208      	movs	r2, #8
 8007dcc:	305c      	adds	r0, #92	; 0x5c
 8007dce:	f7ff fd11 	bl	80077f4 <memset>
 8007dd2:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <std+0x38>)
 8007dd4:	6263      	str	r3, [r4, #36]	; 0x24
 8007dd6:	4b05      	ldr	r3, [pc, #20]	; (8007dec <std+0x3c>)
 8007dd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <std+0x40>)
 8007ddc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dde:	4b05      	ldr	r3, [pc, #20]	; (8007df4 <std+0x44>)
 8007de0:	6224      	str	r4, [r4, #32]
 8007de2:	6323      	str	r3, [r4, #48]	; 0x30
 8007de4:	bd10      	pop	{r4, pc}
 8007de6:	bf00      	nop
 8007de8:	08008839 	.word	0x08008839
 8007dec:	0800885b 	.word	0x0800885b
 8007df0:	08008893 	.word	0x08008893
 8007df4:	080088b7 	.word	0x080088b7

08007df8 <_cleanup_r>:
 8007df8:	4901      	ldr	r1, [pc, #4]	; (8007e00 <_cleanup_r+0x8>)
 8007dfa:	f000 b8af 	b.w	8007f5c <_fwalk_reent>
 8007dfe:	bf00      	nop
 8007e00:	08007d39 	.word	0x08007d39

08007e04 <__sfmoreglue>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	2268      	movs	r2, #104	; 0x68
 8007e08:	1e4d      	subs	r5, r1, #1
 8007e0a:	4355      	muls	r5, r2
 8007e0c:	460e      	mov	r6, r1
 8007e0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e12:	f000 f99f 	bl	8008154 <_malloc_r>
 8007e16:	4604      	mov	r4, r0
 8007e18:	b140      	cbz	r0, 8007e2c <__sfmoreglue+0x28>
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	e9c0 1600 	strd	r1, r6, [r0]
 8007e20:	300c      	adds	r0, #12
 8007e22:	60a0      	str	r0, [r4, #8]
 8007e24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e28:	f7ff fce4 	bl	80077f4 <memset>
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}

08007e30 <__sfp_lock_acquire>:
 8007e30:	4801      	ldr	r0, [pc, #4]	; (8007e38 <__sfp_lock_acquire+0x8>)
 8007e32:	f000 b8b3 	b.w	8007f9c <__retarget_lock_acquire_recursive>
 8007e36:	bf00      	nop
 8007e38:	20004779 	.word	0x20004779

08007e3c <__sfp_lock_release>:
 8007e3c:	4801      	ldr	r0, [pc, #4]	; (8007e44 <__sfp_lock_release+0x8>)
 8007e3e:	f000 b8ae 	b.w	8007f9e <__retarget_lock_release_recursive>
 8007e42:	bf00      	nop
 8007e44:	20004779 	.word	0x20004779

08007e48 <__sinit_lock_acquire>:
 8007e48:	4801      	ldr	r0, [pc, #4]	; (8007e50 <__sinit_lock_acquire+0x8>)
 8007e4a:	f000 b8a7 	b.w	8007f9c <__retarget_lock_acquire_recursive>
 8007e4e:	bf00      	nop
 8007e50:	2000477a 	.word	0x2000477a

08007e54 <__sinit_lock_release>:
 8007e54:	4801      	ldr	r0, [pc, #4]	; (8007e5c <__sinit_lock_release+0x8>)
 8007e56:	f000 b8a2 	b.w	8007f9e <__retarget_lock_release_recursive>
 8007e5a:	bf00      	nop
 8007e5c:	2000477a 	.word	0x2000477a

08007e60 <__sinit>:
 8007e60:	b510      	push	{r4, lr}
 8007e62:	4604      	mov	r4, r0
 8007e64:	f7ff fff0 	bl	8007e48 <__sinit_lock_acquire>
 8007e68:	69a3      	ldr	r3, [r4, #24]
 8007e6a:	b11b      	cbz	r3, 8007e74 <__sinit+0x14>
 8007e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e70:	f7ff bff0 	b.w	8007e54 <__sinit_lock_release>
 8007e74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e78:	6523      	str	r3, [r4, #80]	; 0x50
 8007e7a:	4b13      	ldr	r3, [pc, #76]	; (8007ec8 <__sinit+0x68>)
 8007e7c:	4a13      	ldr	r2, [pc, #76]	; (8007ecc <__sinit+0x6c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e82:	42a3      	cmp	r3, r4
 8007e84:	bf04      	itt	eq
 8007e86:	2301      	moveq	r3, #1
 8007e88:	61a3      	streq	r3, [r4, #24]
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f000 f820 	bl	8007ed0 <__sfp>
 8007e90:	6060      	str	r0, [r4, #4]
 8007e92:	4620      	mov	r0, r4
 8007e94:	f000 f81c 	bl	8007ed0 <__sfp>
 8007e98:	60a0      	str	r0, [r4, #8]
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 f818 	bl	8007ed0 <__sfp>
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	60e0      	str	r0, [r4, #12]
 8007ea4:	2104      	movs	r1, #4
 8007ea6:	6860      	ldr	r0, [r4, #4]
 8007ea8:	f7ff ff82 	bl	8007db0 <std>
 8007eac:	68a0      	ldr	r0, [r4, #8]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	2109      	movs	r1, #9
 8007eb2:	f7ff ff7d 	bl	8007db0 <std>
 8007eb6:	68e0      	ldr	r0, [r4, #12]
 8007eb8:	2202      	movs	r2, #2
 8007eba:	2112      	movs	r1, #18
 8007ebc:	f7ff ff78 	bl	8007db0 <std>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	61a3      	str	r3, [r4, #24]
 8007ec4:	e7d2      	b.n	8007e6c <__sinit+0xc>
 8007ec6:	bf00      	nop
 8007ec8:	08037e68 	.word	0x08037e68
 8007ecc:	08007df9 	.word	0x08007df9

08007ed0 <__sfp>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	4607      	mov	r7, r0
 8007ed4:	f7ff ffac 	bl	8007e30 <__sfp_lock_acquire>
 8007ed8:	4b1e      	ldr	r3, [pc, #120]	; (8007f54 <__sfp+0x84>)
 8007eda:	681e      	ldr	r6, [r3, #0]
 8007edc:	69b3      	ldr	r3, [r6, #24]
 8007ede:	b913      	cbnz	r3, 8007ee6 <__sfp+0x16>
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f7ff ffbd 	bl	8007e60 <__sinit>
 8007ee6:	3648      	adds	r6, #72	; 0x48
 8007ee8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007eec:	3b01      	subs	r3, #1
 8007eee:	d503      	bpl.n	8007ef8 <__sfp+0x28>
 8007ef0:	6833      	ldr	r3, [r6, #0]
 8007ef2:	b30b      	cbz	r3, 8007f38 <__sfp+0x68>
 8007ef4:	6836      	ldr	r6, [r6, #0]
 8007ef6:	e7f7      	b.n	8007ee8 <__sfp+0x18>
 8007ef8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007efc:	b9d5      	cbnz	r5, 8007f34 <__sfp+0x64>
 8007efe:	4b16      	ldr	r3, [pc, #88]	; (8007f58 <__sfp+0x88>)
 8007f00:	60e3      	str	r3, [r4, #12]
 8007f02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f06:	6665      	str	r5, [r4, #100]	; 0x64
 8007f08:	f000 f847 	bl	8007f9a <__retarget_lock_init_recursive>
 8007f0c:	f7ff ff96 	bl	8007e3c <__sfp_lock_release>
 8007f10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f18:	6025      	str	r5, [r4, #0]
 8007f1a:	61a5      	str	r5, [r4, #24]
 8007f1c:	2208      	movs	r2, #8
 8007f1e:	4629      	mov	r1, r5
 8007f20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f24:	f7ff fc66 	bl	80077f4 <memset>
 8007f28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f30:	4620      	mov	r0, r4
 8007f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f34:	3468      	adds	r4, #104	; 0x68
 8007f36:	e7d9      	b.n	8007eec <__sfp+0x1c>
 8007f38:	2104      	movs	r1, #4
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	f7ff ff62 	bl	8007e04 <__sfmoreglue>
 8007f40:	4604      	mov	r4, r0
 8007f42:	6030      	str	r0, [r6, #0]
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d1d5      	bne.n	8007ef4 <__sfp+0x24>
 8007f48:	f7ff ff78 	bl	8007e3c <__sfp_lock_release>
 8007f4c:	230c      	movs	r3, #12
 8007f4e:	603b      	str	r3, [r7, #0]
 8007f50:	e7ee      	b.n	8007f30 <__sfp+0x60>
 8007f52:	bf00      	nop
 8007f54:	08037e68 	.word	0x08037e68
 8007f58:	ffff0001 	.word	0xffff0001

08007f5c <_fwalk_reent>:
 8007f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f60:	4606      	mov	r6, r0
 8007f62:	4688      	mov	r8, r1
 8007f64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f68:	2700      	movs	r7, #0
 8007f6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f6e:	f1b9 0901 	subs.w	r9, r9, #1
 8007f72:	d505      	bpl.n	8007f80 <_fwalk_reent+0x24>
 8007f74:	6824      	ldr	r4, [r4, #0]
 8007f76:	2c00      	cmp	r4, #0
 8007f78:	d1f7      	bne.n	8007f6a <_fwalk_reent+0xe>
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f80:	89ab      	ldrh	r3, [r5, #12]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d907      	bls.n	8007f96 <_fwalk_reent+0x3a>
 8007f86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	d003      	beq.n	8007f96 <_fwalk_reent+0x3a>
 8007f8e:	4629      	mov	r1, r5
 8007f90:	4630      	mov	r0, r6
 8007f92:	47c0      	blx	r8
 8007f94:	4307      	orrs	r7, r0
 8007f96:	3568      	adds	r5, #104	; 0x68
 8007f98:	e7e9      	b.n	8007f6e <_fwalk_reent+0x12>

08007f9a <__retarget_lock_init_recursive>:
 8007f9a:	4770      	bx	lr

08007f9c <__retarget_lock_acquire_recursive>:
 8007f9c:	4770      	bx	lr

08007f9e <__retarget_lock_release_recursive>:
 8007f9e:	4770      	bx	lr

08007fa0 <__swhatbuf_r>:
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	460e      	mov	r6, r1
 8007fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa8:	2900      	cmp	r1, #0
 8007faa:	b096      	sub	sp, #88	; 0x58
 8007fac:	4614      	mov	r4, r2
 8007fae:	461d      	mov	r5, r3
 8007fb0:	da08      	bge.n	8007fc4 <__swhatbuf_r+0x24>
 8007fb2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	602a      	str	r2, [r5, #0]
 8007fba:	061a      	lsls	r2, r3, #24
 8007fbc:	d410      	bmi.n	8007fe0 <__swhatbuf_r+0x40>
 8007fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fc2:	e00e      	b.n	8007fe2 <__swhatbuf_r+0x42>
 8007fc4:	466a      	mov	r2, sp
 8007fc6:	f000 fc9d 	bl	8008904 <_fstat_r>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	dbf1      	blt.n	8007fb2 <__swhatbuf_r+0x12>
 8007fce:	9a01      	ldr	r2, [sp, #4]
 8007fd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fd8:	425a      	negs	r2, r3
 8007fda:	415a      	adcs	r2, r3
 8007fdc:	602a      	str	r2, [r5, #0]
 8007fde:	e7ee      	b.n	8007fbe <__swhatbuf_r+0x1e>
 8007fe0:	2340      	movs	r3, #64	; 0x40
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	b016      	add	sp, #88	; 0x58
 8007fe8:	bd70      	pop	{r4, r5, r6, pc}
	...

08007fec <__smakebuf_r>:
 8007fec:	898b      	ldrh	r3, [r1, #12]
 8007fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ff0:	079d      	lsls	r5, r3, #30
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	d507      	bpl.n	8008008 <__smakebuf_r+0x1c>
 8007ff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	6123      	str	r3, [r4, #16]
 8008000:	2301      	movs	r3, #1
 8008002:	6163      	str	r3, [r4, #20]
 8008004:	b002      	add	sp, #8
 8008006:	bd70      	pop	{r4, r5, r6, pc}
 8008008:	ab01      	add	r3, sp, #4
 800800a:	466a      	mov	r2, sp
 800800c:	f7ff ffc8 	bl	8007fa0 <__swhatbuf_r>
 8008010:	9900      	ldr	r1, [sp, #0]
 8008012:	4605      	mov	r5, r0
 8008014:	4630      	mov	r0, r6
 8008016:	f000 f89d 	bl	8008154 <_malloc_r>
 800801a:	b948      	cbnz	r0, 8008030 <__smakebuf_r+0x44>
 800801c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008020:	059a      	lsls	r2, r3, #22
 8008022:	d4ef      	bmi.n	8008004 <__smakebuf_r+0x18>
 8008024:	f023 0303 	bic.w	r3, r3, #3
 8008028:	f043 0302 	orr.w	r3, r3, #2
 800802c:	81a3      	strh	r3, [r4, #12]
 800802e:	e7e3      	b.n	8007ff8 <__smakebuf_r+0xc>
 8008030:	4b0d      	ldr	r3, [pc, #52]	; (8008068 <__smakebuf_r+0x7c>)
 8008032:	62b3      	str	r3, [r6, #40]	; 0x28
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	6020      	str	r0, [r4, #0]
 8008038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800803c:	81a3      	strh	r3, [r4, #12]
 800803e:	9b00      	ldr	r3, [sp, #0]
 8008040:	6163      	str	r3, [r4, #20]
 8008042:	9b01      	ldr	r3, [sp, #4]
 8008044:	6120      	str	r0, [r4, #16]
 8008046:	b15b      	cbz	r3, 8008060 <__smakebuf_r+0x74>
 8008048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800804c:	4630      	mov	r0, r6
 800804e:	f000 fc6b 	bl	8008928 <_isatty_r>
 8008052:	b128      	cbz	r0, 8008060 <__smakebuf_r+0x74>
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	f023 0303 	bic.w	r3, r3, #3
 800805a:	f043 0301 	orr.w	r3, r3, #1
 800805e:	81a3      	strh	r3, [r4, #12]
 8008060:	89a0      	ldrh	r0, [r4, #12]
 8008062:	4305      	orrs	r5, r0
 8008064:	81a5      	strh	r5, [r4, #12]
 8008066:	e7cd      	b.n	8008004 <__smakebuf_r+0x18>
 8008068:	08007df9 	.word	0x08007df9

0800806c <malloc>:
 800806c:	4b02      	ldr	r3, [pc, #8]	; (8008078 <malloc+0xc>)
 800806e:	4601      	mov	r1, r0
 8008070:	6818      	ldr	r0, [r3, #0]
 8008072:	f000 b86f 	b.w	8008154 <_malloc_r>
 8008076:	bf00      	nop
 8008078:	20000220 	.word	0x20000220

0800807c <_free_r>:
 800807c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800807e:	2900      	cmp	r1, #0
 8008080:	d044      	beq.n	800810c <_free_r+0x90>
 8008082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008086:	9001      	str	r0, [sp, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	f1a1 0404 	sub.w	r4, r1, #4
 800808e:	bfb8      	it	lt
 8008090:	18e4      	addlt	r4, r4, r3
 8008092:	f000 fc6b 	bl	800896c <__malloc_lock>
 8008096:	4a1e      	ldr	r2, [pc, #120]	; (8008110 <_free_r+0x94>)
 8008098:	9801      	ldr	r0, [sp, #4]
 800809a:	6813      	ldr	r3, [r2, #0]
 800809c:	b933      	cbnz	r3, 80080ac <_free_r+0x30>
 800809e:	6063      	str	r3, [r4, #4]
 80080a0:	6014      	str	r4, [r2, #0]
 80080a2:	b003      	add	sp, #12
 80080a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080a8:	f000 bc66 	b.w	8008978 <__malloc_unlock>
 80080ac:	42a3      	cmp	r3, r4
 80080ae:	d908      	bls.n	80080c2 <_free_r+0x46>
 80080b0:	6825      	ldr	r5, [r4, #0]
 80080b2:	1961      	adds	r1, r4, r5
 80080b4:	428b      	cmp	r3, r1
 80080b6:	bf01      	itttt	eq
 80080b8:	6819      	ldreq	r1, [r3, #0]
 80080ba:	685b      	ldreq	r3, [r3, #4]
 80080bc:	1949      	addeq	r1, r1, r5
 80080be:	6021      	streq	r1, [r4, #0]
 80080c0:	e7ed      	b.n	800809e <_free_r+0x22>
 80080c2:	461a      	mov	r2, r3
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	b10b      	cbz	r3, 80080cc <_free_r+0x50>
 80080c8:	42a3      	cmp	r3, r4
 80080ca:	d9fa      	bls.n	80080c2 <_free_r+0x46>
 80080cc:	6811      	ldr	r1, [r2, #0]
 80080ce:	1855      	adds	r5, r2, r1
 80080d0:	42a5      	cmp	r5, r4
 80080d2:	d10b      	bne.n	80080ec <_free_r+0x70>
 80080d4:	6824      	ldr	r4, [r4, #0]
 80080d6:	4421      	add	r1, r4
 80080d8:	1854      	adds	r4, r2, r1
 80080da:	42a3      	cmp	r3, r4
 80080dc:	6011      	str	r1, [r2, #0]
 80080de:	d1e0      	bne.n	80080a2 <_free_r+0x26>
 80080e0:	681c      	ldr	r4, [r3, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	6053      	str	r3, [r2, #4]
 80080e6:	4421      	add	r1, r4
 80080e8:	6011      	str	r1, [r2, #0]
 80080ea:	e7da      	b.n	80080a2 <_free_r+0x26>
 80080ec:	d902      	bls.n	80080f4 <_free_r+0x78>
 80080ee:	230c      	movs	r3, #12
 80080f0:	6003      	str	r3, [r0, #0]
 80080f2:	e7d6      	b.n	80080a2 <_free_r+0x26>
 80080f4:	6825      	ldr	r5, [r4, #0]
 80080f6:	1961      	adds	r1, r4, r5
 80080f8:	428b      	cmp	r3, r1
 80080fa:	bf04      	itt	eq
 80080fc:	6819      	ldreq	r1, [r3, #0]
 80080fe:	685b      	ldreq	r3, [r3, #4]
 8008100:	6063      	str	r3, [r4, #4]
 8008102:	bf04      	itt	eq
 8008104:	1949      	addeq	r1, r1, r5
 8008106:	6021      	streq	r1, [r4, #0]
 8008108:	6054      	str	r4, [r2, #4]
 800810a:	e7ca      	b.n	80080a2 <_free_r+0x26>
 800810c:	b003      	add	sp, #12
 800810e:	bd30      	pop	{r4, r5, pc}
 8008110:	2000477c 	.word	0x2000477c

08008114 <sbrk_aligned>:
 8008114:	b570      	push	{r4, r5, r6, lr}
 8008116:	4e0e      	ldr	r6, [pc, #56]	; (8008150 <sbrk_aligned+0x3c>)
 8008118:	460c      	mov	r4, r1
 800811a:	6831      	ldr	r1, [r6, #0]
 800811c:	4605      	mov	r5, r0
 800811e:	b911      	cbnz	r1, 8008126 <sbrk_aligned+0x12>
 8008120:	f000 fb7a 	bl	8008818 <_sbrk_r>
 8008124:	6030      	str	r0, [r6, #0]
 8008126:	4621      	mov	r1, r4
 8008128:	4628      	mov	r0, r5
 800812a:	f000 fb75 	bl	8008818 <_sbrk_r>
 800812e:	1c43      	adds	r3, r0, #1
 8008130:	d00a      	beq.n	8008148 <sbrk_aligned+0x34>
 8008132:	1cc4      	adds	r4, r0, #3
 8008134:	f024 0403 	bic.w	r4, r4, #3
 8008138:	42a0      	cmp	r0, r4
 800813a:	d007      	beq.n	800814c <sbrk_aligned+0x38>
 800813c:	1a21      	subs	r1, r4, r0
 800813e:	4628      	mov	r0, r5
 8008140:	f000 fb6a 	bl	8008818 <_sbrk_r>
 8008144:	3001      	adds	r0, #1
 8008146:	d101      	bne.n	800814c <sbrk_aligned+0x38>
 8008148:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800814c:	4620      	mov	r0, r4
 800814e:	bd70      	pop	{r4, r5, r6, pc}
 8008150:	20004780 	.word	0x20004780

08008154 <_malloc_r>:
 8008154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008158:	1ccd      	adds	r5, r1, #3
 800815a:	f025 0503 	bic.w	r5, r5, #3
 800815e:	3508      	adds	r5, #8
 8008160:	2d0c      	cmp	r5, #12
 8008162:	bf38      	it	cc
 8008164:	250c      	movcc	r5, #12
 8008166:	2d00      	cmp	r5, #0
 8008168:	4607      	mov	r7, r0
 800816a:	db01      	blt.n	8008170 <_malloc_r+0x1c>
 800816c:	42a9      	cmp	r1, r5
 800816e:	d905      	bls.n	800817c <_malloc_r+0x28>
 8008170:	230c      	movs	r3, #12
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	2600      	movs	r6, #0
 8008176:	4630      	mov	r0, r6
 8008178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800817c:	4e2e      	ldr	r6, [pc, #184]	; (8008238 <_malloc_r+0xe4>)
 800817e:	f000 fbf5 	bl	800896c <__malloc_lock>
 8008182:	6833      	ldr	r3, [r6, #0]
 8008184:	461c      	mov	r4, r3
 8008186:	bb34      	cbnz	r4, 80081d6 <_malloc_r+0x82>
 8008188:	4629      	mov	r1, r5
 800818a:	4638      	mov	r0, r7
 800818c:	f7ff ffc2 	bl	8008114 <sbrk_aligned>
 8008190:	1c43      	adds	r3, r0, #1
 8008192:	4604      	mov	r4, r0
 8008194:	d14d      	bne.n	8008232 <_malloc_r+0xde>
 8008196:	6834      	ldr	r4, [r6, #0]
 8008198:	4626      	mov	r6, r4
 800819a:	2e00      	cmp	r6, #0
 800819c:	d140      	bne.n	8008220 <_malloc_r+0xcc>
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	4631      	mov	r1, r6
 80081a2:	4638      	mov	r0, r7
 80081a4:	eb04 0803 	add.w	r8, r4, r3
 80081a8:	f000 fb36 	bl	8008818 <_sbrk_r>
 80081ac:	4580      	cmp	r8, r0
 80081ae:	d13a      	bne.n	8008226 <_malloc_r+0xd2>
 80081b0:	6821      	ldr	r1, [r4, #0]
 80081b2:	3503      	adds	r5, #3
 80081b4:	1a6d      	subs	r5, r5, r1
 80081b6:	f025 0503 	bic.w	r5, r5, #3
 80081ba:	3508      	adds	r5, #8
 80081bc:	2d0c      	cmp	r5, #12
 80081be:	bf38      	it	cc
 80081c0:	250c      	movcc	r5, #12
 80081c2:	4629      	mov	r1, r5
 80081c4:	4638      	mov	r0, r7
 80081c6:	f7ff ffa5 	bl	8008114 <sbrk_aligned>
 80081ca:	3001      	adds	r0, #1
 80081cc:	d02b      	beq.n	8008226 <_malloc_r+0xd2>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	442b      	add	r3, r5
 80081d2:	6023      	str	r3, [r4, #0]
 80081d4:	e00e      	b.n	80081f4 <_malloc_r+0xa0>
 80081d6:	6822      	ldr	r2, [r4, #0]
 80081d8:	1b52      	subs	r2, r2, r5
 80081da:	d41e      	bmi.n	800821a <_malloc_r+0xc6>
 80081dc:	2a0b      	cmp	r2, #11
 80081de:	d916      	bls.n	800820e <_malloc_r+0xba>
 80081e0:	1961      	adds	r1, r4, r5
 80081e2:	42a3      	cmp	r3, r4
 80081e4:	6025      	str	r5, [r4, #0]
 80081e6:	bf18      	it	ne
 80081e8:	6059      	strne	r1, [r3, #4]
 80081ea:	6863      	ldr	r3, [r4, #4]
 80081ec:	bf08      	it	eq
 80081ee:	6031      	streq	r1, [r6, #0]
 80081f0:	5162      	str	r2, [r4, r5]
 80081f2:	604b      	str	r3, [r1, #4]
 80081f4:	4638      	mov	r0, r7
 80081f6:	f104 060b 	add.w	r6, r4, #11
 80081fa:	f000 fbbd 	bl	8008978 <__malloc_unlock>
 80081fe:	f026 0607 	bic.w	r6, r6, #7
 8008202:	1d23      	adds	r3, r4, #4
 8008204:	1af2      	subs	r2, r6, r3
 8008206:	d0b6      	beq.n	8008176 <_malloc_r+0x22>
 8008208:	1b9b      	subs	r3, r3, r6
 800820a:	50a3      	str	r3, [r4, r2]
 800820c:	e7b3      	b.n	8008176 <_malloc_r+0x22>
 800820e:	6862      	ldr	r2, [r4, #4]
 8008210:	42a3      	cmp	r3, r4
 8008212:	bf0c      	ite	eq
 8008214:	6032      	streq	r2, [r6, #0]
 8008216:	605a      	strne	r2, [r3, #4]
 8008218:	e7ec      	b.n	80081f4 <_malloc_r+0xa0>
 800821a:	4623      	mov	r3, r4
 800821c:	6864      	ldr	r4, [r4, #4]
 800821e:	e7b2      	b.n	8008186 <_malloc_r+0x32>
 8008220:	4634      	mov	r4, r6
 8008222:	6876      	ldr	r6, [r6, #4]
 8008224:	e7b9      	b.n	800819a <_malloc_r+0x46>
 8008226:	230c      	movs	r3, #12
 8008228:	603b      	str	r3, [r7, #0]
 800822a:	4638      	mov	r0, r7
 800822c:	f000 fba4 	bl	8008978 <__malloc_unlock>
 8008230:	e7a1      	b.n	8008176 <_malloc_r+0x22>
 8008232:	6025      	str	r5, [r4, #0]
 8008234:	e7de      	b.n	80081f4 <_malloc_r+0xa0>
 8008236:	bf00      	nop
 8008238:	2000477c 	.word	0x2000477c

0800823c <__sfputc_r>:
 800823c:	6893      	ldr	r3, [r2, #8]
 800823e:	3b01      	subs	r3, #1
 8008240:	2b00      	cmp	r3, #0
 8008242:	b410      	push	{r4}
 8008244:	6093      	str	r3, [r2, #8]
 8008246:	da08      	bge.n	800825a <__sfputc_r+0x1e>
 8008248:	6994      	ldr	r4, [r2, #24]
 800824a:	42a3      	cmp	r3, r4
 800824c:	db01      	blt.n	8008252 <__sfputc_r+0x16>
 800824e:	290a      	cmp	r1, #10
 8008250:	d103      	bne.n	800825a <__sfputc_r+0x1e>
 8008252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008256:	f7ff bc29 	b.w	8007aac <__swbuf_r>
 800825a:	6813      	ldr	r3, [r2, #0]
 800825c:	1c58      	adds	r0, r3, #1
 800825e:	6010      	str	r0, [r2, #0]
 8008260:	7019      	strb	r1, [r3, #0]
 8008262:	4608      	mov	r0, r1
 8008264:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008268:	4770      	bx	lr

0800826a <__sfputs_r>:
 800826a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826c:	4606      	mov	r6, r0
 800826e:	460f      	mov	r7, r1
 8008270:	4614      	mov	r4, r2
 8008272:	18d5      	adds	r5, r2, r3
 8008274:	42ac      	cmp	r4, r5
 8008276:	d101      	bne.n	800827c <__sfputs_r+0x12>
 8008278:	2000      	movs	r0, #0
 800827a:	e007      	b.n	800828c <__sfputs_r+0x22>
 800827c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008280:	463a      	mov	r2, r7
 8008282:	4630      	mov	r0, r6
 8008284:	f7ff ffda 	bl	800823c <__sfputc_r>
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	d1f3      	bne.n	8008274 <__sfputs_r+0xa>
 800828c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008290 <_vfiprintf_r>:
 8008290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008294:	460d      	mov	r5, r1
 8008296:	b09d      	sub	sp, #116	; 0x74
 8008298:	4614      	mov	r4, r2
 800829a:	4698      	mov	r8, r3
 800829c:	4606      	mov	r6, r0
 800829e:	b118      	cbz	r0, 80082a8 <_vfiprintf_r+0x18>
 80082a0:	6983      	ldr	r3, [r0, #24]
 80082a2:	b90b      	cbnz	r3, 80082a8 <_vfiprintf_r+0x18>
 80082a4:	f7ff fddc 	bl	8007e60 <__sinit>
 80082a8:	4b89      	ldr	r3, [pc, #548]	; (80084d0 <_vfiprintf_r+0x240>)
 80082aa:	429d      	cmp	r5, r3
 80082ac:	d11b      	bne.n	80082e6 <_vfiprintf_r+0x56>
 80082ae:	6875      	ldr	r5, [r6, #4]
 80082b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082b2:	07d9      	lsls	r1, r3, #31
 80082b4:	d405      	bmi.n	80082c2 <_vfiprintf_r+0x32>
 80082b6:	89ab      	ldrh	r3, [r5, #12]
 80082b8:	059a      	lsls	r2, r3, #22
 80082ba:	d402      	bmi.n	80082c2 <_vfiprintf_r+0x32>
 80082bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082be:	f7ff fe6d 	bl	8007f9c <__retarget_lock_acquire_recursive>
 80082c2:	89ab      	ldrh	r3, [r5, #12]
 80082c4:	071b      	lsls	r3, r3, #28
 80082c6:	d501      	bpl.n	80082cc <_vfiprintf_r+0x3c>
 80082c8:	692b      	ldr	r3, [r5, #16]
 80082ca:	b9eb      	cbnz	r3, 8008308 <_vfiprintf_r+0x78>
 80082cc:	4629      	mov	r1, r5
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7ff fc3e 	bl	8007b50 <__swsetup_r>
 80082d4:	b1c0      	cbz	r0, 8008308 <_vfiprintf_r+0x78>
 80082d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082d8:	07dc      	lsls	r4, r3, #31
 80082da:	d50e      	bpl.n	80082fa <_vfiprintf_r+0x6a>
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082e0:	b01d      	add	sp, #116	; 0x74
 80082e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e6:	4b7b      	ldr	r3, [pc, #492]	; (80084d4 <_vfiprintf_r+0x244>)
 80082e8:	429d      	cmp	r5, r3
 80082ea:	d101      	bne.n	80082f0 <_vfiprintf_r+0x60>
 80082ec:	68b5      	ldr	r5, [r6, #8]
 80082ee:	e7df      	b.n	80082b0 <_vfiprintf_r+0x20>
 80082f0:	4b79      	ldr	r3, [pc, #484]	; (80084d8 <_vfiprintf_r+0x248>)
 80082f2:	429d      	cmp	r5, r3
 80082f4:	bf08      	it	eq
 80082f6:	68f5      	ldreq	r5, [r6, #12]
 80082f8:	e7da      	b.n	80082b0 <_vfiprintf_r+0x20>
 80082fa:	89ab      	ldrh	r3, [r5, #12]
 80082fc:	0598      	lsls	r0, r3, #22
 80082fe:	d4ed      	bmi.n	80082dc <_vfiprintf_r+0x4c>
 8008300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008302:	f7ff fe4c 	bl	8007f9e <__retarget_lock_release_recursive>
 8008306:	e7e9      	b.n	80082dc <_vfiprintf_r+0x4c>
 8008308:	2300      	movs	r3, #0
 800830a:	9309      	str	r3, [sp, #36]	; 0x24
 800830c:	2320      	movs	r3, #32
 800830e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008312:	f8cd 800c 	str.w	r8, [sp, #12]
 8008316:	2330      	movs	r3, #48	; 0x30
 8008318:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80084dc <_vfiprintf_r+0x24c>
 800831c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008320:	f04f 0901 	mov.w	r9, #1
 8008324:	4623      	mov	r3, r4
 8008326:	469a      	mov	sl, r3
 8008328:	f813 2b01 	ldrb.w	r2, [r3], #1
 800832c:	b10a      	cbz	r2, 8008332 <_vfiprintf_r+0xa2>
 800832e:	2a25      	cmp	r2, #37	; 0x25
 8008330:	d1f9      	bne.n	8008326 <_vfiprintf_r+0x96>
 8008332:	ebba 0b04 	subs.w	fp, sl, r4
 8008336:	d00b      	beq.n	8008350 <_vfiprintf_r+0xc0>
 8008338:	465b      	mov	r3, fp
 800833a:	4622      	mov	r2, r4
 800833c:	4629      	mov	r1, r5
 800833e:	4630      	mov	r0, r6
 8008340:	f7ff ff93 	bl	800826a <__sfputs_r>
 8008344:	3001      	adds	r0, #1
 8008346:	f000 80aa 	beq.w	800849e <_vfiprintf_r+0x20e>
 800834a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800834c:	445a      	add	r2, fp
 800834e:	9209      	str	r2, [sp, #36]	; 0x24
 8008350:	f89a 3000 	ldrb.w	r3, [sl]
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 80a2 	beq.w	800849e <_vfiprintf_r+0x20e>
 800835a:	2300      	movs	r3, #0
 800835c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008360:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008364:	f10a 0a01 	add.w	sl, sl, #1
 8008368:	9304      	str	r3, [sp, #16]
 800836a:	9307      	str	r3, [sp, #28]
 800836c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008370:	931a      	str	r3, [sp, #104]	; 0x68
 8008372:	4654      	mov	r4, sl
 8008374:	2205      	movs	r2, #5
 8008376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800837a:	4858      	ldr	r0, [pc, #352]	; (80084dc <_vfiprintf_r+0x24c>)
 800837c:	f7f7 ff38 	bl	80001f0 <memchr>
 8008380:	9a04      	ldr	r2, [sp, #16]
 8008382:	b9d8      	cbnz	r0, 80083bc <_vfiprintf_r+0x12c>
 8008384:	06d1      	lsls	r1, r2, #27
 8008386:	bf44      	itt	mi
 8008388:	2320      	movmi	r3, #32
 800838a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800838e:	0713      	lsls	r3, r2, #28
 8008390:	bf44      	itt	mi
 8008392:	232b      	movmi	r3, #43	; 0x2b
 8008394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008398:	f89a 3000 	ldrb.w	r3, [sl]
 800839c:	2b2a      	cmp	r3, #42	; 0x2a
 800839e:	d015      	beq.n	80083cc <_vfiprintf_r+0x13c>
 80083a0:	9a07      	ldr	r2, [sp, #28]
 80083a2:	4654      	mov	r4, sl
 80083a4:	2000      	movs	r0, #0
 80083a6:	f04f 0c0a 	mov.w	ip, #10
 80083aa:	4621      	mov	r1, r4
 80083ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083b0:	3b30      	subs	r3, #48	; 0x30
 80083b2:	2b09      	cmp	r3, #9
 80083b4:	d94e      	bls.n	8008454 <_vfiprintf_r+0x1c4>
 80083b6:	b1b0      	cbz	r0, 80083e6 <_vfiprintf_r+0x156>
 80083b8:	9207      	str	r2, [sp, #28]
 80083ba:	e014      	b.n	80083e6 <_vfiprintf_r+0x156>
 80083bc:	eba0 0308 	sub.w	r3, r0, r8
 80083c0:	fa09 f303 	lsl.w	r3, r9, r3
 80083c4:	4313      	orrs	r3, r2
 80083c6:	9304      	str	r3, [sp, #16]
 80083c8:	46a2      	mov	sl, r4
 80083ca:	e7d2      	b.n	8008372 <_vfiprintf_r+0xe2>
 80083cc:	9b03      	ldr	r3, [sp, #12]
 80083ce:	1d19      	adds	r1, r3, #4
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	9103      	str	r1, [sp, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	bfbb      	ittet	lt
 80083d8:	425b      	neglt	r3, r3
 80083da:	f042 0202 	orrlt.w	r2, r2, #2
 80083de:	9307      	strge	r3, [sp, #28]
 80083e0:	9307      	strlt	r3, [sp, #28]
 80083e2:	bfb8      	it	lt
 80083e4:	9204      	strlt	r2, [sp, #16]
 80083e6:	7823      	ldrb	r3, [r4, #0]
 80083e8:	2b2e      	cmp	r3, #46	; 0x2e
 80083ea:	d10c      	bne.n	8008406 <_vfiprintf_r+0x176>
 80083ec:	7863      	ldrb	r3, [r4, #1]
 80083ee:	2b2a      	cmp	r3, #42	; 0x2a
 80083f0:	d135      	bne.n	800845e <_vfiprintf_r+0x1ce>
 80083f2:	9b03      	ldr	r3, [sp, #12]
 80083f4:	1d1a      	adds	r2, r3, #4
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	9203      	str	r2, [sp, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	bfb8      	it	lt
 80083fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008402:	3402      	adds	r4, #2
 8008404:	9305      	str	r3, [sp, #20]
 8008406:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80084ec <_vfiprintf_r+0x25c>
 800840a:	7821      	ldrb	r1, [r4, #0]
 800840c:	2203      	movs	r2, #3
 800840e:	4650      	mov	r0, sl
 8008410:	f7f7 feee 	bl	80001f0 <memchr>
 8008414:	b140      	cbz	r0, 8008428 <_vfiprintf_r+0x198>
 8008416:	2340      	movs	r3, #64	; 0x40
 8008418:	eba0 000a 	sub.w	r0, r0, sl
 800841c:	fa03 f000 	lsl.w	r0, r3, r0
 8008420:	9b04      	ldr	r3, [sp, #16]
 8008422:	4303      	orrs	r3, r0
 8008424:	3401      	adds	r4, #1
 8008426:	9304      	str	r3, [sp, #16]
 8008428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800842c:	482c      	ldr	r0, [pc, #176]	; (80084e0 <_vfiprintf_r+0x250>)
 800842e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008432:	2206      	movs	r2, #6
 8008434:	f7f7 fedc 	bl	80001f0 <memchr>
 8008438:	2800      	cmp	r0, #0
 800843a:	d03f      	beq.n	80084bc <_vfiprintf_r+0x22c>
 800843c:	4b29      	ldr	r3, [pc, #164]	; (80084e4 <_vfiprintf_r+0x254>)
 800843e:	bb1b      	cbnz	r3, 8008488 <_vfiprintf_r+0x1f8>
 8008440:	9b03      	ldr	r3, [sp, #12]
 8008442:	3307      	adds	r3, #7
 8008444:	f023 0307 	bic.w	r3, r3, #7
 8008448:	3308      	adds	r3, #8
 800844a:	9303      	str	r3, [sp, #12]
 800844c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800844e:	443b      	add	r3, r7
 8008450:	9309      	str	r3, [sp, #36]	; 0x24
 8008452:	e767      	b.n	8008324 <_vfiprintf_r+0x94>
 8008454:	fb0c 3202 	mla	r2, ip, r2, r3
 8008458:	460c      	mov	r4, r1
 800845a:	2001      	movs	r0, #1
 800845c:	e7a5      	b.n	80083aa <_vfiprintf_r+0x11a>
 800845e:	2300      	movs	r3, #0
 8008460:	3401      	adds	r4, #1
 8008462:	9305      	str	r3, [sp, #20]
 8008464:	4619      	mov	r1, r3
 8008466:	f04f 0c0a 	mov.w	ip, #10
 800846a:	4620      	mov	r0, r4
 800846c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008470:	3a30      	subs	r2, #48	; 0x30
 8008472:	2a09      	cmp	r2, #9
 8008474:	d903      	bls.n	800847e <_vfiprintf_r+0x1ee>
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0c5      	beq.n	8008406 <_vfiprintf_r+0x176>
 800847a:	9105      	str	r1, [sp, #20]
 800847c:	e7c3      	b.n	8008406 <_vfiprintf_r+0x176>
 800847e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008482:	4604      	mov	r4, r0
 8008484:	2301      	movs	r3, #1
 8008486:	e7f0      	b.n	800846a <_vfiprintf_r+0x1da>
 8008488:	ab03      	add	r3, sp, #12
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	462a      	mov	r2, r5
 800848e:	4b16      	ldr	r3, [pc, #88]	; (80084e8 <_vfiprintf_r+0x258>)
 8008490:	a904      	add	r1, sp, #16
 8008492:	4630      	mov	r0, r6
 8008494:	f3af 8000 	nop.w
 8008498:	4607      	mov	r7, r0
 800849a:	1c78      	adds	r0, r7, #1
 800849c:	d1d6      	bne.n	800844c <_vfiprintf_r+0x1bc>
 800849e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084a0:	07d9      	lsls	r1, r3, #31
 80084a2:	d405      	bmi.n	80084b0 <_vfiprintf_r+0x220>
 80084a4:	89ab      	ldrh	r3, [r5, #12]
 80084a6:	059a      	lsls	r2, r3, #22
 80084a8:	d402      	bmi.n	80084b0 <_vfiprintf_r+0x220>
 80084aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ac:	f7ff fd77 	bl	8007f9e <__retarget_lock_release_recursive>
 80084b0:	89ab      	ldrh	r3, [r5, #12]
 80084b2:	065b      	lsls	r3, r3, #25
 80084b4:	f53f af12 	bmi.w	80082dc <_vfiprintf_r+0x4c>
 80084b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084ba:	e711      	b.n	80082e0 <_vfiprintf_r+0x50>
 80084bc:	ab03      	add	r3, sp, #12
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	462a      	mov	r2, r5
 80084c2:	4b09      	ldr	r3, [pc, #36]	; (80084e8 <_vfiprintf_r+0x258>)
 80084c4:	a904      	add	r1, sp, #16
 80084c6:	4630      	mov	r0, r6
 80084c8:	f000 f880 	bl	80085cc <_printf_i>
 80084cc:	e7e4      	b.n	8008498 <_vfiprintf_r+0x208>
 80084ce:	bf00      	nop
 80084d0:	08037e8c 	.word	0x08037e8c
 80084d4:	08037eac 	.word	0x08037eac
 80084d8:	08037e6c 	.word	0x08037e6c
 80084dc:	08037ecc 	.word	0x08037ecc
 80084e0:	08037ed6 	.word	0x08037ed6
 80084e4:	00000000 	.word	0x00000000
 80084e8:	0800826b 	.word	0x0800826b
 80084ec:	08037ed2 	.word	0x08037ed2

080084f0 <_printf_common>:
 80084f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f4:	4616      	mov	r6, r2
 80084f6:	4699      	mov	r9, r3
 80084f8:	688a      	ldr	r2, [r1, #8]
 80084fa:	690b      	ldr	r3, [r1, #16]
 80084fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008500:	4293      	cmp	r3, r2
 8008502:	bfb8      	it	lt
 8008504:	4613      	movlt	r3, r2
 8008506:	6033      	str	r3, [r6, #0]
 8008508:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800850c:	4607      	mov	r7, r0
 800850e:	460c      	mov	r4, r1
 8008510:	b10a      	cbz	r2, 8008516 <_printf_common+0x26>
 8008512:	3301      	adds	r3, #1
 8008514:	6033      	str	r3, [r6, #0]
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	0699      	lsls	r1, r3, #26
 800851a:	bf42      	ittt	mi
 800851c:	6833      	ldrmi	r3, [r6, #0]
 800851e:	3302      	addmi	r3, #2
 8008520:	6033      	strmi	r3, [r6, #0]
 8008522:	6825      	ldr	r5, [r4, #0]
 8008524:	f015 0506 	ands.w	r5, r5, #6
 8008528:	d106      	bne.n	8008538 <_printf_common+0x48>
 800852a:	f104 0a19 	add.w	sl, r4, #25
 800852e:	68e3      	ldr	r3, [r4, #12]
 8008530:	6832      	ldr	r2, [r6, #0]
 8008532:	1a9b      	subs	r3, r3, r2
 8008534:	42ab      	cmp	r3, r5
 8008536:	dc26      	bgt.n	8008586 <_printf_common+0x96>
 8008538:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800853c:	1e13      	subs	r3, r2, #0
 800853e:	6822      	ldr	r2, [r4, #0]
 8008540:	bf18      	it	ne
 8008542:	2301      	movne	r3, #1
 8008544:	0692      	lsls	r2, r2, #26
 8008546:	d42b      	bmi.n	80085a0 <_printf_common+0xb0>
 8008548:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800854c:	4649      	mov	r1, r9
 800854e:	4638      	mov	r0, r7
 8008550:	47c0      	blx	r8
 8008552:	3001      	adds	r0, #1
 8008554:	d01e      	beq.n	8008594 <_printf_common+0xa4>
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	68e5      	ldr	r5, [r4, #12]
 800855a:	6832      	ldr	r2, [r6, #0]
 800855c:	f003 0306 	and.w	r3, r3, #6
 8008560:	2b04      	cmp	r3, #4
 8008562:	bf08      	it	eq
 8008564:	1aad      	subeq	r5, r5, r2
 8008566:	68a3      	ldr	r3, [r4, #8]
 8008568:	6922      	ldr	r2, [r4, #16]
 800856a:	bf0c      	ite	eq
 800856c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008570:	2500      	movne	r5, #0
 8008572:	4293      	cmp	r3, r2
 8008574:	bfc4      	itt	gt
 8008576:	1a9b      	subgt	r3, r3, r2
 8008578:	18ed      	addgt	r5, r5, r3
 800857a:	2600      	movs	r6, #0
 800857c:	341a      	adds	r4, #26
 800857e:	42b5      	cmp	r5, r6
 8008580:	d11a      	bne.n	80085b8 <_printf_common+0xc8>
 8008582:	2000      	movs	r0, #0
 8008584:	e008      	b.n	8008598 <_printf_common+0xa8>
 8008586:	2301      	movs	r3, #1
 8008588:	4652      	mov	r2, sl
 800858a:	4649      	mov	r1, r9
 800858c:	4638      	mov	r0, r7
 800858e:	47c0      	blx	r8
 8008590:	3001      	adds	r0, #1
 8008592:	d103      	bne.n	800859c <_printf_common+0xac>
 8008594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800859c:	3501      	adds	r5, #1
 800859e:	e7c6      	b.n	800852e <_printf_common+0x3e>
 80085a0:	18e1      	adds	r1, r4, r3
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	2030      	movs	r0, #48	; 0x30
 80085a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085aa:	4422      	add	r2, r4
 80085ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085b4:	3302      	adds	r3, #2
 80085b6:	e7c7      	b.n	8008548 <_printf_common+0x58>
 80085b8:	2301      	movs	r3, #1
 80085ba:	4622      	mov	r2, r4
 80085bc:	4649      	mov	r1, r9
 80085be:	4638      	mov	r0, r7
 80085c0:	47c0      	blx	r8
 80085c2:	3001      	adds	r0, #1
 80085c4:	d0e6      	beq.n	8008594 <_printf_common+0xa4>
 80085c6:	3601      	adds	r6, #1
 80085c8:	e7d9      	b.n	800857e <_printf_common+0x8e>
	...

080085cc <_printf_i>:
 80085cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085d0:	7e0f      	ldrb	r7, [r1, #24]
 80085d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085d4:	2f78      	cmp	r7, #120	; 0x78
 80085d6:	4691      	mov	r9, r2
 80085d8:	4680      	mov	r8, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	469a      	mov	sl, r3
 80085de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085e2:	d807      	bhi.n	80085f4 <_printf_i+0x28>
 80085e4:	2f62      	cmp	r7, #98	; 0x62
 80085e6:	d80a      	bhi.n	80085fe <_printf_i+0x32>
 80085e8:	2f00      	cmp	r7, #0
 80085ea:	f000 80d8 	beq.w	800879e <_printf_i+0x1d2>
 80085ee:	2f58      	cmp	r7, #88	; 0x58
 80085f0:	f000 80a3 	beq.w	800873a <_printf_i+0x16e>
 80085f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085fc:	e03a      	b.n	8008674 <_printf_i+0xa8>
 80085fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008602:	2b15      	cmp	r3, #21
 8008604:	d8f6      	bhi.n	80085f4 <_printf_i+0x28>
 8008606:	a101      	add	r1, pc, #4	; (adr r1, 800860c <_printf_i+0x40>)
 8008608:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800860c:	08008665 	.word	0x08008665
 8008610:	08008679 	.word	0x08008679
 8008614:	080085f5 	.word	0x080085f5
 8008618:	080085f5 	.word	0x080085f5
 800861c:	080085f5 	.word	0x080085f5
 8008620:	080085f5 	.word	0x080085f5
 8008624:	08008679 	.word	0x08008679
 8008628:	080085f5 	.word	0x080085f5
 800862c:	080085f5 	.word	0x080085f5
 8008630:	080085f5 	.word	0x080085f5
 8008634:	080085f5 	.word	0x080085f5
 8008638:	08008785 	.word	0x08008785
 800863c:	080086a9 	.word	0x080086a9
 8008640:	08008767 	.word	0x08008767
 8008644:	080085f5 	.word	0x080085f5
 8008648:	080085f5 	.word	0x080085f5
 800864c:	080087a7 	.word	0x080087a7
 8008650:	080085f5 	.word	0x080085f5
 8008654:	080086a9 	.word	0x080086a9
 8008658:	080085f5 	.word	0x080085f5
 800865c:	080085f5 	.word	0x080085f5
 8008660:	0800876f 	.word	0x0800876f
 8008664:	682b      	ldr	r3, [r5, #0]
 8008666:	1d1a      	adds	r2, r3, #4
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	602a      	str	r2, [r5, #0]
 800866c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008670:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008674:	2301      	movs	r3, #1
 8008676:	e0a3      	b.n	80087c0 <_printf_i+0x1f4>
 8008678:	6820      	ldr	r0, [r4, #0]
 800867a:	6829      	ldr	r1, [r5, #0]
 800867c:	0606      	lsls	r6, r0, #24
 800867e:	f101 0304 	add.w	r3, r1, #4
 8008682:	d50a      	bpl.n	800869a <_printf_i+0xce>
 8008684:	680e      	ldr	r6, [r1, #0]
 8008686:	602b      	str	r3, [r5, #0]
 8008688:	2e00      	cmp	r6, #0
 800868a:	da03      	bge.n	8008694 <_printf_i+0xc8>
 800868c:	232d      	movs	r3, #45	; 0x2d
 800868e:	4276      	negs	r6, r6
 8008690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008694:	485e      	ldr	r0, [pc, #376]	; (8008810 <_printf_i+0x244>)
 8008696:	230a      	movs	r3, #10
 8008698:	e019      	b.n	80086ce <_printf_i+0x102>
 800869a:	680e      	ldr	r6, [r1, #0]
 800869c:	602b      	str	r3, [r5, #0]
 800869e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086a2:	bf18      	it	ne
 80086a4:	b236      	sxthne	r6, r6
 80086a6:	e7ef      	b.n	8008688 <_printf_i+0xbc>
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	6820      	ldr	r0, [r4, #0]
 80086ac:	1d19      	adds	r1, r3, #4
 80086ae:	6029      	str	r1, [r5, #0]
 80086b0:	0601      	lsls	r1, r0, #24
 80086b2:	d501      	bpl.n	80086b8 <_printf_i+0xec>
 80086b4:	681e      	ldr	r6, [r3, #0]
 80086b6:	e002      	b.n	80086be <_printf_i+0xf2>
 80086b8:	0646      	lsls	r6, r0, #25
 80086ba:	d5fb      	bpl.n	80086b4 <_printf_i+0xe8>
 80086bc:	881e      	ldrh	r6, [r3, #0]
 80086be:	4854      	ldr	r0, [pc, #336]	; (8008810 <_printf_i+0x244>)
 80086c0:	2f6f      	cmp	r7, #111	; 0x6f
 80086c2:	bf0c      	ite	eq
 80086c4:	2308      	moveq	r3, #8
 80086c6:	230a      	movne	r3, #10
 80086c8:	2100      	movs	r1, #0
 80086ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086ce:	6865      	ldr	r5, [r4, #4]
 80086d0:	60a5      	str	r5, [r4, #8]
 80086d2:	2d00      	cmp	r5, #0
 80086d4:	bfa2      	ittt	ge
 80086d6:	6821      	ldrge	r1, [r4, #0]
 80086d8:	f021 0104 	bicge.w	r1, r1, #4
 80086dc:	6021      	strge	r1, [r4, #0]
 80086de:	b90e      	cbnz	r6, 80086e4 <_printf_i+0x118>
 80086e0:	2d00      	cmp	r5, #0
 80086e2:	d04d      	beq.n	8008780 <_printf_i+0x1b4>
 80086e4:	4615      	mov	r5, r2
 80086e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80086ea:	fb03 6711 	mls	r7, r3, r1, r6
 80086ee:	5dc7      	ldrb	r7, [r0, r7]
 80086f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086f4:	4637      	mov	r7, r6
 80086f6:	42bb      	cmp	r3, r7
 80086f8:	460e      	mov	r6, r1
 80086fa:	d9f4      	bls.n	80086e6 <_printf_i+0x11a>
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	d10b      	bne.n	8008718 <_printf_i+0x14c>
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	07de      	lsls	r6, r3, #31
 8008704:	d508      	bpl.n	8008718 <_printf_i+0x14c>
 8008706:	6923      	ldr	r3, [r4, #16]
 8008708:	6861      	ldr	r1, [r4, #4]
 800870a:	4299      	cmp	r1, r3
 800870c:	bfde      	ittt	le
 800870e:	2330      	movle	r3, #48	; 0x30
 8008710:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008714:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008718:	1b52      	subs	r2, r2, r5
 800871a:	6122      	str	r2, [r4, #16]
 800871c:	f8cd a000 	str.w	sl, [sp]
 8008720:	464b      	mov	r3, r9
 8008722:	aa03      	add	r2, sp, #12
 8008724:	4621      	mov	r1, r4
 8008726:	4640      	mov	r0, r8
 8008728:	f7ff fee2 	bl	80084f0 <_printf_common>
 800872c:	3001      	adds	r0, #1
 800872e:	d14c      	bne.n	80087ca <_printf_i+0x1fe>
 8008730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008734:	b004      	add	sp, #16
 8008736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873a:	4835      	ldr	r0, [pc, #212]	; (8008810 <_printf_i+0x244>)
 800873c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008740:	6829      	ldr	r1, [r5, #0]
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	f851 6b04 	ldr.w	r6, [r1], #4
 8008748:	6029      	str	r1, [r5, #0]
 800874a:	061d      	lsls	r5, r3, #24
 800874c:	d514      	bpl.n	8008778 <_printf_i+0x1ac>
 800874e:	07df      	lsls	r7, r3, #31
 8008750:	bf44      	itt	mi
 8008752:	f043 0320 	orrmi.w	r3, r3, #32
 8008756:	6023      	strmi	r3, [r4, #0]
 8008758:	b91e      	cbnz	r6, 8008762 <_printf_i+0x196>
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	f023 0320 	bic.w	r3, r3, #32
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	2310      	movs	r3, #16
 8008764:	e7b0      	b.n	80086c8 <_printf_i+0xfc>
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	f043 0320 	orr.w	r3, r3, #32
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	2378      	movs	r3, #120	; 0x78
 8008770:	4828      	ldr	r0, [pc, #160]	; (8008814 <_printf_i+0x248>)
 8008772:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008776:	e7e3      	b.n	8008740 <_printf_i+0x174>
 8008778:	0659      	lsls	r1, r3, #25
 800877a:	bf48      	it	mi
 800877c:	b2b6      	uxthmi	r6, r6
 800877e:	e7e6      	b.n	800874e <_printf_i+0x182>
 8008780:	4615      	mov	r5, r2
 8008782:	e7bb      	b.n	80086fc <_printf_i+0x130>
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	6826      	ldr	r6, [r4, #0]
 8008788:	6961      	ldr	r1, [r4, #20]
 800878a:	1d18      	adds	r0, r3, #4
 800878c:	6028      	str	r0, [r5, #0]
 800878e:	0635      	lsls	r5, r6, #24
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	d501      	bpl.n	8008798 <_printf_i+0x1cc>
 8008794:	6019      	str	r1, [r3, #0]
 8008796:	e002      	b.n	800879e <_printf_i+0x1d2>
 8008798:	0670      	lsls	r0, r6, #25
 800879a:	d5fb      	bpl.n	8008794 <_printf_i+0x1c8>
 800879c:	8019      	strh	r1, [r3, #0]
 800879e:	2300      	movs	r3, #0
 80087a0:	6123      	str	r3, [r4, #16]
 80087a2:	4615      	mov	r5, r2
 80087a4:	e7ba      	b.n	800871c <_printf_i+0x150>
 80087a6:	682b      	ldr	r3, [r5, #0]
 80087a8:	1d1a      	adds	r2, r3, #4
 80087aa:	602a      	str	r2, [r5, #0]
 80087ac:	681d      	ldr	r5, [r3, #0]
 80087ae:	6862      	ldr	r2, [r4, #4]
 80087b0:	2100      	movs	r1, #0
 80087b2:	4628      	mov	r0, r5
 80087b4:	f7f7 fd1c 	bl	80001f0 <memchr>
 80087b8:	b108      	cbz	r0, 80087be <_printf_i+0x1f2>
 80087ba:	1b40      	subs	r0, r0, r5
 80087bc:	6060      	str	r0, [r4, #4]
 80087be:	6863      	ldr	r3, [r4, #4]
 80087c0:	6123      	str	r3, [r4, #16]
 80087c2:	2300      	movs	r3, #0
 80087c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087c8:	e7a8      	b.n	800871c <_printf_i+0x150>
 80087ca:	6923      	ldr	r3, [r4, #16]
 80087cc:	462a      	mov	r2, r5
 80087ce:	4649      	mov	r1, r9
 80087d0:	4640      	mov	r0, r8
 80087d2:	47d0      	blx	sl
 80087d4:	3001      	adds	r0, #1
 80087d6:	d0ab      	beq.n	8008730 <_printf_i+0x164>
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	079b      	lsls	r3, r3, #30
 80087dc:	d413      	bmi.n	8008806 <_printf_i+0x23a>
 80087de:	68e0      	ldr	r0, [r4, #12]
 80087e0:	9b03      	ldr	r3, [sp, #12]
 80087e2:	4298      	cmp	r0, r3
 80087e4:	bfb8      	it	lt
 80087e6:	4618      	movlt	r0, r3
 80087e8:	e7a4      	b.n	8008734 <_printf_i+0x168>
 80087ea:	2301      	movs	r3, #1
 80087ec:	4632      	mov	r2, r6
 80087ee:	4649      	mov	r1, r9
 80087f0:	4640      	mov	r0, r8
 80087f2:	47d0      	blx	sl
 80087f4:	3001      	adds	r0, #1
 80087f6:	d09b      	beq.n	8008730 <_printf_i+0x164>
 80087f8:	3501      	adds	r5, #1
 80087fa:	68e3      	ldr	r3, [r4, #12]
 80087fc:	9903      	ldr	r1, [sp, #12]
 80087fe:	1a5b      	subs	r3, r3, r1
 8008800:	42ab      	cmp	r3, r5
 8008802:	dcf2      	bgt.n	80087ea <_printf_i+0x21e>
 8008804:	e7eb      	b.n	80087de <_printf_i+0x212>
 8008806:	2500      	movs	r5, #0
 8008808:	f104 0619 	add.w	r6, r4, #25
 800880c:	e7f5      	b.n	80087fa <_printf_i+0x22e>
 800880e:	bf00      	nop
 8008810:	08037edd 	.word	0x08037edd
 8008814:	08037eee 	.word	0x08037eee

08008818 <_sbrk_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4d06      	ldr	r5, [pc, #24]	; (8008834 <_sbrk_r+0x1c>)
 800881c:	2300      	movs	r3, #0
 800881e:	4604      	mov	r4, r0
 8008820:	4608      	mov	r0, r1
 8008822:	602b      	str	r3, [r5, #0]
 8008824:	f000 f8c0 	bl	80089a8 <_sbrk>
 8008828:	1c43      	adds	r3, r0, #1
 800882a:	d102      	bne.n	8008832 <_sbrk_r+0x1a>
 800882c:	682b      	ldr	r3, [r5, #0]
 800882e:	b103      	cbz	r3, 8008832 <_sbrk_r+0x1a>
 8008830:	6023      	str	r3, [r4, #0]
 8008832:	bd38      	pop	{r3, r4, r5, pc}
 8008834:	20004784 	.word	0x20004784

08008838 <__sread>:
 8008838:	b510      	push	{r4, lr}
 800883a:	460c      	mov	r4, r1
 800883c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008840:	f000 f8a0 	bl	8008984 <_read_r>
 8008844:	2800      	cmp	r0, #0
 8008846:	bfab      	itete	ge
 8008848:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800884a:	89a3      	ldrhlt	r3, [r4, #12]
 800884c:	181b      	addge	r3, r3, r0
 800884e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008852:	bfac      	ite	ge
 8008854:	6563      	strge	r3, [r4, #84]	; 0x54
 8008856:	81a3      	strhlt	r3, [r4, #12]
 8008858:	bd10      	pop	{r4, pc}

0800885a <__swrite>:
 800885a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800885e:	461f      	mov	r7, r3
 8008860:	898b      	ldrh	r3, [r1, #12]
 8008862:	05db      	lsls	r3, r3, #23
 8008864:	4605      	mov	r5, r0
 8008866:	460c      	mov	r4, r1
 8008868:	4616      	mov	r6, r2
 800886a:	d505      	bpl.n	8008878 <__swrite+0x1e>
 800886c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008870:	2302      	movs	r3, #2
 8008872:	2200      	movs	r2, #0
 8008874:	f000 f868 	bl	8008948 <_lseek_r>
 8008878:	89a3      	ldrh	r3, [r4, #12]
 800887a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800887e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008882:	81a3      	strh	r3, [r4, #12]
 8008884:	4632      	mov	r2, r6
 8008886:	463b      	mov	r3, r7
 8008888:	4628      	mov	r0, r5
 800888a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800888e:	f000 b817 	b.w	80088c0 <_write_r>

08008892 <__sseek>:
 8008892:	b510      	push	{r4, lr}
 8008894:	460c      	mov	r4, r1
 8008896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800889a:	f000 f855 	bl	8008948 <_lseek_r>
 800889e:	1c43      	adds	r3, r0, #1
 80088a0:	89a3      	ldrh	r3, [r4, #12]
 80088a2:	bf15      	itete	ne
 80088a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80088a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088ae:	81a3      	strheq	r3, [r4, #12]
 80088b0:	bf18      	it	ne
 80088b2:	81a3      	strhne	r3, [r4, #12]
 80088b4:	bd10      	pop	{r4, pc}

080088b6 <__sclose>:
 80088b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ba:	f000 b813 	b.w	80088e4 <_close_r>
	...

080088c0 <_write_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4d07      	ldr	r5, [pc, #28]	; (80088e0 <_write_r+0x20>)
 80088c4:	4604      	mov	r4, r0
 80088c6:	4608      	mov	r0, r1
 80088c8:	4611      	mov	r1, r2
 80088ca:	2200      	movs	r2, #0
 80088cc:	602a      	str	r2, [r5, #0]
 80088ce:	461a      	mov	r2, r3
 80088d0:	f7fe f9bc 	bl	8006c4c <_write>
 80088d4:	1c43      	adds	r3, r0, #1
 80088d6:	d102      	bne.n	80088de <_write_r+0x1e>
 80088d8:	682b      	ldr	r3, [r5, #0]
 80088da:	b103      	cbz	r3, 80088de <_write_r+0x1e>
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	bd38      	pop	{r3, r4, r5, pc}
 80088e0:	20004784 	.word	0x20004784

080088e4 <_close_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4d06      	ldr	r5, [pc, #24]	; (8008900 <_close_r+0x1c>)
 80088e8:	2300      	movs	r3, #0
 80088ea:	4604      	mov	r4, r0
 80088ec:	4608      	mov	r0, r1
 80088ee:	602b      	str	r3, [r5, #0]
 80088f0:	f7fe f9c6 	bl	8006c80 <_close>
 80088f4:	1c43      	adds	r3, r0, #1
 80088f6:	d102      	bne.n	80088fe <_close_r+0x1a>
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	b103      	cbz	r3, 80088fe <_close_r+0x1a>
 80088fc:	6023      	str	r3, [r4, #0]
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	20004784 	.word	0x20004784

08008904 <_fstat_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	4d07      	ldr	r5, [pc, #28]	; (8008924 <_fstat_r+0x20>)
 8008908:	2300      	movs	r3, #0
 800890a:	4604      	mov	r4, r0
 800890c:	4608      	mov	r0, r1
 800890e:	4611      	mov	r1, r2
 8008910:	602b      	str	r3, [r5, #0]
 8008912:	f7fe f9e1 	bl	8006cd8 <_fstat>
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	d102      	bne.n	8008920 <_fstat_r+0x1c>
 800891a:	682b      	ldr	r3, [r5, #0]
 800891c:	b103      	cbz	r3, 8008920 <_fstat_r+0x1c>
 800891e:	6023      	str	r3, [r4, #0]
 8008920:	bd38      	pop	{r3, r4, r5, pc}
 8008922:	bf00      	nop
 8008924:	20004784 	.word	0x20004784

08008928 <_isatty_r>:
 8008928:	b538      	push	{r3, r4, r5, lr}
 800892a:	4d06      	ldr	r5, [pc, #24]	; (8008944 <_isatty_r+0x1c>)
 800892c:	2300      	movs	r3, #0
 800892e:	4604      	mov	r4, r0
 8008930:	4608      	mov	r0, r1
 8008932:	602b      	str	r3, [r5, #0]
 8008934:	f7fe f97e 	bl	8006c34 <_isatty>
 8008938:	1c43      	adds	r3, r0, #1
 800893a:	d102      	bne.n	8008942 <_isatty_r+0x1a>
 800893c:	682b      	ldr	r3, [r5, #0]
 800893e:	b103      	cbz	r3, 8008942 <_isatty_r+0x1a>
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	bd38      	pop	{r3, r4, r5, pc}
 8008944:	20004784 	.word	0x20004784

08008948 <_lseek_r>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4d07      	ldr	r5, [pc, #28]	; (8008968 <_lseek_r+0x20>)
 800894c:	4604      	mov	r4, r0
 800894e:	4608      	mov	r0, r1
 8008950:	4611      	mov	r1, r2
 8008952:	2200      	movs	r2, #0
 8008954:	602a      	str	r2, [r5, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	f7fe f99e 	bl	8006c98 <_lseek>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_lseek_r+0x1e>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	b103      	cbz	r3, 8008966 <_lseek_r+0x1e>
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	20004784 	.word	0x20004784

0800896c <__malloc_lock>:
 800896c:	4801      	ldr	r0, [pc, #4]	; (8008974 <__malloc_lock+0x8>)
 800896e:	f7ff bb15 	b.w	8007f9c <__retarget_lock_acquire_recursive>
 8008972:	bf00      	nop
 8008974:	20004778 	.word	0x20004778

08008978 <__malloc_unlock>:
 8008978:	4801      	ldr	r0, [pc, #4]	; (8008980 <__malloc_unlock+0x8>)
 800897a:	f7ff bb10 	b.w	8007f9e <__retarget_lock_release_recursive>
 800897e:	bf00      	nop
 8008980:	20004778 	.word	0x20004778

08008984 <_read_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4d07      	ldr	r5, [pc, #28]	; (80089a4 <_read_r+0x20>)
 8008988:	4604      	mov	r4, r0
 800898a:	4608      	mov	r0, r1
 800898c:	4611      	mov	r1, r2
 800898e:	2200      	movs	r2, #0
 8008990:	602a      	str	r2, [r5, #0]
 8008992:	461a      	mov	r2, r3
 8008994:	f7fe f988 	bl	8006ca8 <_read>
 8008998:	1c43      	adds	r3, r0, #1
 800899a:	d102      	bne.n	80089a2 <_read_r+0x1e>
 800899c:	682b      	ldr	r3, [r5, #0]
 800899e:	b103      	cbz	r3, 80089a2 <_read_r+0x1e>
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	bd38      	pop	{r3, r4, r5, pc}
 80089a4:	20004784 	.word	0x20004784

080089a8 <_sbrk>:
 80089a8:	4a04      	ldr	r2, [pc, #16]	; (80089bc <_sbrk+0x14>)
 80089aa:	6811      	ldr	r1, [r2, #0]
 80089ac:	4603      	mov	r3, r0
 80089ae:	b909      	cbnz	r1, 80089b4 <_sbrk+0xc>
 80089b0:	4903      	ldr	r1, [pc, #12]	; (80089c0 <_sbrk+0x18>)
 80089b2:	6011      	str	r1, [r2, #0]
 80089b4:	6810      	ldr	r0, [r2, #0]
 80089b6:	4403      	add	r3, r0
 80089b8:	6013      	str	r3, [r2, #0]
 80089ba:	4770      	bx	lr
 80089bc:	20004788 	.word	0x20004788
 80089c0:	2000478c 	.word	0x2000478c

080089c4 <_init>:
 80089c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c6:	bf00      	nop
 80089c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ca:	bc08      	pop	{r3}
 80089cc:	469e      	mov	lr, r3
 80089ce:	4770      	bx	lr

080089d0 <_fini>:
 80089d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d2:	bf00      	nop
 80089d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d6:	bc08      	pop	{r3}
 80089d8:	469e      	mov	lr, r3
 80089da:	4770      	bx	lr
